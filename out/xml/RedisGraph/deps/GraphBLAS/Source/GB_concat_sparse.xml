<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_concat_sparse.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_concat_sparse: concatenate an array of matrices into a sparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
    <cpp:value>if (S != NULL)                              \
    {                                           \
        for (int64_t k = 0 ; k &lt; m * n ; k++)   \
        {                                       \
            GB_Matrix_free (&amp;(S [k])) ;         \
        }                                       \
    }                                           \
    GB_FREE_WORK (&amp;S, S_size) ;                 \
    GB_FREE_WORK (&amp;Work, Work_size) ;           \
    GB_WERK_POP (A_ek_slicing, int64_t) ;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_FREE_WORKSPACE ;     \
    GB_phybix_free (C) ;    \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_concat_sparse</name>           <comment type="line">// concatenate into a sparse matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name></decl></parameter>,               <comment type="line">// if true, construct C as iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>cscalar</name></decl></parameter>,         <comment type="line">// iso value of C, if C is io </comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name></decl></parameter>,              <comment type="line">// # of entries in C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name> <modifier>*</modifier></type><name>Tiles</name></decl></parameter>,        <comment type="line">// 2D row-major array of size m-by-n,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_rows</name></decl></parameter>,  <comment type="line">// size m+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tile_cols</name></decl></parameter>,  <comment type="line">// size n+1</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate C as a sparse matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input to concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>S_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvdim</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>hyper_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>bitmap_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>GB_Ap_malloc</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
        <argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>bitmap_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nouter</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>m</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ninner</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>m</name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>Work</name> <operator>=</operator> <call><name>GB_CALLOC_WORK</name> <argument_list>(<argument><expr><name>ninner</name> <operator>*</operator> <name>cvdim</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>GB_CALLOC_WORK</name> <argument_list>(<argument><expr><name>m</name> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>GrB_Matrix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count entries in each vector of each tile</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <name>nouter</name></expr> ;</condition> <incr><expr><name>outer</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the tile A; transpose and typecast, if needed</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>A</name> <operator>=</operator> <ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A tile for concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>csc</name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// T = (ctype) A', not in-place, using a dynamic header</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// auto sparsity, new header</comment>
                    <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>,
                    <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// save T in array S</comment>
                <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>A</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"T=A' for concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// ensure the tile is not bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>T</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// copy A into T</comment>
                    <comment type="line">// set T-&gt;iso = A-&gt;iso  OK: no burble needed</comment>
                    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// save T in array S</comment>
                    <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T=dup(A) for concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// convert T from bitmap to sparse</comment>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_to_sparse</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T bitmap to sparse, concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>A</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// log the # of entries in each vector of the tile A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>cvstart</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then>  <expr><name><name>Tile_cols</name> <index>[<expr><name>outer</name></expr>]</index></name></expr> </then><else>: <expr><name><name>Tile_rows</name> <index>[<expr><name>outer</name></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><name>Work</name> <operator>+</operator> <name>inner</name> <operator>*</operator> <name>cvdim</name> <operator>+</operator> <name>cvstart</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>anvec</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// W [j] = # of entries in A(:,j), which is just avlen</comment>
                    <expr_stmt><expr><name><name>W</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>avlen</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse or hyper</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// W [j] = # of entries in A(:,j), the kth column of A</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>W</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt> 
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// cumulative sum of entries in each tile</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>ninner</name><operator>*</operator><name>cvdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cvdim</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>inner</name> <operator>*</operator> <name>cvdim</name> <operator>+</operator> <name>k</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>Work</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// total number of entries in C(:,k)</comment>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cnz</name> <operator>==</operator> <name><name>Cp</name> <index>[<expr><name>cvdim</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cvdim</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>inner</name> <operator>*</operator> <name>cvdim</name> <operator>+</operator> <name>k</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name>pC</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// concatenate all matrices into C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>outer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>outer</name> <operator>&lt;</operator> <name>nouter</name></expr> ;</condition> <incr><expr><name>outer</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inner</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inner</name> <operator>&lt;</operator> <name>ninner</name></expr> ;</condition> <incr><expr><name>inner</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the tile A, either the temporary matrix T or the original A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>A</name> <operator>=</operator> <ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>
                    </then><else>: <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>A</name> <operator>=</operator> <ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>)</argument_list></call></expr>
                        </then><else>: <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>outer</name></expr></argument>, <argument><expr><name>inner</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A tile again, concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine where to place the tile in C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// The tile A appears in vectors cvstart:cvend-1 of C, and indices</comment>
            <comment type="line">// cistart:ciend-1.</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>cvstart</name></decl>, <decl><type ref="prev"/><name>cvend</name></decl>, <decl><type ref="prev"/><name>cistart</name></decl>, <decl><type ref="prev"/><name>ciend</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>csc</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C and A are held by column</comment>
                <comment type="line">// Tiles is row-major and accessed in column order</comment>
                <expr_stmt><expr><name>cvstart</name> <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>outer</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cvend</name>   <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>outer</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cistart</name> <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>inner</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ciend</name>   <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>inner</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C and A are held by row</comment>
                <comment type="line">// Tiles is row-major and accessed in row order</comment>
                <expr_stmt><expr><name>cvstart</name> <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>outer</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cvend</name>   <operator>=</operator> <name><name>Tile_rows</name> <index>[<expr><name>outer</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cistart</name> <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>inner</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ciend</name>   <operator>=</operator> <name><name>Tile_cols</name> <index>[<expr><name>inner</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// get the workspace pointer array W for this tile</comment>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><name>Work</name> <operator>+</operator> <name>inner</name> <operator>*</operator> <name>cvdim</name> <operator>+</operator> <name>cvstart</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// slice the tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name>cvend</name> <operator>-</operator> <name>cvstart</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name>ciend</name> <operator>-</operator> <name>cistart</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>avdim</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>avlen</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>A_nthreads</name></decl>, <decl><type ref="prev"/><name>A_ntasks</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// copy the tile A into C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C and A are iso</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_CONCAT</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
                <if_stmt><if>if <condition>(<expr><name>ccode</name> <operator>==</operator> <name>acode</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// no typecasting needed</comment>
                    <switch>switch <condition>(<expr><name>csize</name></expr>)</condition>
                    <block>{<block_content>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>                        \
                            <cpp:value>Cx [pC] = GBX (Ax, pA, A_iso) ;</cpp:value></cpp:define>

                        <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// uint8, int8, bool, or 1-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, or 2-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, or 4-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex,</comment>
                                        <comment type="line">// or 8-byte user defined</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex or 16-byte user</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_blob16</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
                            <break>break ;</break>

                        <default>default:</default><empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// with typecasting or user-defined types</comment>
                <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_C</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>                    \
                    <cpp:value>cast_A_to_C (Cx + (pC)*csize,               \
                        Ax + (A_iso ? 0:(pA)*asize), asize) ;</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat_sparse_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
    
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C from concat sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
