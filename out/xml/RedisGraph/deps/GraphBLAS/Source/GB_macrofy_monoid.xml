<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_monoid: build macros for a monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_monoid</name>  <comment type="line">// construct the macros for a monoid</comment>
<parameter_list>(
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,           <comment type="line">// File to write macros, assumed open already</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><name>int</name></type> <name>add_ecode</name></decl></parameter>,      <comment type="line">// binary op as an enum</comment>
    <parameter><decl><type><name>int</name></type> <name>id_ecode</name></decl></parameter>,       <comment type="line">// identity value as an enum</comment>
    <parameter><decl><type><name>int</name></type> <name>term_ecode</name></decl></parameter>,     <comment type="line">// terminal value as an enum (&lt;= 28 is terminal)</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,  <comment type="line">// monoid to macrofy</comment>
    <parameter><decl><type><name>bool</name></type> <name>skip_defn</name></decl></parameter>      <comment type="line">// if true, do not include the user-defined add function</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ztype_name</name> <init>= <expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create macros for the additive operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_macrofy_binop</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"GB_ADD"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>add_ecode</name></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name></name></expr></argument>,
        <argument><expr><name>skip_defn</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create macros for the identity value</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>id_ecode</name> <operator>&lt;=</operator> <literal type="number">28</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// built-in monoid: a simple assignment</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id_value</name> <init>= <expr><call><name>GB_charify_identity_or_terminal</name> <argument_list>(<argument><expr><name>id_ecode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_DECLARE_MONOID_IDENTITY(z) "</literal>
            <literal type="string">"%s z = (%s) (%s) ;\n"</literal></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>, <argument><expr><name>id_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// user-defined monoid:  all we have are the bytes</comment>
        <expr_stmt><expr><call><name>GB_macrofy_bytes</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MONOID_IDENTITY"</literal></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>,
            <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>monoid</name><operator>-&gt;</operator><name>identity</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create macros for the terminal value and terminal conditions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>monoid</name><operator>-&gt;</operator><name>terminal</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// monoid is not terminal (either built-in or user-defined)</comment>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_DECLARE_MONOID_TERMINAL(z)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_TERMINAL_CONDITION(cij,z) (false)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_IF_TERMINAL_BREAK(cij,z)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>term_ecode</name> <operator>==</operator> <literal type="number">18</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// ANY monoid is terminal but with no specific terminal value</comment>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_DECLARE_MONOID_TERMINAL(z)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_TERMINAL_CONDITION(cij,z) (true)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_IF_TERMINAL_BREAK(cij,z) break\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>term_ecode</name> <operator>&lt;=</operator> <literal type="number">28</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// built-in terminal monoid: terminal value is a simple assignment</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>term_value</name> <init>= <expr><call><name>GB_charify_identity_or_terminal</name> <argument_list>(<argument><expr><name>term_ecode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_DECLARE_MONOID_TERMINAL(z) "</literal>
            <literal type="string">"%s z = (%s) (%s) ;\n"</literal></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>, <argument><expr><name>term_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_TERMINAL_CONDITION(cij,z) ((cij) == (z))\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_IF_TERMINAL_BREAK(cij,z) "</literal>
            <literal type="string">"if ((cij) == (z)) break\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// user-defined terminal monoid</comment>
        <expr_stmt><expr><call><name>GB_macrofy_bytes</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"MONOID_TERMINAL"</literal></expr></argument>, <argument><expr><name>ztype_name</name></expr></argument>,
            <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>terminal</name></name></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_TERMINAL_CONDITION(cij,z)"</literal>
            <literal type="string">" (memcmp (&amp;(cij), &amp;(z), %d) == 0)\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_IF_TERMINAL_BREAK(cij,z) "</literal>
            <literal type="string">" if (memcmp (&amp;(cij), &amp;(z), %d) == 0) break\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
