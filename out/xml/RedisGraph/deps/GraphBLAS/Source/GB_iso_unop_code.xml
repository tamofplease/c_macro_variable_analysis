<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_unop_code.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_unop_code: determine if C = A, C = unop(A), or C = binop(A) is iso</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">// C = A, C = unop(A), C = binop(A,scalar), or C = binop(scalar,A) is being</comment>
<comment type="line">// computed, with A optionally transposed.  Determine if C is iso.</comment>

<function><type><name>GB_iso_code</name></type> <name>GB_iso_unop_code</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GB_Operator</name></type> <name>op</name></decl></parameter>,         <comment type="line">// unary/idxunop/binop, if present</comment>
    <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>      <comment type="line">// if true, C = binop(x,A), else C = binop(A,y)</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the opcode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name>GB_NOP_code</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// positional ops or user-defined idxunops never result in an iso matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// idxunops are either positional, valued, or user-defined.  Positional and</comment>
    <comment type="line">// user-defined ops lead to a non-iso result even if the input is iso.  A</comment>
    <comment type="line">// valued idxunop (such as GrB_VALUENE_FP32) has been renamed as a binary</comment>
    <comment type="line">// op, with bind_1st false.  As a result, no remaining idxunops result in</comment>
    <comment type="line">// an iso-valued output.</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_INDEXUNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// this is the only case where C is non-iso even if A is iso</comment>
        <return>return <expr><operator>(</operator><name>GB_NON_ISO</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = unop (A) or pair (...)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_ONE_unop_code</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if unop is ONE or binop is PAIR, then C is iso, with a value</comment>
        <comment type="line">// equal to 1</comment>
        <return>return <expr><operator>(</operator><name>GB_ISO_1</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = binop (scalar,A) or binop (A,scalar)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator> <operator>||</operator>                      <comment type="line">// C = any(...)</comment>
        <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name>  <operator>&amp;&amp;</operator>  <name>binop_bind1st</name><operator>)</operator> <operator>||</operator> <comment type="line">// C = first(x,A)</comment>
        <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>binop_bind1st</name><operator>)</operator></expr>)</condition>   <comment type="line">// C = second(A,y)</comment>
    <block>{<block_content> 
        <comment type="line">// if binop is FIRST and binop_bind1st is true, or if binop is SECOND</comment>
        <comment type="line">// and binop_bind1st is false, or if binop is ANY, then C is iso, with</comment>
        <comment type="line">// a value equal to the scalar</comment>
        <return>return <expr><operator>(</operator><name>GB_ISO_S</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C is iso if A is iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_NOP_code</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>GB_IDENTITY_unop_code</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C = (ctype) A</comment>
            <return>return <expr><operator>(</operator><name>GB_ISO_A</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C = unop (A)</comment>
            <return>return <expr><operator>(</operator><name>GB_ISO_OP1_A</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C = binop (scalar, A)</comment>
            <return>return <expr><operator>(</operator><name>GB_ISO_OP2_SA</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C = binop (A, scalar)</comment>
            <return>return <expr><operator>(</operator><name>GB_ISO_OP2_AS</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// otherwise, C is not iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>GB_NON_ISO</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
