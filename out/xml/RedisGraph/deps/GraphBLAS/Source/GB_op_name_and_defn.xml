<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_op_name_and_defn.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_op_name_and_defn: get the name and defn of a unary, binary, or selectop</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_op_name_and_defn</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operator_name</name></decl></parameter>,        <comment type="line">// op-&gt;name of the GrB operator struct</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>operator_defn</name></decl></parameter>,       <comment type="line">// op-&gt;defn of the GrB operator struct</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>operator_defn_size</name></decl></parameter>, <comment type="line">// op-&gt;defn_size of the GrB operator struct</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_name</name></decl></parameter>,     <comment type="line">// user-provided name, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_defn</name></decl></parameter>,     <comment type="line">// user-provided name, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typecast_name</name></decl></parameter>,  <comment type="line">// typecast name for function pointer</comment>
    <parameter><decl><type><name>size_t</name></type> <name>typecast_name_len</name></decl></parameter>    <comment type="line">// length of typecast_name</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>operator_name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>operator_defn</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>typecast_name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>operator_defn_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>operator_defn</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>operator_defn_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the name of the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>operator_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>input_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// copy the input_name into the working name</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>working</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><name>input_name</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// see if the typecast appears in the input_name</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><name>typecast_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// skip past the typecast, the left parenthesis, and any whitespace</comment>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>typecast_name_len</name></expr> ;</expr_stmt>
            <while>while <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></while>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <while>while <condition>(<expr><call><name>isspace</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></while>
            <comment type="line">// p now contains the final name, copy it to the output name</comment>
            <expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>operator_name</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// no typcast appears; copy the entire operator_name as-is</comment>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>operator_name</name></expr></argument>, <argument><expr><name>working</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// no operator_name, so give it a generic name</comment>
        <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>operator_name</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"user_op"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// ensure operator_name is null-terminated</comment>
    <expr_stmt><expr><name><name>operator_name</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the definition of the operator, if present</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>defn</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>defn_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>input_defn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// determine the string length of the definition</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>input_defn</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// allocate space for the definition</comment>
        <expr_stmt><expr><name>defn</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defn_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>defn</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// copy the defintion into the new operator</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>defn</name></expr></argument>, <argument><expr><name>input_defn</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>operator_defn</name><operator>)</operator> <operator>=</operator> <name>defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>operator_defn_size</name><operator>)</operator> <operator>=</operator> <name>defn_size</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
