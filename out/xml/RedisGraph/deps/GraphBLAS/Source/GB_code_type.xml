<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_code_type.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_code_type: convert a type code to a GrB_Type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The GrB_assign, GxB_subassign, and GrB_setElement operations all accept</comment>
<comment type="line">// scalar inputs.  The scalar code is converted to an appropriate GrB_Type</comment>
<comment type="line">// here.  For user-defined types, the scalar is required to have the same type</comment>
<comment type="line">// as the matrix being operated on.  This cannot be checked; results are</comment>
<comment type="line">// undefined if the user passes in a void * pointer to a different user-defined</comment>
<comment type="line">// type.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Type</name></type> <name>GB_code_type</name>           <comment type="line">// return the GrB_Type corresponding to the code</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code</name></decl></parameter>,    <comment type="line">// type code to convert</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>         <comment type="line">// user type if code is user-defined</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>code</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <switch>switch <condition>(<expr><name>code</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_BOOL</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_INT8</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_UINT8</name><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_UINT16</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_UINT32</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_UINT64</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FP32</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FP64</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FC32</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> 
        <default>default             :</default> <return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
