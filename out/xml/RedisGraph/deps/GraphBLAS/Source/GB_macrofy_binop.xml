<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_binop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_binop: construct the macro and defn for a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_binop</name>
<parameter_list>(
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>macro_name</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>flipxy</name></decl></parameter>,                <comment type="line">// if true: op is f(y,x), multipicative only</comment>
    <parameter><decl><type><name>bool</name></type> <name>is_monoid</name></decl></parameter>,             <comment type="line">// if true: additive operator for monoid</comment>
    <parameter><decl><type><name>int</name></type> <name>ecode</name></decl></parameter>,
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,            <comment type="line">// may be NULL (for GB_wait)</comment>
    <parameter><decl><type><name>bool</name></type> <name>skip_defn</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ecode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// user-defined operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>is_monoid</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// additive operator: no i,k,j parameters</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,x,y) %s (&amp;(z), &amp;(x), &amp;(y))\n"</literal></expr></argument>,
                <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>flipxy</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// flipped multiplicative or ewise operator</comment>
            <comment type="line">// note: no positional operands for user-defined ops (yet)</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,y,x,j,k,i) %s (&amp;(z), &amp;(x), &amp;(y))\n"</literal></expr></argument>,
                <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// unflipped multiplicative or ewise operator</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,x,y,i,k,j) %s (&amp;(z), &amp;(x), &amp;(y))\n"</literal></expr></argument>,
                <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_defn</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>defn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// built-in operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl> ;</decl_stmt>

        <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// built-in ops, can be used in a monoid</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// first</comment>
            <case>case   <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (x)"</literal></expr>                         ;</expr_stmt> <break>break ;</break>

            <comment type="line">// any, second</comment>
            <case>case   <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (y)"</literal></expr>                         ;</expr_stmt> <break>break ;</break>

            <comment type="line">// min</comment>
            <case>case   <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fminf (x,y)"</literal></expr>                 ;</expr_stmt> <break>break ;</break>
            <case>case   <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fmin (x,y)"</literal></expr>                  ;</expr_stmt> <break>break ;</break>
            <case>case   <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_IMIN (x,y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>

            <comment type="line">// max</comment>
            <case>case   <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fmaxf (x,y)"</literal></expr>                 ;</expr_stmt> <break>break ;</break>
            <case>case   <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fmax (x,y)"</literal></expr>                  ;</expr_stmt> <break>break ;</break>
            <case>case   <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_IMAX (x,y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>

            <comment type="line">// plus</comment>
            <case>case   <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_add (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">10</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_add (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">11</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (x) + (y)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// times</comment>
            <case>case  <expr><literal type="number">12</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_mul (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">13</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_mul (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">14</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (x) * (y)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// eq, iseq, lxnor</comment>
            <case>case  <expr><literal type="number">15</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) == (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// ne, isne, lxor</comment>
            <case>case  <expr><literal type="number">16</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) != (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// lor</comment>
            <case>case  <expr><literal type="number">17</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) || (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// land</comment>
            <case>case  <expr><literal type="number">18</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &amp;&amp; (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bor</comment>
            <case>case  <expr><literal type="number">19</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) | (y))"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// band</comment>
            <case>case  <expr><literal type="number">20</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &amp; (y))"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bxor</comment>
            <case>case  <expr><literal type="number">21</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) ^ (y))"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bxnor</comment>
            <case>case  <expr><literal type="number">22</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (~((x) ^ (y)))"</literal></expr>              ;</expr_stmt> <break>break ;</break>

            <comment type="line">// 23 to 31 are unused, but reserved for future monoids</comment>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// built-in ops, cannot be used in a monoid</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// eq for complex</comment>
            <case>case  <expr><literal type="number">32</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_eq (x,y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">33</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_eq (x,y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>

            <comment type="line">// iseq for complex</comment>
            <case>case  <expr><literal type="number">34</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_iseq (x,y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">35</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_iseq (x,y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>

            <comment type="line">// ne for complex</comment>
            <case>case  <expr><literal type="number">36</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_ne (x,y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">37</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_ne (x,y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>

            <comment type="line">// isne for complex</comment>
            <case>case  <expr><literal type="number">38</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_isne (x,y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">39</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_isne (x,y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>

            <comment type="line">// lor for non-boolean</comment>
            <case>case  <expr><literal type="number">40</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (((x)!=0) || ((y)!=0))"</literal></expr>      ;</expr_stmt> <break>break ;</break>

            <comment type="line">// land for non-boolean</comment>
            <case>case  <expr><literal type="number">41</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (((x)!=0) &amp;&amp; ((y)!=0))"</literal></expr>      ;</expr_stmt> <break>break ;</break>

            <comment type="line">// lxor for non-boolean</comment>
            <case>case  <expr><literal type="number">42</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (((x)!=0) != ((y)!=0))"</literal></expr>      ;</expr_stmt> <break>break ;</break>

            <comment type="line">// minus</comment>
            <case>case  <expr><literal type="number">43</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_minus (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">44</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_minus (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">45</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (x) - (y)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// rminus</comment>
            <case>case  <expr><literal type="number">46</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_minus (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">47</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_minus (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">48</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (y) - (x)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// div:</comment>
            <case>case  <expr><literal type="number">49</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int8 (x,y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">50</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int16 (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">51</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int32 (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">52</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int64 (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">53</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint8 (x,y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">54</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint16 (x,y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">55</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint32 (x,y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">56</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint64 (x,y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">57</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_div (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">58</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_div (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">59</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (x) / (y)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// rdiv</comment>
            <case>case  <expr><literal type="number">60</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int8 (y,x)"</literal></expr>          ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">61</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int16 (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">62</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int32 (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">63</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_int64 (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">64</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint8 (y,x)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">65</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint16 (y,x)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">66</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint32 (y,x)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">67</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_idiv_uint64 (y,x)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">68</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC32_div (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">69</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_FC64_div (x,y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">70</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (y) / (x)"</literal></expr>                   ;</expr_stmt> <break>break ;</break>

            <comment type="line">// gt, isgt</comment>
            <case>case  <expr><literal type="number">71</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &gt; (y))"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// lt, islt</comment>
            <case>case  <expr><literal type="number">72</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &lt; (y))"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// ge, isget</comment>
            <case>case  <expr><literal type="number">73</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &gt;= (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// le, isle</comment>
            <case>case  <expr><literal type="number">74</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ((x) &lt;= (y))"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bget</comment>
            <case>case  <expr><literal type="number">75</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,int8_t, 8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">76</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,int16_t,16)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">77</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,int32_t,32)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">78</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,int64_t,64)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">79</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,uint8_t,8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">80</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,uint16_t,16)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">81</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,uint32_t,32)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">82</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITGET (x,y,uint64_t,64)"</literal></expr> ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bset</comment>
            <case>case  <expr><literal type="number">83</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,int8_t, 8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">84</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,int16_t,16)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">85</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,int32_t,32)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">86</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,int64_t,64)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">87</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,uint8_t,8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">88</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,uint16_t,16)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">89</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,uint32_t,32)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">90</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITSET (x,y,uint64_t,64)"</literal></expr> ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bclr</comment>
            <case>case  <expr><literal type="number">91</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,int8_t, 8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">92</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,int16_t,16)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">93</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,int32_t,32)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">94</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,int64_t,64)"</literal></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">95</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,uint8_t,8)"</literal></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">96</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,uint16_t,16)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">97</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,uint32_t,32)"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case  <expr><literal type="number">98</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_BITCLR (x,y,uint64_t,64)"</literal></expr> ;</expr_stmt> <break>break ;</break>

            <comment type="line">// bshift</comment>
            <case>case  <expr><literal type="number">99</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_int8 (x,y)"</literal></expr>      ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">100</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_int16 (x,y)"</literal></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">101</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_int32 (x,y)"</literal></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">102</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_int64 (x,y)"</literal></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">103</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_uint8 (x,y)"</literal></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">104</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_uint16 (x,y)"</literal></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">105</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_uint32 (x,y)"</literal></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">106</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_bitshift_uint64 (x,y)"</literal></expr>    ;</expr_stmt> <break>break ;</break>

            <comment type="line">// pow</comment>
            <case>case <expr><literal type="number">107</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_int8 (x, y)"</literal></expr>          ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">108</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_int16 (x, y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">109</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_int32 (x, y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">110</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_int64 (x, y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">111</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_uint8 (x, y)"</literal></expr>         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">112</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_uint16 (x, y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">113</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_uint32 (x, y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">114</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow_uint64 (x, y)"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">115</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_powf (x, y)"</literal></expr>              ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">116</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_pow (x, y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">117</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_cpowf (x, y)"</literal></expr>             ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">118</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GB_cpow (x, y)"</literal></expr>              ;</expr_stmt> <break>break ;</break>

            <comment type="line">// atan2</comment>
            <case>case <expr><literal type="number">119</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = atan2f (x, y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">120</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = atan2 (x, y)"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// hypot</comment>
            <case>case <expr><literal type="number">121</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = hypotf (x, y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">122</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = hypot (x, y)"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// fmod</comment>
            <case>case <expr><literal type="number">123</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fmodf (x, y)"</literal></expr>                ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">124</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = fmod (x, y)"</literal></expr>                 ;</expr_stmt> <break>break ;</break>

            <comment type="line">// remainder</comment>
            <case>case <expr><literal type="number">125</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = remainderf (x, y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">126</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = remainder (x, y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>

            <comment type="line">// copysign</comment>
            <case>case <expr><literal type="number">127</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = copysignf (x, y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">128</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = copysign (x, y)"</literal></expr>             ;</expr_stmt> <break>break ;</break>

            <comment type="line">// ldexp</comment>
            <case>case <expr><literal type="number">129</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ldexpf (x, y)"</literal></expr>               ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">130</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = ldexp (x, y)"</literal></expr>                ;</expr_stmt> <break>break ;</break>

            <comment type="line">// cmplex</comment>
            <case>case <expr><literal type="number">131</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GxB_CMPLXF (x, y)"</literal></expr>           ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">132</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = GxB_CMPLX (x, y)"</literal></expr>            ;</expr_stmt> <break>break ;</break>

            <comment type="line">// pair</comment>
            <case>case <expr><literal type="number">133</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = 1"</literal></expr>                           ;</expr_stmt> <break>break ;</break>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// positional ops</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// in a semiring:  cij += aik * bkj</comment>
            <comment type="line">//      firsti is i, firstj is k, secondi k, secondj is j</comment>

            <comment type="line">// in an ewise operation:  cij = aij + bij</comment>
            <comment type="line">//      firsti is i, firstj is j, secondi i, secondj is j</comment>

            <case>case <expr><literal type="number">134</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (i)"</literal></expr>                         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">135</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (k)"</literal></expr>                         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">136</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (j)"</literal></expr>                         ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">137</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (i) + 1"</literal></expr>                     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">138</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (k) + 1"</literal></expr>                     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><literal type="number">139</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = (j) + 1"</literal></expr>                     ;</expr_stmt> <break>break ;</break>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// no-op for GB_wait (an implicit 2nd operator)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <case>case <expr><literal type="number">140</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"z = y"</literal></expr>                           ;</expr_stmt> <break>break ;</break>

            <default>default  :</default> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">""</literal></expr> ;</expr_stmt>                              <empty_stmt>;</empty_stmt> <break>break ;</break>
        </block_content>}</block></switch>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// create the macro</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>is_monoid</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// additive operator: no i,k,j parameters</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,x,y) %s\n"</literal></expr></argument>, <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>flipxy</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// flipped multiplicative or ewise operator</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,y,x,j,k,i) %s\n"</literal></expr></argument>, <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// unflipped multiplicative or ewise operator</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define %s(z,x,y,i,k,j) %s\n"</literal></expr></argument>, <argument><expr><name>macro_name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
