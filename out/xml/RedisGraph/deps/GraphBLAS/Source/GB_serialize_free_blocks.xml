<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_serialize_free_blocks.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_serialize_free_blocks: free the set of blocks used to compress an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Free the Blocks constructed by GB_serialize_array.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_serialize_free_blocks</name>
<parameter_list>(
    <parameter><decl><type><name>GB_blocks</name> <modifier>*</modifier><modifier>*</modifier></type><name>Blocks_handle</name></decl></parameter>,      <comment type="line">// array of size nblocks</comment>
    <parameter><decl><type><name>size_t</name></type> <name>Blocks_size</name></decl></parameter>,             <comment type="line">// size of Blocks</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>nblocks</name></decl></parameter>,                <comment type="line">// # of blocks, or zero if no blocks</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Blocks_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_blocks</name> <modifier>*</modifier></type><name>Blocks</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Blocks_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Blocks</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// free all blocks</comment>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>blockid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>blockid</name> <operator>&lt;</operator> <name>nblocks</name></expr> ;</condition> <incr><expr><name>blockid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>p_size_allocated</name> <init>= <expr><name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p_size_allocated</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>p_size_allocated</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// free the block</comment>
                <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>p_size_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="line">// free the Blocks array itself</comment>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Blocks_handle</name></expr></argument>, <argument><expr><name>Blocks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
