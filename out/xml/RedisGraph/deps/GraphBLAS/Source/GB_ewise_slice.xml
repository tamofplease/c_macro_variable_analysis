<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ewise_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ewise_slice: slice the entries and vectors for an ewise operation</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Constructs a set of tasks to compute C, for an element-wise operation that</comment>
<comment type="line">// operates on two input matrices, C=op(A,B).  These include:</comment>
<comment type="line">// GB_add, GB_emult, and GB_masker, and many GB_subassign_* methods</comment>
<comment type="line">// (02, 04, 06s_and_14, 08n, 08s_and_16, 09, 10_and_18, 11, 12_and_20).</comment>

<comment type="line">// The mask is ignored for computing where to slice the work, but it is sliced</comment>
<comment type="line">// once the location has been found.</comment>

<comment type="line">// M, A, B: any sparsity structure (hypersparse, sparse, bitmap, or full).</comment>
<comment type="line">// C: constructed as sparse or hypersparse in the caller.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (Coarse, int64_t) ;             \
    GB_FREE_WORK (&amp;Cwork, Cwork_size) ;         \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ewise_slice</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_ewise_slice</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads for eWise operation</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,            <comment type="line">// # of vectors of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name></decl></parameter>,     <comment type="line">// vectors of C, if hypersparse</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>, <comment type="line">// mapping of C to M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>, <comment type="line">// mapping of C to A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>, <comment type="line">// mapping of C to B</comment>
    <parameter><decl><type><name>bool</name></type> <name>Ch_is_Mh</name></decl></parameter>,                  <comment type="line">// if true, then Ch == Mh; GB_add only</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// mask matrix to slice (optional)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for ewise_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for ewise_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for ewise_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cwork</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Cwork_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// size ntasks1+1</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the initial TaskList</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Allocate the TaskList to hold at least 2*ntask0 tasks.  It will grow</comment>
    <comment type="line">// later, if needed.  Usually, 64*nthreads_max is enough, but in a few cases</comment>
    <comment type="line">// fine tasks can cause this number to be exceeded.  If that occurs,</comment>
    <comment type="line">// TaskList is reallocated.</comment>

    <comment type="line">// When the mask is present, it is often fastest to break the work up</comment>
    <comment type="line">// into tasks, even when nthreads_max is 1.</comment>

    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nthreads_max</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads_max</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return for a single task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Cnvec</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks0</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single coarse task that computes all of C</comment>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>Cnvec</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Cnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, and M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>Ch_is_Ah</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>Ch_is_Bh</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>B</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Mp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <comment type="line">// Ch_is_Mh is true if either true on input (for GB_add, which denotes</comment>
        <comment type="line">// that Ch is a deep copy of M-&gt;h), or if Ch is a shallow copy of M-&gt;h.</comment>
        <expr_stmt><expr><name>Ch_is_Mh</name> <operator>=</operator> <name>Ch_is_Mh</name> <operator>||</operator> <operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>M_is_hyper</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>Cwork</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cwork_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Cwork</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute an estimate of the work for each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads_for_Cwork</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads_for_Cwork</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the C(:,j) vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the corresponding vector of A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_to_A</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is hypersparse and the C_to_A mapping has been created</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kA</name> <operator>=</operator> <name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kA</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kA</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kA</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <call><name>GBH</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>kA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>Ch_is_Ah</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is hypersparse, but Ch is a shallow copy of A-&gt;h</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kA</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// A is sparse, bitmap, or full</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kA</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the corresponding vector of B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_to_B</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// B is hypersparse and the C_to_B mapping has been created</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kB</name> <operator>=</operator> <name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kB</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kB</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <call><name>GBH</name> <argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>kB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>Ch_is_Bh</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// B is hypersparse, but Ch is a shallow copy of B-&gt;h</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kB</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// B is sparse, bitmap, or full</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kB</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// estimate the work for C(:,j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kA</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kA</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kB</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aknz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>kA</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
            <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>Ap</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>vlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bknz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>kB</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
            <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>Bp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>vlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Bp</name> <index>[<expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Bp</name> <index>[<expr><name>kB</name></expr>]</index></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><name><name>Cwork</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>aknz</name> <operator>+</operator> <name>bknz</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// replace Cwork with its cumulative sum</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nthreads_for_Cwork</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>cwork</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Cwork</name> <index>[<expr><name>Cnvec</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads and tasks for the eWise operation</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cwork</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>ntasks0</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>target_task_size</name> <init>= <expr><name>cwork</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>ntasks0</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>target_task_size</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>target_task_size</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <name>cwork</name> <operator>/</operator> <name>target_task_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work into coarse tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>ntasks1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Coarse</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct all tasks, both coarse and fine</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// coarse task computes C (:,k:klast)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>Cnvec</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// all tasks have been constructed</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <break>break ;</break>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 2 or more vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// This is a non-empty coarse-grain task that does two or more</comment>
            <comment type="line">// entire vectors of C, vectors k:klast, inclusive.</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 0 or 1 vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// As a coarse-grain task, this task is empty or does a single</comment>
            <comment type="line">// vector, k.  Vector k must be removed from the work done by this</comment>
            <comment type="line">// and any other coarse-grain task, and split into one or more</comment>
            <comment type="line">// fine-grain tasks.</comment>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>t</name></expr></init></decl> ;</init> <condition><expr><name>tt</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>tt</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// remove k from the initial slice tt</comment>
                <if_stmt><if>if <condition>(<expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>==</operator> <name>k</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// remove k from task tt</comment>
                    <expr_stmt><expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// break, k not in task tt</comment>
                    <break>break ;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the corresponding vector of A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>C_to_A</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hypersparse and the C_to_A mapping has been created</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kA</name> <operator>=</operator> <name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>Ch_is_Ah</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hypersparse, but Ch is a shallow copy of A-&gt;h</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kA</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse, bitmap, or full</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kA</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>kA</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><ternary><condition><expr><operator>(</operator><name>kA</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>a_empty</name> <init>= <expr><operator>(</operator><name>pA_end</name> <operator>==</operator> <name>pA_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the corresponding vector of B</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>C_to_B</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// B is hypersparse and the C_to_B mapping has been created</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kB</name> <operator>=</operator> <name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>Ch_is_Bh</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// B is hypersparse, but Ch is a shallow copy of B-&gt;h</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kB</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// B is sparse, bitmap, or full</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>kB</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>kB</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>kB</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_end</name>   <init>= <expr><ternary><condition><expr><operator>(</operator><name>kB</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name> <init>= <expr><operator>(</operator><name>pB_end</name> <operator>==</operator> <name>pB_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the corresponding vector of M, if present</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// M can have any sparsity structure (hyper, sparse, bitmap, full)</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_end</name>   <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>C_to_M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// M is hypersparse and the C_to_M mapping has been created</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>kM</name> <operator>=</operator> <name><name>C_to_M</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>Ch_is_Mh</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// M is hypersparse, but Ch is a copy of Mh</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// Ch is a deep or shallow copy of Mh</comment>
                    <expr_stmt><expr><name>kM</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// M is sparse, bitmap, or full</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>kM</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>pM_start</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>kM</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>kM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pM_end</name>   <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>kM</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>kM</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>m_empty</name> <init>= <expr><operator>(</operator><name>pM_end</name> <operator>==</operator> <name>pM_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine the # of fine-grain tasks to create for vector k</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>double</name></type> <name>ckwork</name> <init>= <expr><name><name>Cwork</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Cwork</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nfine</name> <init>= <expr><name>ckwork</name> <operator>/</operator> <name>target_task_size</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// make the TaskList bigger, if needed</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <name>nfine</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// create the fine-grain tasks</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>nfine</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// this is a single coarse task for all of vector k</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// slice vector k into nfine fine tasks</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// first fine task starts at the top of vector k</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt> <comment type="line">// this is a fine task</comment>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>m_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pM_start</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pA_start</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pB_start</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>     <comment type="line">// to be determined below</comment>
                <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>tfine</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>tfine</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>tfine</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>double</name></type> <name>target_work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>nfine</name><operator>-</operator><name>tfine</name><operator>)</operator> <operator>*</operator> <name>ckwork</name><operator>)</operator> <operator>/</operator> <name>nfine</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name></decl>, <decl><type ref="prev"/><name>pA</name></decl>, <decl><type ref="prev"/><name>pB</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_slice_vector</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB</name></expr></argument>,
                        <argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>,
                        <argument><expr><name>pA_start</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>,
                        <argument><expr><name>pB_start</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Bi</name></expr></argument>,
                        <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>target_work</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <comment type="line">// prior task ends at pM-1, pA-1, and pB-1</comment>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pM_end</name> <operator>=</operator> <name>pM</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pA_end</name> <operator>=</operator> <name>pA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pB_end</name> <operator>=</operator> <name>pB</name></expr> ;</expr_stmt>

                    <comment type="line">// prior task handles indices ilast:i-1</comment>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>ilast</name></expr> ;</expr_stmt>

                    <comment type="line">// this task starts at pM, pA, and pB </comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt> <comment type="line">// this is a fine task</comment>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name> <operator>=</operator> <name>pM</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name> <operator>=</operator> <name>pA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pB</name> <operator>=</operator> <name>pB</name></expr> ;</expr_stmt>

                    <comment type="line">// advance to the next task</comment>
                    <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// Terminate the last fine task.</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;=</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pM_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>m_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pM_end</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pA_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pA_end</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pB_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pB_end</name></expr></else></ternary></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>vlen</name> <operator>-</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;=</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>     <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>       <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>     <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
