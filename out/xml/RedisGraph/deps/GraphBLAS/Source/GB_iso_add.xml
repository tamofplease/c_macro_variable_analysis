<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_add.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_add: apply a binary op and check for iso result for C=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Compute c = op(a,b) for two matrices A and B, and return true if C=A+B</comment>
<comment type="line">// results in an iso matrix C.  If true, the output scalar c is the iso value</comment>
<comment type="line">// for the matrix C.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_iso_add</name>             <comment type="line">// c = op(a,b), return true if C is iso</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>c</name></decl></parameter>,    <comment type="line">// output scalar of iso array</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,         <comment type="line">// type of c</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>alpha_scalar</name></decl></parameter>,   <comment type="line">// of type op-&gt;xtype</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>beta_scalar</name></decl></parameter>,    <comment type="line">// of type op-&gt;ytype</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,        <comment type="line">// binary operator, if present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_iso_add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for GB_iso_add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"ctype for GB_iso_add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for GB_iso_add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// special case if both A and B are full (or as-if-full) </comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A and B are both full (or as-if-full), and eWiseMult, eWiseAdd, and</comment>
        <comment type="line">// eWiseUnion all compute the same thing.  GB_emult detects this</comment>
        <comment type="line">// condition and calls GB_add, so that GB_emult doesn't have to handle</comment>
        <comment type="line">// this case.  GB_add tests the iso condition as if it were computing</comment>
        <comment type="line">// C=A.*B.  The alpha_scalar and beta_scalar values are not used.</comment>
        <return>return <expr><operator>(</operator><call><name>GB_iso_emult</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// quick return if the op is positional</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is not iso</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_eWiseUnion</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <operator>!</operator><name><name>B</name><operator>-&gt;</operator><name>iso</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// for eWiseAdd: A and B must be iso for C to be iso</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the scalar codes and sizes for C, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bsize</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>bcode</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// c = zero</comment>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the iso case for eWiseUnion and eWiseAdd</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//======================================================================</comment>
        <comment type="line">// eWiseUnion:</comment>
        <comment type="line">//======================================================================</comment>

        <comment type="line">// for eWiseUnion: the type of C is always identical to op-&gt;ztype</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// get the binary operator</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GxB_binary_function</name></type> <name>fadd</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ytype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is iso, with c = 1</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_cast_one</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// if b == beta: C is iso, with c = b</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// b = (ytype) Bx [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>b</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// c = b</comment>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// if a == alpha: C is iso, with c = a</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// a = (xtype) Ax [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>a</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// c = a</comment>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is iso if op(a,beta) == op(a,b) == op(alpha,b)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// a = (xtype) Ax [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>a</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// b = (ytype) Bx [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>b</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// c = op(a,b)</comment>
            <expr_stmt><expr><call><name>fadd</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// t = op(a,beta)</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>t</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>fadd</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// op(a,b) != op(a,beta) so C is not iso</comment>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// t = op(alpha,b)</comment>
            <expr_stmt><expr><call><name>fadd</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// op(a,b) != op(alpha,b) so C is not iso</comment>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// C is iso with c = op(a,b)</comment>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//======================================================================</comment>
        <comment type="line">// eWiseAdd: both A and B must be iso</comment>
        <comment type="line">//======================================================================</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compare the iso values of A and B, typecasted to C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// a = (ctype) Ax [0]</comment>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>a</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// b = (ctype) Bx [0]</comment>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>b</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// the iso values of A and B differ, when typecasted to C</comment>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute the C iso value and compare with A and B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">// For GB_wait, the pattern of A and B are known to be disjoint, so</comment>
            <comment type="line">// no operator is used, and op is NULL.  No typecasting is done.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">// get the binary operator</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GxB_binary_function</name></type> <name>fadd</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ytype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// x = (xtype) Ax [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>x</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// y = (ytype) Bx [0]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>y</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// z = op (x,y)</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>z</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>fadd</name> <argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// c = (ctype) z</comment>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the iso values of C and A match</comment>
                <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// if the tests above fall through, C is not iso</comment>
    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
