<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_positional_binop_ijflip.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_positional_binop_ijflip: swap i and j in a binary positional op</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Flip i and j to handle the CSR/CSC variations, for ewise positional ops.</comment>
<comment type="line">// This is not used for semirings.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_BinaryOp</name></type> <name>GB_positional_binop_ijflip</name> <comment type="line">// return flipped operator</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>                     <comment type="line">// operator to flip</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ_INT64</name>  <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ1_INT64</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTI_INT64</name>  <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTI1_INT64</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDJ_INT64</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDI_INT64</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ_INT32</name>  <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ1_INT32</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTI_INT32</name>  <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_FIRSTI1_INT32</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDJ_INT32</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDI_INT32</name> <operator>)</operator></expr> ;</return>
            <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// non-positional op is returned unmodified</comment>
    <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
