<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_removeElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_removeElement: remove a single entry from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Removes a single entry, C (row,col), from the matrix C.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DEBUG</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_removeElement: remove C(i,j) if it exists</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>GB_removeElement</name>     <comment type="line">// return true if found</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remove C(i,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C(i,j) is present; remove it</comment>
            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// C(i,j) is always found, whether present or not</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is sparse or hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is hypersparse: look for j in hyperlist C-&gt;h [0 ... C-&gt;nvec-1]</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Y</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse but does not yet have a hyper_hash</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>GB_lookup</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,
                    <argument><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is sparse, with a hyper_hash that is already built</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,
                    <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// vector j is empty</comment>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is sparse, C(:,j) is the jth vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>pC_start</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pC_end</name>   <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// look in C(:,k), the kth vector of C</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pC_end</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cknz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>is_zombie</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cknz</name> <operator>==</operator> <name>cvlen</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C(:,k) is as-if-full so no binary search needed to find C(i,k)</comment>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>pleft</name> <operator>+</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_UNFLIP</name> <argument_list>(<argument><expr><name><name>Ci</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>is_zombie</name> <operator>=</operator> <call><name>GB_IS_ZOMBIE</name> <argument_list>(<argument><expr><name><name>Ci</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// binary search for C(i,k): time is O(log(cknz))</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
                <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// remove the entry</comment>
        <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_zombie</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C(i,j) becomes a zombie</comment>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>found</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Matrix_removeElement: remove a single entry from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_Matrix_removeElement</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// matrix to remove entry from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>row</name></decl></parameter>,              <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>col</name></decl></parameter>,              <comment type="line">// column index</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// if C is jumbled, wait on the matrix first.  If full, convert to nonfull</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// convert C from full to sparse</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_to_nonfull</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C is sparse or hypersparse, and jumbled</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C (removeElement:jumbled)"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// remove the entry</comment>
        <return>return <expr><operator>(</operator><call><name>GB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C is not jumbled and not full; it may have zombies and pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// look for index i in vector j</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is stored by column</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nrows</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// C is stored by row</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nrows</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check row and column indices</comment>
    <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>nrows</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>, <argument><expr><literal type="string">"Row index "</literal>
            <name>GBu</name> <literal type="string">" out of range; must be &lt; "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>ncols</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>, <argument><expr><literal type="string">"Column index "</literal>
            <name>GBu</name> <literal type="string">" out of range; must be &lt; "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if C is sparse or hyper, it may have pending tuples</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_pending</name> <init>= <expr><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>C_is_pending</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// quick return</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// remove the entry</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// found it; no need to assemble pending tuples</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// assemble any pending tuples; zombies are OK</comment>
    <if_stmt><if>if <condition>(<expr><name>C_is_pending</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C (removeElement:pending tuples)"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// look again; remove the entry if it was a pending tuple</comment>
        <expr_stmt><expr><call><name>GB_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_removeElement: remove a single entry from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_removeElement</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// matrix to remove entry from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>row</name></decl></parameter>,              <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>col</name></decl></parameter>               <comment type="line">// column index</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_removeElement (C, row, col)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
