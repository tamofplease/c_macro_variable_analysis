<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ijsort.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ijsort:  sort an index array I and remove duplicates</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Sort an index array and remove duplicates:</comment>

<comment type="block">/*
    [I1 I1k] = sort (I) ;
    Iduplicate = [(I1 (1:end-1) == I1 (2:end)), false] ;
    I2  = I1  (~Iduplicate) ;
    I2k = I1k (~Iduplicate) ;
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sort.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>               \
<cpp:value>{                                       \
    GB_FREE_WORK (&amp;Work, Work_size) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_ijsort</name>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I</name></decl></parameter>, <comment type="line">// size ni, where ni &gt; 1 always holds</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_ni</name></decl></parameter>,      <comment type="line">// : size of I, output: # of indices in I2</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_I2</name></decl></parameter>,   <comment type="line">// size ni2, where I2 [0..ni2-1]</comment>
                        <comment type="line">// contains the sorted indices with duplicates removed.</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>I2_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_I2k</name></decl></parameter>,  <comment type="line">// output array of size ni2</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>I2k_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ni</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_I2</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_I2k</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I2</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>I2_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I2k</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>I2k_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ni</name> <init>= <expr><operator>*</operator><name>p_ni</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ni</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>ni</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine number of tasks to create</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>Work</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>ni</name> <operator>+</operator> <name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_Index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I1</name>  <init>= <expr><name>Work</name></expr></init></decl> ;</decl_stmt>                         <comment type="line">// size ni</comment>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I1k</name> <init>= <expr><name>Work</name> <operator>+</operator> <name>ni</name></expr></init></decl> ;</decl_stmt>                    <comment type="line">// size ni</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Count</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Work</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>ni</name><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// size ntasks+1</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy I into I1 and construct I1k</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>I1</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ni</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <comment type="line">// the key is selected so that the last duplicate entry comes first in</comment>
        <comment type="line">// the sorted result.  It must be adjusted later, so that the kth entry</comment>
        <comment type="line">// has a key equal to k.</comment>
        <expr_stmt><expr><name><name>I1k</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ni</name><operator>-</operator><name>k</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort [I1 I1k]</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_msort_2</name> <argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>I1</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>I1k</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count unique entries in I1</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name></decl>, <decl><type ref="prev"/><name>klast</name></decl>, <decl><type ref="prev"/><name>my_count</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>tid</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>kfirst</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>I1</name> <index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>I1</name> <index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>my_count</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_count</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ni2</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the result I2</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>I2</name>  <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>ni2</name></expr></argument>, <argument><expr><name>GrB_Index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I2_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>I2k</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>ni2</name></expr></argument>, <argument><expr><name>GrB_Index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I2k_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>I2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>I2k</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I2</name></expr></argument>, <argument><expr><name>I2_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I2k</name></expr></argument>, <argument><expr><name>I2k_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the new list I2 from I1, removing duplicates</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name></decl>, <decl><type ref="prev"/><name>klast</name></decl>, <decl><type ref="prev"/><name>k2</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the first entry in I1 is never a duplicate</comment>
            <expr_stmt><expr><name><name>I2</name>  <index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <name><name>I1</name>  <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>I2k</name> <index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ni</name> <operator>-</operator> <name><name>I1k</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>k2</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>kfirst</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>I1</name> <index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>I1</name> <index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>I2</name>  <index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <name><name>I1</name>  <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>I2k</name> <index>[<expr><name>k2</name></expr>]</index></name> <operator>=</operator> <name>ni</name> <operator>-</operator> <name><name>I1k</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>k2</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check result: compare with single-pass, single-threaded algorithm</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ni1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>I1k</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ni</name> <operator>-</operator> <name><name>I1k</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ni</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>I1</name> <index>[<expr><name>ni1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>I1</name> <index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>I1</name>  <index>[<expr><name>ni1</name></expr>]</index></name> <operator>=</operator> <name><name>I1</name>  <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>I1k</name> <index>[<expr><name>ni1</name></expr>]</index></name> <operator>=</operator> <name>ni</name> <operator>-</operator> <name><name>I1k</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ni1</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ni1</name> <operator>==</operator> <name>ni2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ni1</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>I1</name>  <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>I2</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>I1k</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>I2k</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return the new sorted list</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_I2</name> <operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>I2</name></expr>  ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I2_size_handle</name> <operator>)</operator> <operator>=</operator> <name>I2_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_I2k</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>I2k</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I2k_size_handle</name><operator>)</operator> <operator>=</operator> <name>I2k_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p_ni</name> <operator>)</operator> <operator>=</operator> <operator>(</operator><name>int64_t</name>    <operator>)</operator> <name>ni2</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
