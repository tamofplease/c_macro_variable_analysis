<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_casting.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_casting.c: unary typecasting functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecasting from double to integer</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function_decl><type><specifier>extern</specifier> <name>int8_t</name></type>   <name>GB_cast_to_int8_t</name>   <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int16_t</name></type>  <name>GB_cast_to_int16_t</name>  <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type>  <name>GB_cast_to_int32_t</name>  <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int64_t</name></type>  <name>GB_cast_to_int64_t</name>  <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uint8_t</name></type>  <name>GB_cast_to_uint8_t</name>  <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uint16_t</name></type> <name>GB_cast_to_uint16_t</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uint32_t</name></type> <name>GB_cast_to_uint32_t</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>uint64_t</name></type> <name>GB_cast_to_uint64_t</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// unary typecast operators, used in GB_cast_factory.c.</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_FUNCTION</name><parameter_list>(<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro>                                   \
<cpp:value>extern void GB (_cast_ ## ztype ## _ ## xtype)                          \
(                                                                       \
    void *z,            <comment type="block">/* typecasted output, of type ztype */</comment>          \
    const void *x,      <comment type="block">/* input value to typecast, of type xtype */</comment>    \
    size_t s            <comment type="block">/* size of type, for GB_copy_user_user only */</comment>  \
) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to boolean</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>bool</argument>      , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to int8_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int8_t</argument>    , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to int16_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int16_t</argument>   , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to int32_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int32_t</argument>   , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to int64_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>int64_t</argument>   , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to uint8_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint8_t</argument>   , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to uint16_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint16_t</argument>  , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to uint32_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint32_t</argument>  , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to uint64_t</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>uint64_t</argument>  , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to float</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>float</argument>     , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to double</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>double</argument>    , <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to float complex</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// typecast to double complex</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>bool</argument>      )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>int8_t</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>int16_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>int32_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>int64_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>uint8_t</argument>   )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>float</argument>     )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>double</argument>    )</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
<macro><name>GB_CAST_FUNCTION</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>

</unit>
