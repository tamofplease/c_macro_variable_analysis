<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_reduce.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce: reduce a matrix to a vector or scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce_TYPE: reduce a matrix to a scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reduce entries in a matrix to a scalar, c = accum (c, reduce_to_scalar(A)))</comment>


<comment type="line">// All entries in the matrix are "summed" to a single scalar t using the reduce</comment>
<comment type="line">// monoid, which must be associative (otherwise the results are undefined).</comment>
<comment type="line">// The result is either assigned to the output scalar c (if accum is NULL), or</comment>
<comment type="line">// it accumulated in the result c via c = accum(c,t).  If A has no entries, the</comment>
<comment type="line">// result t is the identity value of the monoid.  Unlike most other GraphBLAS</comment>
<comment type="line">// operations, this operation uses an accum operator but no mask.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_REDUCE_TO_CSCALAR</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                    \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Matrix_reduce_, T) <comment type="block">/* c = accum (c, reduce (A)) */</comment> \
(                                                                              \
    type *c,                        <comment type="block">/* result scalar                        */</comment> \
    const GrB_BinaryOp accum,       <comment type="block">/* optional accum for c=accum(c,t)      */</comment> \
    const GrB_Monoid monoid,        <comment type="block">/* monoid to do the reduction           */</comment> \
    const GrB_Matrix A,             <comment type="block">/* matrix to reduce                     */</comment> \
    const GrB_Descriptor desc                                                  \
)                                                                              \
{                                                                              \
    GB_WHERE1 ("GrB_Matrix_reduce_" GB_STR(T) " (&amp;c, accum, monoid, A, desc)");\
    GB_BURBLE_START ("GrB_reduce") ;                                           \
    GB_RETURN_IF_NULL_OR_FAULTY (A) ;                                          \
    GrB_Info info = GB_reduce_to_scalar (c, GB_EVAL3 (prefix, _, T), accum,    \
        monoid, A, Context) ;                                                  \
    GB_BURBLE_END ;                                                            \
    return (info) ;                                                            \
}</cpp:value></cpp:define>

<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>   )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>   )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument>  )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument>  )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument>  )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument>  )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument> )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument> )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument> )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>   )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>   )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>   )</argument_list></macro>
<macro><name>GB_REDUCE_TO_CSCALAR</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>   )</argument_list></macro>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_reduce_UDT</name>      <comment type="line">// c = accum (c, reduce_to_scalar (A))</comment>
<parameter_list>(
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,                        <comment type="line">// result scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for c=accum(c,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,        <comment type="line">// monoid to do the reduction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_reduce_UDT (&amp;c, accum, monoid, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>monoid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_reduce_to_scalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
        <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce_Monoid: reduce a matrix to a vector via a monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_reduce_Monoid</name>   <comment type="line">// w&lt;M&gt; = accum (w,reduce(A))</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,        <comment type="line">// reduce monoid for t=reduce(A)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w, M, and A</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_reduce_Monoid (w, M, accum, monoid, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_reduce_to_vector</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M</name></expr></argument>,
        <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce_BinaryOp: reduce a matrix to a vector via a binary op</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Only binary ops that correspond to a known monoid are supported.</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_reduce_BinaryOp</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// reduce operator for t=reduce(A)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w, M, and A</comment>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_reduce_BinaryOp (w, M, accum, op, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>, <argument><expr><literal type="string">"Invalid binary operator:"</literal>
            <literal type="string">" z=%s(x,y); all types of x,y,z must be the same\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// convert the binary op to its corresponding monoid</comment>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>monoid</name> <init>= <expr><call><name>GB_binop_to_monoid</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><literal type="string">"Invalid binary operator:"</literal>
            <literal type="string">" z=%s(x,y) has no equivalent monoid\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// w&lt;M&gt; = reduce (A) via the monoid</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_reduce_to_vector</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M</name></expr></argument>,
        <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce_Monoid_Scalar: reduce a matrix to a GrB_Scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_reduce_Monoid_Scalar</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>S</name></decl></parameter>,                   <comment type="line">// result scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for c=accum(c,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,        <comment type="line">// monoid to do the reduction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_reduce_Monoid_Scalar (s, accum, monoid, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_Scalar_reduce</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_reduce_BinaryOp_Scalar: reduce matrix to GrB_Scalar via binary op</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_reduce_BinaryOp_Scalar</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>S</name></decl></parameter>,                   <comment type="line">// result scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for c=accum(c,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// binary op to do the reduction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_reduce_BinaryOp_Scalar (s, accum, binaryop, A, "</literal>
        <literal type="string">"desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_reduce"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>||</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>, <argument><expr><literal type="string">"Invalid binary operator:"</literal>
            <literal type="string">" z=%s(x,y); all types of x,y,z must be the same\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// convert the binary op to its corresponding monoid</comment>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>monoid</name> <init>= <expr><call><name>GB_binop_to_monoid</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>monoid</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><literal type="string">"Invalid binary operator:"</literal>
            <literal type="string">" z=%s(x,y) has no equivalent monoid\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// S = reduce (A) via the monoid</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_Scalar_reduce</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
