<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy_generic.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy_generic: compute C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B in parallel</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_AxB_saxpy_generic computes C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B in parallel,</comment>
<comment type="line">// with arbitrary types and operators.  C can have any sparsity pattern:</comment>
<comment type="line">// hyper, sparse, bitmap, or full.  For all cases, the four matrices C, M</comment>
<comment type="line">// (if present), A, and B have the same format (by-row or by-column), or they</comment>
<comment type="line">// represent implicitly transposed matrices with the same effect.  This method</comment>
<comment type="line">// does not handle the dot-product methods, which compute C=A'*B if A and B</comment>
<comment type="line">// are held by column, or equivalently A*B' if both are held by row.</comment>

<comment type="line">// This method uses GB_AxB_saxpy3_generic_* and GB_bitmap_AxB_saxpy_generic_*</comment>
<comment type="line">// to implement two meta-methods, each of which can contain further specialized</comment>
<comment type="line">// methods (such as the fine/ coarse x Gustavson/Hash, mask/no-mask methods in</comment>
<comment type="line">// saxpy3):</comment>

<comment type="line">// saxpy3: general purpose method, where C is sparse or hypersparse,</comment>
<comment type="line">//          via GB_AxB_saxpy3_template.c.  SaxpyTasks holds the (fine/coarse x</comment>
<comment type="line">//          Gustavson/Hash) tasks constructed by GB_AxB_saxpy3_slice*.</comment>

<comment type="line">// bitmap_saxpy: general purpose method, where C is bitmap or full, via</comment>
<comment type="line">//          GB_bitmap_AxB_saxpy_template.c.  The method constructs its own</comment>
<comment type="line">//          tasks in workspace defined and freed in that template.</comment>

<comment type="line">// C is not iso.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy_generic.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_saxpy_generic</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// any sparsity</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_in_place</name></decl></parameter>,          <comment type="line">// ignored if C is bitmap</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>A_is_pattern</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>B_is_pattern</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C=A*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// if true, do z=fmult(b,a) vs fmult(a,b)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>saxpy_method</name></decl></parameter>,         <comment type="line">// saxpy3 or bitmap method</comment>
    <comment type="line">// for saxpy3 only:</comment>
    <parameter><decl><type><name>GB_saxpy3task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>SaxpyTasks</name></decl></parameter>, <comment type="line">// NULL if C is bitmap</comment>
    <parameter><decl><type><name>int</name></type> <name>ntasks</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nfine</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>do_sort</name></decl></parameter>,              <comment type="line">// if true, sort in saxpy3</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get operators, functions, workspace, contents of A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_NO_VALUE</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A*B via saxpy3 or bitmap method, function pointers, and typecasting</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic semirings with positional mulitiply operators</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"(generic positional C=A*B) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>flipxy</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C always has type int64_t or int32_t.  The monoid must be used via</comment>
        <comment type="line">// its function pointer.  The positional multiply operator must be</comment>
        <comment type="line">// hard-coded since it has no function pointer.  The numerical values</comment>
        <comment type="line">// and types of A and B are not accessed.</comment>

        <if_stmt><if>if <condition>(<expr><name><name>mult</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
        <block>{<block_content>
            <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case>   <comment type="line">// z = first_i(A(i,k),y) == i</comment>
                <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_i1(A(i,k),y) == i+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_firsti64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_firsti64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case>   <comment type="line">// z = first_j(A(i,k),y) == k</comment>
                <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_j1(A(i,k),y) == k+1</comment>
                <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case>   <comment type="line">// z = second_i(x,B(k,j)) == k</comment>
                <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case>   <comment type="line">// z = second_i1(x,B(k,j))== k+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_firstj64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_firstj64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case>   <comment type="line">// z = second_j(x,B(k,j)) == j</comment>
                <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case>   <comment type="line">// z = second_j1(x,B(k,j))== j+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_secondj64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_secondj64</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case>   <comment type="line">// z = first_i(A(i,k),y) == i</comment>
                <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_i1(A(i,k),y) == i+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_firsti32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_firsti32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case>   <comment type="line">// z = first_j(A(i,k),y) == k</comment>
                <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_j1(A(i,k),y) == k+1</comment>
                <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case>   <comment type="line">// z = second_i(x,B(k,j)) == k</comment>
                <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case>   <comment type="line">// z = second_i1(x,B(k,j))== k+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_firstj32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_firstj32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case>   <comment type="line">// z = second_j(x,B(k,j)) == j</comment>
                <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case>   <comment type="line">// z = second_j1(x,B(k,j))== j+1</comment>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C is sparse or hypersparse</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_secondj32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C is bitmap or full</comment>
                            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_secondj32</name> 
                             <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                              <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic semirings with standard multiply operators</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"(generic C=A*B) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// t = A(i,k)</comment>
            <comment type="line">// fmult is not used and can be NULL.  This is required for</comment>
            <comment type="line">// GB_reduce_to_vector for user-defined types.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>flipxy</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_pattern</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_first</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is bitmap or full</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_first</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// t = B(i,k)</comment>
            <comment type="line">// fmult is not used and can be NULL.  This is required for</comment>
            <comment type="line">// GB_reduce_to_vector for user-defined types.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>flipxy</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_pattern</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_second</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is bitmap or full</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_second</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>flipxy</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// t = B(k,j) * A(i,k)</comment>
            <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse, mult is flipped</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_flipped</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is bitmap or full, mult is flipped</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_flipped</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// t = A(i,k) * B(k,j)</comment>
            <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse, mult is unflipped</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3_generic_unflipped</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is bitmap or full, mult is unflipped</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy_generic_unflipped</name> 
                     <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                      <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                      <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
