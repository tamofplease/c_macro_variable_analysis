<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ewise.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ewise: C&lt;M&gt; = accum (C, A+B) or A.*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = accum (C,A+B), A.*B and variations.  The input matrices A and B are</comment>
<comment type="line">// optionally transposed.  Does the work for GrB_eWiseAdd_* and</comment>
<comment type="line">// GrB_eWiseMult_*.  Handles all cases of the mask.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_Matrix_free (&amp;T) ;   \
    GB_Matrix_free (&amp;AT) ;  \
    GB_Matrix_free (&amp;BT) ;  \
    GB_Matrix_free (&amp;MT) ;  \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ewise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_accum_mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_ewise</name>                   <comment type="line">// C&lt;M&gt; = accum (C, A+B) or A.*B</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,           <comment type="line">// if true, clear C before writing to it</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, complement the mask M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op_in</name></decl></parameter>,       <comment type="line">// defines '+' for C=A+B, or .* for A.*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>bool</name></type> <name>A_transpose</name></decl></parameter>,               <comment type="line">// if true, use A' instead of A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>bool</name></type> <name>B_transpose</name></decl></parameter>,               <comment type="line">// if true, use B' instead of B</comment>
    <parameter><decl><type><name>bool</name></type> <name>eWiseAdd</name></decl></parameter>,                  <comment type="line">// if true, do set union (like A+B),</comment>
                                    <comment type="line">// otherwise do intersection (like A.*B)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>,       <comment type="line">// if true, eWiseUnion, else eWiseAdd</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>alpha</name></decl></parameter>,         <comment type="line">// alpha and beta ignored for eWiseAdd,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>beta</name></decl></parameter>,          <comment type="line">// nonempty scalars for GxB_eWiseUnion</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C may be aliased with M, A, and/or B</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>MT</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>AT</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>BT</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl>, <decl><type ref="prev"/><name>MT_header</name></decl>, <decl><type ref="prev"/><name>AT_header</name></decl>, <decl><type ref="prev"/><name>BT_header</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY_OR_POSITIONAL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op_in</name></expr></argument>, <argument><expr><literal type="string">"op for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for GB_ewise"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// T has the same type as the output z for z=op(a,b)</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name> <init>= <expr><name>op_in</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>T_type</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check domains and dimensions for C&lt;M&gt; = accum (C,T)</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>T_type</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// T=op(A,B) via op operator, so A and B must be compatible with z=op(a,b)</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_compatible</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
        <argument><expr><name>GB_ignore_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>eWiseAdd</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// alpha and beta scalars must be present</comment>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>alpha</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_EMPTY_OBJECT</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
                    <argument><expr><literal type="string">"alpha cannot be an empty scalar"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>beta</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_EMPTY_OBJECT</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
                    <argument><expr><literal type="string">"beta cannot be an empty scalar"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// C = op (A, beta) is done for entries in A but not B</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>, <argument><expr><name><name>beta</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"beta scalar of type [%s]\n"</literal>
                    <literal type="string">"cannot be typecast to op input of type [%s]"</literal></expr></argument>,
                    <argument><expr><name><name>beta</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// C = op (alpha, B) is done for entries in B but not A</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><name><name>alpha</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"alpha scalar of type [%s]\n"</literal>
                    <literal type="string">"cannot be typecast to op input of type [%s]"</literal></expr></argument>,
                    <argument><expr><name><name>alpha</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C = A is done for entries in A but not B</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"First input of type [%s]\n"</literal>
                    <literal type="string">"cannot be typecast to final output of type [%s]"</literal></expr></argument>,
                    <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// C = B is done for entries in B but not A</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"Second input of type [%s]\n"</literal>
                    <literal type="string">"cannot be typecast to final output of type [%s]"</literal></expr></argument>,
                    <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check the dimensions</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ancols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bncols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnrows</name> <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cncols</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>!=</operator> <name>bnrows</name> <operator>||</operator> <name>ancols</name> <operator>!=</operator> <name>bncols</name> <operator>||</operator>
        <name>cnrows</name> <operator>!=</operator> <name>anrows</name> <operator>||</operator> <name>cncols</name> <operator>!=</operator> <name>bncols</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Dimensions not compatible:\n"</literal>
            <literal type="string">"output is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"\n"</literal>
            <literal type="string">"first input is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"%s\n"</literal>
            <literal type="string">"second input is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>,
            <argument><expr><name>anrows</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><ternary><condition><expr><name>A_transpose</name></expr> ?</condition><then> <expr><literal type="string">" (transposed)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name>bnrows</name></expr></argument>, <argument><expr><name>bncols</name></expr></argument>, <argument><expr><ternary><condition><expr><name>B_transpose</name></expr> ?</condition><then> <expr><literal type="string">" (transposed)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// quick return if an empty mask M is complemented</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_QUICK_MASK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle CSR and CSC formats</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// CSC/CSR format of T is same as C.  Conform A and B to the format of C.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>T_is_csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T_is_csc</name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Flip the sense of A_transpose.  For example, if C is CSC and A is</comment>
        <comment type="line">// CSR, and A_transpose is true, then C=A'+B is being computed.  But</comment>
        <comment type="line">// this is the same as C=A+B where A is treated as if it is CSC.</comment>
        <expr_stmt><expr><name>A_transpose</name> <operator>=</operator> <operator>!</operator><name>A_transpose</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>T_is_csc</name> <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Flip the sense of B_transpose.</comment>
        <expr_stmt><expr><name>B_transpose</name> <operator>=</operator> <operator>!</operator><name>B_transpose</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_transpose</name> <operator>&amp;&amp;</operator> <name>B_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// T=A'+B' is not computed.  Instead, T=A+B is computed first,</comment>
        <comment type="line">// and then C = T' is computed.</comment>
        <expr_stmt><expr><name>A_transpose</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B_transpose</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <comment type="line">// The CSC format of T and C now differ.</comment>
        <expr_stmt><expr><name>T_is_csc</name> <operator>=</operator> <operator>!</operator><name>T_is_csc</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>T_is_csc</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// positional ops must be flipped, with i and j swapped</comment>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <call><name>GB_positional_binop_ijflip</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// decide when to apply the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// GB_add and GB_emult can apply any non-complemented mask, but it is</comment>
    <comment type="line">// faster to exploit the mask in GB_add / GB_emult only when it is very</comment>
    <comment type="line">// sparse compared with A and B, or (in special cases) when it is easy</comment>
    <comment type="line">// to apply.</comment>

    <comment type="line">// check the CSR/CSC format of M</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_csc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>T_is_csc</name></expr> </then><else>: <expr><name><name>M</name><operator>-&gt;</operator><name>is_csc</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transpose M if needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M1</name> <init>= <expr><name>M</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_transpose</name> <init>= <expr><operator>(</operator><name>T_is_csc</name> <operator>!=</operator> <name>M_is_csc</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// MT = (bool) M'</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(M transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>MT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MT_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>MT</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>M1</name> <operator>=</operator> <name>MT</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transpose A and/or B if needed:</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_pattern</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>B_is_pattern</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>eWiseAdd</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// eWiseMult can create AT and BT as iso if the op is FIRST, SECOND, or</comment>
        <comment type="line">// PAIR; eWiseAdd cannot.</comment>
        <expr_stmt><expr><call><name>GB_binop_pattern</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_is_pattern</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B_is_pattern</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A1</name> <init>= <expr><name>A</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// AT = (xtype) A' or AT = (xtype) one (A')</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(A transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>AT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AT_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>AT</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A1</name> <operator>=</operator> <name>AT</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>AT</name></expr></argument>, <argument><expr><literal type="string">"AT from transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>B1</name> <init>= <expr><name>B</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>B_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// BT = (ytype) B' or BT = (ytype) one (B')</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(B transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>BT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>BT_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>BT</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B1</name> <operator>=</operator> <name>BT</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>BT</name></expr></argument>, <argument><expr><literal type="string">"BT from transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// special cases</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE::: handle more special cases:</comment>
    <comment type="line">// C&lt;M&gt;+=A+B when C and A are dense, B is sparse.  M can be sparse.</comment>
    <comment type="line">// C&lt;M&gt;+=A+B when C and B are dense, A is sparse.  M can be sparse.</comment>
    <comment type="line">// C&lt;M&gt;+=A+B when C, A, and B are dense.  M can be sparse.</comment>
    <comment type="line">// In all cases above, C remains dense and can be updated in-place</comment>
    <comment type="line">// C_replace must be false.  M can be valued or structural.</comment>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_as_if_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_as_if_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_as_if_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B1</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>no_typecast</name> <init>=
        <expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name><name>C</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator>              <comment type="line">// no typecasting of C</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>==</operator> <name><name>A1</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator>          <comment type="line">// no typecasting of A</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name> <operator>==</operator> <name><name>B1</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>        <comment type="line">// no typecasting of B</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>any_bitmap</name> <init>=
        <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>any_pending_work</name> <init>=
        <expr><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>M1</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A1</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>B1</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>any_iso</name> <init>= <expr><operator>(</operator><name><name>A1</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <name><name>B1</name><operator>-&gt;</operator><name>iso</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <comment type="line">// FUTURE: for sssp12:</comment>
        <comment type="line">// C&lt;A&gt; = A+B where C is sparse and B is dense;</comment>
        <comment type="line">// mask is structural, not complemented, C_replace is false.</comment>
        <comment type="line">// C is not empty.  Use a kernel that computes T&lt;A&gt;=A+B</comment>
        <comment type="line">// where T starts out empty; just iterate over the entries in A.</comment>

    <if_stmt><if>if <condition>(<expr><name>A_as_if_full</name>                        <comment type="line">// A and B are as-if-full</comment>
        <operator>&amp;&amp;</operator> <name>B_as_if_full</name>
        <operator>&amp;&amp;</operator> <operator>!</operator><name>any_iso</name>                         <comment type="line">// A and B are not iso</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>Mask_comp</name>        <comment type="line">// no mask</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name>T_is_csc</name><operator>)</operator>          <comment type="line">// no transpose of C</comment>
        <operator>&amp;&amp;</operator> <name>no_typecast</name>                      <comment type="line">// no typecasting</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>opcode</name> <operator>!=</operator> <name>GB_USER_binop_code</name><operator>)</operator>   <comment type="line">// not a user-defined operator</comment>
        <operator>&amp;&amp;</operator> <operator>!</operator><name>op_is_positional</name>                <comment type="line">// op is not positional</comment>
        <operator>&amp;&amp;</operator> <operator>!</operator><name>any_bitmap</name>                      <comment type="line">// no bitmap matrices</comment>
        <operator>&amp;&amp;</operator> <operator>!</operator><name>any_pending_work</name></expr>)</condition>               <comment type="line">// no matrix has pending work</comment>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>C_as_if_full</name>                    <comment type="line">// C is as-if-full</comment>
        <operator>&amp;&amp;</operator> <operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name>                          <comment type="line">// C is not iso</comment>
        <operator>&amp;&amp;</operator> <name>accum</name> <operator>==</operator> <name>op</name>                      <comment type="line">// accum is same as the op</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>opcode</name> <operator>&gt;=</operator> <name>GB_MIN_binop_code</name><operator>)</operator>    <comment type="line">// subset of binary operators</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>opcode</name> <operator>&lt;=</operator> <name>GB_RDIV_binop_code</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C += A+B where all 3 matrices are dense</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// C_replace is ignored</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"dense C+=A+B "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_dense_ewise3_accum</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// cannot fail</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for GB_ewise, dense C+=A+B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>             <comment type="line">// no accum</comment>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = A+B where A and B are dense (C is anything)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// C_replace is ignored</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"dense C=A+B "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_dense_ewise3_noaccum</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_as_if_full</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for GB_ewise, dense C=A+B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// T = A+B or A.*B, or with any mask M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>mask_applied</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>eWiseAdd</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// T&lt;any mask&gt; = A+B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// TODO: check the mask condition in GB_add_sparsity.</comment>
        <comment type="line">// Only exploit the mask in GB_add if it's more efficient than</comment>
        <comment type="line">// exploiting it later, probably this condition:</comment>

            <comment type="line">// (accum == NULL) &amp;&amp; (C-&gt;is_csc == T-&gt;is_csc)</comment>
            <comment type="line">// &amp;&amp; (C_replace || GB_NNZ_UPPER_BOUND (C) == 0))</comment>

        <comment type="line">// If that is true and the mask is applied, then T is transplanted as</comment>
        <comment type="line">// the final C and the mask is no longer needed.  In this case, it</comment>
        <comment type="line">// could be faster to exploit the mask duing GB_add.</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_add</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T_type</name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>M1</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>mask_applied</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>is_eWiseUnion</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// T&lt;any mask&gt; = A.*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// T can be returned with shallow components derived from its inputs A1</comment>
        <comment type="line">// and/or B1.  In particular, if T is hypersparse, T-&gt;h may be a</comment>
        <comment type="line">// shallow copy of A1-&gt;h, B1-&gt;h, or M1-&gt;h.  T is hypersparse if any</comment>
        <comment type="line">// matrix A1, B1, or M1 are hypersparse.  Internally, T-&gt;h always</comment>
        <comment type="line">// starts as a shallow copy of A1-&gt;h, B1-&gt;h, or M1-&gt;h, but it may be</comment>
        <comment type="line">// pruned by GB_hypermatrix_prune, and thus no longer shallow.</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_emult</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T_type</name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>, <argument><expr><name>M1</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>mask_applied</name></expr></argument>, <argument><expr><name>A1</name></expr></argument>, <argument><expr><name>B1</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transplant shallow content from AT, BT, or MT</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// If T is hypersparse, T-&gt;h is always a shallow copy of A1-&gt;h, B1-&gt;h,</comment>
        <comment type="line">// or M1-&gt;h.  Any of the three matrices A1, B1, or M1 may be temporary</comment>
        <comment type="line">// transposes, AT, BT, and MT respectively.  If T-&gt;h is a shallow cpoy</comment>
        <comment type="line">// of a temporary matrix, then change the ownership of the T-&gt;h array,</comment>
        <comment type="line">// from the temporary matrix into T, so that T-&gt;h is not freed when AT,</comment>
        <comment type="line">// BT, and MT are freed.</comment>

        <comment type="line">// GB_transpose can return all kinds of shallow components, particularly</comment>
        <comment type="line">// when transposing vectors.  It can return AT-&gt;h as shallow copy of</comment>
        <comment type="line">// A-&gt;i, for example.</comment>

        <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// T-&gt;h is shallow and T is hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// one of A1, B1, or M1 is hypersparse</comment>
            <macro><name>ASSERT</name> <argument_list>(<argument>GB_IS_HYPERSPARSE (A1) || GB_IS_HYPERSPARSE (B1) ||
                    GB_IS_HYPERSPARSE (M1)</argument>)</argument_list></macro>
            <if_stmt><if>if <condition>(<expr><name>A_transpose</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>A1</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A1 is the temporary matrix AT.  AT-&gt;h might itself be a</comment>
                <comment type="line">// shallow copy of A-&gt;h or A-&gt;i, from GB_transpose.</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A1</name> <operator>==</operator> <name>AT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name><name>AT</name><operator>-&gt;</operator><name>h_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name><name>AT</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>AT</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_transpose</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>B1</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// B1 is the temporary matrix BT.  BT-&gt;h might itself be a</comment>
                <comment type="line">// shallow copy of B-&gt;h or B-&gt;i, from GB_transpose.</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B1</name> <operator>==</operator> <name>BT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name><name>BT</name><operator>-&gt;</operator><name>h_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name><name>BT</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>BT</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>M_transpose</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>M1</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// M1 is the temporary matrix MT.  MT-&gt;h might itself be a</comment>
                <comment type="line">// shallow copy of M-&gt;h or M-&gt;i, from GB_transpose.</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M1</name> <operator>==</operator> <name>MT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name><name>MT</name><operator>-&gt;</operator><name>h_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name><name>MT</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>MT</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// T-&gt;h may still be shallow, but if so, it is a shallow copy of</comment>
            <comment type="line">// some component of the user input matrices A, B, or M, and must</comment>
            <comment type="line">// remain shallow.  A deep copy of it will be made when T-&gt;h is</comment>
            <comment type="line">// transplanted into the result C.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>A1</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>B1</name><operator>-&gt;</operator><name>h</name></name> <operator>||</operator>
                 <operator>(</operator><name>M1</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name><name>M1</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free the transposed matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>AT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>BT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = accum (C,T): accumulate the results into C via the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T from GB_ewise, prior to C&lt;M&gt;=accum(C,T)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>accum</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mask_applied</name><operator>)</operator><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>C_replace</name> <operator>||</operator> <call><name>GB_NNZ_UPPER_BOUND</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C = 0 ; C = (ctype) T ; with the same CSR/CSC format.  The mask M</comment>
        <comment type="line">// (if any) has already been applied.  If C is also empty, or to be</comment>
        <comment type="line">// cleared anyway, and if accum is not present, then T can be</comment>
        <comment type="line">// transplanted directly into C, as C = (ctype) T, typecasting if</comment>
        <comment type="line">// needed.  If no typecasting is done then this takes no time at all</comment>
        <comment type="line">// and is a pure transplant.  Also conform C to its desired</comment>
        <comment type="line">// hypersparsity.</comment>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>MT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transplant_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>GB_block</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// C&lt;M&gt; = accum (C,T)</comment>
        <comment type="line">// GB_accum_mask also conforms C to its desired hypersparsity</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_accum_mask</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>MT</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>,
            <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>MT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
