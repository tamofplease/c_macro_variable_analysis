<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_mask.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_mask: return string to define mask macros</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// User-defined types cannot be used as a valued mask.  They can be used</comment>
<comment type="line">// as structural masks.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_mask</name>       <comment type="line">// return enum to define mask macros</comment>
<parameter_list>(
    <comment type="line">// input</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,                   <comment type="line">// File to write macros, assumed open already</comment>
    <parameter><decl><type><name>int</name></type> <name>mask_ecode</name></decl></parameter>              <comment type="line">// enumified mask</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>mask_ecode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// no mask</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// mask not complemented</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE (no mask present)\n"</literal>
                <literal type="string">"#define MX(p)    (no mask present)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 1\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 1"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// mask complemented</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE (no mask present)\n"</literal>
                <literal type="string">"#define MX(p)    (no mask present)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 1\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 1"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, and structural (not valued)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">2</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: structural</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE void\n"</literal>
                <literal type="string">"#define MX(p) 1\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 1\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">3</literal></expr> :</case>
            <comment type="line">// mask complemented, type: structural</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE void\n"</literal>
                <literal type="string">"#define MX(p) 1\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 1\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, valued, size: 1 byte</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">4</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: bool, int8, uint8</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint8_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">5</literal></expr> :</case>
            <comment type="line">// mask complemented, type: bool, int8, uint8</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint8_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, valued, size: 2 bytes</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">6</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: int16, uint16</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint16_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">7</literal></expr> :</case>
            <comment type="line">// mask complemented, type: int16, uint16</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint16_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, valued, size: 4 bytes</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">8</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: float, int32, uint32</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint32_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">9</literal></expr> :</case>
            <comment type="line">// mask complemented, type: float, int32, uint32</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint32_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, valued, size: 8 bytes</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">10</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: double, float complex, int64, uint64</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint64_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">11</literal></expr> :</case>
            <comment type="line">// mask complemented, type: double, float complex, int64, uint64</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint64_t\n"</literal> 
                <literal type="string">"#define MX(p) (Mx [p] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, valued, size: 16 bytes</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><literal type="number">12</literal></expr> :</case>
            <comment type="line">// mask not complemented, type: double complex</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint64_t\n"</literal>
                <literal type="string">"#define MX(p) (Mx [2*(p)] != 0 || Mx [2*(p)+1] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 0\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">13</literal></expr> :</case>
            <comment type="line">// mask complemented, type: double complex</comment>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#define GB_MTYPE uint64_t\n"</literal>
                <literal type="string">"#define MX(p) (Mx [2*(p)] != 0 || Mx [2*(p)+1] != 0)\n"</literal>
                <literal type="string">"#define GB_MASK_STRUCT 0\n"</literal>
                <literal type="string">"#define GB_MASK_COMP 1\n"</literal>
                <literal type="string">"#define GB_NO_MASK 0"</literal></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// invalid case</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <default>default:</default> <empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"#error undefined mask behavior"</literal></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// mask:\n%s\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
