<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_reduce.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_reduce: enumerate a GrB_reduce problem</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// User-defined types are not handled.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_reduce</name>      <comment type="line">// enumerate a GrB_reduce problem</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>rcode</name></decl></parameter>,        <comment type="line">// unique encoding of the entire problem</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>reduce</name></decl></parameter>,      <comment type="line">// the monoid to enumify</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the monoid and type of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>reduceop</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>reduceop</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>reduce_opcode</name>  <init>= <expr><name><name>reduceop</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// these must always be true for any monoid:</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>reduceop</name><operator>-&gt;</operator><name>xtype</name></name> <operator>==</operator> <name><name>reduceop</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>reduceop</name><operator>-&gt;</operator><name>ytype</name></name> <operator>==</operator> <name><name>reduceop</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename redundant boolean operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// consider z = op(x,y) where both x and y are boolean:</comment>
    <comment type="line">// DIV becomes FIRST</comment>
    <comment type="line">// RDIV becomes SECOND</comment>
    <comment type="line">// MIN and TIMES become LAND</comment>
    <comment type="line">// MAX and PLUS become LOR</comment>
    <comment type="line">// NE, ISNE, RMINUS, and MINUS become LXOR</comment>
    <comment type="line">// ISEQ becomes EQ</comment>
    <comment type="line">// ISGT becomes GT</comment>
    <comment type="line">// ISLT becomes LT</comment>
    <comment type="line">// ISGE becomes GE</comment>
    <comment type="line">// ISLE becomes LE</comment>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// rename the monoid</comment>
        <expr_stmt><expr><name>reduce_opcode</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>reduce_opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>red_ecode</name></decl>, <decl><type ref="prev"/><name>id_ecode</name></decl>, <decl><type ref="prev"/><name>term_ecode</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_monoid</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>red_ecode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id_ecode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term_ecode</name></expr></argument>, <argument><expr><name>reduce_opcode</name></expr></argument>,
        <argument><expr><name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// enumify the type and sparsity structure of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>acode</name> <init>= <expr><name><name>atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>   <comment type="line">// 0 to 14</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>asparsity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_enumify_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>asparsity</name></expr></argument>, <argument><expr><name>A_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the reduction rcode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// total rcode bits: 25</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rcode</name><operator>)</operator> <operator>=</operator>
                                               <comment type="line">// range        bits</comment>
                <comment type="line">// monoid</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>red_ecode</name></expr></argument>  , <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 22      5</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>id_ecode</name></expr></argument>   , <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 31      5</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>term_ecode</name></expr></argument> , <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 31      5</comment>

                <comment type="line">// type of the monoid</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>zcode</name></expr></argument>      ,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>

                <comment type="line">// type of A</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>acode</name></expr></argument>      ,  <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>|</operator>  <comment type="line">// 0 to 14      4</comment>

                <comment type="line">// sparsity structure of A</comment>
                <call><name>GB_LSHIFT</name> <argument_list>(<argument><expr><name>asparsity</name></expr></argument>  ,  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// 0 to 3       2</comment>
</block_content>}</block></function>

</unit>
