<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy3_slice_quick.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_slice_quick: construct a single task for GB_AxB_saxpy3</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// create a single task for C=A*B, for a single thread.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_saxpy3_slice_quick</name>
<parameter_list>(
    <comment type="line">// inputs</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// output matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix B</comment>
    <comment type="line">// outputs</comment>
    <parameter><decl><type><name>GB_saxpy3task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>SaxpyTasks_handle</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>SaxpyTasks_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ntasks</name></decl></parameter>,                    <comment type="line">// # of tasks created (coarse and fine)</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nfine</name></decl></parameter>,                     <comment type="line">// # of fine tasks created</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nthreads</name></decl></parameter>,                  <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ntasks</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nfine</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nthreads</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>SaxpyTasks_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_saxpy3task_struct</name> <modifier>*</modifier></type><name>SaxpyTasks</name> <init>= <expr><call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_saxpy3task_struct</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>SaxpyTasks_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>SaxpyTasks</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// clear SaxpyTasks</comment>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SaxpyTasks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create a single coarse Gustavson task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>start</name>   <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>end</name>     <operator>=</operator> <name>bnvec</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>vector</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>hsize</name>   <operator>=</operator> <name>cvlen</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Hi</name>      <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>      <comment type="line">// assigned later</comment>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Hf</name>      <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>      <comment type="line">// assigned later</comment>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Hx</name>      <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>      <comment type="line">// assigned later</comment>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>my_cjnz</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>         <comment type="line">// unused</comment>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>leader</name>  <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>team_size</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>SaxpyTasks_handle</name><operator>)</operator> <operator>=</operator> <name>SaxpyTasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>SaxpyTasks_size_handle</name><operator>)</operator> <operator>=</operator> <name>SaxpyTasks_size</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
