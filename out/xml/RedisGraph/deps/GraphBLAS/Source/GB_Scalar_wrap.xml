<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Scalar_wrap.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Scalar_wrap: wrap a C scalar inside a GraphBLAS scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This method construct a shallow statically-defined scalar, with no memory</comment>
<comment type="line">// allocations.  The scalar is iso full, with a single entry.</comment>

<comment type="line">// Note that since the header is statically allocated, it cannot be transfered</comment>
<comment type="line">// automatically to the GPU when using CUDA.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_scalar.h"</cpp:file></cpp:include>

<function><type><name>GrB_Scalar</name></type> <name>GB_Scalar_wrap</name>   <comment type="line">// create a new GrB_Scalar with one entry</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>,           <comment type="line">// GrB_Scalar to create</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,          <comment type="line">// type of GrB_Scalar to create</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Sx</name></decl></parameter>                <comment type="line">// becomes S-&gt;x, an array of size 1 * type-&gt;size</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the GrB_Scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_BOOL</name></expr> </then><else>: <expr><name>type</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>logger_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Sx</name></expr>   ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>Pending</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hyper_switch</name></name>  <operator>=</operator> <name>GxB_NEVER_HYPER</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <literal type="number">0.5</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>static_header</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>         <comment type="line">// OK: scalar wrap with a single entry</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
