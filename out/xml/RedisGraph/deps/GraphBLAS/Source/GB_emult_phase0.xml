<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_emult_phase0.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_emult_phase0: find vectors of C to compute for C=A.*B or C&lt;M&gt;=A.*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The eWise multiply of two matrices, C=A.*B, C&lt;M&gt;=A.*B, or C&lt;!M&gt;=A.*B starts</comment>
<comment type="line">// with this phase, which determines which vectors of C need to be computed.</comment>

<comment type="line">// On input, A and B are the two matrices being ewise multiplied, and M is the</comment>
<comment type="line">// optional mask matrix.  If present, it is not complemented.</comment>

<comment type="line">// The M, A, and B matrices are sparse or hypersparse.  C will be sparse</comment>
<comment type="line">// (if Ch is returned NULL) or hypersparse (if Ch is returned non-NULL).</comment>

<comment type="line">//      Ch: the vectors to compute in C.  Not allocated, but equal to either</comment>
<comment type="line">//      A-&gt;h, B-&gt;h, or M-&gt;h, or NULL if C is not hypersparse.</comment>

<comment type="line">//      C_to_A:  if A is hypersparse, and Ch is not A-&gt;h, then C_to_A [k] = kA</comment>
<comment type="line">//      if the kth vector j = Ch [k] is equal to Ah [kA].  If j does not appear</comment>
<comment type="line">//      in A, then C_to_A [k] = -1.  Otherwise, C_to_A is returned as NULL.</comment>
<comment type="line">//      C is always hypersparse in this case.</comment>

<comment type="line">//      C_to_B:  if B is hypersparse, and Ch is not B-&gt;h, then C_to_B [k] = kB</comment>
<comment type="line">//      if the kth vector j = Ch [k] is equal to Bh [kB].  If j does not appear</comment>
<comment type="line">//      in B, then C_to_B [k] = -1.  Otherwise, C_to_B is returned as NULL.</comment>
<comment type="line">//      C is always hypersparse in this case.</comment>

<comment type="line">//      C_to_M:  if M is hypersparse, and Ch is not M-&gt;h, then C_to_M [k] = kM</comment>
<comment type="line">//      if the kth vector j = GBH (Ch, k) is equal to Mh [kM].</comment>
<comment type="line">//      If j does not appear in M, then C_to_M [k] = -1.  Otherwise, C_to_M is</comment>
<comment type="line">//      returned as NULL.  C is always hypersparse in this case.</comment>

<comment type="line">// FUTURE:: exploit A==M, B==M, and A==B aliases</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORK (&amp;C_to_M, C_to_M_size) ;       \
    GB_FREE_WORK (&amp;C_to_A, C_to_A_size) ;       \
    GB_FREE_WORK (&amp;C_to_B, C_to_B_size) ;       \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_emult_phase0</name>     <comment type="line">// find vectors in C for C=A.*B or C&lt;M&gt;=A.*B</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_Cnvec</name></decl></parameter>,           <comment type="line">// # of vectors to compute in C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Ch_handle</name></decl></parameter>,  <comment type="line">// Ch is M-&gt;h, A-&gt;h, B-&gt;h, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Ch_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_M_handle</name></decl></parameter>,    <comment type="line">// C_to_M: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_M_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_A_handle</name></decl></parameter>,    <comment type="line">// C_to_A: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_A_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_B_handle</name></decl></parameter>,    <comment type="line">// C_to_B: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_B_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>C_sparsity</name></decl></parameter>,            <comment type="line">// sparsity structure of C</comment>
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// optional mask, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// M, A, and B can be jumbled for this phase</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Cnvec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch_size_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_A_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_B_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for emult phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for emult phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for emult phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>          
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_size_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_M_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_A_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_B_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get content of M, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name>  <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><operator>(</operator><name>Ah</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><operator>(</operator><name>Bh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Mnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Mnvec</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mh</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>M_is_hyper</name> <operator>=</operator> <operator>(</operator><name>Mh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine how to construct the vectors of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 8 cases to consider: A, B, M can each be hyper or sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Mask is present and not complemented</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (1) A hyper, B hyper, M hyper: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// Ch = smaller of Mh, Bh, Ah</comment>

                    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>Anvec</name></expr></argument>, <argument><expr><name>Bnvec</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>nvec</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>Mnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>nvec</name> <operator>==</operator> <name>Anvec</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>nvec</name> <operator>==</operator> <name>Bnvec</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else <comment type="line">// (nvec == Mnvec)</comment>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Mh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (2) A hyper, B hyper, M sparse: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// Ch = smaller of Ah, Bh</comment>
                    <if_stmt><if>if <condition>(<expr><name>Anvec</name> <operator>&lt;=</operator> <name>Bnvec</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (3) A hyper, B sparse, M hyper: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// Ch = smaller of Mh, Ah</comment>
                    <if_stmt><if>if <condition>(<expr><name>Anvec</name> <operator>&lt;=</operator> <name>Mnvec</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Mh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (4) A hyper, B sparse, M sparse: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (5) A sparse, B hyper, M hyper: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// Ch = smaller of Mh, Bh</comment>

                    <if_stmt><if>if <condition>(<expr><name>Bnvec</name> <operator>&lt;=</operator> <name>Mnvec</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Mh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (6) A sparse, B hyper, M sparse: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>

                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (7) A sparse, B sparse, M hyper: C hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Mh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// (8) A sparse, B sparse, M sparse: C sparse</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 4 cases to consider:  A, B can be hyper or sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Mask is not present, or present and complemented.</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// (1) A hyper, B hyper:  C hyper</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// Ch = smaller of Ah, Bh</comment>
                <if_stmt><if>if <condition>(<expr><name>Anvec</name> <operator>&lt;=</operator> <name>Bnvec</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// (2) A hyper, B sparse: C hyper</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// (3) A sparse, B hyper: C hyper</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>Bh</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch_size</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// (4) A sparse, B sparse: C sparse</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find Cnvec</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Cnvec</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is sparse</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// C is hypersparse; one of A, B, or M are hypersparse</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_hyper</name> <operator>||</operator> <name>B_is_hyper</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>Ah</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>Anvec</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>Bh</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>Bnvec</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// (Ch == Mh)</comment>
        <block>{<block_content> 
            <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>Mnvec</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C_to_M mapping</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>!=</operator> <name>Mh</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// allocate C_to_M</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C_to_M</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_to_M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// create the M-&gt;Y hyper_hash</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yx</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>M_hash_bits</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">// compute C_to_M</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>M_Yp</name></expr></argument>, <argument><expr><name>M_Yi</name></expr></argument>, <argument><expr><name>M_Yx</name></expr></argument>,
                <argument><expr><name>M_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C_to_M</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pM</name> <operator>&lt;</operator> <name>pM_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kM</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C_to_A mapping</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>!=</operator> <name>Ah</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// allocate C_to_A</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C_to_A</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_to_A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// create the A-&gt;Y hyper_hash</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">// compute C_to_A</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>,
                <argument><expr><name>A_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pA</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kA</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C_to_B mapping</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>!=</operator> <name>Bh</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// allocate C_to_B</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C_to_B</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_to_B</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// create the B-&gt;Y hyper_hash</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yx</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>B_hash_bits</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">// compute C_to_B</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>B_Yp</name></expr></argument>, <argument><expr><name>B_Yi</name></expr></argument>, <argument><expr><name>B_Yx</name></expr></argument>,
                <argument><expr><name>B_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pB</name> <operator>&lt;</operator> <name>pB_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kB</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name><operator>)</operator> <operator>=</operator> <name>Cnvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>Ch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_size_handle</name><operator>)</operator> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_M</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_M_size</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_A</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_A_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_B</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_B_size</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// The code below describes what the output contains:</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// A and B are always present</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>jlast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// C(:,j) is in the list, as the kth vector</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C will be constructed as sparse</comment>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C will be constructed as hypersparse</comment>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// vectors j in Ch are sorted, and in the range 0:n-1</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;</operator> <name>jlast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>jlast</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>

        <comment type="line">// see if A (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>C_to_A</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is hypersparse</comment>
            <macro><name>ASSERT</name> <argument_list>(<argument>A_is_hyper</argument>)</argument_list></macro>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kA</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kA</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kA</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is hypersparse, and Ch is a shallow copy of A-&gt;h</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// see if B (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>C_to_B</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// B is hypersparse</comment>
            <macro><name>ASSERT</name> <argument_list>(<argument>B_is_hyper</argument>)</argument_list></macro>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kB</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kB</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is hypersparse, and Ch is a shallow copy of A-&gt;h</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// see if M (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Ch is the same as Mh</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_M</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_to_M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// M is present and hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name> <init>= <expr><name><name>C_to_M</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kM</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kM</name> <operator>&lt;</operator> <name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kM</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jM</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// M is not present, or in sparse form</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
