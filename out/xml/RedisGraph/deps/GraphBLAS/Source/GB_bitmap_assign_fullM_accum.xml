<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_fullM_accum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_fullM_accum:  assign to C bitmap, M is bitmap or full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;M&gt;(I,J) += A           assign</comment>
<comment type="line">// C(I,J)&lt;M&gt; += A           subassign</comment>

<comment type="line">// C&lt;M,repl&gt;(I,J) += A      assign</comment>
<comment type="line">// C(I,J)&lt;M,repl&gt; += A      subassign</comment>

<comment type="line">// C&lt;!M&gt;(I,J) += A          assign</comment>
<comment type="line">// C(I,J)&lt;!M&gt; += A          subassign</comment>

<comment type="line">// C&lt;!M,repl&gt;(I,J) += A     assign</comment>
<comment type="line">// C(I,J)&lt;!M,repl&gt; += A     subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           present, bitmap or full (not hypersparse or sparse)</comment>
<comment type="line">// Mask_comp:   true or false</comment>
<comment type="line">// Mask_struct: true or false</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign, row assign, col assign, or subassign</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_assign_fullM_accum</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// I index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// J index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix, which is present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// true for !M, false for M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>assign_kind</name></decl></parameter>,      <comment type="line">// row assign, col assign, assign, or subassign</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit1"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
        <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, M full, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for bitmap assign, M full, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign, M full, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <expr_stmt><expr><name>GB_GET_M</name>
    <name>GB_GET_A_AND_SCALAR</name>
    <name>GB_GET_ACCUM_FOR_BITMAP</name></expr></expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// to get the effective value of the mask entry mij</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_MIJ</name><parameter_list>(<parameter><type><name>mij</name></type></parameter>,<parameter><type><name>pM</name></type></parameter>)</parameter_list></cpp:macro>                                  \
        <cpp:value>bool mij = (GBB (Mb, pM) &amp;&amp; GB_mcast (Mx, pM, msize)) ^ Mask_comp ;</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assignment phase</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar assignment: C&lt;M or !M&gt;(I,J) += scalar</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// for all IxJ</comment>
        <comment type="line">//  get the effective value of the mask, via GB_GET_MIJ:</comment>
        <comment type="line">//      for row assign: get mij = m(jC,0)</comment>
        <comment type="line">//      for col assign: get mij = m(iC,0)</comment>
        <comment type="line">//      for assign: get mij = M(iC,jC)</comment>
        <comment type="line">//      for subassign: get mij = M(i,j)</comment>
        <comment type="line">//      if complemented: mij = !mij</comment>
        <comment type="line">//  if mij == 1:</comment>
        <comment type="line">//      if Cb(p) == 0</comment>
        <comment type="line">//          Cx(p) = scalar</comment>
        <comment type="line">//          Cb(p) = 1       // C(iC,jC) is now present, insert</comment>
        <comment type="line">//      else // if Cb(p) == 1:</comment>
        <comment type="line">//          Cx(p) += scalar // C(iC,jC) still present, updated</comment>

        <comment type="line">// if C FULL: no change, just cb = GBB (Cb,pC)</comment>

        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                  \
        <cpp:value>{                                           \
            int64_t pM = GB_GET_pM ;                \
            GB_GET_MIJ (mij, pM) ;                  \
            if (mij)                                \
            {                                       \
                int8_t cb = Cb [pC] ;               \
                if (cb == 0)                        \
                {                                   \
                    <comment type="block">/* Cx [pC] = scalar */</comment>          \
                    GB_ASSIGN_SCALAR (pC) ;         \
                    Cb [pC] = 1 ;                   \
                    task_cnvals++ ;                 \
                }                                   \
                else <comment type="block">/* (cb == 1) */</comment>                \
                {                                   \
                    <comment type="block">/* Cx [pC] += scalar */</comment>         \
                    GB_ACCUM_SCALAR (pC) ;          \
                }                                   \
            }                                       \
        }</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>assign_kind</name> <operator>==</operator> <name>GB_ASSIGN</name> <operator>||</operator> <name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <switch>switch <condition>(<expr><name>assign_kind</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_ASSIGN</name></expr> :</case> 
                <comment type="line">// C&lt;M&gt;(I,J) += scalar where M has the same size as C</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>pC</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <case>case <expr><name>GB_SUBASSIGN</name></expr> :</case> 
                <comment type="line">// C(I,J)&lt;M&gt; += scalar where M has the same size as A</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>pA</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// matrix assignment: C&lt;M or !M&gt;(I,J) += A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// for all entries aij in A (A can be hyper, sparse, bitmap, or full)</comment>
        <comment type="line">//     get the effective value of the mask, via GB_GET_MIJ:</comment>
        <comment type="line">//         for row assign: get mij = m(jC,0)</comment>
        <comment type="line">//         for col assign: get mij = m(iC,0)</comment>
        <comment type="line">//         for assign: get mij = M(iC,jC)</comment>
        <comment type="line">//         for subassign: get mij = M(i,j)</comment>
        <comment type="line">//         if complemented: mij = !mij</comment>
        <comment type="line">//     if mij == 1:</comment>
        <comment type="line">//         if Cb(p) == 0</comment>
        <comment type="line">//             Cx(p) = aij</comment>
        <comment type="line">//             Cb(p) = 1       // C(iC,jC) is now present, insert</comment>
        <comment type="line">//             task_cnvals++</comment>
        <comment type="line">//         else // if Cb(p) == 1:</comment>
        <comment type="line">//             Cx(p) += aij    // C(iC,jC) still present, updated</comment>

        <comment type="line">// if C FULL: no change, just cb = GBB (Cb,pC)</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                  \
        <cpp:value>{                                           \
            int64_t pM = GB_GET_pM ;                \
            GB_GET_MIJ (mij, pM) ;                  \
            if (mij)                                \
            {                                       \
                int8_t cb = Cb [pC] ;               \
                if (cb == 0)                        \
                {                                   \
                    <comment type="block">/* Cx [pC] = Ax [pA] */</comment>         \
                    GB_ASSIGN_AIJ (pC, pA) ;        \
                    Cb [pC] = 1 ;                   \
                    task_cnvals++ ;                 \
                }                                   \
                else <comment type="block">/* (cb == 1) */</comment>                \
                {                                   \
                    <comment type="block">/* Cx [pC] += Ax [pA] */</comment>        \
                    GB_ACCUM_AIJ (pC, pA) ;         \
                }                                   \
            }                                       \
        }</cpp:value></cpp:define>

        <switch>switch <condition>(<expr><name>assign_kind</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_ROW_ASSIGN</name></expr> :</case> 
                <comment type="line">// C&lt;m&gt;(i,J) += A where m is a 1-by-C-&gt;vdim row vector</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>jC</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <case>case <expr><name>GB_COL_ASSIGN</name></expr> :</case> 
                <comment type="line">// C&lt;m&gt;(I,j) += A where m is a C-&gt;vlen-by-1 column vector</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>iC</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <case>case <expr><name>GB_ASSIGN</name></expr> :</case> 
                <comment type="line">// C&lt;M&gt;(I,J) += A where M has the same size as C</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>pC</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <case>case <expr><name>GB_SUBASSIGN</name></expr> :</case> 
                <comment type="line">// C(I,J)&lt;M&gt; += A where M has the same size as A</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_pM</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_pM</name></cpp:macro> <cpp:value>(iA + jA * nI)</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>
                <break>break ;</break>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C_replace phase</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if C FULL: use two passes: first pass checks if any</comment>
        <comment type="line">// entry must be deleted.  If none: do nothing.  Else:  change C</comment>
        <comment type="line">// to full and do 2nd pass as below.</comment>

        <comment type="line">// for row assign: for all entries in C(i,:)</comment>
        <comment type="line">// for col assign: for all entries in C(:,j)</comment>
        <comment type="line">// for assign: for all entries in C(:,:)</comment>
        <comment type="line">// for subassign: for all entries in C(I,J)</comment>
        <comment type="line">//      get effective value mij of the mask via GB_GET_MIJ</comment>
        <comment type="line">//      if mij == 0 set Cb(p) = 0</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>             \
        <cpp:value>{                                   \
            if (!mij)                       \
            {                               \
                int8_t cb = Cb [pC] ;       \
                Cb [pC] = 0 ;               \
                task_cnvals -= (cb == 1) ;  \
            }                               \
        }</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_template.c"</cpp:file></cpp:include>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final C for bitmap assign, M full, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
