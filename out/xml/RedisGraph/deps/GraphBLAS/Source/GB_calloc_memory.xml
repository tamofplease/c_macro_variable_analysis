<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_calloc_memory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_calloc_memory: wrapper for calloc (actually uses malloc and memset)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A wrapper for calloc.  Space is set to zero.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_calloc_helper:  malloc/memset to allocate an initialized block</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name> <modifier>*</modifier></type><name>GB_calloc_helper</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,           <comment type="line">// on input: # of bytes requested</comment>
                            <comment type="line">// on output: # of bytes actually allocated</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// determine the next higher power of 2</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size_requested</name> <init>= <expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// if available, get the block from the pool</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_Global_free_pool_limit_get</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// round up the size to the nearest power of two</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_Global_free_pool_get</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"calloc from pool: %p %ld\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// no block in the free_pool, so allocate it</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_Global_malloc_function</name> <argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hard calloc %p %ld\n"</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GB_Global_free_pool_dump</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_Global_memtable_dump</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// clear the block of memory with a parallel memset</comment>
        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size_requested</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_calloc_memory</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>void</name> <modifier>*</modifier></type><name>GB_calloc_memory</name>      <comment type="line">// pointer to allocated block of memory</comment>
<parameter_list>(
    <parameter><decl><type><name>size_t</name></type> <name>nitems</name></decl></parameter>,          <comment type="line">// number of items to allocate</comment>
    <parameter><decl><type><name>size_t</name></type> <name>size_of_item</name></decl></parameter>,    <comment type="line">// sizeof each item</comment>
    <comment type="line">// output</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size_allocated</name></decl></parameter>, <comment type="line">// # of bytes actually allocated</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>size_allocated</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl> ;</decl_stmt>

    <comment type="line">// make sure at least one item is allocated</comment>
    <expr_stmt><expr><name>nitems</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nitems</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// make sure at least one byte is allocated</comment>
    <expr_stmt><expr><name>size_of_item</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_size_t_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>nitems</name></expr></argument>, <argument><expr><name>size_of_item</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name>nitems</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>size_of_item</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// overflow</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size_allocated</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the memory block</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_Global_malloc_tracking_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// for memory usage testing only</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// brutal memory debug; pretend to fail if (count-- &lt;= 0).</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>pretend_to_fail</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_Global_malloc_debug_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pretend_to_fail</name> <operator>=</operator> <call><name>GB_Global_malloc_debug_count_decrement</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// allocate the memory</comment>
        <if_stmt><if>if <condition>(<expr><name>pretend_to_fail</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_calloc_helper</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// normal use, in production</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_calloc_helper</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>size_allocated</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>p</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>size</name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
