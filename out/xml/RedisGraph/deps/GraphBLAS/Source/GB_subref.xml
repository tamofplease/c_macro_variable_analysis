<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subref.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subref: C = A(I,J)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C=A(I,J), either symbolic or numeric.  In a symbolic extraction, Cx [p] is</comment>
<comment type="line">// not the value of A(i,j), but its position in Ai,Ax.  That is, pA = Cx [p]</comment>
<comment type="line">// means that the entry at position p in C is the same as the entry in A at</comment>
<comment type="line">// position pA.  In this case, Cx has a type of int64_t.</comment>

<comment type="line">// Numeric extraction: C is iso if A is iso or C_iso is true on input</comment>

<comment type="line">//      Sparse submatrix reference, C = A(I,J), extracting the values.  This is</comment>
<comment type="line">//      an internal function called by GB_extract with symbolic==false, which</comment>
<comment type="line">//      does the work of the user-callable GrB_*_extract methods.  It is also</comment>
<comment type="line">//      called by GB_assign to extract the submask.  No pending tuples or</comment>
<comment type="line">//      zombies appear in A.</comment>

<comment type="line">// Symbolic extraction:  C is never iso</comment>

<comment type="line">//      Sparse submatrix reference, C = A(I,J), extracting the pattern, not the</comment>
<comment type="line">//      values.  For the symbolic case, this function is called only by</comment>
<comment type="line">//      GB_subassign_symbolic.  Symbolic extraction creates a matrix C with the</comment>
<comment type="line">//      same pattern (C-&gt;p and C-&gt;i) as numeric extraction, but with different</comment>
<comment type="line">//      values, C-&gt;x.  For numeric extracion if C(inew,jnew) = A(i,j), the</comment>
<comment type="line">//      value of A(i,j) is copied into C(i,j).  For symbolic extraction, its</comment>
<comment type="line">//      *pointer* is copied into C(i,j).  Suppose an entry A(i,j) is held in</comment>
<comment type="line">//      Ai [pa] and Ax [pa], and it appears in the output matrix C in Ci [pc]</comment>
<comment type="line">//      and Cx [pc].  Then the two methods differ as follows:</comment>

<comment type="line">//          this is the same:</comment>

<comment type="line">//          i = Ai [pa] ;           // index i of entry A(i,j)</comment>
<comment type="line">//          aij = Ax [pa] ;         // value of the entry A(i,j)</comment>
<comment type="line">//          Ci [pc] = inew ;        // index inew of C(inew,jnew)</comment>

<comment type="line">//          this is different:</comment>

<comment type="line">//          Cx [pc] = aij ;         // for numeric extraction</comment>
<comment type="line">//          Cx [pc] = pa ;          // for symbolic extraction</comment>

<comment type="line">//      This function is called with symbolic==true by only by</comment>
<comment type="line">//      GB_subassign_symbolic, which uses it to extract the pattern of C(I,J),</comment>
<comment type="line">//      for the submatrix assignment C(I,J)=A.  In this case, this function</comment>
<comment type="line">//      needs to deal with zombie entries.  GB_subassign_symbolic uses this</comment>
<comment type="line">//      function on its C matrix, which is called A here because it is not</comment>
<comment type="line">//      modified here.</comment>

<comment type="line">//      Reading a zombie entry:  A zombie entry A(i,j) has been marked by</comment>
<comment type="line">//      flipping its index.  The value of a zombie is not important, just its</comment>
<comment type="line">//      presence in the pattern.  All zombies have been flipped (i &lt; 0), and</comment>
<comment type="line">//      all regular entries are not flipped (i &gt;= 0).  Zombies are entries that</comment>
<comment type="line">//      have been marked for deletion but have not been removed from the matrix</comment>
<comment type="line">//      yet, since it's more efficient to delete zombies all at once rather</comment>
<comment type="line">//      than one at a time.</comment>

<comment type="line">//      The symbolic case is zombie-agnostic, in the sense that it does not</comment>
<comment type="line">//      delete them.  It treats them like regular entries.  However, their</comment>
<comment type="line">//      normal index must be used, not their flipped indices.  The output</comment>
<comment type="line">//      matrix C contains all unflipped indices, and its references to zombies</comment>
<comment type="line">//      and regular entries are identical.  Zombies in A are dealt with later.</comment>
<comment type="line">//      They cannot be detected in the output C matrix, but they can be</comment>
<comment type="line">//      detected in A.  Since pa = Cx [pc] holds the position of the entry in</comment>
<comment type="line">//      A, the entry is a zombie if Ai [pa] has been flipped.</comment>

<comment type="line">//      For symbolic extractionm, pending tuples can appear in the input matrix</comment>
<comment type="line">//      A.  These are ignored.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
    GB_FREE_WORK (&amp;Ap_start, Ap_start_size) ;   \
    GB_FREE_WORK (&amp;Ap_end, Ap_end_size) ;       \
    GB_FREE_WORK (&amp;Mark, Mark_size) ;           \
    GB_FREE_WORK (&amp;Inext, Inext_size) ;         \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>             \
<cpp:value>{                               \
    GB_FREE (&amp;Cp, Cp_size) ;    \
    GB_FREE (&amp;Ch, Ch_size) ;    \
    GB_FREE_WORKSPACE ;         \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_subref</name>              <comment type="line">// C = A(I,J): either symbolic or numeric</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix, static header</comment>
    <comment type="line">// input, not modified</comment>
    <parameter><decl><type><name>bool</name></type> <name>C_iso</name></decl></parameter>,                 <comment type="line">// if true, return C as iso, regardless of A </comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// requested format of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,           <comment type="line">// length of I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,           <comment type="line">// length of J, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>symbolic</name></decl></parameter>,        <comment type="line">// if true, construct C as symbolic</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for C=A(I,J) subref"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// A is sorted, below, if jumbled on input</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if C is iso and get its iso value</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>symbolic</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_INT64</name></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>symbolic</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// symbolic extraction never results in an iso matrix</comment>
        <expr_stmt><expr><name>C_iso</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// determine if C is iso and get the iso scalar</comment>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>C_iso</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso subref) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle bitmap and full cases</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is constructed with same sparsity as A (bitmap or full)</comment>
        <return>return <expr><operator>(</operator><call><name>GB_bitmap_subref</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>,
            <argument><expr><name>symbolic</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Cp</name>       <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Cp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ch</name>       <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ap_start</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_start_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ap_end</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_end_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Mark</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Mark_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Inext</name>    <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Inext_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier></type><name>TaskList</name>      <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nI</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nJ</name></decl>, <decl><type ref="prev"/><name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>Cnvec_nonempty</name></decl>, <decl><type ref="prev"/><name>ndupl</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>post_sort</name></decl>, <decl><type ref="prev"/><name>need_qsort</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Ikind</name></decl>, <decl><type ref="prev"/><name>ntasks</name></decl>, <decl><type ref="prev"/><name>nthreads</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure A is unjumbled</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Ensure input matrix is not jumbled.  Zombies are OK.</comment>
    <comment type="line">// Pending tuples are OK (and ignored) for symbolic extraction.</comment>
    <comment type="line">// GB_subref_phase0 may build the hyper_hash.</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase0: find vectors for C=A(I,J), and I,J properties</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref_phase0</name> <argument_list>(
        <comment type="line">// computed by phase0:</comment>
        <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_start_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_end_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>need_qsort</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nI</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJ</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase1: split C=A(I,J) into tasks for phase2 and phase3</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// This phase also inverts I if needed.</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref_slice</name> <argument_list>(
        <comment type="line">// computed by phase1:</comment>
        <argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>post_sort</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Mark</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mark_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Inext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Inext_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ndupl</name></expr></argument>,
        <comment type="line">// computed by phase0:</comment>
        <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>need_qsort</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: count the number of entries in each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref_phase2</name> <argument_list>(
        <comment type="line">// computed by phase2:</comment>
        <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cnvec_nonempty</name></expr></argument>,
        <comment type="line">// computed by phase1:</comment>
        <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Mark</name></expr></argument>, <argument><expr><name>Inext</name></expr></argument>, <argument><expr><name>ndupl</name></expr></argument>,
        <comment type="line">// computed by phase0:</comment>
        <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>need_qsort</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>symbolic</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase3: compute the entries (indices and values) in each vector of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref_phase3</name> <argument_list>(
        <comment type="line">// computed by phase3:</comment>
        <argument><expr><name>C</name></expr></argument>,
        <comment type="line">// from phase2:</comment>
        <argument><expr><operator>&amp;</operator><name>Cp</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>, <argument><expr><name>Cnvec_nonempty</name></expr></argument>,
        <comment type="line">// from phase1:</comment>
        <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>post_sort</name></expr></argument>, <argument><expr><name>Mark</name></expr></argument>, <argument><expr><name>Inext</name></expr></argument>, <argument><expr><name>ndupl</name></expr></argument>,
        <comment type="line">// from phase0:</comment>
        <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>need_qsort</name></expr></argument>,
        <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>,
        <comment type="line">// from the iso test above:</comment>
        <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>symbolic</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Cp and Ch have been imported into C-&gt;p and C-&gt;h, or freed if phase3</comment>
    <comment type="line">// fails.  Either way, Cp and Ch are set to NULL so that they cannot be</comment>
    <comment type="line">// freed here (except by freeing C itself).</comment>

    <comment type="line">// free workspace</comment>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C can be returned jumbled, even if A is not jumbled</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for C=A(I,J)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
