<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Matrix_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Matrix_new: create a new matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The new matrix is nrows-by-ncols, with no entries in it.  Default format for</comment>
<comment type="line">// an empty matrix is hypersparse CSC: A-&gt;p is size 2 and all zero, A-&gt;h is</comment>
<comment type="line">// size 1, A-&gt;plen is 1, and contents A-&gt;x and A-&gt;i are NULL.  If this method</comment>
<comment type="line">// fails, *A is set to NULL.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Matrix_new</name>          <comment type="line">// create a new matrix with no entries</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,              <comment type="line">// handle of matrix to create</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,              <comment type="line">// type of matrix to create</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,            <comment type="line">// matrix dimension is nrows-by-ncols</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>ncols</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// problem too large</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name></decl>, <decl><type ref="prev"/><name>vdim</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_csc</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ncols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// n-by-1 matrices are always held by column, including 1-by-1</comment>
        <expr_stmt><expr><name>A_is_csc</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nrows</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// 1-by-n matrices (except 1-by-1) are always held by row</comment>
        <expr_stmt><expr><name>A_is_csc</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// m-by-n (including 0-by-0) with m != and n != use the global setting</comment>
        <expr_stmt><expr><name>A_is_csc</name> <operator>=</operator> <call><name>GB_Global_is_csc_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_is_csc</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>nrows</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>ncols</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>ncols</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>nrows</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><call><name>GB_new</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <comment type="line">// auto sparsity, new header</comment>
        <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>, <argument><expr><name>A_is_csc</name></expr></argument>, <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>,
        <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
