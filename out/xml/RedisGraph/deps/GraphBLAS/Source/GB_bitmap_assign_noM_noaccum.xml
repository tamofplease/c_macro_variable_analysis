<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_noM_noaccum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_noM_noaccum:  assign to C bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;&gt;(I,J) = A             assign</comment>
<comment type="line">// C(I,J)&lt;&gt; = A             subassign</comment>

<comment type="line">// C&lt;repl&gt;(I,J) = A         assign</comment>
<comment type="line">// C(I,J)&lt;repl&gt; = A         subassign</comment>

<comment type="line">// C&lt;!&gt;(I,J) = A            assign</comment>
<comment type="line">// C(I,J)&lt;!&gt; = A            subassign</comment>

<comment type="line">// C&lt;!,repl&gt;(I,J) = A       assign</comment>
<comment type="line">// C(I,J)&lt;!,repl&gt; = A       subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           none</comment>
<comment type="line">// Mask_comp:   true or false</comment>
<comment type="line">// Mask_struct: true or false (ignored)</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       not present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign, row assign, col assign, or subassign</comment>

<comment type="line">// If M is not present and Mask_comp is true, then an empty mask is</comment>
<comment type="line">// complemented.  This case is handled by GB_assign_prep by calling this</comment>
<comment type="line">// method with no matrix A, but with a scalar (which is unused).  However,</comment>
<comment type="line">// for GB_ASSIGN, C&lt;!,replace&gt;(I,J)=anything clears all of C, regardless of</comment>
<comment type="line">// I and J.  In that case, GB_assign_prep calls GB_clear instead.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_bitmap_assign_noM_noaccum</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// I index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// J index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
<comment type="line">//  const GrB_Matrix M,         // mask matrix, not present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// true for !M, false for M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
<comment type="line">//  const GrB_BinaryOp accum,   // not present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>assign_kind</name></decl></parameter>,      <comment type="line">// row assign, col assign, assign, or subassign</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit6"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign: noM, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign: noM, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <macro><name>GB_GET_A_AND_SCALAR</name></macro>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C_replace phase</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>assign_kind</name> <operator>==</operator> <name>GB_ASSIGN</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// for assign: set all Cb(:,:) to zero</comment>
            <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>Cb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnzmax</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cnvals</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// for row assign: set Cb(i,:) to zero</comment>
            <comment type="line">// for col assign: set Cb(:,j) to zero</comment>
            <comment type="line">// for subassign: set all Cb(I,J) to zero</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_ASSIGN_CASE</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                 \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                Cb [pC] = 0 ;                       \
                task_cnvals -= (cb == 1) ;          \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assignment phase</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// scalar assignment: C(I,J) = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// for all IxJ</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                <comment type="block">/* Cx [pC] = scalar */</comment>              \
                GB_ASSIGN_SCALAR (pC) ;             \
                Cb [pC] = 1 ;                       \
                task_cnvals += (cb == 0) ;          \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// matrix assignment: C(I,J) = A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// delete all entries in C(I,J)</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>          \
                <cpp:value>{                                       \
                    int8_t cb = Cb [pC] ;               \
                    Cb [pC] = 0 ;                       \
                    task_cnvals -= (cb == 1) ;          \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// for all entries aij in A (A hyper, sparse, bitmap, or full)</comment>
            <comment type="line">//      Cx(p) = aij     // C(iC,jC) inserted or updated</comment>
            <comment type="line">//      Cb(p) = 1</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>              \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                <comment type="block">/* Cx [pC] = Ax [pA] */</comment>             \
                GB_ASSIGN_AIJ (pC, pA) ;            \
                Cb [pC] = 1 ;                       \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>

            <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final C for bitmap assign: noM, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
