<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_unpack_HyperHash.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_unpack_HyperHash: unpack the A-&gt;Y hyper_hash from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GxB_unpack_HyperHash unpacks the hyper_hash from the hypersparse matrix A.</comment>
<comment type="line">// Normally, this method is called immediately before calling one of the four</comment>
<comment type="line">// methods GxB_Matrix_(export/unpack)_Hyper(CSR/CSC).  For example, to unpack</comment>
<comment type="line">// then pack a hypersparse CSC matrix:</comment>

<comment type="line">//      GrB_Matrix Y = NULL ;</comment>
<comment type="line">//</comment>
<comment type="line">//      // to unpack all of A:</comment>
<comment type="line">//      GxB_unpack_HyperHash (A, &amp;Y, desc) ;    // first unpack A-&gt;Y into Y</comment>
<comment type="line">//      GxB_Matrix_unpack_HyperCSC (A,          // then unpack the rest of A</comment>
<comment type="line">//          &amp;Ap, &amp;Ah, &amp;Ai, &amp;Ax, &amp;Ap_size, &amp;Ah_size, &amp;Ai_size, &amp;Ax_size,</comment>
<comment type="line">//          &amp;iso, &amp;nvec, &amp;jumbled, descriptor) ;</comment>
<comment type="line">//</comment>
<comment type="line">//      // use the unpacked contents of A here, but do not change Ah or nvec.</comment>
<comment type="line">//      ...</comment>
<comment type="line">//      </comment>
<comment type="line">//      // to pack the data back into A:</comment>
<comment type="line">//      GxB_Matrix_pack_HyperCSC (A, ...) ;     // pack most of A, except A-&gt;Y </comment>
<comment type="line">//      GxB_pack_HyperHash (A, &amp;Y, desc) ;      // then pack A-&gt;Y</comment>

<comment type="line">// The same process is used with GxB_Matrix_unpack_HyperCSR,</comment>
<comment type="line">// and the GxB_Matrix_export_Hyper* and GxB_Matrix_import_Hyper* methods.</comment>

<comment type="line">// If A is not hypersparse on input to GxB_unpack_HyperHash, or if A is</comment>
<comment type="line">// hypersparse but does yet not have a hyper_hash, then Y is returned as NULL.</comment>
<comment type="line">// This is not an error condition, and GrB_SUCCESS is returned.  The hyper_hash</comment>
<comment type="line">// of a hypersparse matrix A is a matrix that provides quick access to the</comment>
<comment type="line">// inverse of Ah.  It is not always needed and may not be present.  It is left</comment>
<comment type="line">// as pending work to be computed when needed.</comment>

<comment type="line">// GrB_Matrix_wait (A, GrB_MATERIALIZE) will ensure that the hyper_hash is</comment>
<comment type="line">// constructed, if A is hypersparse.</comment>

<comment type="line">// If Y is moved from A and returned as non-NULL to the caller, then it is</comment>
<comment type="line">// the responsibility of the user application to free it, or to re-pack it back</comment>
<comment type="line">// into A via GxB_pack_HyperHash, as shown in the example above.</comment>

<comment type="line">// If this method is called to remove the hyper_hash Y from the hypersparse</comment>
<comment type="line">// matrix A, and then GrB_Matrix_wait (A, GrB_MATERIALIZE) is called, a new</comment>
<comment type="line">// hyper_hash matrix is constructed for A.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GxB_unpack_HyperHash</name>       <comment type="line">// move A-&gt;Y into Y</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                   <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>,                  <comment type="line">// hyper_hash matrix to move from A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// unused</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs and get the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_unpack_HyperHash (A, &amp;Y, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_unpack_HyperHash"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><operator>*</operator><name>Y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unpack the hyper_hash matrix Y from A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Y</name><operator>)</operator> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
