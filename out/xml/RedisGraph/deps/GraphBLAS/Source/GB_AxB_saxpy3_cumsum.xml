<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy3_cumsum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_cumsum: finalize nnz(C(:,j)) and find cumulative sum of Cp</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// phase3: fine tasks finalize their computation nnz(C(:,j))</comment>
<comment type="line">// phase4: cumulative sum of C-&gt;p</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_AxB_saxpy3_cumsum</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// finalize C-&gt;p</comment>
    <parameter><decl><type><name>GB_saxpy3task_struct</name> <modifier>*</modifier></type><name>SaxpyTasks</name></decl></parameter>, <comment type="line">// list of tasks, and workspace</comment>
    <parameter><decl><type><name>int</name></type> <name>nfine</name></decl></parameter>,                  <comment type="line">// number of fine tasks</comment>
    <parameter><decl><type><name>double</name></type> <name>chunk</name></decl></parameter>,               <comment type="line">// chunk size</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>,               <comment type="line">// number of threads</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase3: count nnz(C(:,j)) for fine tasks</comment>
    <comment type="line">//==========================================================================</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// int64_t kk = SaxpyTasks [taskid].vector ;</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>team_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>team_size</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>leader</name>    <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>leader</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>my_teamid</name> <init>= <expr><name>taskid</name> <operator>-</operator> <name>leader</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>my_cjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// phase3: fine Gustavson task, C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Hf [i] == 2 if C(i,j) is an entry in C(:,j)</comment>

            <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hf</name></decl> ;</decl_stmt>
            <expr_stmt><expr><name>Hf</name> <operator>=</operator> <operator>(</operator><name>int8_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>my_teamid</name></expr></argument>, <argument><expr><name>team_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>my_cjnz</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// phase3: fine hash task, C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// (Hf [hash] &amp; 3) == 2 if C(i,j) is an entry in C(:,j),</comment>
            <comment type="line">// and the index i of the entry is (Hf [hash] &gt;&gt; 2) - 1.</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mystart</name></decl>, <decl><type ref="prev"/><name>myend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>mystart</name></expr></argument>, <argument><expr><name>myend</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>, <argument><expr><name>my_teamid</name></expr></argument>, <argument><expr><name>team_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>hash</name> <init>= <expr><name>mystart</name></expr></init></decl> ;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>myend</name></expr> ;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>my_cjnz</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name> <operator>=</operator> <name>my_cjnz</name></expr> ;</expr_stmt>   <comment type="line">// count my nnz(C(:,j))</comment>
    </block_content>}</block></for>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase4: compute Cp with cumulative sum</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sum nnz (C (:,j)) for fine tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// SaxpyTasks [taskid].my_cjnz is the # of unique entries found in C(:,j) by</comment>
    <comment type="line">// that task.  Sum these terms to compute total # of entries in C(:,j).</comment>

    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>my_cjnz</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>+=</operator> <name>my_cjnz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>my_cjnz</name> <operator>&lt;=</operator> <name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// cumulative sum for Cp (fine and coarse tasks)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Cp [kk] is now nnz (C (:,j)), for all vectors j, whether computed by</comment>
    <comment type="line">// fine tasks or coarse tasks, and where j == GBH (Bh, kk) </comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// cumulative sum of nnz (C (:,j)) for each team of fine tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>taskid</name> <operator>==</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>leader</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cjnz_sum</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <comment type="line">// also find the max (C (:,j)) for any fine hash tasks</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_Gustavson</name></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>my_cjnz</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name> <operator>=</operator> <name>cjnz_sum</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cjnz_sum</name> <operator>+=</operator> <name>my_cjnz</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
