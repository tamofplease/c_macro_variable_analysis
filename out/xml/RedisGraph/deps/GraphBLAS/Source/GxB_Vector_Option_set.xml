<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Vector_Option_set.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Vector_Option_set: set an option in a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GxB_Vector_Option_set</name>      <comment type="line">// set an option in a vector</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>v</name></decl></parameter>,                   <comment type="line">// descriptor to modify</comment>
    <parameter><decl><type><name>GxB_Option_Field</name></type> <name>field</name></decl></parameter>,         <comment type="line">// option to change</comment>
    <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                             <comment type="line">// value to change it to</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"GxB_Vector_Option_set (v, field, value)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_set (vector option)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_VECTOR_OK</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v to set option"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set the vector option</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GxB_BITMAP_SWITCH</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>bitmap_switch</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>bitmap_switch</name></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_SPARSITY_CONTROL</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator>
                    <call><name>GB_sparsity_control</name> <argument_list>(<argument><expr><name>sparsity_control</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <default>default :</default> 

            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// conform the vector to its new desired sparsity structure</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_VECTOR_OK</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="string">"v set"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
