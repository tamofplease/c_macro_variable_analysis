<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_sparse_to_bitmap_test.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_sparse_to_bitmap_test: test conversion of hyper/sparse to bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns true if a sparse or hypersparse matrix should be converted to bitmap</comment>
<comment type="line">// (or full if all entries are present, but in that case, this function is not</comment>
<comment type="line">// called).  Returns false if the matrix should stay hypersparse/sparse.</comment>

<comment type="line">// See GB_convert_bitmap_to_sparse_test for a description of this rule.</comment>
<comment type="line">// These default rules may change in future releases of SuiteSparse:GraphBLAS.</comment>

<comment type="line">// This rule is not used if all entries are present.  In that case, the matrix</comment>
<comment type="line">// becomes full, not bitmap, assuming the full format permitted by the sparsity</comment>
<comment type="line">// control setting of the matrix.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_convert_sparse_to_bitmap_test</name>    <comment type="line">// test for hyper/sparse to bitmap</comment>
<parameter_list>(
    <parameter><decl><type><name>float</name></type> <name>bitmap_switch</name></decl></parameter>,    <comment type="line">// A-&gt;bitmap_switch</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>anz</name></decl></parameter>,            <comment type="line">// # of entries in A = GB_nnz (A)</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>vlen</name></decl></parameter>,           <comment type="line">// A-&gt;vlen</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>vdim</name></decl></parameter>            <comment type="line">// A-&gt;vdim</comment>
)</parameter_list>
<block>{<block_content> 
    <comment type="line">// current number of entries in the matrix or vector</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>nnz</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>anz</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// maximum number of entries in the matrix or vector</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>nnz_dense</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>vlen</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>vdim</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// A should switch to bitmap if the following condition is true:</comment>
    <return>return <expr><operator>(</operator><name>nnz</name> <operator>&gt;</operator> <name>bitmap_switch</name> <operator>*</operator> <name>nnz_dense</name> <operator>&amp;&amp;</operator> <name>nnz_dense</name> <operator>&lt;</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>GB_NMAX</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
