<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_08n_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_08n_slice: slice the entries and vectors for GB_subassign_08n</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Constructs a set of tasks to compute C for GB_subassign_08n, based on</comment>
<comment type="line">// slicing two input matrices (A and M).  Fine tasks must also find their</comment>
<comment type="line">// location in their vector C(:,jC).</comment>

<comment type="line">// This method is used only by GB_subassign_08n.  New zombies cannot be</comment>
<comment type="line">// created, since no entries are deleted.  Old zombies can be brought back to</comment>
<comment type="line">// life, however.</comment>

        <comment type="line">//  =====================       ==============</comment>
        <comment type="line">//  M   cmp rpl acc A   S       method: action</comment>
        <comment type="line">//  =====================       ==============</comment>
        <comment type="line">//  M   -   -   +   A   -       08n:  C(I,J)&lt;M&gt; += A, no S</comment>

<comment type="line">// C, M, A: not bitmap.  C can be full.</comment>

<comment type="line">// If C is bitmap, then GB_bitmap_assign_M_accum is used instead.</comment>
<comment type="line">// If M or A are bitmap, but C is sparse or hyper, then Method 08s is used</comment>
<comment type="line">// instead (which handles both M and A as bitmap).  As a result, this method</comment>
<comment type="line">// does not need to consider the bitmap case for C, M, or A.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>
<comment type="line">// Npending is set to NULL by the GB_EMPTY_TASKLIST macro, but unused here.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_08n_slice</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs, of size max_ntasks</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_Znvec</name></decl></parameter>,               <comment type="line">// # of vectors to compute in Z</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Zh_handle</name></decl></parameter>,  <comment type="line">// Zh_shallow is A-&gt;h, M-&gt;h, or NULL</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Z_to_A_handle</name></decl></parameter>,    <comment type="line">// Z_to_A: size Znvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Z_to_A_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Z_to_M_handle</name></decl></parameter>,    <comment type="line">// Z_to_M: size Znvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Z_to_M_size_handle</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,             <comment type="line">// output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 08n is not used for M bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 08n is not used for A bitmap</comment>

    <decl_stmt><decl><type><name>GB_EMPTY_TASKLIST</name></type>
    <name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for 08n_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for 08n_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for 08n_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Znvec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Zh_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_to_A_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Znvec</name>      <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Zh_handle</name>    <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_C_HYPER_HASH</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Mvlen</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct fine/coarse tasks for eWise multiply of A.*M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Compare with the first part of GB_emult for A.*B.  Note that M in this</comment>
    <comment type="line">// function takes the place of B in GB_emult.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Znvec</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Zh_shallow</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Z_sparsity</name> <init>= <expr><name>GxB_SPARSE</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_emult_phase0</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Znvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Zh_shallow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Zh_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Z_to_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_A_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_M_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_sparsity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Z is still sparse or hypersparse, not bitmap or full</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>Z_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_ewise_slice</name> <argument_list>(
        <argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>,
        <argument><expr><name>Znvec</name></expr></argument>, <argument><expr><name>Zh_shallow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Z_to_A</name></expr></argument>, <argument><expr><name>Z_to_M</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice C(:,jC) for each fine task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Each fine task that operates on C(:,jC) must be limited to just its</comment>
    <comment type="line">// portion of C(:,jC).  Otherwise, one task could bring a zombie to life,</comment>
    <comment type="line">// at the same time another is attempting to do a binary search on that</comment>
    <comment type="line">// entry.  This is safe as long as a 64-bit integer read/write is always</comment>
    <comment type="line">// atomic, but there is no gaurantee that this is true for all</comment>
    <comment type="line">// architectures.  Note that GB_subassign_08n cannot create new zombies.</comment>

    <comment type="line">// This work could be done in parallel, but each task does at most 2 binary</comment>
    <comment type="line">// searches.  The total work for all the binary searches will likely be</comment>
    <comment type="line">// small.  So do the work with a single thread.</comment>

    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// do the binary search for this fine task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Zh_shallow</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_A</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_M</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// quick checks for empty intersection of A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>iA_last</name> <operator>&lt;</operator> <name>iM_first</name> <operator>||</operator> <name>iM_last</name> <operator>&lt;</operator> <name>iA_first</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// slice C(:,jC) for this fine task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>cjdense</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// do not slice C(:,jC) if it is dense</comment>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name>     <operator>=</operator> <name>pC_start</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC_end</name> <operator>=</operator> <name>pC_end</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// find where this task starts and ends in C(:,jC)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_start</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>iA_first</name></expr></argument>, <argument><expr><name>iM_first</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC1</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_end</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>iA_last</name></expr></argument>, <argument><expr><name>iM_last</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC2</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <comment type="line">// If I is an explicit list, it must be already sorted</comment>
                <comment type="line">// in ascending order, and thus iC1 &lt;= iC2.  If I is</comment>
                <comment type="line">// GB_ALL or GB_STRIDE with inc &gt;= 0, then iC1 &lt; iC2.</comment>
                <comment type="line">// But if inc &lt; 0, then iC1 &gt; iC2.  iC_start and iC_end</comment>
                <comment type="line">// are used for a binary search bracket, so iC_start &lt;=</comment>
                <comment type="line">// iC_end must hold.</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC_start</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>iC1</name></expr></argument>, <argument><expr><name>iC2</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC_end</name>   <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>iC1</name></expr></argument>, <argument><expr><name>iC2</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <comment type="line">// this task works on Ci,Cx [pC:pC_end-1]</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>is_zombie</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>iC_start</name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>,
                    <argument><expr><name>found</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <name>pleft</name></expr> ;</expr_stmt>

                <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>pC_start</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pright</name> <operator>=</operator> <name>pC_end</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>iC_end</name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>,
                    <argument><expr><name>found</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>found</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>pleft</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>pleft</name></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>&lt;=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Znvec</name>      <operator>)</operator> <operator>=</operator> <name>Znvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Zh_handle</name>    <operator>)</operator> <operator>=</operator> <name>Zh_shallow</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>Z_to_A</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_A_size_handle</name><operator>)</operator> <operator>=</operator> <name>Z_to_A_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>Z_to_M</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Z_to_M_size_handle</name><operator>)</operator> <operator>=</operator> <name>Z_to_M_size</name></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
