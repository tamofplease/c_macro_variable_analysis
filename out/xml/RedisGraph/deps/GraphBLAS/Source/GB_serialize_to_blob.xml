<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_serialize_to_blob.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_serialize_to_blob: copy a set of blocks to the blob</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_serialize_to_blob</name>
<parameter_list>(
    <comment type="line">// input/output</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,          <comment type="line">// blocks are appended to the blob</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>s_handle</name></decl></parameter>,       <comment type="line">// location to append into the blob</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GB_blocks</name> <modifier>*</modifier></type><name>Blocks</name></decl></parameter>,      <comment type="line">// Blocks: array of size nblocks+1</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Sblocks</name></decl></parameter>,       <comment type="line">// array of size nblocks</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>nblocks</name></decl></parameter>,        <comment type="line">// # of blocks</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads_max</name></decl></parameter>        <comment type="line">// # of threads to use</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>blob</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>s_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nblocks</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><name>nblocks</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><name>Blocks</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nthreads_max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nblocks</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no blocks for this array</comment>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy the blocks into the blob</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nblocks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// copy a single block into the blob in parallel</comment>
        <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>blob</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name><name>Blocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>, <argument><expr><name><name>Sblocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// copy each block with a single task</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>blockid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>blockid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>blockid</name> <operator>&lt;</operator> <name>nblocks</name></expr> ;</condition> <incr><expr><name>blockid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// copy the compressed block of size s_size into the blob</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>s_start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>blockid</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>s_end</name>   <init>= <expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>s_size</name>  <init>= <expr><name>s_end</name> <operator>-</operator> <name>s_start</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>blob</name> <operator>+</operator> <name>s</name> <operator>+</operator> <name>s_start</name></expr></argument>, <argument><expr><name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the updated index into the blob</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>Sblocks</name> <index>[<expr><name>nblocks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>s_handle</name><operator>)</operator> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
