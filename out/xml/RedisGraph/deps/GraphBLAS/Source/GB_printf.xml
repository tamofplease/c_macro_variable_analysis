<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_printf.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_printf.c: printing for GraphBLAS *check functions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_burble_assign</name>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix, which is not NULL here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// true for !M, false for M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>assign_kind</name></decl></parameter>       <comment type="line">// row assign, col assign, assign, or subassign</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// quick return if burble is disabled</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Global_burble_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the accum operator string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>Op</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// no accum operator is present</comment>
        <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">""</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// use a simpler version of accum-&gt;name</comment>
        <if_stmt><if>if <condition>(<expr><name><name>accum</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>GB_USER_binop_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"op"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"plus"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"+"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"minus"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"-"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"times"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"*"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"/"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"|"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"&amp;"</literal></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_STRING_MATCH</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <literal type="string">"^"</literal></expr> ;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>Op</name> <operator>=</operator> <name><name>accum</name><operator>-&gt;</operator><name>name</name></name></expr> ;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the Mask string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_STRLEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Mask</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>Mask_string</name> <index>[<expr><name>GB_STRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// M is not present</comment>
        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>Mask</name> <operator>=</operator> <ternary><condition><expr><name>C_replace</name></expr> ?</condition><then> <expr><literal type="string">"&lt;!,replace&gt;"</literal></expr> </then><else>: <expr><literal type="string">"&lt;!&gt;"</literal></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>Mask</name> <operator>=</operator> <ternary><condition><expr><name>C_replace</name></expr> ?</condition><then> <expr><literal type="string">"&lt;replace&gt;"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// M is present</comment>
        <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>Mask_string</name></expr></argument>, <argument><expr><name>GB_STRLEN</name></expr></argument>, <argument><expr><literal type="string">"&lt;%sM%s%s%s&gt;"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",bitmap"</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">",full"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">",struct"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name>C_replace</name></expr> ?</condition><then> <expr><literal type="string">",replace"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mask</name> <operator>=</operator> <name>Mask_string</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the string for A or the scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>S</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"scalar"</literal></expr> </then><else>: <expr><literal type="string">"A"</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the string for (I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Istr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Ikind</name> <operator>==</operator> <name>GB_ALL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">"I"</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>Jstr</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Jkind</name> <operator>==</operator> <name>GB_ALL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">"J"</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>IJ</name> <index>[<expr><name>GB_STRLEN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>GB_STRLEN</name></expr></argument>, <argument><expr><literal type="string">"(%s,%s)"</literal></expr></argument>, <argument><expr><name>Istr</name></expr></argument>, <argument><expr><name>Jstr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Ikind</name> <operator>==</operator> <name>GB_ALL</name> <operator>&amp;&amp;</operator> <name>Jkind</name> <operator>==</operator> <name>GB_ALL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// do not print the (I,J) indices</comment>
        <expr_stmt><expr><name><name>IJ</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// burble the final result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>assign_kind</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_ROW_ASSIGN</name></expr>:</case>
            <comment type="line">// C(i,J) = A</comment>
            <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>GB_STRLEN</name></expr></argument>, <argument><expr><literal type="string">"(i,%s)"</literal></expr></argument>, <argument><expr><name>Jstr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"C%s%s %s= A "</literal></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>Op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_COL_ASSIGN</name></expr>:</case>
            <comment type="line">// C(I,j) = A</comment>
            <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>GB_STRLEN</name></expr></argument>, <argument><expr><literal type="string">"(%s,j)"</literal></expr></argument>, <argument><expr><name>Istr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"C%s%s %s= A "</literal></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>Op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_ASSIGN</name></expr>:</case>
            <comment type="line">// C(I,J) = A</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"C%s%s %s= %s "</literal></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>Op</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_SUBASSIGN</name></expr>:</case>
            <comment type="line">// C(i,J) = A</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"C%s%s %s= %s "</literal></expr></argument>, <argument><expr><name>IJ</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>Op</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
