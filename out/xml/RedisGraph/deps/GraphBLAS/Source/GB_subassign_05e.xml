<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_05e.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_05e: C(:,:)&lt;M,struct&gt; = scalar ; no S, C empty, M structural</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 05e: C(:,:)&lt;M,struct&gt; = scalar ; no S</comment>
<comment type="line">// compare with Methods 21, 25, and 05d</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// Mask_struct: true</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           scalar</comment>
<comment type="line">// S:           none</comment>

<comment type="line">// C and M can have any sparsity on input.  The content of C is replace with</comment>
<comment type="line">// the structure of M, and the values of C are all set to the scalar.  If M is</comment>
<comment type="line">// bitmap, only assignments where (Mb [pC] == 1) are needed, but it's faster to</comment>
<comment type="line">// just assign all entries.</comment>

<comment type="line">// C is always iso, and its iso value has been assigned by GB_assign_prep.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_05e</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for subassign method_05e"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for subassign method_05e"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// M can be jumbled, in which case C is jumbled on output </comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 05e: C(:,:)&lt;M&gt; = x ; C is empty, x is a scalar, M is structural</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Optimal:  the method must iterate over all entries in M,</comment>
    <comment type="line">// and the time is O(nnz(M)).  This is also the size of C.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate C and create its pattern</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// clear prior content and then create a copy of the pattern of M.  Keep</comment>
    <comment type="line">// the same type and CSR/CSC for C.  Allocate C-&gt;x and assign to it the</comment>
    <comment type="line">// scalar.</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// set C-&gt;iso = true    OK</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>C_is_csc</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>jumbled</name></name></expr> ;</expr_stmt>       <comment type="line">// C is jumbled if M is jumbled</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for subassign method_05e"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
