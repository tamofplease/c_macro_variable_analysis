<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_BinaryOp_compatible.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_BinaryOp_compatible: check binary operator for type compatibility</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// check type compatibilty for C = op (A,B).  With typecasting: A is cast to</comment>
<comment type="line">// op-&gt;xtype, B is cast to op-&gt;ytype, the operator is computed, and then the</comment>
<comment type="line">// result of op-&gt;ztype is cast to C-&gt;type.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_BinaryOp_compatible</name>     <comment type="line">// check for domain mismatch</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// binary operator to check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,           <comment type="line">// C must be compatible with op-&gt;ztype</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,           <comment type="line">// A must be compatible with op-&gt;xtype</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>btype</name></decl></parameter>,           <comment type="line">// B must be compatible with op-&gt;ytype</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>bcode</name></decl></parameter>,       <comment type="line">// B may not have a type, just a code</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// ctype and btype may be NULL, but atype is never NULL</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>atype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>bcode</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_pair_or_positional</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator> 
        <operator>||</operator> <call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// first input A is cast into the type of op-&gt;xtype</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>||</operator> <name>op_is_pair_or_positional</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// first input is unused, so A is always compatible</comment>
        <empty_stmt>;</empty_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Incompatible type for z=%s(x,y):\n"</literal>
            <literal type="string">"first input of type [%s]\n"</literal>
            <literal type="string">"cannot be typecast to x input of type [%s]"</literal></expr></argument>,
            <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// second input B is cast into the type of op-&gt;ytype</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name> <operator>||</operator> <name>op_is_pair_or_positional</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// second input is unused, so B is always compatible</comment>
        <empty_stmt>;</empty_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>btype</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// B has a type</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>btype</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                <argument><expr><literal type="string">"Incompatible type for z=%s(x,y):\n"</literal>
                <literal type="string">"second input of type [%s]\n"</literal>
                <literal type="string">"cannot be typecast to y input of type [%s]"</literal></expr></argument>,
                <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>btype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// B has a just a type code, not a type</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>bcode</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                <argument><expr><literal type="string">"Incompatible type for z=%s(x,y):\n"</literal>
                <literal type="string">"second input of type [%s]\n"</literal>
                <literal type="string">"cannot be typecast to y input of type [%s]"</literal></expr></argument>,
                <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>GB_code_string</name> <argument_list>(<argument><expr><name>bcode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// result of binary operator of op-&gt;ztype is cast to C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Incompatible type for z=%s(x,y):\n"</literal>
            <literal type="string">"operator output z of type [%s]\n"</literal>
            <literal type="string">"cannot be typecast to result of type [%s]"</literal></expr></argument>,
            <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
