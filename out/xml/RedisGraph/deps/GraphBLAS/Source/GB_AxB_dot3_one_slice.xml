<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_dot3_one_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_one_slice: slice the entries and vectors of a single matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Constructs a set of tasks that slice a single input matrix M.  This function</comment>
<comment type="line">// is currently only used by GB_AxB_dot3, to slice the mask matrix M, which has</comment>
<comment type="line">// the same pattern as the output matrix C.  However, this function is a very</comment>
<comment type="line">// simple general-purpose method for slicing a single matrix.  It could be</comment>
<comment type="line">// called GB_one_slice, and used for other methods as well.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (Coarse, int64_t) ;             \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NTASKS_PER_THREAD</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_one_slice</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_dot3_one_slice</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads to use</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for dot3_one_slice"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// the pattern of M is not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mnvec</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mvlen</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the initial TaskList</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>mnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name>GB_NTASKS_PER_THREAD</name> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return for a single task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>mnvec</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks0</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single coarse task that does all the work</comment>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>mnvec</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>mnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads and tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>target_task_size</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>mnz</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>ntasks0</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>target_task_size</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>target_task_size</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>mnz</name><operator>)</operator> <operator>/</operator> <name>target_task_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work into coarse tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>ntasks1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Coarse</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>mnvec</name></expr></argument>, <argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct all tasks, both coarse and fine</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// coarse task operates on M (:, k:klast)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>mnvec</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// all tasks have been constructed</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <break>break ;</break>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 2 or more vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// This is a non-empty coarse-grain task that does two or more</comment>
            <comment type="line">// entire vectors of M and C, vectors k:klast, inclusive.</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse task has 0 or 1 vectors</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// As a coarse-grain task, this task is empty or does a single</comment>
            <comment type="line">// vector, k.  Vector k must be removed from the work done by this</comment>
            <comment type="line">// and any other coarse-grain task, and split into one or more</comment>
            <comment type="line">// fine-grain tasks.</comment>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><name>t</name></expr></init></decl> ;</init> <condition><expr><name>tt</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>tt</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// remove k from the initial slice tt</comment>
                <if_stmt><if>if <condition>(<expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>==</operator> <name>k</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// remove k from task tt</comment>
                    <expr_stmt><expr><name><name>Coarse</name> <index>[<expr><name>tt</name></expr>]</index></name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// break, k not in task tt</comment>
                    <break>break ;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine the # of fine-grain tasks to create for vector k</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>mknz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Mp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>mvlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Mp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Mp</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nfine</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>mknz</name><operator>)</operator> <operator>/</operator> <name>target_task_size</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>nfine</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nfine</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// make the TaskList bigger, if needed</comment>
            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <name>nfine</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// create the fine-grain tasks</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>nfine</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// this is a single coarse task for all of vector k</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// slice vector M(:,k) into nfine fine tasks</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int</name></type> <name>tfine</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tfine</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>tfine</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 

                    <comment type="line">// this fine task operates on vector M(:,k)</comment>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

                    <comment type="line">// slice M(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mknz</name></expr></argument>, <argument><expr><name>tfine</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name>     <init>= <expr><name>pM_start</name> <operator>+</operator> <name>p1</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_end</name> <init>= <expr><name>pM_start</name> <operator>+</operator> <name>p2</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name>     <operator>=</operator> <name>pM</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM_end</name> <operator>=</operator> <name>pM_end</name></expr> ;</expr_stmt>

                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM</name> <operator>&lt;=</operator> <name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pM_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;=</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
