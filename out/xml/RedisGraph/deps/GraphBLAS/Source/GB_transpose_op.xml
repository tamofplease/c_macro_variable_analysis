<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose_op.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose_op: transpose, typecast, and apply an operator to a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = op (A')</comment>

<comment type="line">// The values of A are typecasted to op-&gt;xtype and then passed to the unary</comment>
<comment type="line">// operator.  The output is assigned to C, which must be of type op-&gt;ztype; no</comment>
<comment type="line">// output typecasting done with the output of the operator.</comment>

<comment type="line">// If the op is positional, it has been replaced with the unary op</comment>
<comment type="line">// GxB_ONE_INT64, as a placeholder, and C_code_iso is GB_ISO_1.  The true op</comment>
<comment type="line">// is applied later, in GB_transpose.</comment>

<comment type="line">// If A is sparse or hypersparse</comment>
<comment type="line">//      The pattern of C is constructed.  C is sparse.</comment>
<comment type="line">//      Workspaces and A_slice are non-NULL.</comment>
<comment type="line">//      This method is parallel, but not highly scalable.  It uses only</comment>
<comment type="line">//      nthreads = nnz(A)/(A-&gt;vlen) threads.</comment>

<comment type="line">// If A is full or as-if-full:</comment>
<comment type="line">//      The pattern of C is not constructed.  C is full.</comment>
<comment type="line">//      Workspaces and A_slice are NULL.</comment>
<comment type="line">//      This method is parallel and fully scalable.</comment>

<comment type="line">// If A is bitmap:</comment>
<comment type="line">//      C-&gt;b is constructed.  C is bitmap.</comment>
<comment type="line">//      Workspaces and A_slice are NULL.</comment>
<comment type="line">//      This method is parallel and fully scalable.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop__include.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>GB_transpose_op</name>    <comment type="line">// transpose, typecast, and apply operator to a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                       <comment type="line">// output matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_iso_code</name></type> <name>C_code_iso</name></decl></parameter>,       <comment type="line">// iso code for C</comment>
        <comment type="line">// no operator is applied if op is NULL</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,           <comment type="line">// unary/idxunop/binop to apply</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,        <comment type="line">// scalar to bind to binary operator</comment>
        <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>,             <comment type="line">// if true, binop(x,A) else binop(A,y)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                 <comment type="line">// input matrix</comment>
    <comment type="line">// for sparse or hypersparse case:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Workspaces</name></decl></parameter>,      <comment type="line">// Workspaces, size nworkspaces</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_slice</name></decl></parameter>,    <comment type="line">// how A is sliced, size nthreads+1</comment>
    <parameter><decl><type><name>int</name></type> <name>nworkspaces</name></decl></parameter>,                    <comment type="line">// # of workspaces to use</comment>
    <comment type="line">// for all cases:</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>                        <comment type="line">// # of threads to use</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>Atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// positional operators and user idxunop are applied after the transpose</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_INDEXUNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transpose the matrix and apply the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply the operator to the iso value and transpose the pattern</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// if C is iso, only the pattern is transposed.  The numerical work</comment>
        <comment type="line">// takes O(1) time</comment>

        <comment type="line">// Cx [0] = unop (A), binop (scalar,A), or binop (A,scalar)</comment>
        <expr_stmt><expr><call><name>GB_iso_unop</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C = transpose the pattern</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_TRANSPOSE</name></cpp:macro></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply the unary operator to all entries</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose the matrix; apply the unary op to all values if non-iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>Atype</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>GB_IDENTITY_unop_code</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">// The switch factory is used if the unop is IDENTITY, or if no</comment>
            <comment type="line">// typecasting is being done.  The IDENTITY operator can do</comment>
            <comment type="line">// arbitrary typecasting.</comment>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// define the worker for the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_unop_tran</name><parameter_list>(<parameter><type><name>opname</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>)</parameter_list></cpp:macro> \
                <cpp:value>GB (_unop_tran_ ## opname ## zname ## aname)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>opname</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>,<parameter><type><name>atype</name></type></parameter>)</parameter_list></cpp:macro>               \
            <cpp:value>{                                                               \
                info = GB_unop_tran (opname,zname,aname)                    \
                    (C, A, Workspaces, A_slice, nworkspaces, nthreads) ;    \
                if (info == GrB_SUCCESS) return ;                           \
            }                                                               \
            break ;</cpp:value></cpp:define>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// launch the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_factory.c"</cpp:file></cpp:include>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic worker: transpose, typecast, and apply unary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic transpose: %s) "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type>
            <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>Atype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GxB_unary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>, <argument><expr><literal type="string">"unop ztype"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><literal type="string">"unop xtype"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"C type"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// Cx [pC] = unop (cast (Ax [pA]))</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                                       \
        <cpp:value>{                                                               \
            <comment type="block">/* xwork = (xtype) Ax [pA] */</comment>                               \
            GB_void xwork [GB_VLA(xsize)] ;                             \
            cast_A_to_X (xwork, Ax +((pA)*asize), asize) ;              \
            <comment type="block">/* Cx [pC] = fop (xwork) ; Cx is of type op-&gt;ztype */</comment>       \
            fop (Cx +((pC)*zsize), xwork) ;                             \
        }</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply a binary operator (bound to a scalar)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"binop for transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl>, <decl><type ref="prev"/><name>ycode</name></decl>, <decl><type ref="prev"/><name>zcode</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_FIRST_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_SECOND_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_PAIR_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_ANY_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ssize</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>xcode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ycode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>

        <comment type="line">// typecast the scalar to the operator input</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ssize_cast</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode_cast</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>ssize_cast</name> <operator>=</operator> <name>xsize</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scode_cast</name> <operator>=</operator> <name>xcode</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>ssize_cast</name> <operator>=</operator> <name>ysize</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scode_cast</name> <operator>=</operator> <name>ycode</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>swork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ssize_cast</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>scalarx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>scode_cast</name> <operator>!=</operator> <name>scode</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast the scalar to the operator input, in swork</comment>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_s</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>scode_cast</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>cast_s</name> <argument_list>(<argument><expr><name>swork</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scalarx</name> <operator>=</operator> <name>swork</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_Y</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose the matrix; apply the binary op to all values if non-iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = op(scalar,A')</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Atype</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_BinaryOp</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// define the worker for the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_bind1st_tran</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> \
                    <cpp:value>GB (_bind1st_tran_ ## op ## xname)</cpp:value></cpp:define>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_WORKER</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                           \
                <cpp:value>{                                                           \
                    if (GB_bind1st_tran (op, xname) (C, scalarx, A,         \
                        Workspaces, A_slice, nworkspaces, nthreads)         \
                        == GrB_SUCCESS) return ;                            \
                }                                                           \
                break ;</cpp:value></cpp:define>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// launch the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_FIRST</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_SECOND</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_PAIR</name></cpp:macro></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = op(A',scalar)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name>Atype</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_BinaryOp</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// define the worker for the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_bind2nd_tran</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> \
                    <cpp:value>GB (_bind2nd_tran_ ## op ## xname)</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP_WORKER</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_WORKER</name><parameter_list>(<parameter><type><name>op</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                           \
                <cpp:value>{                                                           \
                    if (GB_bind2nd_tran (op, xname) (C, A, scalarx,         \
                        Workspaces, A_slice, nworkspaces, nthreads)         \
                        == GrB_SUCCESS) return ;                            \
                }                                                           \
                break ;</cpp:value></cpp:define>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// launch the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_FIRST</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_SECOND</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_PAIR</name></cpp:macro></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic worker: transpose, typecast and apply a binary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic transpose: %s) "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP_BIND_1ST</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                              \
        <cpp:value>{                                                               \
            <comment type="block">/* ywork = (ytype) Ax [pA] */</comment>                               \
            GB_void ywork [GB_VLA(ysize)] ;                             \
            cast_A_to_Y (ywork, Ax +(pA)*asize, asize) ;                \
            <comment type="block">/* Cx [pC] = fop (xwork) ; Cx is of type op-&gt;ztype */</comment>       \
            fop (Cx +((pC)*zsize), scalarx, ywork) ;                    \
        }</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP_BIND_2ND</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                              \
        <cpp:value>{                                                               \
            <comment type="block">/* xwork = (xtype) Ax [pA] */</comment>                               \
            GB_void xwork [GB_VLA(xsize)] ;                             \
            cast_A_to_X (xwork, Ax +(pA)*asize, asize) ;                \
            <comment type="block">/* Cx [pC] = fop (xwork) ; Cx is of type op-&gt;ztype */</comment>       \
            fop (Cx +(pC*zsize), xwork, scalarx) ;                      \
        }</cpp:value></cpp:define>

        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Cx [pC] = op (cast (scalar), cast (Ax [pA]))</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_CAST_OP_BIND_1ST(pC,pA)</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// Cx [pC] = op (cast (Ax [pA]), cast (scalar))</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_CAST_OP_BIND_2ND(pC,pA)</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
