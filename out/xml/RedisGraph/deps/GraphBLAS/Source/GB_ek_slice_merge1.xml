<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ek_slice_merge1.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ek_slice_merge1: merge column counts for a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The input matrix A has been sliced via GB_ek_slice, and scanned to compute</comment>
<comment type="line">// the counts of entries in each vector of C in Cp, Wfirst, and Wlast.  This</comment>
<comment type="line">// phase finalizes the column counts, Cp, merging the results of each task.</comment>

<comment type="line">// On input, Cp [k] has been partially computed.  Task tid operators on vector</comment>
<comment type="line">// kfirst = kfirst_Aslice [tid] to klast = klast_Aslice [tid].  If kfirst &lt; k &lt;</comment>
<comment type="line">// klast, then Cp [k] is the total count of entries in C(:,k).  Otherwise, the</comment>
<comment type="line">// counts are held in Wfirst and Wlast, and Cp [k] is zero (or uninititalized).</comment>
<comment type="line">// Wfirst [tid] is the number of entries in C(:,kfirst) constructed by task</comment>
<comment type="line">// tid, and Wlast [tid] is the number of entries in C(:,klast) constructed by</comment>
<comment type="line">// task tid.</comment>

<comment type="line">// This function sums up the entries computed for C(:,k) by all tasks, so that</comment>
<comment type="line">// on output, Cp [k] is the total count of entries in C(:,k).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_ek_slice_merge1</name>     <comment type="line">// merge column counts for the matrix C</comment>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name></decl></parameter>,                    <comment type="line">// column counts</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wfirst</name></decl></parameter>,          <comment type="line">// size A_ntasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wlast</name></decl></parameter>,           <comment type="line">// size A_ntasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>,                <comment type="line">// size 3*A_ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>                          <comment type="line">// # of tasks</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>kprior</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sum up the partial result that thread tid computed for kfirst</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>kfirst</name> <operator>&lt;=</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>kprior</name> <operator>&lt;</operator> <name>kfirst</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// This thread is the first one that did work on</comment>
                <comment type="line">// A(:,kfirst), so use it to start the reduction.</comment>
                <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kfirst</name></expr>]</index></name> <operator>=</operator> <name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kfirst</name></expr>]</index></name> <operator>+=</operator> <name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>kprior</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sum up the partial result that thread tid computed for klast</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>kfirst</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kprior</name> <operator>&lt;</operator> <name>klast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// This thread is the first one that did work on</comment>
            <comment type="line">// A(:,klast), so use it to start the reduction.</comment>
            <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>klast</name></expr>]</index></name> <operator>=</operator> <name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kprior</name> <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
