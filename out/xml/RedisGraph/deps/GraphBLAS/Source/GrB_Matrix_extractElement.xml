<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_extractElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_extractElement: extract a single entry from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extract the value of single scalar, x = A(i,j), typecasting from the</comment>
<comment type="line">// type of A to the type of x, as needed.</comment>

<comment type="line">// Returns GrB_SUCCESS if A(i,j) is present, and sets x to its value.</comment>
<comment type="line">// If A(i,j) is not present: if x is a bare scalar, x is unmodified and</comment>
<comment type="line">// GrB_NO_VALUE is returned; if x is a GrB_scalar, x is returned as empty,</comment>
<comment type="line">// and GrB_SUCCESS is returned.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_extractElement_Scalar</name>   <comment type="line">// S = A(i,j)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>S</name></decl></parameter>,                       <comment type="line">// extracted scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                 <comment type="line">// matrix to extract a scalar from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>i</name></decl></parameter>,                        <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>                         <comment type="line">// column index</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs (just the GrB_Scalar S)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_extractElement_Scalar (s, A, row, col)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure S is bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// convert S to bitmap</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_bitmap</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>S</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the entry (also checks the inputs A, i, and j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>S</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_BOOL</name> <argument_list>(<argument><expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_INT8_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_INT8</name> <argument_list>(<argument><expr><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_INT16_code</name></expr>   :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_INT16</name> <argument_list>(<argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_INT32_code</name></expr>   :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_INT32</name> <argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_INT64_code</name></expr>   :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_INT64</name> <argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UINT8</name> <argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UINT16</name> <argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UINT32</name> <argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UINT64</name> <argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FP32_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_FP32</name> <argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FP64_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_FP64</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FC32_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_extractElement_FC32</name> <argument_list>(<argument><expr><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FC64_code</name></expr>    :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_extractElement_FC64</name> <argument_list>(<argument><expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UDT_code</name></expr>     :</case> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>x</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>entry_present</name> <init>= <expr><operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>no_entry</name> <init>= <expr><operator>(</operator><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>b</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>entry_present</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>S</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <ternary><condition><expr><name>entry_present</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>entry_present</name> <operator>||</operator> <name>no_entry</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_SUCCESS</name></expr> </then><else>: <expr><name>info</name></expr></else></ternary><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WHERE_STRING</name></cpp:macro> <cpp:value>"GrB_Matrix_extractElement (&amp;x, A, row, col)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_BOOL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>bool</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_BOOL_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_INT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT8_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_INT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT16_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_INT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_UINT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT8_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_UINT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT16_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_UINT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_UINT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_FP32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FP32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_FP64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FP64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GxB_Matrix_extractElement_FC32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>GxB_FC32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FC32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GxB_Matrix_extractElement_FC64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>GxB_FC64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FC64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UDT_EXTRACT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Matrix_extractElement_UDT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UDT_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GxB_Matrix_isStoredElement</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Matrix_extractElement.c"</cpp:file></cpp:include>

</unit>
