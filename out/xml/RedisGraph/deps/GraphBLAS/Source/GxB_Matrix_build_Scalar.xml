<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_build_Scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_build_Scalar: build a sparse GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GxB_Matrix_build_Scalar builds a matrix C whose values in its sparsity</comment>
<comment type="line">// pattern are all equal to a value given by a GrB_Scalar.  Unlike the</comment>
<comment type="line">// GrB_Matrix_build_* methods, there is no binary dup operator.  Instead, any</comment>
<comment type="line">// duplicate indices are ignored, which is not an error condition.  The I and J</comment>
<comment type="line">// arrays are of size nvals, just like GrB_Matrix_build_*.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_build_Scalar</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// matrix to build</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,             <comment type="line">// array of row indices of tuples</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,             <comment type="line">// array of column indices of tuples</comment>
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,              <comment type="line">// value for all tuples</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl></parameter>                 <comment type="line">// number of tuples</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GxB_Matrix_build_Scalar (C, I, J, scalar, nvals)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_build_Scalar"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>scalar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_EMPTY_OBJECT</name></expr></argument>, <argument><expr><literal type="string">"Scalar value is %s"</literal></expr></argument>, <argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build the matrix, ignoring duplicates</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_build</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>GxB_IGNORE_DUP</name></expr></argument>,
        <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
