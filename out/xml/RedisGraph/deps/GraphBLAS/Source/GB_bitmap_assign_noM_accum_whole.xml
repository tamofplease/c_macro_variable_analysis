<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_noM_accum_whole.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_noM_accum_whole:  assign to C bitmap, mask M is not present</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;&gt; += A            assign</comment>
<comment type="line">// C&lt;&gt; += A            subassign</comment>

<comment type="line">// C&lt;repl&gt; += A        assign</comment>
<comment type="line">// C&lt;repl&gt; += A        subassign</comment>

<comment type="line">// C&lt;!&gt; += A           assign: no work to do</comment>
<comment type="line">// C&lt;!&gt; += A           subassign: no work to do</comment>

<comment type="line">// C&lt;!,repl&gt; += A      assign: just clear C of all entries, not done here</comment>
<comment type="line">// C&lt;!,repl&gt; += A      subassign: just clear C of all entries, not done here</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           none</comment>
<comment type="line">// Mask_comp:   true or false</comment>
<comment type="line">// Mask_struct: true or false</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign or subassign (same action)</comment>

<comment type="line">// If Mask_comp is true, then an empty mask is complemented.  This case has</comment>
<comment type="line">// already been handled by GB_assign_prep, which calls GB_clear, and thus</comment>
<comment type="line">// Mask_comp is always false in this method.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_assign_noM_accum_whole</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
<comment type="line">//  const GrB_Matrix M,         // mask matrix, not present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// true for !M, false for M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit5:whole"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
        <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>GB_ASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, no M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign, no M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <expr_stmt><expr><name>GB_GET_A_AND_SCALAR</name>
    <name>GB_GET_ACCUM_FOR_BITMAP</name></expr></expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the assignment</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += A or += scalar</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// scalar assignment: C += scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// TODO: can skip the test for C_iso in the macros below</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                 \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                if (cb == 0)                        \
                {                                   \
                    <comment type="block">/* Cx [pC] = scalar */</comment>          \
                    GB_ASSIGN_SCALAR (pC) ;         \
                }                                   \
                else                                \
                {                                   \
                    <comment type="block">/* Cx [pC] += scalar */</comment>         \
                    GB_ACCUM_SCALAR (pC) ;          \
                }                                   \
            }</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_iso</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// free the bitmap or set it to all ones</comment>
            <expr_stmt><expr><call><name>GB_bitmap_assign_to_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// matrix assignment: C += A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C += A where C is bitmap and A is full</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// TODO: can skip the test for C_iso in the macros below</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                     \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    if (cb == 0)                            \
                    {                                       \
                        <comment type="block">/* Cx [pC] = Ax [pC] */</comment>             \
                        GB_ASSIGN_AIJ (pC, pC) ;            \
                    }                                       \
                    else                                    \
                    {                                       \
                        <comment type="block">/* Cx [pC] += Ax [pC] */</comment>            \
                        GB_ACCUM_AIJ (pC, pC) ;             \
                    }                                       \
                }</cpp:value></cpp:define>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_iso</name></expr>)</condition>
                <block>{<block_content>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// free the bitmap or set it to all ones</comment>
                <expr_stmt><expr><call><name>GB_bitmap_assign_to_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C += A where C and A are bitmap</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                     \
                <cpp:value>{                                           \
                    if (Ab [pC])                            \
                    {                                       \
                        int8_t cb = Cb [pC] ;               \
                        if (cb == 0)                        \
                        {                                   \
                            <comment type="block">/* Cx [pC] = Ax [pC] */</comment>         \
                            GB_ASSIGN_AIJ (pC, pC) ;        \
                            Cb [pC] = 1 ;                   \
                            task_cnvals++ ;                 \
                        }                                   \
                        else                                \
                        {                                   \
                            <comment type="block">/* Cx [pC] += Ax [pC] */</comment>        \
                            GB_ACCUM_AIJ (pC, pC) ;         \
                        }                                   \
                    }                                       \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
                <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C += A where C is bitmap and A is sparse or hyper</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_AIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                  \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    if (cb == 0)                            \
                    {                                       \
                        <comment type="block">/* Cx [pC] = Ax [pA] */</comment>             \
                        GB_ASSIGN_AIJ (pC, pA) ;            \
                        Cb [pC] = 1 ;                       \
                        task_cnvals++ ;                     \
                    }                                       \
                    else                                    \
                    {                                       \
                        <comment type="block">/* Cx [pC] += Ax [pA] */</comment>            \
                        GB_ACCUM_AIJ (pC, pA) ;             \
                    }                                       \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_whole_template.c"</cpp:file></cpp:include>
                <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    else if (C_replace)
    {
        <comment type="line">// The mask is not present yet complemented: C_replace phase only.  all</comment>
        <comment type="line">// entries are deleted.  This is done by GB_clear in GB_assign_prep</comment>
        <comment type="line">// and is thus not needed here.</comment>
        GB_memset (Cb, 0, cnzmax, nthreads_max) ;
        cnvals = 0 ;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, no M, accum, whole"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
