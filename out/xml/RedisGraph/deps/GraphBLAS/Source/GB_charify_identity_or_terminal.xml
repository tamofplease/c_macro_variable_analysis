<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_charify_identity_or_terminal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_charify_identity_or_terminal: string for identity/terminal value</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>GB_charify_identity_or_terminal</name> <comment type="line">// return string encoding the value</comment>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>int</name></type> <name>ecode</name></decl></parameter>                   <comment type="line">// enumerated identity/terminal value</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>f</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// for identity values and terminal values for terminal monoids</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case  <expr><literal type="number">0</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0"</literal></expr>                   ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">1</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"1"</literal></expr>                   ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">2</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"true"</literal></expr>                ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"false"</literal></expr>               ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT8_MAX"</literal></expr>            ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT16_MAX"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT32_MAX"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">7</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT64_MAX"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">8</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"UINT8_MAX"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case  <expr><literal type="number">9</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"UINT16_MAX"</literal></expr>          ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">10</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"UINT32_MAX"</literal></expr>          ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">11</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"UINT64_MAX"</literal></expr>          ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">12</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INFINITY"</literal></expr>            ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">13</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT8_MIN"</literal></expr>            ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">14</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT16_MIN"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">15</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT32_MIN"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">16</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"INT64_MIN"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">17</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"-INFINITY"</literal></expr>           ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">18</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0"</literal></expr>                   ;</expr_stmt> <break>break ;</break> <comment type="line">// for ANY monoid only</comment>
        <case>case <expr><literal type="number">19</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0xFF"</literal></expr>                ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">20</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0xFFFF"</literal></expr>              ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">21</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0xFFFFFFFF"</literal></expr>          ;</expr_stmt> <break>break ;</break>
        <case>case <expr><literal type="number">22</literal></expr> :</case> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">"0xFFFFFFFFFFFFFFFF"</literal></expr>  ;</expr_stmt> <break>break ;</break>

        <comment type="line">// ecodes 19 to 28 are reserved for future use</comment>

        <comment type="line">// user-defined monoid (terminal or non-terminal) or</comment>
        <comment type="line">// built-in non-terminal monoid</comment>
        <default>default :</default> <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="string">""</literal></expr> ;</expr_stmt>                  <empty_stmt>;</empty_stmt> <break>break ;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>f</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
