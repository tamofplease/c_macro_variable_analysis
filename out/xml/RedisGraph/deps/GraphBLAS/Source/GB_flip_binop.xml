<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_flip_binop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_flip_binop:  flip a binary operator for an eWise operation or GrB_mxm</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2019, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>GrB_BinaryOp</name></type> <name>GB_flip_binop</name>  <comment type="line">// flip a binary operator</comment>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,        <comment type="line">// binary operator to flip</comment>
    <parameter><decl><type><name>bool</name></type> <name>for_ewise</name></decl></parameter>,         <comment type="line">// if true: flip for eWise, else for semiring</comment>
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>flipxy</name></decl></parameter>            <comment type="line">// true on input, set to false if op is flipped</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// quick return if binary op is not flipped</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>flipxy</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// op is not flipped</comment>
        <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flipxy</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>     <comment type="line">// set below to true if the op is not flipped</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle positional binary operators for ewise operations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>for_ewise</name> <operator>&amp;&amp;</operator> <call><name>GB_IS_BINARYOP_CODE_POSITIONAL</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// built-in positional ops (firsti, firstj, secondi, secondj) are</comment>
        <comment type="line">// not flipped for eWise operations</comment>
        <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the general case: both ewise and mxm</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>int32</name> <init>= <expr><operator>(</operator><name>xcode</name> <operator>==</operator> <name>GB_INT32_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap FIRST and SECOND</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_SECOND_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_SECOND_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_SECOND_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_SECOND_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_FIRST_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRST_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_FIRST_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap LT and GT</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_GT_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LT_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LT_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LT_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LT_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LT_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LT_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LT_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LT_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LT_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LT_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LT_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LT_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GT_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GT_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GT_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GT_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GT_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GT_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GT_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GT_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GT_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GT_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GT_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap LE and GE</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_GE_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LE_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LE_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LE_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LE_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LE_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_LE_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LE_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LE_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_LE_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LE_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_LE_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LE_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GE_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GE_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GE_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GE_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GE_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_GE_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GE_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GE_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_GE_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GE_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_GE_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap ISLT and ISGT</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_ISGT_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLT_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ISLT_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGT_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap ISLE and ISGE</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_ISGE_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISLE_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ISLE_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ISGE_FP64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap DIV and RDIV</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_DIV_binop_code</name></expr>  :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RDIV_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_RDIV_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_DIV_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_DIV_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_DIV_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// swap MINUS and RMINUS</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_MINUS_binop_code</name></expr>  :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_RMINUS_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_BOOL</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT8</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_FP32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MINUS_FP64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MINUS_FC32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MINUS_FC64</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// positional operators: flip for mxm methods, not for ewise (see above)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>       :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_SECONDJ_INT32</name></expr> </then><else>: <expr><name>GxB_SECONDJ_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>       :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_SECONDI_INT32</name></expr> </then><else>: <expr><name>GxB_SECONDI_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>      :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_SECONDJ1_INT32</name></expr> </then><else>: <expr><name>GxB_SECONDJ1_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>      :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_SECONDI1_INT32</name></expr> </then><else>: <expr><name>GxB_SECONDI1_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_SECONDI_binop_code</name></expr>      :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_FIRSTJ_INT32</name></expr> </then><else>: <expr><name>GxB_FIRSTJ_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>      :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_FIRSTI_INT32</name></expr> </then><else>: <expr><name>GxB_FIRSTI_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>     :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_FIRSTJ1_INT32</name></expr> </then><else>: <expr><name>GxB_FIRSTJ1_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>     :</case> 
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>int32</name></expr> ?</condition><then> <expr><name>GxB_FIRSTI1_INT32</name></expr> </then><else>: <expr><name>GxB_FIRSTI1_INT64</name></expr></else></ternary><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// these operators are commutative; they are their own flipped ops:</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_ANY_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_PAIR_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_MIN_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_MAX_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_PLUS_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_TIMES_binop_code</name></expr>        :</case>
        <case>case <expr><name>GB_ISEQ_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_ISNE_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_LOR_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_LAND_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BOR_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_BAND_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BXOR_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BXNOR_binop_code</name></expr>        :</case>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>           :</case>
        <case>case <expr><name>GB_NE_binop_code</name></expr>           :</case>
        <case>case <expr><name>GB_HYPOT_binop_code</name></expr>        :</case>
            <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// these operators are not commutative and do not have flipped ops:</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// These are the only cases of built-in binary operators that are not</comment>
        <comment type="line">// flipped.</comment>

        <case>case <expr><name>GB_POW_binop_code</name></expr>          :</case>
        <case>case <expr><name>GB_BGET_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BSET_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BCLR_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_BSHIFT_binop_code</name></expr>       :</case>
        <case>case <expr><name>GB_ATAN2_binop_code</name></expr>        :</case>
        <case>case <expr><name>GB_FMOD_binop_code</name></expr>         :</case>
        <case>case <expr><name>GB_REMAINDER_binop_code</name></expr>    :</case>
        <case>case <expr><name>GB_COPYSIGN_binop_code</name></expr>     :</case>
        <case>case <expr><name>GB_LDEXP_binop_code</name></expr>        :</case>
        <case>case <expr><name>GB_CMPLX_binop_code</name></expr>        :</case>
        <case>case <expr><name>GB_USER_binop_code</name></expr>         :</case>
        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// operator cannot be flipped</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>flipxy</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
