<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_SelectOp_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SelectOp_new: create a new user-defined select operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This function is historical.  Use GrB_IndexUnaryOp_new with GrB_select,</comment>
<comment type="line">// instead of a user-defined GxB_SelectOp with GxB_select.  No JIT acceleration</comment>
<comment type="line">// will be provided for user-defined GxB_SelectOps, so the operator definition</comment>
<comment type="line">// string is not provided.</comment>

<comment type="line">// The select function signature must be:</comment>

<comment type="line">//      bool f (GrB_Index i, GrB_Index j, GrB_Index nrows, GrB_Index ncols,</comment>
<comment type="line">//              const void *x, const void *thunk) ;</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_SelectOp_new</name>            <comment type="line">// create a new user-defined select operator</comment>
<parameter_list>(
    <parameter><decl><type><name>GxB_SelectOp</name> <modifier>*</modifier></type><name>selectop</name></decl></parameter>,         <comment type="line">// handle for the new select operator</comment>
    <parameter><decl><type><name>GxB_select_function</name></type> <name>function</name></decl></parameter>,   <comment type="line">// pointer to the select function</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,                 <comment type="line">// type of input x, or NULL if type-generic</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ttype</name></decl></parameter>,                 <comment type="line">// type of input thunk, or NULL if not used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unused</name></decl></parameter>              <comment type="line">// no longer used</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_SelectOp_new (selectop, function, xtype, ttype)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>selectop</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selectop</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// xtype may be NULL</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// ttype may be NULL</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the select op</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate the select operator</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selectop</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_SelectOp_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>selectop</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// initialize the select operator</comment>
    <decl_stmt><decl><type><name>GxB_SelectOp</name></type> <name>op</name> <init>= <expr><operator>*</operator><name>selectop</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>xtype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>ttype</name></expr> ;</expr_stmt>         <comment type="line">// thunk type</comment>

    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>idxunop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>selop_function</name></name> <operator>=</operator> <name>function</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>GB_USER_selop_code</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"user_selectop"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>defn</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>           <comment type="line">// unused: no JIT acceleration for these ops</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_SELECTOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"new user-defined select op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
