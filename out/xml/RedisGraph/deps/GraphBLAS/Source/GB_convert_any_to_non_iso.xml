<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_any_to_non_iso.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_any_to_non_iso: convert a matrix from iso to non-iso</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_convert_any_to_non_iso</name> <comment type="line">// convert iso matrix to non-iso</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input/output matrix</comment>
    <parameter><decl><type><name>bool</name></type> <name>initialize</name></decl></parameter>,        <comment type="line">// if true, copy the iso value to all of A-&gt;x</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to convert to non-iso"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the iso entry of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>scalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>initialize</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure A-&gt;x is large enough, and not shallow</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>anz</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>Ax_size_required</name> <init>= <expr><name>anz</name> <operator>*</operator> <name>asize</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>&lt;</operator> <name>Ax_size_required</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// free the old space</comment>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// allocate the new space</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>Ax_size_required</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy the first entry into all of A-&gt;x</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>initialize</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_iso_expand</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>        <comment type="line">// OK: convert_any_to_non_iso</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A converted to non-iso"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
