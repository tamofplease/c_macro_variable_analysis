<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_expand.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_expand: expand a scalar into an entire array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_is_nonzero.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_iso_expand</name>          <comment type="line">// expand an iso scalar into an entire array</comment>
<parameter_list>(
    <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X</name></decl></parameter>,       <comment type="line">// output array to expand into</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>,              <comment type="line">// # of entries in X</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>scalar</name></decl></parameter>,  <comment type="line">// scalar to expand into X</comment>
    <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>,            <comment type="line">// size of the scalar and each entry of X</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine how many threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy the scalar into X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_is_nonzero</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the scalar is nonzero</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <switch>switch <condition>(<expr><name>size</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// bool, uint8, int8, and UDT of size 1</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>uint8_t</name></type> <name>a0</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>scalar</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Z</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a0</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>

            <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, and UDT of size 2</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>uint16_t</name></type> <name>a0</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>scalar</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Z</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a0</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>

            <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, and UDT of size 4</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>a0</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>scalar</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Z</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a0</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>

            <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex, UDT size 8</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>scalar</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Z</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a0</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>

            <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex, and UDT size 16</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GB_blob16</name></type> <name>a0</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>GB_blob16</name> <operator>*</operator><operator>)</operator> <name>scalar</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>GB_blob16</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>GB_blob16</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Z</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a0</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>

            <default>default :</default> <comment type="line">// user-defined types of arbitrary size</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></init></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Z</name> <operator>+</operator> <name>p</name><operator>*</operator><name>size</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the scalar is zero: use memset</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>*</operator><name>size</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
