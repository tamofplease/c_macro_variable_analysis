<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_UnaryOp_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_UnaryOp_check: check and print a unary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_UnaryOp_check</name>   <comment type="line">// check a GraphBLAS unary operator</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_UnaryOp</name></type> <name>op</name></decl></parameter>,   <comment type="line">// GraphBLAS operator to print and check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,       <comment type="line">// name of the operator</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                 <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>                 <comment type="line">// file for output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n    GraphBLAS UnaryOp: %s "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check object</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CHECK_MAGIC</name> <argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    UnaryOp has an invalid opcode\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_USER_unop_code</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"(user-defined) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"(built-in) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"z=%s(x)\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_one</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_ONE_unop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_is_positional</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    UnaryOp has a NULL function pointer\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Type_check</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>, <argument><expr><literal type="string">"ztype"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    UnaryOp has an invalid ztype\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_is_positional</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_is_one</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Type_check</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><literal type="string">"xtype"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    UnaryOp has an invalid xtype\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>defn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
