<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_init.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_init: initialize GraphBLAS and declare malloc/calloc/realloc/free to use</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GrB_init (or GxB_init) must called before any other GraphBLAS operation.</comment>
<comment type="line">// GrB_finalize must be called as the last GraphBLAS operation.  GxB_init is</comment>
<comment type="line">// identical to GrB_init, except that it allows the user application to define</comment>
<comment type="line">// the malloc/calloc/realloc/free functions that SuiteSparse:GraphBLAS will</comment>
<comment type="line">// use.  The functions cannot be modified once GraphBLAS starts.</comment>

<comment type="line">// The calloc and realloc function pointers are optional and can be NULL.  If</comment>
<comment type="line">// calloc is NULL, it is not used, and malloc/memset are used instead.  If</comment>
<comment type="line">// realloc is NULL, it is not used, and malloc/memcpy/free are used instead.</comment>

<comment type="line">// Examples:</comment>
<comment type="line">//</comment>
<comment type="line">// To use GraphBLAS with the ANSI C11 functions (or to another library</comment>
<comment type="line">// linked in that replaces them): </comment>
<comment type="line">//</comment>
<comment type="line">//      // either use:</comment>
<comment type="line">//      GrB_init (mode) ;</comment>
<comment type="line">//      // or use this (but not both):</comment>
<comment type="line">//      GxB_init (mode, malloc, calloc, realloc, free) ;</comment>
<comment type="line">//</comment>
<comment type="line">// To use GraphBLAS from within a mexFunction:</comment>
<comment type="line">//</comment>
<comment type="line">//      #include "mex.h"</comment>
<comment type="line">//      GxB_init (mode, mxMalloc, mxCalloc, mxRealloc, mxFree) ;</comment>
<comment type="line">//</comment>
<comment type="line">// To use the C interface to the Intel TBB scalable allocators:</comment>
<comment type="line">//</comment>
<comment type="line">//      #include "tbb/scalable_allocator.h"</comment>
<comment type="line">//      GxB_init (mode, scalable_malloc, scalable_calloc, scalable_realloc,</comment>
<comment type="line">//          scalable_free) ;</comment>
<comment type="line">//</comment>
<comment type="line">// To use CUDA and its RMM memory manager:</comment>
<comment type="line">//</comment>
<comment type="line">//      GxB_init (mode, rmm_malloc, rmm_calloc, rmm_realloc, rmm_free) ;</comment>
<comment type="line">//</comment>
<comment type="line">//          where mode is GxB_BLOCKING_GPU or GxB_NONBLOCKING_GPU</comment>
<comment type="line">//</comment>
<comment type="line">// To use user-provided malloc and free functions, but not calloc/realloc:</comment>
<comment type="line">//</comment>
<comment type="line">//      GxB_init (mode, my_malloc, NULL, NULL, my_free) ;</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_init</name>           <comment type="line">// start up GraphBLAS and also define malloc, etc</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Mode</name></type> <name>mode</name></decl></parameter>,          <comment type="line">// blocking or non-blocking mode, GPU or not</comment>

    <comment type="line">// pointers to memory management functions</comment>
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>user_malloc_function</name>  ) <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,         <comment type="line">// required</comment>
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>user_calloc_function</name>  ) <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <comment type="line">// no longer used</comment>
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>user_realloc_function</name> ) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <comment type="line">// optional, can be NULL</comment>
    <parameter><function_decl><type><name>void</name></type>   (<modifier>*</modifier> <name>user_free_function</name>    ) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>          <comment type="line">// required</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><literal type="string">"GxB_init (mode, malloc, calloc, realloc, free)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>user_malloc_function</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>user_free_function</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// only malloc and free are required.  calloc and/or realloc may be</comment>
        <comment type="line">// NULL</comment>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize GraphBLAS</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>GB_init</name>
        <argument_list>(<argument><expr><name>mode</name></expr></argument>,                          <comment type="line">// blocking or non-blocking mode</comment>
        <argument><expr><name>user_malloc_function</name></expr></argument>,           <comment type="line">// user-defined malloc, required</comment>
        <argument><expr><name>user_realloc_function</name></expr></argument>,          <comment type="line">// user-defined realloc, may be NULL</comment>
        <argument><expr><name>user_free_function</name></expr></argument>,             <comment type="line">// user-defined free, required</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
