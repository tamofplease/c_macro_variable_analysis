<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_helper.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper.c: helper functions for @GrB interface</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// These functions are only used by the @GrB interface for</comment>
<comment type="line">// SuiteSparse:GraphBLAS.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_helper.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_NTHREADS: determine the number of threads to use</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NTHREADS</name><parameter_list>(<parameter><type><name>work</name></type></parameter>)</parameter_list></cpp:macro>                                       \
    <cpp:value>int nthreads_max = GB_Global_nthreads_max_get ( ) ;         \
    double chunk = GB_Global_chunk_get ( ) ;                    \
    int nthreads = GB_nthreads (work, chunk, nthreads_max) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ALLOCATE_WORK: allocate per-thread workspace</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ALLOCATE_WORK</name><parameter_list>(<parameter><type><name>work_type</name></type></parameter>)</parameter_list></cpp:macro>                                         \
    <cpp:value>size_t Work_size ;                                                      \
    work_type *Work = GB_MALLOC_WORK (nthreads, work_type, &amp;Work_size) ;    \
    if (Work == NULL) return (false) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_FREE_WORKSPACE: free per-thread workspace</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                                                   \
    <cpp:value>GB_FREE_WORK (&amp;Work, Work_size) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper0: get the current wall-clock time from OpenMP</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>double</name></type> <name>GB_helper0</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>GB_OPENMP_GET_WTIME</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper1: convert 0-based indices to 1-based for gbextracttuples</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>GB_helper1</name>              <comment type="line">// convert zero-based indices to one-based</comment>
<parameter_list>(
    <parameter><decl><type><name>double</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I_double</name></decl></parameter>,      <comment type="line">// output array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I</name></decl></parameter>,    <comment type="line">// input array</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nvals</name></decl></parameter>                   <comment type="line">// size of input and output arrays</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>I_double</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper1i: convert 0-based indices to 1-based for gbextracttuples</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>GB_helper1i</name>             <comment type="line">// convert zero-based indices to one-based</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I</name></decl></parameter>,            <comment type="line">// input/output array</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nvals</name></decl></parameter>                   <comment type="line">// size of input/output array</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper3: convert 1-based indices to 0-based for gb_mxarray_to_list</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>GB_helper3</name>             <comment type="line">// return true if OK, false on error</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>List</name></decl></parameter>,             <comment type="line">// size len, output array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>List_double</name></decl></parameter>, <comment type="line">// size len, input array</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List_max</name></decl></parameter>       <comment type="line">// also compute the max entry in the list (1-based)</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>List</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>List_double</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>List_max</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>listmax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_ALLOCATE_WORK</name> <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>my_ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>my_listmax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>List_double</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>x</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>my_ok</name> <operator>=</operator> <name>my_ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>i</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>my_listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>my_listmax</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>List</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <comment type="line">// rather than create a separate per-thread boolean workspace, just</comment>
        <comment type="line">// use a sentinal value of INT64_MIN if non-integer indices appear</comment>
        <comment type="line">// in List_double.</comment>
        <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>my_ok</name></expr> ?</condition><then> <expr><name>my_listmax</name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// wrapup</comment>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>listmax</name></expr></argument>, <argument><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>!=</operator> <name>INT64_MIN</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>List_max</name><operator>)</operator> <operator>=</operator> <name>listmax</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper3i: convert 1-based indices to 0-based for gb_mxarray_to_list</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>GB_helper3i</name>        <comment type="line">// return true if OK, false on error</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>List</name></decl></parameter>,             <comment type="line">// size len, output array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>List_int64</name></decl></parameter>, <comment type="line">// size len, input array</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List_max</name></decl></parameter>   <comment type="line">// also compute the max entry in the list (1-based)</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>listmax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_ALLOCATE_WORK</name> <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>my_listmax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>List_int64</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>my_listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>my_listmax</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>List</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_listmax</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// wrapup</comment>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>listmax</name></expr></argument>, <argument><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>List_max</name><operator>)</operator> <operator>=</operator> <name>listmax</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper4: find the max entry in a list of type GrB_Index</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>GB_helper4</name>             <comment type="line">// return true if OK, false on error</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I</name></decl></parameter>,    <comment type="line">// array of size len</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>len</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>List_max</name></decl></parameter>     <comment type="line">// also compute the max entry in the list (1-based,</comment>
                            <comment type="line">// which is max(I)+1)</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>listmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_ALLOCATE_WORK</name> <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>my_listmax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>my_listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>my_listmax</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_listmax</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// wrapup</comment>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>listmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>listmax</name></expr></argument>, <argument><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>listmax</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>List_max</name><operator>)</operator> <operator>=</operator> <name>listmax</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper5: construct pattern of S for gblogassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>GB_helper5</name>              <comment type="line">// construct pattern of S</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Si</name></decl></parameter>,         <comment type="line">// array of size anz</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sj</name></decl></parameter>,         <comment type="line">// array of size anz</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name></decl></parameter>,   <comment type="line">// array of size mnz, M-&gt;i, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mj</name></decl></parameter>,   <comment type="line">// array of size mnz,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mvlen</name></decl></parameter>,            <comment type="line">// M-&gt;vlen</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name></decl></parameter>,         <comment type="line">// array of size anz, A-&gt;i, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name></decl></parameter>,            <comment type="line">// M-&gt;vlen</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>anz</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Si</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Sj</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Si</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Sj</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Mj</name> <index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper7: Kx = uint64 (0:mnz-1), for gblogextract</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// TODO: use GrB_apply with a positional operator instead</comment>

<function><type><name>void</name></type> <name>GB_helper7</name>              <comment type="line">// Kx = uint64 (0:mnz-1)</comment>
<parameter_list>(
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Kx</name></decl></parameter>,          <comment type="line">// array of size mnz</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>mnz</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>mnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>mnz</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>Kx</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper8: expand a scalar into an array for gbbuild</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// TODO: use GrB_assign instead</comment>

<function><type><name>void</name></type> <name>GB_helper8</name>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>C</name></decl></parameter>,         <comment type="line">// output array of size nvals * s</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,         <comment type="line">// input scalar of size s</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl></parameter>,    <comment type="line">// size of C</comment>
    <parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>            <comment type="line">// size of each scalar</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// C [k] = A [0]</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>C</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>s</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_helper10: compute norm (x-y,p) of two dense FP32 or FP64 vectors</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// p can be:</comment>

<comment type="line">//      0 or 2:     2-norm, sqrt (sum ((x-y).^2))</comment>
<comment type="line">//      1:          1-norm, sum (abs (x-y))</comment>
<comment type="line">//      INT64_MAX   inf-norm, max (abs (x-y))</comment>
<comment type="line">//      INT64_MIN   (-inf)-norm, min (abs (x-y))</comment>
<comment type="line">//      other:      p-norm not yet computed</comment>

<function><type><name>double</name></type> <name>GB_helper10</name>       <comment type="line">// norm (x-y,p), or -1 on error</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>x_arg</name></decl></parameter>,             <comment type="line">// float or double, depending on type parameter</comment>
    <parameter><decl><type><name>bool</name></type> <name>x_iso</name></decl></parameter>,                 <comment type="line">// true if x is iso</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>y_arg</name></decl></parameter>,             <comment type="line">// same type as x, treat as zero if NULL</comment>
    <parameter><decl><type><name>bool</name></type> <name>y_iso</name></decl></parameter>,                 <comment type="line">// true if x is iso</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,              <comment type="line">// GrB_FP32 or GrB_FP64</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>p</name></decl></parameter>,                  <comment type="line">// 0, 1, 2, INT64_MIN, or INT64_MAX</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>type</name> <operator>==</operator> <name>GrB_FP32</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>GrB_FP64</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// type of x and y must be GrB_FP32 or GrB_FP64</comment>
        <return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace and determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_NTHREADS</name> <argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_ALLOCATE_WORK</name> <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x [x_iso ? 0 : k]</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name><parameter_list>(<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>y [y_iso ? 0 : k]</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// each thread computes its partial norm</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>k2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// FP32 case</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>float</name></type> <name>my_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>x_arg</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>y_arg</name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>p</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr>:</case>     <comment type="line">// Frobenius norm</comment>
                <case>case <expr><literal type="number">2</literal></expr>:</case>     <comment type="line">// 2-norm: sqrt of sum of (x-y).^2</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><operator>(</operator><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><literal type="number">1</literal></expr>:</case>     <comment type="line">// 1-norm: sum (abs (x-y))</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><name>INT64_MAX</name></expr>:</case>     <comment type="line">// inf-norm: max (abs (x-y))</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmaxf</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmaxf</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><name>INT64_MIN</name></expr>:</case>     <comment type="line">// (-inf)-norm: min (abs (x-y))</comment>
                <block>{<block_content>
                    <expr_stmt><expr><name>my_s</name> <operator>=</operator> <name>INFINITY</name></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fminf</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fminf</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabsf</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <default>default:</default> <empty_stmt>;</empty_stmt>  <comment type="line">// p-norm not yet supported</comment>
            </block_content>}</block></switch>
            <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>my_s</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// FP64 case</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>double</name></type> <name>my_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>x_arg</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>y_arg</name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>p</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr>:</case>     <comment type="line">// Frobenius norm</comment>
                <case>case <expr><literal type="number">2</literal></expr>:</case>     <comment type="line">// 2-norm: sqrt of sum of (x-y).^2</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><operator>(</operator><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><literal type="number">1</literal></expr>:</case>     <comment type="line">// 1-norm: sum (abs (x-y))</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>+=</operator> <call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><name>INT64_MAX</name></expr>:</case>     <comment type="line">// inf-norm: max (abs (x-y))</comment>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmax</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmax</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><name>INT64_MIN</name></expr>:</case>     <comment type="line">// (-inf)-norm: min (abs (x-y))</comment>
                <block>{<block_content>
                    <expr_stmt><expr><name>my_s</name> <operator>=</operator> <name>INFINITY</name></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmin</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>k1</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>k2</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><name>my_s</name> <operator>=</operator> <call><name>fmin</name> <argument_list>(<argument><expr><name>my_s</name></expr></argument>, <argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><call><name>xx</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>yy</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <break>break ;</break>

                <default>default:</default> <empty_stmt>;</empty_stmt>  <comment type="line">// p-norm not yet supported</comment>
            </block_content>}</block></switch>

            <expr_stmt><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_s</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// combine results of each thread</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <switch>switch <condition>(<expr><name>p</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>     <comment type="line">// Frobenius norm</comment>
        <case>case <expr><literal type="number">2</literal></expr>:</case>     <comment type="line">// 2-norm: sqrt of sum of (x-y).^2</comment>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sqrt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><literal type="number">1</literal></expr>:</case>     <comment type="line">// 1-norm: sum (abs (x-y))</comment>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>INT64_MAX</name></expr>:</case>     <comment type="line">// inf-norm: max (abs (x-y))</comment>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fmax</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>INT64_MIN</name></expr>:</case>     <comment type="line">// (-inf)-norm: min (abs (x-y))</comment>
        <block>{<block_content>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>Work</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>tid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>fmin</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>Work</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break>break ;</break>

        <default>default:</default>    <comment type="line">// p-norm not yet supported</comment>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
