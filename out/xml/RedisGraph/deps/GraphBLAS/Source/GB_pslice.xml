<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_pslice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_pslice: partition Ap for a set of tasks</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Ap [0..n] is an array with monotonically increasing entries.  This function</comment>
<comment type="line">// slices Ap so that each chunk has the same number of total values of its</comment>
<comment type="line">// entries.  Ap can be A-&gt;p for a matrix and then n = A-&gt;nvec.  Or it can be</comment>
<comment type="line">// the work needed for computing each vector of a matrix (see GB_ewise_slice</comment>
<comment type="line">// and GB_subref_slice, for example).</comment>

<comment type="line">// If Ap is NULL then the matrix A (not provided here) is full or bitmap,</comment>
<comment type="line">// which this function handles (Ap is implicit).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_pslice_worker: partition Ap for a set of tasks</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GB_pslice_worker</name>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Slice</name></decl></parameter>,     <comment type="line">// size ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,  <comment type="line">// array size n+1</comment>
    <parameter><decl><type><name>int</name></type> <name>tlo</name></decl></parameter>,                        <comment type="line">// assign to Slice [(tlo+1):(thi-1)]</comment>
    <parameter><decl><type><name>int</name></type> <name>thi</name></decl></parameter>                     
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ap</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Slice</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>tlo</name> <operator>&amp;&amp;</operator> <name>tlo</name> <operator>&lt;</operator> <name>thi</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>tlo</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>thi</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assign work to Slice [(tlo+1):(thi-1)]</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// klo = Slice [tlo] and khi = Slice [thi] are defined on input, where</comment>
    <comment type="line">// tlo &lt; thi - 1.  This determines the task boundaries for tasks</comment>
    <comment type="line">// tlo+1 to thi-1, which defines Slice [(tlo+1):(thi-1)].</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>klo</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>tlo</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>khi</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>thi</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>         <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>klo</name> <operator>&amp;&amp;</operator> <name>klo</name> <operator>&lt;=</operator> <name>khi</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p1</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>klo</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>khi</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>             <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p1</name> <operator>&lt;=</operator> <name>p2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>p2</name> <operator>||</operator> <name>klo</name> <operator>==</operator> <name>khi</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// no work is left so simply fill in with empty tasks</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>klo</name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>tlo</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>thi</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else <comment type="line">// p1 &lt; p2 &amp;&amp; klo &lt; khi</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// find task t that evenly partitions the work p1:p2 to tasks tlo:thi</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>klo</name> <operator>+</operator> <name>khi</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>       <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>klo</name> <operator>&lt;=</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>khi</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p1</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;=</operator> <name>p2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ntasks</name> <init>= <expr><name>thi</name> <operator>-</operator> <name>tlo</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>p1</name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>tlo</name> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name>floor</name> <argument_list>(<argument><expr><name>ratio</name> <operator>*</operator> <name>ntasks</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>tlo</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>thi</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>tlo</name> <operator>&lt;</operator> <name>t</name> <operator>&amp;&amp;</operator> <name>t</name> <operator>&lt;</operator> <name>thi</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assign work to task t</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// recursively partition for tasks (tlo+1):(t-1) and (t+1):(thi-1)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>tlo</name> <operator>&lt;</operator> <name>t</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_pslice_worker</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>tlo</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>thi</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_pslice_worker</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>thi</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_pslice: partition Ap for a set of tasks</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_pslice</name>                      <comment type="line">// slice Ap</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Slice</name></decl></parameter>,     <comment type="line">// size ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,  <comment type="line">// array size n+1 (NULL if full or bitmap)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,               <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>perfectly_balanced</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Slice</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;=</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>taskid</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is full or bitmap: slice 0:n equally for all tasks</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_eslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is sparse or hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>Ap</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// matrix is empty, or a single thread is used</comment>
            <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>Slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ntasks</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// slice Ap by # of entries</comment>
            <expr_stmt><expr><name><name>Slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>perfectly_balanced</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// this method is costly, and should only be used if the</comment>
                <comment type="line">// work is to be perfectly balanced (in particular, when there</comment>
                <comment type="line">// is just one task per thread, with static scheduling)</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>Ap</name> <index>[<expr><name>n</name></expr>]</index></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// binary search to find k so that Ap [k] == (taskid*work) /</comment>
                    <comment type="line">// ntasks.  The exact value will not typically not be found;</comment>
                    <comment type="line">// just pick what the binary search comes up with.</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>wtask</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <call><name>GB_PART</name> <argument_list>(<argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>work</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_TRIM_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>wtask</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Slice</name> <index>[<expr><name>taskid</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// this is much faster, and results in good load balancing if</comment>
                <comment type="line">// there is more than one task per thread, and dynamic</comment>
                <comment type="line">// scheduling is used.</comment>
                <expr_stmt><expr><call><name>GB_pslice_worker</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>==</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><name>taskid</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>Slice</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
