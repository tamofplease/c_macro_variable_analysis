<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_M_accum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_M_accum:  assign to C bitmap </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;M&gt;(I,J) += A       assign</comment>
<comment type="line">// C(I,J)&lt;M&gt; += A       subassign</comment>

<comment type="line">// C&lt;M,repl&gt;(I,J) += A       assign</comment>
<comment type="line">// C(I,J)&lt;M,repl&gt; += A       subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           present, hypersparse or sparse (not bitmap or full)</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// Mask_struct: true or false</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign, row assign, col assign, or subassign</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_assign_M_accum</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// I index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// J index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix, which is not NULL here</comment>
<comment type="line">//  const bool Mask_comp,       // false here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// present here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>assign_kind</name></decl></parameter>,      <comment type="line">// row assign, col assign, assign, or subassign</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit3"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>,
        <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for bitmap assign, M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign, M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, M, A, and accum</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <expr_stmt><expr><name>GB_SLICE_M</name>
    <name>GB_GET_A_AND_SCALAR</name>
    <name>GB_GET_ACCUM_FOR_BITMAP</name></expr></expr_stmt>

    <comment type="line">// if C FULL:  if C_replace false, no deletion occurs</comment>
    <comment type="line">// if C_replace is true: convert C to bitmap first</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the assignment</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar subassignment: C(I,J)&lt;M&gt; += scalar</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>keep</name> <init>= <expr><ternary><condition><expr><name>C_replace</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <comment type="line">// for all entries in the mask M:</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_MASK_WORK</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>            \
        <cpp:value>{                                   \
            int8_t cb = Cb [pC] ;           \
            <comment type="block">/* keep this entry */</comment>           \
            Cb [pC] = keep ;                \
            if (cb == 0)                    \
            {                               \
                <comment type="block">/* Cx [pC] = scalar */</comment>      \
                GB_ASSIGN_SCALAR (pC) ;     \
                task_cnvals++ ;             \
            }                               \
            else <comment type="block">/* (cb == 1) */</comment>            \
            {                               \
                <comment type="block">/* Cx [pC] += scalar */</comment>     \
                GB_ACCUM_SCALAR (pC) ;      \
            }                               \
        }</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_M_sub_template.c"</cpp:file></cpp:include>

        <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// for all entries in IxJ</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>      \
            <cpp:value>{                                   \
                int8_t cb = Cb [pC] ;           \
                Cb [pC] = (cb == 3) ;           \
                task_cnvals -= (cb == 1) ;      \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scatter M into C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Cb [pC] += 2 for each entry M(i,j) in the mask</comment>
        <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_PLUS_2</name></expr></argument>,
            <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// the bitmap of C now contains:</comment>
        <comment type="line">//  Cb (i,j) = 0:   cij not present, mij zero</comment>
        <comment type="line">//  Cb (i,j) = 1:   cij present, mij zero</comment>
        <comment type="line">//  Cb (i,j) = 2:   cij not present, mij 1</comment>
        <comment type="line">//  Cb (i,j) = 3:   cij present, mij 1</comment>

        <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// scalar assignment: C&lt;M&gt;(I,J) += scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>assign_kind</name> <operator>==</operator> <name>GB_ASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// for all entries in IxJ</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>      \
            <cpp:value>{                                   \
                int8_t cb = Cb [pC] ;           \
                if (cb == 2)                    \
                {                               \
                    <comment type="block">/* Cx [pC] = scalar */</comment>      \
                    GB_ASSIGN_SCALAR (pC) ;     \
                    Cb [pC] = 3 ;               \
                    task_cnvals++ ;             \
                }                               \
                else if (cb == 3)               \
                {                               \
                    <comment type="block">/* Cx [pC] += scalar */</comment>     \
                    GB_ACCUM_SCALAR (pC) ;      \
                }                               \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// matrix assignment: C&lt;M&gt;(I,J) += A or C(I,J)&lt;M&gt; += A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">//  for all entries aij in A (A hyper, sparse, bitmap, or full)</comment>
            <comment type="line">//      if Cb(p) == 0       // do nothing</comment>
            <comment type="line">//      if Cb(p) == 1       // do nothing</comment>
            <comment type="line">//      if Cb(p) == 2:</comment>
            <comment type="line">//          Cx(p) = aij</comment>
            <comment type="line">//          Cb(p) = 3       // C(iC,jC) is now present, insert</comment>
            <comment type="line">//          task_cnvals++</comment>
            <comment type="line">//      if Cb(p) == 3:</comment>
            <comment type="line">//          Cx(p) += aij    // C(iC,jC) still present, updated</comment>
            <comment type="line">//          Cb(p) still 3</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>{                                   \
                int8_t cb = Cb [pC] ;           \
                if (cb == 2)                    \
                {                               \
                    <comment type="block">/* Cx [pC] = Ax [pA] */</comment>     \
                    GB_ASSIGN_AIJ (pC, pA) ;    \
                    Cb [pC] = 3 ;               \
                    task_cnvals++ ;             \
                }                               \
                else if (cb == 3)               \
                {                               \
                    <comment type="block">/* Cx [pC] += Ax [pA] */</comment>    \
                    GB_ACCUM_AIJ (pC, pA) ;     \
                }                               \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// final pass: clear M from C or handle C_replace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// scan all of C for the C_replace phase</comment>
            <comment type="line">// for row assign: for all entries in C(i,:)</comment>
            <comment type="line">// for col assign: for all entries in C(:,j)</comment>
            <comment type="line">// for assign: for all entries in C(:,:)</comment>
            <comment type="line">// for subassign: for all entries in C(I,J)</comment>
                    <comment type="line">// 0 -&gt; 0</comment>
                    <comment type="line">// 1 -&gt; 0  delete this entry</comment>
                    <comment type="line">// 2 -&gt; 0</comment>
                    <comment type="line">// 3 -&gt; 1: keep this entry.  already counted above</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                 \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                Cb [pC] = (cb == 3) ;               \
                task_cnvals -= (cb == 1) ;          \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// clear M from C</comment>
            <comment type="line">// Cb [pC] -= 2 for each entry M(i,j) in the mask</comment>
            <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
                <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_MINUS_2</name></expr></argument>,
                <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final C for bitmap assign, M, accum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
