<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Scalar_extractElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Scalar_extractElement: extract a single entry from a GrB_Scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extract a single entry, x = s, typecasting from the type of s to the type of</comment>
<comment type="line">// x, as needed.</comment>

<comment type="line">// Returns GrB_SUCCESS if s is present, and sets x to its value.</comment>
<comment type="line">// Returns GrB_NO_VALUE if s does not have an entry, and x is unmodified.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WHERE_STRING</name></cpp:macro> <cpp:value>"GrB_Scalar_extractElement (&amp;x, s)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_BOOL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>bool</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_BOOL_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_INT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT8_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_INT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT16_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_INT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_INT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_INT64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_UINT8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT8_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_UINT16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT16_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_UINT32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_UINT64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UINT64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_FP32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FP32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_FP64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FP64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GxB_Scalar_extractElement_FC32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>GxB_FC32_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FC32_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GxB_Scalar_extractElement_FC64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>GxB_FC64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_FC64_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UDT_EXTRACT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT_ELEMENT</name></cpp:macro> <cpp:value>GrB_Scalar_extractElement_UDT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XTYPE</name></cpp:macro> <cpp:value>void</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_XCODE</name></cpp:macro> <cpp:value>GB_UDT_code</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Scalar_extractElement.c"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Scalar_extractElement: (historical)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_BOOL</name>   <parameter_list>(<parameter><decl><type><name>bool</name>     <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_BOOL</name>   <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_INT8</name>   <parameter_list>(<parameter><decl><type><name>int8_t</name>   <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_INT8</name>   <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_INT16</name>  <parameter_list>(<parameter><decl><type><name>int16_t</name>  <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_INT16</name>  <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_INT32</name>  <parameter_list>(<parameter><decl><type><name>int32_t</name>  <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_INT32</name>  <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_INT64</name>  <parameter_list>(<parameter><decl><type><name>int64_t</name>  <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_INT64</name>  <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_UINT8</name>  <parameter_list>(<parameter><decl><type><name>uint8_t</name>  <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_UINT8</name>  <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_UINT16</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_UINT16</name> <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_UINT32</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_UINT32</name> <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_UINT64</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_UINT64</name> <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_FP32</name>   <parameter_list>(<parameter><decl><type><name>float</name>    <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_FP32</name>   <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_FP64</name>   <parameter_list>(<parameter><decl><type><name>double</name>   <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_FP64</name>   <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_extractElement_UDT</name>    <parameter_list>(<parameter><decl><type><name>void</name>     <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_extractElement_UDT</name>    <argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>

</unit>
