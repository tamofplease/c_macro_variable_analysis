<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_IxJ_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_IxJ_slice: slice IxJ for subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Construct a set of tasks to compute C(I,J)&lt;...&gt; = x or += x, for a subassign</comment>
<comment type="line">// method that performs scalar assignment, based on slicing the Cartesian</comment>
<comment type="line">// product IxJ.  If enough tasks can be constructed by just slicing J, then all</comment>
<comment type="line">// tasks are coarse.  Each coarse tasks computes all of C(I,J(kfirst:klast-1)),</comment>
<comment type="line">// for its range of indices kfirst:klast-1, inclusive.</comment>

<comment type="line">// Otherwise, if not enough coarse tasks can be constructed, then all tasks are</comment>
<comment type="line">// fine.  Each fine task computes a slice of C(I(iA_start:iA_end-1), jC) for a</comment>
<comment type="line">// single index jC = J(kfirst).</comment>

<comment type="line">// This method is used by methods 01, 03, 13, 15, 17, 19, which are the 6</comment>
<comment type="line">// scalar assignment methods that must iterate over all IxJ.</comment>

        <comment type="line">//  =====================       ==============</comment>
        <comment type="line">//  M   cmp rpl acc A   S       method: action</comment>
        <comment type="line">//  =====================       ==============</comment>
        <comment type="line">//  -   -   -   -   -   S       01:  C(I,J) = x, with S</comment>
        <comment type="line">//  -   -   -   +   -   S       03:  C(I,J) += x, with S</comment>
        <comment type="line">//  M   c   -   -   -   S       13:  C(I,J)&lt;!M&gt; = x, with S</comment>
        <comment type="line">//  M   c   -   +   -   S       15:  C(I,J)&lt;!M&gt; += x, with S</comment>
        <comment type="line">//  M   c   r   -   -   S       17:  C(I,J)&lt;!M,repl&gt; = x, with S</comment>
        <comment type="line">//  M   c   r   +   -   S       19:  C(I,J)&lt;!M,repl&gt; += x, with S</comment>

<comment type="line">// There are 10 methods that perform scalar assignment: the 6 listed above, and</comment>
<comment type="line">// Methods 05, 07, 09, and 11.  The latter 4 methods do not need to iterate</comment>
<comment type="line">// over the entire IxJ space, because of the mask M:</comment>

        <comment type="line">//  M   -   -   -   -   -       05:  C(I,J)&lt;M&gt; = x</comment>
        <comment type="line">//  M   -   -   +   -   -       07:  C(I,J)&lt;M&gt; += x</comment>
        <comment type="line">//  M   -   r   -   -   S       09:  C(I,J)&lt;M,repl&gt; = x, with S</comment>
        <comment type="line">//  M   -   r   +   -   S       11:  C(I,J)&lt;M,repl&gt; += x, with S</comment>

<comment type="line">// As a result, they do not use GB_subassign_IxJ_slice to define their tasks.</comment>
<comment type="line">// Instead, Methods 05 and 07 slice the matrix M, and Methods 09 and 11 slice</comment>
<comment type="line">// the matrix addition M+S.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_IxJ_slice</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_IxJ_slice</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads to use</comment>
    <comment type="line">// input:</comment>
<comment type="line">//  const GrB_Index *I,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
<comment type="line">//  const int Ikind,</comment>
<comment type="line">//  const int64_t Icolon [3],</comment>
<comment type="line">//  const GrB_Index *J,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
<comment type="line">//  const int Jkind,</comment>
<comment type="line">//  const int64_t Jcolon [3],</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name></decl>, <decl><type ref="prev"/><name>max_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nthreads</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier></type><name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the initial TaskList</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nI</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nJ</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return for a single task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nJ</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks0</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single coarse task that does all the work</comment>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>nJ</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nJ</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the tasks: all fine or all coarse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The desired number of tasks is ntasks0.  If this is less than or equal</comment>
    <comment type="line">// to |J|, then all tasks can be coarse, and each coarse task handles one</comment>
    <comment type="line">// or more indices in J.  Otherise, multiple fine tasks are constructed for</comment>
    <comment type="line">// each index in J.</comment>

    <if_stmt><if>if <condition>(<expr><name>ntasks0</name> <operator>&lt;=</operator> <name>nJ</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// all coarse tasks: slice just J</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <name>ntasks0</name></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// the coarse task computes C (I, J (j:jlast-1))</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>jlast</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>jlast</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>&lt;=</operator> <name>jlast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>jlast</name> <operator>&lt;=</operator> <name>nJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>jlast</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// all fine tasks: slice both I and J</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// create at least 2 fine tasks per index in J</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nI_fine_tasks</name> <init>= <expr><name>ntasks0</name> <operator>/</operator> <name>nJ</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>nI_fine_tasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nI_fine_tasks</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>nJ</name> <operator>*</operator> <name>nI_fine_tasks</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// construct fine tasks for index j</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>nJ</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// create nI_fine_tasks for each index in J</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>nI_fine_tasks</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// this fine task computes C (I (iA_start:iA_end-1), jC)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_start</name></decl>, <decl><type ref="prev"/><name>iA_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>nI_fine_tasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA</name>     <operator>=</operator> <name>iA_start</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pA_end</name> <operator>=</operator> <name>iA_end</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;=</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
