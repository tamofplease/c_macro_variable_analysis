<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_select.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_select: select entries from a matrix using a GrB_IndexUnaryOp</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = accum(C,select(A,k)) or accum(C,select(A',))</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_scalar.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sel: select using a GrB_IndexUnaryOp</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_sel</name>   <comment type="line">// C&lt;M&gt; = accum (C, select(A,k)) or select(A',k)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>,      <comment type="line">// operator to select the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>Thunk</name></decl></parameter>,         <comment type="line">// optional input for select operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,      <comment type="line">// descriptor for C, M, and A</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_select"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>A_transpose</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the entries and optionally transpose; assemble pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_select</name> <argument_list>(
        <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,               <comment type="line">// C and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// optional accum for Z=accum(C,T)</comment>
        <argument><expr><operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>op</name></expr></argument>,           <comment type="line">// operator to select the entries</comment>
        <argument><expr><name>A</name></expr></argument>,                          <comment type="line">// first input: A</comment>
        <argument><expr><name>Thunk</name></expr></argument>,                      <comment type="line">// optional input for select operator</comment>
        <argument><expr><name>A_transpose</name></expr></argument>,                <comment type="line">// descriptor for A</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_select_TYPE: select entries from a matrix (built-in types)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SEL</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                               \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Matrix_select_, T)                              \
(                                                                           \
    GrB_Matrix C,                   <comment type="block">/* input/output matrix for results */</comment>   \
    const GrB_Matrix M,             <comment type="block">/* optional mask for C, or NULL */</comment>      \
    const GrB_BinaryOp accum,       <comment type="block">/* optional accum for Z=accum(C,T) */</comment>   \
    const GrB_IndexUnaryOp op,      <comment type="block">/* operator to select the entries */</comment>    \
    const GrB_Matrix A,             <comment type="block">/* first input:  matrix A */</comment>            \
    const type thunk,               <comment type="block">/* optional input for select operator */</comment>\
    const GrB_Descriptor desc       <comment type="block">/* descriptor for C, M, and A */</comment>        \
)                                                                           \
{                                                                           \
    GB_WHERE (C, GB_STR(prefix) "_Matrix_select_" GB_STR(T)                 \
        " (C, M, accum, op, A, thunk, desc)") ;                             \
    GB_SCALAR_WRAP (Thunk, thunk, GB_EVAL3 (prefix, _, T)) ;                \
    return (GB_sel (C, M, accum, op, A, Thunk, desc, Context)) ;            \
}</cpp:value></cpp:define>

<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>  )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>  )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument> )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument> )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument> )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument> )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument>)</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument>)</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument>)</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>  )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>  )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>  )</argument_list></macro>
<macro><name>GB_SEL</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_select_UDT: select entries from matrix (thunk: user-defined type)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_select_UDT</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for C, or NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>,      <comment type="line">// operator to select the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>,              <comment type="line">// optional input for select operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for C, M, and A</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_select_UDT (C, M, accum, op, A, thunk, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_SCALAR_WRAP_UDT</name> <argument_list>(<argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>thunk</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_sel</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_select_Scalar: select entries from a matrix (thunk is GrB_Scalar)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_select_Scalar</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask for C, or NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>,      <comment type="line">// operator to select the entries</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>Thunk</name></decl></parameter>,         <comment type="line">// optional input for select operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for C, M, and A</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GrB_Matrix_select_Scalar (C, M, accum, op, A, thunk, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_sel</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Thunk</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
