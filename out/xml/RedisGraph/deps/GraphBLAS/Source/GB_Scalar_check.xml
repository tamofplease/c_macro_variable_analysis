<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Scalar_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Scalar_check: print a GraphBLAS GrB_Scalar and check if it is valid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GrB_Scalar: same as a GrB_Vector of length 1</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Scalar_check</name>    <comment type="line">// check a GraphBLAS GrB_Scalar</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>,     <comment type="line">// GraphBLAS GrB_Scalar to print and check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,       <comment type="line">// name of the GrB_Scalar</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                 <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>                 <comment type="line">// file for output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check GrB_Matrix conditions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_matvec_check</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"scalar"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GrB_Matrix form is invalid already</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check GrB_Scalar specific conditions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_SCALAR_OK</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    GrB_Scalar is invalid [%s]\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
