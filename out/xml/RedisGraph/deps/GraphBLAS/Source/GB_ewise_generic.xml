<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ewise_generic.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ewise_generic: generic methods for eWiseMult and eWiseAdd</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_ewise_generic handles the generic case for ewise operations, when no</comment>
<comment type="line">// built-in worker in the switch factory can handle this case.  This occurs</comment>
<comment type="line">// for user-defined operators, when typecasting occurs, or for FIRST[IJ]* and</comment>
<comment type="line">// SECOND[IJ]* positional operators.</comment>

<comment type="line">// C is not iso, but A and/or B might be.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ewise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>             \
<cpp:value>{                               \
    GB_phybix_free (C) ;        \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>GB_ewise_generic</name>       <comment type="line">// generic ewise</comment>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,           <comment type="line">// output matrix, static header</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,  <comment type="line">// op to perform C = op (A,B)</comment>
    <comment type="line">// tasks from phase1a:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,  <comment type="line">// array of structs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_ntasks</name></decl></parameter>,                         <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,                       <comment type="line">// # of threads to use</comment>
    <comment type="line">// analysis from phase0:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_sparsity</name></decl></parameter>,
    <comment type="line">// from GB_emult_sparsity or GB_add_sparsity:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ewise_method</name></decl></parameter>,
    <comment type="line">// from GB_emult_04 and GB_emult_02:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp_kfirst</name></decl></parameter>,
    <comment type="line">// to slice M, A, and/or B,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>M_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_nthreads</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_nthreads</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>B_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_nthreads</name></decl></parameter>,
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for ewise generic"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for ewise generic"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for ewise generic"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for ewise generic"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the opcode and define the typecasting functions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// the following booleans are all false if flipxy is true, since flipxy has</comment>
    <comment type="line">// already been handled in the caller, in this case.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>op_is_first</name>  <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>op_is_second</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>op_is_pair</name>   <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_pattern</name> <init>= <expr><operator>(</operator><name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_pattern</name> <init>= <expr><operator>(</operator><name>op_is_first</name>  <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// if flipxy true use fop(y,x) else fop(x,y)</comment>
<comment type="line">//  const bool flipxy = (ewise_method &lt; 0) ;        TODO</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name> <init>= <expr><operator>(</operator><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD3</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GxB_binary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt> <comment type="line">// NULL if op positional</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bsize</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ytype</name> <init>= <expr><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_pattern</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ysize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_is_pattern</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>=
        <expr><ternary><condition><expr><operator>(</operator><name>A_is_pattern</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_cast_function</name></type> <name>cast_B_to_Y</name> <init>= 
        <expr><ternary><condition><expr><operator>(</operator><name>B_is_pattern</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_cast_function</name></type> <name>cast_Z_to_C</name> <init>=
        <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// aij = (xtype) A(i,j), located in Ax [pA]</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETA</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>                                    \
        <cpp:value>GB_void aij [GB_VLA(xsize)] ;                                   \
        if (cast_A_to_X != NULL)                                        \
        {                                                               \
            cast_A_to_X (aij, Ax +((A_iso) ? 0:(pA)*asize), asize) ;    \
        }</cpp:value></cpp:define>

    <comment type="line">// bij = (ytype) B(i,j), located in Bx [pB]</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETB</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro>                                    \
        <cpp:value>GB_void bij [GB_VLA(ysize)] ;                                   \
        if (cast_B_to_Y != NULL)                                        \
        {                                                               \
            cast_B_to_Y (bij, Bx +((B_iso) ? 0:(pB)*bsize), bsize) ;    \
        }</cpp:value></cpp:define>

    <comment type="line">// address of Cx [p]</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx +((p)*csize)</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>

    <comment type="line">// loops cannot be vectorized</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <comment type="line">// flipxy is handled in the definition of GB_BINOP, not in the tempate</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the ewise operation</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C(i,j) = positional_op (aij, bij)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>offset</name> <init>= <expr><call><name>GB_positional_offset</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>index_is_i</name> <init>= 
            <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRSTI_binop_code</name>  <operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRSTI1_binop_code</name> <operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECONDI_binop_code</name> <operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECONDI1_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
        <block>{<block_content>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>                         \
                <cpp:value>int64_t z = ((index_is_i) ? i : j) + offset ;             \
                cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD2</name> <operator>||</operator>
                <name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD3</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD4</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_04_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_emult_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_meta.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>                         \
                <cpp:value>int32_t z = (int32_t) (((index_is_i) ? i : j) + offset) ; \
                cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD2</name> <operator>||</operator>
                <name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD3</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD4</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_04_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_emult_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_meta.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// standard binary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C(i,j) = (ctype) (A(i,j) + B(i,j))</comment>
        <if_stmt><if>if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD2</name> <operator>||</operator>
            <name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD3</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// handle flipxy</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   \
                <cpp:value>GB_void z [GB_VLA(zsize)] ;         \
                if (flipxy)                         \
                {                                   \
                    fop (z, bij, aij) ;             \
                }                                   \
                else                                \
                {                                   \
                    fop (z, aij, bij) ;             \
                }                                   \
                cast_Z_to_C (cij, z, csize) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD4</name></expr>)</condition>
        <block>{<block_content> 
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   \
                <cpp:value>GB_void z [GB_VLA(zsize)] ;         \
                fop (z, aij, bij) ;                 \
                cast_Z_to_C (cij, z, csize) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_04_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
        <block>{<block_content> 
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_emult_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_meta.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C from ewise generic"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
