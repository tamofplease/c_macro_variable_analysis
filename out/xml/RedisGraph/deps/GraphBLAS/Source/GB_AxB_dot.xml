<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_dot.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot: C&lt;M&gt;=A'*B using dot products</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Parallel matrix-matrix multiply, A'*B, with optional mask M.  This</comment>
<comment type="line">// method is used by GrB_mxm, GrB_vxm, and GrB_mxv.  For both of the latter two</comment>
<comment type="line">// methods, B on input will be an nrows-by-1 column vxector.</comment>

<comment type="line">// This function, and the matrices C, M, A, and B are all CSR/CSC agnostic.</comment>
<comment type="line">// For this discussion, suppose they are CSC, with vlen = # of rows, and vdim =</comment>
<comment type="line">// # of columns.</comment>

<comment type="line">// C=A'*B, C&lt;M&gt;=A'*B or C&lt;!M&gt;=A'*B is being computed.  A has not been</comment>
<comment type="line">// transposed yet (and will not be).  A and B must have the same vector length,</comment>
<comment type="line">// vlen (as if both A and B are CSC matrices with the same number of rows, for</comment>
<comment type="line">// example).  GB_AxB_dot2 and GB_AxB_dot3 operate on A' without forming it.</comment>
<comment type="line">// GB_AxB_dot2 computes C=A'*B and C&lt;!M&gt;=A'*B, and it takes Omega(m*n) time,</comment>
<comment type="line">// if C is m-by-n.  It is thus only suitable for cases when A and B are large,</comment>
<comment type="line">// and C is small.  GB_AxB_dot3 computes C&lt;M&gt;=A'*B, and it only needs to</comment>
<comment type="line">// examine entries in M, taking Omega(nnz(M)) time.  It can thus be used for</comment>
<comment type="line">// very large matrices C.  GB_AxB_dot4 computes C+=A'*B when C is dense.</comment>

<comment type="line">// The output matrix C has not been allocated.  It is an uninitialzed static</comment>
<comment type="line">// header on input.  The mask M is optional.</comment>

<comment type="line">// If the result is computed in-place, then the C parameter is ignored, and the</comment>
<comment type="line">// result is computed in C_in instead.  This case requires the accum operator</comment>
<comment type="line">// to match the monoid of the semiring.</comment>

<comment type="line">// The semiring defines C=A*B.  flipxy modifies how the semiring multiply</comment>
<comment type="line">// operator is applied.  If false, then fmult(aik,bkj) is computed.  If true,</comment>
<comment type="line">// then the operands are swapped, and fmult(bkj,aij) is done instead.</comment>

<comment type="line">// Context: the GB_Context containing the # of threads to use, a string of the</comment>
<comment type="line">// user-callable function that is calling this function (GrB_mxm, GrB_mxv, or</comment>
<comment type="line">// GxB_vxm) and detailed error reports.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_dot</name>                 <comment type="line">// dot product (multiple methods)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// output matrix, static header</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C_in</name></decl></parameter>,                <comment type="line">// input/output matrix, if done in-place</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,                   <comment type="line">// optional mask matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C=A*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// if true, do z=fmult(b,a) vs fmult(a,b)</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>mask_applied</name></decl></parameter>,             <comment type="line">// if true, mask was applied</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done_in_place</name></decl></parameter>,            <comment type="line">// if true, C_in was computed in-place</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for dot A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for dot A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for dot A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring for dot A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><literal type="string">"C_in for dot A'*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if C is iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><call><name>GB_iso_AxB</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// revise the method if A and B are both iso and full</comment>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>B</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is iso and full; do not apply the mask</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso full dot) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>done_in_place</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            <comment type="line">// set C-&gt;iso = true    OK</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// existing header</comment>
                <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><name>GB_HYPER_SWITCH_DEFAULT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iso_kind</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>C_iso</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"iso "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// in-place C+=A'*B.  mask is not present (and not applied)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_AxB_dot4_control</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C_in must be as-if-full on input.  M must be NULL and not</comment>
        <comment type="line">// complemented.  the C iso case is not handled (where C is iso on</comment>
        <comment type="line">// output), but C_in might be iso on input.</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
        <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
            <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>    <comment type="line">// no mask to apply</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot4</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>done_in_place</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_NO_VALUE</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// return if dot4 has handled this case, otherwise fall through</comment>
            <comment type="line">// to dot2 or dot3 below.</comment>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the empty case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no work to do; C is an empty matrix, normally hypersparse</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(empty dot) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// auto sparsity, existing header</comment>
            <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>,
            <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt;=A'*B: general case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_AxB_dot3_control</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// use dot3 if M is present and not complemented, and either sparse or</comment>
        <comment type="line">// hypersparse</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%sdot3) "</literal></expr></argument>, <argument><expr><name>iso_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>    <comment type="line">// mask is always applied</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>done_in_place</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

        <comment type="line">// construct the hyper hashes for A and B</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%s%s%s%s = %s'*%s) "</literal></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>,    <comment type="line">// C has the same sparsity as M</comment>
            <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"{"</literal></expr> </then><else>: <expr><literal type="string">"&lt;"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"}"</literal></expr> </then><else>: <expr><literal type="string">"&gt;"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
        <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
            <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GBCUDA</name></expr></argument> )</argument_list></call></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_iso</name> <operator>&amp;&amp;</operator>   <comment type="line">// fixme for CUDA, remove and create C iso on output</comment>
            <call><name>GB_AxB_dot3_cuda_branch</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
            <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><call><name>GB_AxB_dot3_cuda</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>,
                <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content> 
            <comment type="line">// use the CPU</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><call><name>GB_AxB_dot3</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
                <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// general case: C&lt;M&gt;=A'*B, C&lt;!M&gt;=A'*B, or C=A'*B, not in-place</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%sdot2) "</literal></expr></argument>, <argument><expr><name>iso_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt> <comment type="line">// mask applied if present</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>done_in_place</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>      <comment type="line">// TODO: allow dot2 to work in-place</comment>
    <return>return <expr><operator>(</operator><call><name>GB_AxB_dot2</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>false</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
