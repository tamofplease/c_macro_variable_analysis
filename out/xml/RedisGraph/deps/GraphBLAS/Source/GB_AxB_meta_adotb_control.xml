<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_meta_adotb_control.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_meta_adotb_control: determine method for computing C=A'*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_AxB_meta_adotb_control</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>axb_method</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C_in</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C=A*B</comment>
    <parameter><decl><type><name>bool</name></type> <name>flipxy</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>can_do_in_place</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>allow_scale</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>B_is_diagonal</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Desc_Value</name></type> <name>AxB_method</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// C=A'*B is being computed: use the dot product without computing A'</comment>
    <comment type="line">// or use the saxpy (Gustavson) method</comment>

    <comment type="line">// use saxpy by default, unless selecting other methods below</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_SAXPY</name></expr> ;</expr_stmt>

    <comment type="line">// If the mask is present, only entries for which M(i,j)=1 are</comment>
    <comment type="line">// computed, which makes this method very efficient when the mask is</comment>
    <comment type="line">// very sparse (triangle counting, for example).  Each entry C(i,j) for</comment>
    <comment type="line">// which M(i,j)=1 is computed via a dot product, C(i,j) =</comment>
    <comment type="line">// A(:,i)'*B(:,j).  If the mask is not present, the dot-product method</comment>
    <comment type="line">// is very slow in general, and thus the saxpy method is usually used</comment>
    <comment type="line">// instead.</comment>

    <if_stmt><if>if <condition>(<expr><name>allow_scale</name> <operator>&amp;&amp;</operator> <name>M</name> <operator>==</operator> <name>NULL</name>
        <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call>     <comment type="line">// TODO: A'*D colscale with A bitmap</comment>
        <operator>&amp;&amp;</operator> <name>B_is_diagonal</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C = A'*D, col scale</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_COLSCALE</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>allow_scale</name> <operator>&amp;&amp;</operator> <name>M</name> <operator>==</operator> <name>NULL</name>
        <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call>     <comment type="line">// TODO: D*B rowscale with B bitmap</comment>
        <operator>&amp;&amp;</operator> <call><name>GB_is_diagonal</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C = D*B, row scale</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_ROWSCALE</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>AxB_method</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// auto selection for A'*B</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>C_out_iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// ignored unless C can be done in-place</comment>
        <if_stmt><if>if <condition>(<expr><name>can_do_in_place</name> <operator>&amp;&amp;</operator> <name>C_in</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// check if C will be iso on output (for dot4 control only).</comment>
            <comment type="line">// Ignored if dot4 C_in is not present or C cannot be</comment>
            <comment type="line">// computed in-place.</comment>
            <expr_stmt><expr><name>C_out_iso</name> <operator>=</operator> <call><name>GB_iso_AxB</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>,
                <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_AxB_dot4_control</name> <argument_list>(<argument><expr><name>C_out_iso</name></expr></argument>, <argument><expr><ternary><condition><expr><name>can_do_in_place</name></expr> ?</condition><then> <expr><name>C_in</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C+=A'*B can be done with dot4</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_DOT</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_AxB_dot3_control</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C&lt;M&gt;=A'*B uses the masked dot product method (dot3)</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_DOT</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_AxB_dot2_control</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C=A'*B or C&lt;!M&gt;=A'B* can efficiently use the dot2 method</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_DOT</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>AxB_method</name> <operator>==</operator> <name>GxB_AxB_DOT</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// user selection for A'*B</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>axb_method</name><operator>)</operator> <operator>=</operator> <name>GB_USE_DOT</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
