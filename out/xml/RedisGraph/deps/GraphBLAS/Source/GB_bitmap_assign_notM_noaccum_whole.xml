<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_notM_noaccum_whole.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_notM_noaccum_whole:  assign to C bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;!M&gt; = A       assign</comment>
<comment type="line">// C&lt;!M&gt; = A       subassign</comment>

<comment type="line">// C&lt;!M,repl&gt; = A       assign</comment>
<comment type="line">// C&lt;!M,repl&gt; = A       subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           present, hypersparse or sparse (not bitmap or full)</comment>
<comment type="line">// Mask_comp:   true</comment>
<comment type="line">// Mask_struct: true or false</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       not present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign or subassign (same action)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_assign_notM_noaccum_whole</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix</comment>
<comment type="line">//  const bool Mask_comp,       // true here, for !M only</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
<comment type="line">//  const GrB_BinaryOp accum,   // not present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit8:whole"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>GB_ASSIGN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, !M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for bitmap assign, !M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign, !M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <decl_stmt><decl><type><name>GB_SLICE_M</name>
    <name>GB_GET_A_AND_SCALAR</name></type>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter M into the bitmap of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Cb [pC] += 2 for each entry M(i,j) in the mask</comment>
    <name>GB_bitmap_M_scatter_whole</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_PLUS_2</name></expr></argument>,
        <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></decl> ;</decl_stmt>
    <comment type="line">// the bitmap of C now contains:</comment>
    <comment type="line">//  Cb (i,j) = 0:   cij not present, mij zero</comment>
    <comment type="line">//  Cb (i,j) = 1:   cij present, mij zero</comment>
    <comment type="line">//  Cb (i,j) = 2:   cij not present, mij 1</comment>
    <comment type="line">//  Cb (i,j) = 3:   cij present, mij 1</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the assignment</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar assignment: C&lt;!M, replace or !replace&gt; = scalar</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;!M,replace&gt; = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                 \
            <cpp:value>{                                                       \
                switch (Cb [pC])                                    \
                {                                                   \
                    case 0: <comment type="block">/* C(i,j) not present, !M(i,j) = 1 */</comment>   \
                        <comment type="block">/* Cx [pC] = scalar */</comment>                      \
                        GB_ASSIGN_SCALAR (pC) ;                     \
                        Cb [pC] = 1 ;                               \
                        task_cnvals++ ;                             \
                        break ;                                     \
                    case 1: <comment type="block">/* C(i,j) present, !M(i,j) = 1 */</comment>       \
                        <comment type="block">/* Cx [pC] = scalar */</comment>                      \
                        GB_ASSIGN_SCALAR (pC) ;                     \
                        break ;                                     \
                    case 2: <comment type="block">/* C(i,j) not present, !M(i,j) = 0 */</comment>   \
                        <comment type="block">/* clear the mask from C */</comment>                 \
                        Cb [pC] = 0 ;                               \
                        break ;                                     \
                    case 3: <comment type="block">/* C(i,j) present, !M(i,j) = 0 */</comment>       \
                        <comment type="block">/* delete this entry */</comment>                     \
                        Cb [pC] = 0 ;                               \
                        task_cnvals-- ;                             \
                        break ;                                     \
                    default: ;                                      \
                }                                                   \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;!M&gt; = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                 \
            <cpp:value>{                                                       \
                switch (Cb [pC])                                    \
                {                                                   \
                    case 0: <comment type="block">/* C(i,j) not present, !M(i,j) = 1 */</comment>   \
                        <comment type="block">/* Cx [pC] = scalar */</comment>                      \
                        GB_ASSIGN_SCALAR (pC) ;                     \
                        Cb [pC] = 1 ;                               \
                        task_cnvals++ ;                             \
                        break ;                                     \
                    case 1: <comment type="block">/* C(i,j) present, !M(i,j) = 1 */</comment>       \
                        <comment type="block">/* Cx [pC] = scalar */</comment>                      \
                        GB_ASSIGN_SCALAR (pC) ;                     \
                        break ;                                     \
                    case 2: <comment type="block">/* C(i,j) not present, !M(i,j) = 0 */</comment>   \
                        <comment type="block">/* clear the mask from C */</comment>                 \
                        Cb [pC] = 0 ;                               \
                        break ;                                     \
                    case 3: <comment type="block">/* C(i,j) present, !M(i,j) = 0 */</comment>       \
                        <comment type="block">/* C(i,j) remains; clear the mask from C */</comment> \
                        Cb [pC] = 1 ;                               \
                        break ;                                     \
                    default: ;                                      \
                }                                                   \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// matrix assignment: C&lt;!M, replace or !replace&gt; = A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;!M, replace or !replace&gt; = A where A is bitmap or full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C&lt;!M, replace&gt; = A where A is bitmap or full</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                 \
                <cpp:value>{                                                       \
                    switch (Cb [pC])                                    \
                    {                                                   \
                        case 0: <comment type="block">/* C(i,j) not present, !M(i,j) = 1 */</comment>   \
                            if (GBB (Ab, pC))                           \
                            {                                           \
                                <comment type="block">/* Cx [pC] = Ax [pC] */</comment>                 \
                                GB_ASSIGN_AIJ (pC, pC) ;                \
                                Cb [pC] = 1 ;                           \
                                task_cnvals++ ;                         \
                            }                                           \
                            break ;                                     \
                        case 1: <comment type="block">/* C(i,j) present, !M(i,j) = 1 */</comment>       \
                            if (GBB (Ab, pC))                           \
                            {                                           \
                                <comment type="block">/* Cx [pC] = Ax [pC] */</comment>                 \
                                GB_ASSIGN_AIJ (pC, pC) ;                \
                            }                                           \
                            else                                        \
                            {                                           \
                                <comment type="block">/* delete this entry */</comment>                 \
                                Cb [pC] = 0 ;                           \
                                task_cnvals-- ;                         \
                            }                                           \
                            break ;                                     \
                        case 2: <comment type="block">/* C(i,j) not present, !M(i,j) = 0 */</comment>   \
                            <comment type="block">/* clear the mask from C */</comment>                 \
                            Cb [pC] = 0 ;                               \
                            break ;                                     \
                        case 3: <comment type="block">/* C(i,j) present, !M(i,j) = 0 */</comment>       \
                            <comment type="block">/* delete this entry */</comment>                     \
                            Cb [pC] = 0 ;                               \
                            task_cnvals-- ;                             \
                            break ;                                     \
                        default: ;                                      \
                    }                                                   \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C&lt;!M&gt; = A where A is bitmap or full</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                 \
                <cpp:value>{                                                       \
                    switch (Cb [pC])                                    \
                    {                                                   \
                        case 0: <comment type="block">/* C(i,j) not present, !M(i,j) = 1 */</comment>   \
                            if (GBB (Ab, pC))                           \
                            {                                           \
                                <comment type="block">/* Cx [pC] = Ax [pC] */</comment>                 \
                                GB_ASSIGN_AIJ (pC, pC) ;                \
                                Cb [pC] = 1 ;                           \
                                task_cnvals++ ;                         \
                            }                                           \
                            break ;                                     \
                        case 1: <comment type="block">/* C(i,j) present, !M(i,j) = 1 */</comment>       \
                            if (GBB (Ab, pC))                           \
                            {                                           \
                                <comment type="block">/* Cx [pC] = Ax [pC] */</comment>                 \
                                GB_ASSIGN_AIJ (pC, pC) ;                \
                            }                                           \
                            else                                        \
                            {                                           \
                                <comment type="block">/* delete this entry */</comment>                 \
                                Cb [pC] = 0 ;                           \
                                task_cnvals-- ;                         \
                            }                                           \
                            break ;                                     \
                        case 2: <comment type="block">/* C(i,j) not present, !M(i,j) = 0 */</comment>   \
                            <comment type="block">/* clear the mask from C */</comment>                 \
                            Cb [pC] = 0 ;                               \
                            break ;                                     \
                        case 3: <comment type="block">/* C(i,j) present, !M(i,j) = 0 */</comment>       \
                            <comment type="block">/* keep the entry */</comment>                        \
                            Cb [pC] = 1 ;                               \
                            break ;                                     \
                        default: ;                                      \
                    }                                                   \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;!M, replace or !replace&gt; = A where A is sparse or hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// assign entries from A into C</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_AIJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>{                                   \
                int8_t cb = Cb [pC] ;           \
                if (cb &lt;= 1)                    \
                {                               \
                    <comment type="block">/* Cx [pC] = Ax [pA] */</comment>     \
                    GB_ASSIGN_AIJ (pC, pA) ;    \
                    Cb [pC] = 4 ;               \
                    task_cnvals += (cb == 0) ;  \
                }                               \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_whole_template.c"</cpp:file></cpp:include>

            <comment type="line">// clear the mask and delete entries not assigned</comment>
            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                     \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4) ;                   \
                    task_cnvals -= (cb == 1 || cb == 3) ;   \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                     \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4 || cb == 3) ;        \
                    task_cnvals -= (cb == 1) ;              \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final C for bitmap assign, !M, noaccum, whole"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
