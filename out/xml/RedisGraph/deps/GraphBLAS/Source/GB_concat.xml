<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_concat.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_concat: concatenate an array of matrices into a single matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>               \
    <cpp:value>GB_WERK_POP (Tile_cols, int64_t) ;  \
    GB_WERK_POP (Tile_rows, int64_t) ;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
    <cpp:value>GB_FREE_WORKSPACE ;                 \
    GB_phybix_free (C) ;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_concat.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_concat</name>                  <comment type="line">// concatenate a 2D array of matrices</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name> <modifier>*</modifier></type><name>Tiles</name></decl></parameter>,        <comment type="line">// 2D row-major array of size m-by-n</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>m</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Tile_rows</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Tile_cols</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for GB_concat"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>m</name><operator>*</operator><name>n</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name><name>Tiles</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"Tile[k] input for GB_concat"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the sizes and types of each tile</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Tile_rows</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Tile_cols</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_full</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>ascalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>ascalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvec_estimate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>    <comment type="line">// upper bound on C-&gt;nvec if hypersparse</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the (i,j) tile</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>GB_TILE</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// check the types and dimensions</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows</name> <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ncols</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>cnvec_estimate</name> <operator>+=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><name>csc</name></expr> ?</condition><then> <expr><name>ncols</name></expr> </then><else>: <expr><name>nrows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>cnvec_estimate</name> <operator>+=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offset</name></cpp:macro> <cpp:value>(GB_Global_print_one_based_get ( ) ? 1 : 0)</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"Input matrix Tiles{"</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">"} of type [%s]\n"</literal>
                    <literal type="string">"cannot be typecast to output of type [%s]\n"</literal></expr></argument>,
                    <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>tile_rows</name> <init>= <expr><name><name>Tile_rows</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tile_rows</name> <operator>!=</operator> <name>nrows</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"Input matrix Tiles{"</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">"} is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name>
                    <literal type="string">"; its row\ndimension must match all other matrices Tiles{"</literal>
                    <name>GBd</name> <literal type="string">",:}, which is "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>,
                    <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>tile_rows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>tile_cols</name> <init>= <expr><name><name>Tile_cols</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>tile_cols</name> <operator>!=</operator> <name>ncols</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"Input matrix Tiles{"</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">"} is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name>
                    <literal type="string">"; its column\ndimension must match all other matrices "</literal>
                    <literal type="string">"Tiles{:,"</literal> <name>GBd</name> <literal type="string">"}, which is "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>,
                    <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>tile_cols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// check if C is iso, full, and/or empty</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>bool</name></type> <name>A_full</name> <init>= <expr><operator>(</operator><name>A_sparsity</name> <operator>==</operator> <name>GxB_FULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>anz</name> <operator>==</operator> <call><name>GB_nnz_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>A_empty</name> <init>= <expr><operator>(</operator><name>anz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <operator>(</operator><name>anz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>A_sparsity</name> <operator>!=</operator> <name>GxB_BITMAP</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">// C is full only if all tiles are full or as-if-full.  A tile with</comment>
            <comment type="line">// a zero dimension has no entries and is both as-if-full and</comment>
            <comment type="line">// empty, but not iso.</comment>
            <expr_stmt><expr><name>C_is_full</name> <operator>=</operator> <name>C_is_full</name> <operator>&amp;&amp;</operator> <name>A_full</name></expr> ;</expr_stmt>

            <comment type="line">// get the iso value of an iso tile, typecasted to C-&gt;type</comment>
            <if_stmt><if>if <condition>(<expr><name>A_iso</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>ascalar</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>cnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A is the first non-empty iso tile seen while C is empty;</comment>
                    <comment type="line">// C becomes non-empty and iso, with the iso value from A.</comment>
                    <expr_stmt><expr><name>C_iso</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>ascalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// C is iso only if at least one tile is iso, and all others empty</comment>
            <comment type="line">// or iso with the same value as the first non-empty iso tile</comment>
            <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>A_empty</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C remains iso</comment>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>A_iso</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C and A are both iso; check if iso values are the same</comment>
                    <expr_stmt><expr><name>C_iso</name> <operator>=</operator> <name>C_iso</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>ascalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// otherwise, C is non-iso</comment>
                    <expr_stmt><expr><name>C_iso</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>cnz</name> <operator>+=</operator> <name>anz</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// replace Tile_rows and Tile_cols with their cumulative sum</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnrows</name> <init>= <expr><name><name>Tile_rows</name> <index>[<expr><name>m</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cncols</name> <init>= <expr><name><name>Tile_cols</name> <index>[<expr><name>n</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cnrows</name> <operator>!=</operator> <call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>cncols</name> <operator>!=</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"C is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">" but Tiles{:,:} is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = concatenate (Tiles)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>cnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct C as an empty matrix</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(empty concat) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_clear</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>C_is_full</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct C as full</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%sfull concat) "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>C_iso</name></expr> ?</condition><then> <expr><literal type="string">"iso "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_concat_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>,
            <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_convert_sparse_to_bitmap_test</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>,
        <argument><expr><name>cncols</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct C as bitmap</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%sbitmap concat) "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>C_iso</name></expr> ?</condition><then> <expr><literal type="string">"iso "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_concat_bitmap</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>,
            <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_convert_sparse_to_hyper_test</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>cnvec_estimate</name></expr></argument>,
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct C as hypersparse</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%shyper concat) "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>C_iso</name></expr> ?</condition><then> <expr><literal type="string">"iso "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_concat_hyper</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>,
            <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// construct C as sparse</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%ssparse concat) "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>C_iso</name></expr> ?</condition><then> <expr><literal type="string">"iso "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_concat_sparse</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>,
            <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>Tile_rows</name></expr></argument>, <argument><expr><name>Tile_cols</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// conform C to its desired format and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C before conform for GB_concat"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for GB_concat"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
