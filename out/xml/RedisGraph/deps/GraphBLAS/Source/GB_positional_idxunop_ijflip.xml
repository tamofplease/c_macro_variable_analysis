<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_positional_idxunop_ijflip.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_positional_idxunop_ijflip: swap i and j in an index unary positional op</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Flip i and j to handle the CSR/CSC variations, for index-unary positional</comment>
<comment type="line">// ops.  The two operators GB_FLIPDIAG_INT[32,64] are only used internally</comment>
<comment type="line">// and are not available to the user application.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_IndexUnaryOp</name></type> <name>GB_positional_idxunop_ijflip</name>   <comment type="line">// return flipped operator</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ithunk</name></decl></parameter>,            <comment type="line">// input/output: revised value of thunk</comment>
    <parameter><decl><type><name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>         <comment type="line">// operator to flip</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr>  :</case> 
                <comment type="line">// i+thunk becomes j+thunk: no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GrB_COLINDEX_INT64</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr>  :</case> 
                <comment type="line">// j+thunk becomes i+thunk: no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GrB_ROWINDEX_INT64</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case> 
                <comment type="line">// j-(i+thunk) becomes i-(j+thunk): no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GxB_FLIPDIAGINDEX_INT64</name><operator>)</operator></expr> ;</return>

            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content>

        <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr>  :</case> 
                <comment type="line">// i+thunk becomes j+thunk: no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GrB_COLINDEX_INT32</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr>  :</case> 
                <comment type="line">// j+thunk becomes i+thunk: no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GrB_ROWINDEX_INT32</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case> 
                <comment type="line">// j-(i+thunk) becomes i-(j+thunk): no change to thunk</comment>
                <return>return <expr><operator>(</operator><name>GxB_FLIPDIAGINDEX_INT32</name><operator>)</operator></expr> ;</return>

            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content>

        <switch>switch <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_TRIL_idxunop_code</name></expr>      :</case> 
                <comment type="line">// (j &lt;= (i+thunk)) becomes (i &lt;= (j+thunk))</comment>
                <comment type="line">// or (i-thunk) &lt;= j which is j &gt;= (i-thunk).</comment>
                <comment type="line">// TRIL becomes TRIU and thunk must be negated.</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_TRIU</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_TRIU_idxunop_code</name></expr>      :</case> 
                <comment type="line">// (j &gt;= (i+thunk)) becomes (i &gt;= (j+thunk))</comment>
                <comment type="line">// or (i-thunk) &gt;= j which is j &lt;= (i-thunk).</comment>
                <comment type="line">// TRIU becomes TRIL and thunk must be negated.</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_TRIL</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_DIAG_idxunop_code</name></expr>      :</case> 
            <case>case <expr><name>GB_OFFDIAG_idxunop_code</name></expr>   :</case> 
                <comment type="line">// DIAG:    (j == (i+thunk))</comment>
                <comment type="line">// OFFDIAG: (j != (i+thunk))</comment>
                <comment type="line">// no change to DIAG and OFFDIAG, but negate the thunk</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_COLLE_idxunop_code</name></expr>     :</case> 
                <comment type="line">// (j &lt;= thunk) becomes (i &lt;= thunk)</comment>
                <return>return <expr><operator>(</operator><name>GrB_ROWLE</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_COLGT_idxunop_code</name></expr>     :</case> 
                <comment type="line">// (j &gt; thunk) becomes (i &gt; thunk)</comment>
                <return>return <expr><operator>(</operator><name>GrB_ROWGT</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_ROWLE_idxunop_code</name></expr>     :</case> 
                <comment type="line">// (i &lt;= thunk) becomes (j &lt;= thunk)</comment>
                <return>return <expr><operator>(</operator><name>GrB_COLLE</name><operator>)</operator></expr> ;</return>

            <case>case <expr><name>GB_ROWGT_idxunop_code</name></expr>     :</case> 
                <comment type="line">// (i &gt; thunk) becomes (j &gt; thunk)</comment>
                <return>return <expr><operator>(</operator><name>GrB_COLGT</name><operator>)</operator></expr> ;</return>

            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// all other ops are not modified</comment>
    <return>return <expr><operator>(</operator><name>op</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
