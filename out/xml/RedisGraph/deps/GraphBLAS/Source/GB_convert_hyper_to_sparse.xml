<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_hyper_to_sparse.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_hyper_to_sparse: convert a matrix from hypersparse to sparse</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the matrix may have shallow A-&gt;p and A-&gt;h content; it is safely</comment>
<comment type="line">// removed.  On output, the matrix is always non-hypersparse (even if out of</comment>
<comment type="line">// memory).  If the input matrix is hypersparse, it is given a new A-&gt;p that is</comment>
<comment type="line">// not shallow.  If the input matrix is already non-hypersparse, nothing is</comment>
<comment type="line">// changed (and in that case A-&gt;p remains shallow on output if shallow on</comment>
<comment type="line">// input). The A-&gt;x and A-&gt;i content is not changed; it remains in whatever</comment>
<comment type="line">// shallow/non-shallow/iso property that it had on input).</comment>

<comment type="line">// If an out-of-memory condition occurs, A is unchanged.</comment>

<comment type="line">// If the input matrix A is sparse, bitmap or full, it is unchanged.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_convert_hyper_to_sparse</name> <comment type="line">// convert hypersparse to sparse</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// matrix to convert to non-hypersparse</comment>
    <parameter><decl><type><name>bool</name></type> <name>do_burble</name></decl></parameter>,         <comment type="line">// if true, then burble is allowed</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A being converted from hyper to sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert A from hypersparse to sparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>do_burble</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(hyper to sparse) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is a single hypersparse vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// This cannot fail, since no memory is allocated.  It must succeed if</comment>
        <comment type="line">// A is a typecasted GrB_Vector, or else it will be returned to the</comment>
        <comment type="line">// user as an invalid GrB_Vector.</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>

        <comment type="line">// free A-&gt;h unless it is shallow</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_hyper_hash_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// determine the number of threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate the new Ap array, of size n+1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>Ap_new</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ap_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
        <comment type="line">// to ensure all values of Ap_new are assigned below.</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Ap_new</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">99999</literal></expr> ;</expr_stmt></block_content></block></for>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the old hyperlist</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>            <comment type="line">// # of vectors in Ah_old</comment>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>   <comment type="line">// size nvec+1</comment>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>   <comment type="line">// size nvec</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec_nonempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>         <comment type="line">// recompute A-&gt;nvec_nonempty</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// construct the new vector pointers</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nvec_nonempty</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl>, <decl><type ref="prev"/><name>my_nvec_nonempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>jstart</name> <operator>&amp;&amp;</operator> <name>jstart</name> <operator>&lt;=</operator> <name>jend</name> <operator>&amp;&amp;</operator> <name>jend</name> <operator>&lt;=</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// task tid computes Ap_new [jstart:jend-1] from Ap_old, Ah_old.</comment>

            <comment type="line">// GB_SPLIT_BINARY_SEARCH of Ah_old [0..nvec-1] for jstart:</comment>
            <comment type="line">// If found is true then Ah_old [k] == jstart.</comment>
            <comment type="line">// If found is false, and nvec &gt; 0 then</comment>
            <comment type="line">//    Ah_old [0 ... k-1] &lt; jstart &lt;  Ah_old [k ... nvec-1]</comment>
            <comment type="line">// Whether or not i is found, if nvec &gt; 0</comment>
            <comment type="line">//    Ah_old [0 ... k-1] &lt; jstart &lt;= Ah_old [k ... nvec-1]</comment>
            <comment type="line">// If nvec == 0, then k == 0 and found will be false.  In this</comment>
            <comment type="line">// case, jstart cannot be compared with any content of Ah_old,</comment>
            <comment type="line">// since Ah_old is completely empty (Ah_old [0] is invalid).</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pright</name> <init>= <expr><name>nvec</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>Ah_old</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>nvec</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>jstart</name> <operator>==</operator> <name><name>Ah_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nvec</name></expr></argument>, <argument><expr><name>jstart</name> <operator>&lt;</operator> <name><name>Ah_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// Let jk = Ah_old [k], jlast = Ah_old [k-1], and pk = Ah_old [k].</comment>
            <comment type="line">// Then Ap_new [jlast+1:jk] must be set to pk.  This must be done</comment>
            <comment type="line">// for all k = 0:nvec-1.  In addition, the last vector k=nvec-1</comment>
            <comment type="line">// must be terminated by setting Ap_new [jk+1:n-1] to Ap_old [nvec].</comment>
            <comment type="line">// A task owns the kth vector if jk is in jstart:jend-1, inclusive.</comment>
            <comment type="line">// It counts all non-empty vectors that it owns.  However, the task</comment>
            <comment type="line">// must also set Ap_new [...] = pk for any jlast+1:jk that overlaps</comment>
            <comment type="line">// jstart:jend-1, even if it does not own that particular vector k.</comment>
            <comment type="line">// This happens only at the tail end of jstart:jend-1. </comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>jlast</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name><name>Ah_old</name> <index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>jlast</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>jstart</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>jlast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

            <for>for <control>( <init>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>nvec</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>done</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get the kth vector in Ah_old, which is vector index jk.</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>jk</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <name>nvec</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Ah_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr> </then><else>: <expr><name>n</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pk</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>k</name> <operator>&lt;</operator> <name>nvec</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Ap_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr> </then><else>: <expr><name>anz</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// determine if this task owns jk</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>jfin</name></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>jk</name> <operator>&gt;=</operator> <name>jend</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// This is the last iteration for this task.  This task</comment>
                    <comment type="line">// does not own the kth vector.  However, it does own the</comment>
                    <comment type="line">// vector indices jlast+1:jend-1, and these vectors must</comment>
                    <comment type="line">// be handled by this task.</comment>
                    <expr_stmt><expr><name>jfin</name> <operator>=</operator> <name>jend</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// This task owns the kth vector, which is vector index jk.</comment>
                    <comment type="line">// Ap must be set to pk for all vector indices jlast+1:jk.</comment>
                    <expr_stmt><expr><name>jfin</name> <operator>=</operator> <name>jk</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>k</name> <argument_list type="generic">&lt; <argument><expr><name>nvec</name> <operator>&amp;&amp;</operator> <name>nvec</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>pk</name> <operator>&lt;</operator> <name><name>Ap_old</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>my_nvec_nonempty</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></else></if_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// set Ap_new for this vector</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// Ap_new [jlast+1:jk] must be set to pk.  This tasks handles</comment>
                <comment type="line">// the intersection of jlast+1:jk with jstart:jend-1.</comment>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jlast</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>jfin</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Ap_new</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>pk</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// keep track of the prior vector index</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>jlast</name> <operator>=</operator> <name>jk</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>nvec_nonempty</name> <operator>+=</operator> <name>my_nvec_nonempty</name></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// no task owns Ap_new [n] so it is set by the last task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>jend</name> <operator>==</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>Ap_new</name> <index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// free the old A-&gt;p, A-&gt;h, and A-&gt;H hyperlist content.</comment>
        <comment type="line">// this clears A-&gt;nvec_nonempty so it must be restored below.</comment>
        <expr_stmt><expr><call><name>GB_phy_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// transplant the new vector pointers; matrix is no longer hypersparse</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>Ap_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Ap_new_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>nvec_nonempty</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// A is now sparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>==</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A converted to sparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
