<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_size_t_multiply.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_size_t_multiply:  multiply two size_t and guard against overflow</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// c = a*b but check for overflow</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>bool</name></type> <name>GB_size_t_multiply</name>     <comment type="line">// true if ok, false if overflow</comment>
<parameter_list>(
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,              <comment type="line">// c = a*b, or zero if overflow occurs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>a</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>b</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>||</operator> <name>b</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// a or b are out of range</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// a + b is now safe to compute</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// a * b may overflow</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// a * b will not overflow</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
