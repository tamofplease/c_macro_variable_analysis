<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_dealloc_memory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dealloc_memory: wrapper for free, using the free_pool</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A wrapper for free.  If p is NULL on input, it is not freed.</comment>

<comment type="line">// The memory is freed by returning it to the free_pool if it is small enough</comment>
<comment type="line">// and an exact power of two.  Otherwise, it is freed via GB_free_memory,</comment>
<comment type="line">// and not returned to the free_pool.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_dealloc_memory</name>      <comment type="line">// free memory, return to free_pool or free it</comment>
<parameter_list>(
    <comment type="line">// input/output</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,               <comment type="line">// pointer to allocated block of memory to free</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>size_t</name></type> <name>size_allocated</name></decl></parameter>   <comment type="line">// # of bytes actually allocated</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>returned_to_free_pool</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_POWER_OF_TWO</name> <argument_list>(<argument><expr><name>size_allocated</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// return the memory to the free_pool, if possible</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>GB_CEIL_LOG2</name> <argument_list>(<argument><expr><name>size_allocated</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GB_Global_free_pool_limit_get</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"put to free pool %p %d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>returned_to_free_pool</name> <operator>=</operator> <call><name>GB_Global_free_pool_put</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>returned_to_free_pool</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// otherwise free the memory back to the memory manager</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_free_memory</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>size_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
        <expr_stmt><expr><call><name>GB_Global_free_pool_dump</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_Global_memtable_dump</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
