<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_task_cumsum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_task_cumsum: cumulative sum of Cp and fine tasks in TaskList</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Cp is never NULL.  C is created as sparse or hypersparse.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_task_cumsum</name>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Cp</name></decl></parameter>,                        <comment type="line">// size Cnvec+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Cnvec_nonempty</name></decl></parameter>,            <comment type="line">// # of non-empty vectors in C</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,  <comment type="line">// array of structs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,                   <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>,                 <comment type="line">// # of threads</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cnvec</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cnvec_nonempty</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// local cumulative sum of the fine tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Compute the sum of all fine tasks for vector k, in Cp [k].  Also</comment>
            <comment type="line">// compute the cumulative sum of TaskList [taskid].pC, for the</comment>
            <comment type="line">// tasks that work on vector k.  The first fine task for vector k</comment>
            <comment type="line">// starts with TaskList [taskid].pC = 0, which is an offset from</comment>
            <comment type="line">// the final Cp [k].  A subsequent fine task t for a vector k</comment>
            <comment type="line">// starts on offset of TaskList [t].pC from the start of C(:,k).</comment>
            <comment type="line">// Cp [k] has not been cumsum'd across all of Cp.  It is just the</comment>
            <comment type="line">// count of the entries in C(:,k).  The final Cp [k] is added to</comment>
            <comment type="line">// each fine task below, after the GB_cumsum of Cp.</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <name>pC</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// replace Cp with its cumulative sum</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>Cnvec_nonempty</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// shift the cumulative sum of the fine tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// TaskList [taskid].pC is currently an offset for this task into</comment>
            <comment type="line">// C(:,k).  The first fine task for vector k has an offset of zero,</comment>
            <comment type="line">// the 2nd fine task has an offset equal to the # of entries</comment>
            <comment type="line">// computed by the first task, and so on.  Cp [k] needs to be added</comment>
            <comment type="line">// to all offsets to get the final starting position for each fine</comment>
            <comment type="line">// task in C.</comment>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>+=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// The last fine task to operate on vector k needs know its own</comment>
            <comment type="line">// pC_end, which is Cp [k+1].  Suppose that task is taskid-1.  If</comment>
            <comment type="line">// this taskid is the first fine task for vector k, then TaskList</comment>
            <comment type="line">// [taskid].pC is set to Cp [k] above.  If all coarse tasks are</comment>
            <comment type="line">// also given TaskList [taskid].pC = Cp [k], then taskid-1 will</comment>
            <comment type="line">// always know its pC_end, which is TaskList [taskid].pC,</comment>
            <comment type="line">// regardless of whether taskid is a fine or coarse task.</comment>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// The last task is ntasks-1.  It may be a fine task, in which case it</comment>
    <comment type="line">// computes the entries in C from TaskList [ntasks-1].pC to</comment>
    <comment type="line">// TaskList [ntasks].pC-1, inclusive.</comment>
    <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>Cnvec</name></expr>]</index></name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <comment type="line">// nthreads, ntasks, Cnvec) ;</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>klast</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>klast</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// this is a fine task for vector k</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name>     <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pA_end</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name>     <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pB</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pB_end</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name>     <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pC</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_end</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pC</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name>     <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pM</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_end</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>pM_end</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// pA:(pA_end-1) must reside inside A(:,j), and pB:(pB_end-1) must</comment>
            <comment type="line">// reside inside B(:,j), but these cannot be checked here since A</comment>
            <comment type="line">// and B are not available.  These basic checks can be done:</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>pA</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;=</operator> <name>pA_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pB</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>pB</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;=</operator> <name>pB_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pM</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><literal type="number">0</literal> <operator>&lt;=</operator> <name>pM</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;=</operator> <name>pM_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// pC and pC_end can be checked exactly.  This task t computes</comment>
            <comment type="line">// entries pC:(pC_end-1) of C, inclusive.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <name>pC</name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>&lt;=</operator> <name>pC_end</name> <operator>&amp;&amp;</operator> <name>pC_end</name> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// this is a coarse task for vectors k:klast, inclusive</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>klast</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>klast</name> <operator>&lt;=</operator> <name>Cnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
