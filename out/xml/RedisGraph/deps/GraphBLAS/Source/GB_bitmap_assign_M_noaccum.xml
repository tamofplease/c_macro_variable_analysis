<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_assign_M_noaccum.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_M_noaccum:  assign to C bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C&lt;M&gt;(I,J) = A       assign</comment>
<comment type="line">// C(I,J)&lt;M&gt; = A       subassign</comment>

<comment type="line">// C&lt;M,repl&gt;(I,J) = A       assign</comment>
<comment type="line">// C(I,J)&lt;M,repl&gt; = A       subassign</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C:           bitmap</comment>
<comment type="line">// M:           present, hypersparse or sparse, (not bitmap or full)</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// Mask_struct: true or false</comment>
<comment type="line">// C_replace:   true or false</comment>
<comment type="line">// accum:       not present</comment>
<comment type="line">// A:           matrix (hyper, sparse, bitmap, or full), or scalar</comment>
<comment type="line">// kind:        assign, row assign, col assign, or subassign</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_assign_M_noaccum</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// input/output matrix in bitmap format</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,       <comment type="line">// descriptor for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// I index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// J index list</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix, which is not NULL here</comment>
<comment type="line">//  const bool Mask_comp,       // false here</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural, false if valued</comment>
<comment type="line">//  const GrB_BinaryOp accum,   // not present</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix, not transposed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,         <comment type="line">// input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>scalar_type</name></decl></parameter>, <comment type="line">// type of input scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>assign_kind</name></decl></parameter>,      <comment type="line">// row assign, col assign, assign, or subassign</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBURBLE_BITMAP_ASSIGN</name> <argument_list>(<argument><expr><literal type="string">"bit4"</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for bitmap assign, M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for bitmap assign, M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for bitmap assign, M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C_BITMAP</name></expr> ;</expr_stmt>           <comment type="line">// C must be bitmap</comment>
    <decl_stmt><decl><type><name>GB_SLICE_M</name>
    <name>GB_GET_A_AND_SCALAR</name></type>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M,repl or !repl&gt;(I,J) = A or scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter M into C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Cb [pC] += 2 for each entry M(i,j) in the mask</comment>
    <name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_PLUS_2</name></expr></argument>,
        <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></decl> ;</decl_stmt>


    <comment type="line">//    Cb (i,j) = 0:  mij == 0, cij not present</comment>
    <comment type="line">//    Cb (i,j) = 1:  mij == 0, cij present</comment>
    <comment type="line">//    Cb (i,j) = 2:  mij == 1, cij not present, can be assigned</comment>
    <comment type="line">//    Cb (i,j) = 3:  mij == 1, cij present, can be assigned</comment>

    <comment type="line">//    below:</comment>
    <comment type="line">//    Cb (i,j) = 4:  mij == 1, cij present, has been assigned</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter A or the scalar into C(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar assignment: C&lt;M&gt;(I,J) = scalar or C(I,J)&lt;M&gt; = scalar</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// if C FULL:  if C_replace false, no deletion occurs</comment>
        <comment type="line">// otherwise: convert C to bitmap</comment>

        <if_stmt><if>if <condition>(<expr><name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// scalar subassign: C(I,J)&lt;M,repl or !repl&gt; = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// for all IxJ</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                if (cb &gt;= 2)                        \
                {                                   \
                    <comment type="block">/* Cx [pC] = scalar */</comment>          \
                    GB_ASSIGN_SCALAR (pC) ;         \
                    Cb [pC] = 1 ;                   \
                    task_cnvals += (cb == 2) ;      \
                }                                   \
                else if (C_replace &amp;&amp; cb == 1)      \
                {                                   \
                    <comment type="block">/* delete this entry */</comment>         \
                    Cb [pC] = 0 ;                   \
                    task_cnvals-- ;                 \
                }                                   \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else <comment type="line">// assign_kind == GB_ASSIGN</comment>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// scalar assign: C&lt;M,repl or !repl&gt;(I,J) = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>keep</name> <init>= <expr><ternary><condition><expr><name>C_replace</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

            <comment type="line">// for all IxJ</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>          \
            <cpp:value>{                                       \
                int8_t cb = Cb [pC] ;               \
                if (cb &gt;= 2)                        \
                {                                   \
                    <comment type="block">/* Cx [pC] = scalar */</comment>          \
                    GB_ASSIGN_SCALAR (pC) ;         \
                    Cb [pC] = keep ;                \
                    task_cnvals += (cb == 2) ;      \
                }                                   \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// for all of C</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                 \
                <cpp:value>{                                       \
                    int8_t cb = Cb [pC] ;               \
                    Cb [pC] = (cb == 4 || cb == 3) ;    \
                    task_cnvals -= (cb == 1) ;          \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// clear the mask</comment>
                <comment type="line">// Cb [pC] %= 2 for each entry M(i,j) in the mask</comment>
                <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
                    <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>GB_ASSIGN</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_MOD_2</name></expr></argument>,
                    <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// matrix assignment: C&lt;M,repl or !repl&gt;(I,J) = A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// for all entries aij in A (A can be hyper, sparse, bitmap, or full)</comment>
        <comment type="line">//  if Cb(p) == 0 or 1  // do nothing</comment>
        <comment type="line">//  if Cb(p) == 2</comment>
        <comment type="line">//      Cx(p) = aij     // C(iC,jC) is now present, insert</comment>
        <comment type="line">//      Cb(p) = 4       // keep it</comment>
        <comment type="line">//      task_cnvals++ ;</comment>
        <comment type="line">//  if Cb(p) == 3</comment>
        <comment type="line">//      Cx(p) = aij     // C(iC,jC) is present, update it</comment>
        <comment type="line">//      Cb(p) = 4       // keep it</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>              \
        <cpp:value>{                                       \
            int8_t cb = Cb [pC] ;               \
            if (cb &gt;= 2)                        \
            {                                   \
                <comment type="block">/* Cx [pC] = Ax [pA] ; */</comment>       \
                GB_ASSIGN_AIJ (pC, pA) ;        \
                Cb [pC] = 4 ;                   \
                task_cnvals += (cb == 2) ;      \
            }                                   \
        }</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_A_template.c"</cpp:file></cpp:include>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// clear M from C and handle C_replace for row/col/assign</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>assign_kind</name> <operator>==</operator> <name>GB_SUBASSIGN</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// subassign case</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// for all IxJ</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>              \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4) ;                   \
                    task_cnvals -= (cb == 1 || cb == 3) ;   \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// for all IxJ</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>              \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4 || cb == 1) ;        \
                    task_cnvals -= (cb == 3) ;              \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// row/col/assign case</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_SUBASSIGN_CASE</name></cpp:macro></cpp:define>

            <if_stmt><if>if <condition>(<expr><name>C_replace</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">// for all IxJ</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>              \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4) ? 3 : 0 ;           \
                    task_cnvals -= (cb == 1 || cb == 3) ;   \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

                <comment type="line">// for all of C</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CIJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                     \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    ASSERT (cb != 4) ;                      \
                    Cb [pC] = (cb == 3) ;                   \
                    task_cnvals -= (cb == 1) ;              \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 

                <comment type="line">// for all IxJ</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>ignore</name></type></parameter>)</parameter_list></cpp:macro>              \
                <cpp:value>{                                           \
                    int8_t cb = Cb [pC] ;                   \
                    Cb [pC] = (cb == 4 || cb == 1) ;        \
                    task_cnvals -= (cb == 3) ;              \
                }</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

                <comment type="line">// clear M from C </comment>
                <comment type="line">// Cb [pC] %= 2 for each entry M(i,j) in the mask</comment>
                <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
                    <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>assign_kind</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_MOD_2</name></expr></argument>,
                    <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"final C for bitmap assign, M, noaccum"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
