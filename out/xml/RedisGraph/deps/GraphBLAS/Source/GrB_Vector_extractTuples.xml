<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Vector_extractTuples.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_extractTuples: extract all tuples from a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extracts all tuples from a column, like [I,~,X] = find (v).  If</comment>
<comment type="line">// any parameter I and/or X is NULL, then that component is not extracted.  The</comment>
<comment type="line">// size of the I and X arrays (those that are not NULL) is given by nvals,</comment>
<comment type="line">// which must be at least as large as GrB_nvals (&amp;nvals, v).  The values in the</comment>
<comment type="line">// typecasted to the type of X, as needed.</comment>

<comment type="line">// If any parameter I and/or X is NULL, that component is not extracted.  So to</comment>
<comment type="line">// extract just the row indices, pass I as non-NULL, and X as NULL.  This is</comment>
<comment type="line">// like [I,~,~] = find (v).</comment>

<comment type="line">// If v is iso and X is not NULL, the iso scalar vx [0] is expanded into X.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXTRACT</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                             \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Vector_extractTuples_, T)                         \
(                                                                             \
    GrB_Index *I,           <comment type="block">/* array for returning row indices of tuples */</comment>   \
    type *X,                <comment type="block">/* array for returning values of tuples      */</comment>   \
    GrB_Index *p_nvals,     <comment type="block">/* I, X size on input; # tuples on output    */</comment>   \
    const GrB_Vector v      <comment type="block">/* vector to extract tuples from             */</comment>   \
)                                                                             \
{                                                                             \
    GB_WHERE1 ("GrB_Vector_extractTuples_" GB_STR(T) " (I, X, nvals, v)") ;   \
    GB_BURBLE_START ("GrB_Vector_extractTuples") ;                            \
    GB_RETURN_IF_NULL_OR_FAULTY (v) ;                                         \
    GB_RETURN_IF_NULL (p_nvals) ;                                             \
    ASSERT (GB_VECTOR_OK (v)) ;                                               \
    GrB_Info info = GB_extractTuples (I, NULL, X, p_nvals, GB_ ## T ## _code, \
        (GrB_Matrix) v, Context) ;                                            \
    GB_BURBLE_END ;                                                           \
    GB_PRAGMA (omp flush)                                                     \
    return (info) ;                                                           \
}</cpp:value></cpp:define>

<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument>  )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument>  )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument> )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument>  )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument> )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument>  )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument> )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>   )</argument_list></macro>
<macro><name>GB_EXTRACT</name> <argument_list>(<argument>GrB</argument>, <argument>void</argument>      , <argument>UDT</argument>    )</argument_list></macro>

</unit>
