<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_06s_and_14.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_06s_and_14: C(I,J)&lt;M or !M&gt; = A ; using S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 06s: C(I,J)&lt;M&gt; = A ; using S</comment>
<comment type="line">// Method 14:  C(I,J)&lt;!M&gt; = A ; using S</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   true or false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           matrix</comment>
<comment type="line">// S:           constructed</comment>

<comment type="line">// C: not bitmap or full: use GB_bitmap_assign instead</comment>
<comment type="line">// M, A: any sparsity structure.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_06s_and_14</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, !M, else use M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==A</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// S = C(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_EMPTY_TASKLIST</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subassign_symbolic</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for Method 06s/14"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M input for Method 06s/14"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for Method 06s/14"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"S constructed for Method 06s/14"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_GET_C</name></expr> ;</expr_stmt>      <comment type="line">// C must not be bitmap</comment>
    <expr_stmt><expr><name>GB_GET_MASK</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_MASK_HYPER_HASH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_A</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_S</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 06s: C(I,J)&lt;M&gt; = A ; using S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: O((nnz(A)+nnz(S))*log(m)) where m is the # of entries in a vector</comment>
    <comment type="line">// of M, not including the time to construct S=C(I,J).  If A, S, and M</comment>
    <comment type="line">// are similar in sparsity, then this method can perform well.  If M is</comment>
    <comment type="line">// very sparse, Method 06n should be used instead.  Method 06s is selected</comment>
    <comment type="line">// if nnz (A) &lt; nnz (M) or if M is bitmap.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 14: C(I,J)&lt;!M&gt; = A ; using S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Close to optimal.  Omega(nnz(S)+nnz(A)) is required, and the</comment>
    <comment type="line">// sparsity of !M cannot be exploited.  The time taken is</comment>
    <comment type="line">// O((nnz(A)+nnz(S))*log(m)) where m is the # of entries in a vector of M.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: A+S (Methods 02, 04, 09, 10, 11, 12, 14, 16, 18, 20)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// all of IxJ must be examined</comment>
        <expr_stmt><expr><name>GB_SUBASSIGN_IXJ_SLICE</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// traverse all A+S</comment>
        <expr_stmt><expr><call><name>GB_SUBASSIGN_TWO_SLICE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 1: create zombies, update entries, and count pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// phase1: A is bitmap TODO: this is SLOW! for method 06s</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the task descriptor</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_GET_IXJ_TASK_DESCRIPTOR_PHASE1</name> <argument_list>(<argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// compute all vectors in this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get S(iA_start:iA_end,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_FOR_IXJ</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>iA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>Avlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><operator>(</operator><name>pM_end</name> <operator>-</operator> <name>pM_start</name><operator>)</operator> <operator>==</operator> <name>Mvlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// do a 2-way merge of S(iA_start:iA_end,j) and A(ditto,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><name>iA_start</name></expr></init></decl> ;</init> <condition><expr><name>iA</name> <operator>&lt;</operator> <name>iA_end</name></expr> ;</condition> <incr><expr><name>iA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name> <operator>+</operator> <name>iA</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>Sfound</name> <init>= <expr><operator>(</operator><name>pS</name> <operator>&lt;</operator> <name>pS_end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>Afound</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>Sfound</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Afound</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is present but A (i,j) is not</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C . 1] or [X . 1]---------------------------</comment>
                            <comment type="line">// [C . 1]: action: ( delete ): becomes zombie</comment>
                            <comment type="line">// [X . 1]: action: ( X ): still zombie</comment>
                            <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>GB_DELETE_ENTRY</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Sfound</name> <operator>&amp;&amp;</operator> <name>Afound</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>Sfound</name> <operator>&amp;&amp;</operator> <name>Afound</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// both S (i,j) and A (i,j) present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): A to C no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// phase1: A is hypersparse, sparse, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the task descriptor</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE1</name></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// compute all vectors in this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get A(:,j) and S(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Zh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_GET_MAPPED</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_X</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GB_GET_MAPPED</name> <argument_list>(<argument><expr><name>pS</name></expr></argument>, <argument><expr><name>pS_end</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Sp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_S</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><operator>(</operator><name>pM_end</name> <operator>-</operator> <name>pM_start</name><operator>)</operator> <operator>==</operator> <name>Mvlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// do a 2-way merge of S(:,j) and A(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// jC = J [j] ; or J is a colon expression</comment>
                <comment type="line">// int64_t jC = GB_ijlist (J, j, Jkind, Jcolon) ;</comment>

                <comment type="line">// while both list S (:,j) and A (:,j) have entries</comment>
                <while>while <condition>(<expr><name>pS</name> <operator>&lt;</operator> <name>pS_end</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iS</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>iS</name> <operator>&lt;</operator> <name>iA</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is present but A (i,j) is not</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C . 1] or [X . 1]---------------------------</comment>
                            <comment type="line">// [C . 1]: action: ( delete ): becomes zombie</comment>
                            <comment type="line">// [X . 1]: action: ( X ): still zombie</comment>
                            <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>GB_DELETE_ENTRY</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iA</name> <operator>&lt;</operator> <name>iS</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="line">// both S (i,j) and A (i,j) present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): A to C no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>

                <comment type="line">// while list S (:,j) has entries.  List A (:,j) exhausted.</comment>
                <while>while <condition>(<expr><name>pS</name> <operator>&lt;</operator> <name>pS_end</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// S (i,j) is present but A (i,j) is not</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iS</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// ----[C . 1] or [X . 1]-------------------------------</comment>
                        <comment type="line">// [C . 1]: action: ( delete ): becomes zombie</comment>
                        <comment type="line">// [X . 1]: action: ( X ): still zombie</comment>
                        <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>GB_DELETE_ENTRY</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></while>

                <comment type="line">// while list A (:,j) has entries.  List S (:,j) exhausted.</comment>
                <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// ----[. A 1]------------------------------------------</comment>
                        <comment type="line">// [. A 1]: action: ( insert )</comment>
                        <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></for>

            <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 2: insert pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_PENDING_CUMSUM</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// phase2: A is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the task descriptor</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_GET_IXJ_TASK_DESCRIPTOR_PHASE2</name> <argument_list>(<argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// compute all vectors in this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get S(iA_start:iA_end,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_FOR_IXJ</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>iA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>Avlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><operator>(</operator><name>pM_end</name> <operator>-</operator> <name>pM_start</name><operator>)</operator> <operator>==</operator> <name>Mvlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// do a 2-way merge of S(iA_start:iA_end,j) and A(ditto,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// jC = J [j] ; or J is a colon expression</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><name>iA_start</name></expr></init></decl> ;</init> <condition><expr><name>iA</name> <operator>&lt;</operator> <name>iA_end</name></expr> ;</condition> <incr><expr><name>iA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name> <operator>+</operator> <name>iA</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>Sfound</name> <init>= <expr><operator>(</operator><name>pS</name> <operator>&lt;</operator> <name>pS_end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>Afound</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Sfound</name> <operator>&amp;&amp;</operator> <name>Afound</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>GB_PENDING_INSERT_aij</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>Sfound</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// S (i,j) present</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// phase2: A is hypersparse, sparse, or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the task descriptor</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE2</name></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// compute all vectors in this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get A(:,j) and S(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Zh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_GET_MAPPED</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_X</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>GB_GET_MAPPED</name> <argument_list>(<argument><expr><name>pS</name></expr></argument>, <argument><expr><name>pS_end</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Sp</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_S</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><operator>(</operator><name>pM_end</name> <operator>-</operator> <name>pM_start</name><operator>)</operator> <operator>==</operator> <name>Mvlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// do a 2-way merge of S(:,j) and A(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// jC = J [j] ; or J is a colon expression</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <comment type="line">// while both list S (:,j) and A (:,j) have entries</comment>
                <while>while <condition>(<expr><name>pS</name> <operator>&lt;</operator> <name>pS_end</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iS</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>iS</name> <operator>&lt;</operator> <name>iA</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// S (i,j) is present but A (i,j) is not</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iA</name> <operator>&lt;</operator> <name>iS</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                        <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>GB_PENDING_INSERT_aij</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// both S (i,j) and A (i,j) present</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>

                <comment type="line">// while list A (:,j) has entries.  List S (:,j) exhausted.</comment>
                <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// S (i,j) is not present, A (i,j) is present</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// ----[. A 1]------------------------------------------</comment>
                        <comment type="line">// [. A 1]: action: ( insert )</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>GB_PENDING_INSERT_aij</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></for>

            <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
