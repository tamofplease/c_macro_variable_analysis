<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_01.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_01: C(I,J) = scalar ; using S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 01: C(I,J) = scalar ; using S</comment>

<comment type="line">// M:           NULL</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           scalar</comment>
<comment type="line">// S:           constructed</comment>

<comment type="line">// C: not bitmap</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_01</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// S = C(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_EMPTY_TASKLIST</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subassign_symbolic</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_GET_C</name></expr> ;</expr_stmt>      <comment type="line">// C must not be bitmap</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_SCALAR</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_S</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 01: C(I,J) = scalar ; using S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Optimal; must visit all IxJ, so Omega(|I|*|J|) is required.</comment>

    <comment type="line">// Entries in S are found and the corresponding entry in C replaced with</comment>
    <comment type="line">// the scalar.  The traversal of S is identical to the traversal of M in</comment>
    <comment type="line">// Method 4.</comment>

    <comment type="line">// Method 01 and Method 03 are very similar.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: all IxJ (Methods 01, 03, 13, 15, 17, 19)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_IXJ_SLICE</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 1: create zombies, update entries, and count pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_IXJ_TASK_DESCRIPTOR_PHASE1</name> <argument_list>(<argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get S(iA_start:end,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_FOR_IXJ</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>iA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I(iA_start,iA_end-1),jC) = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><name>iA_start</name></expr></init></decl> ;</init> <condition><expr><name>iA</name> <operator>&lt;</operator> <name>iA_end</name></expr> ;</condition> <incr><expr><name>iA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>(</operator><name>pS</name> <operator>&lt;</operator> <name>pS_end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// ----[. A 1]----------------------------------------------</comment>
                    <comment type="line">// S (i,j) is not present, the scalar is present</comment>
                    <comment type="line">// [. A 1]: action: ( insert )</comment>
                    <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// ----[C A 1] or [X A 1]-----------------------------------</comment>
                    <comment type="line">// both S (i,j) and A (i,j) present</comment>
                    <comment type="line">// [C A 1]: action: ( =A ): scalar to C, no accum</comment>
                    <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                    <expr_stmt><expr><name>GB_C_S_LOOKUP</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>GB_noaccum_C_A_1_scalar</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 2: insert pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_PENDING_CUMSUM</name></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_IXJ_TASK_DESCRIPTOR_PHASE2</name> <argument_list>(<argument><expr><name>iA_start</name></expr></argument>, <argument><expr><name>iA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get S(iA_start:end,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_FOR_IXJ</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>iA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I(iA_start,iA_end-1),jC) = scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><name>iA_start</name></expr></init></decl> ;</init> <condition><expr><name>iA</name> <operator>&lt;</operator> <name>iA_end</name></expr> ;</condition> <incr><expr><name>iA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>(</operator><name>pS</name> <operator>&lt;</operator> <name>pS_end</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name>Svlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// ----[. A 1]----------------------------------------------</comment>
                    <comment type="line">// S (i,j) is not present, the scalar is present</comment>
                    <comment type="line">// [. A 1]: action: ( insert )</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PENDING_INSERT</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// both S (i,j) and A (i,j) present</comment>
                    <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
