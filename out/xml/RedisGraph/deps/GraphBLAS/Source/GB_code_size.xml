<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_code_size.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_code_size: given a type code, return sizeof (type)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The user-defined type has no known size, so this must be provided on input.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>size_t</name></type> <name>GB_code_size</name>             <comment type="line">// return the size of a type, given its code</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code</name></decl></parameter>,    <comment type="line">// input code of the type to find the size of</comment>
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>usize</name></decl></parameter>          <comment type="line">// known size of user-defined type</comment>
)</parameter_list>
<block>{<block_content>

    <switch>switch <condition>(<expr><name>code</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>     ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>  ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>    ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>   ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>usize</name><operator>)</operator></expr> ;</return>
        <default>default             :</default> <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
