<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_scalar: C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols),x)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Assigns a single scalar to a submatrix:</comment>

<comment type="line">// C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols),x)</comment>

<comment type="line">// This function does the work for GxB_Matrix_subassign_TYPE and</comment>
<comment type="line">// GxB_Vector_subassign_[type], where [type] is one of the 11 types, or the</comment>
<comment type="line">// type-generic macro suffix, "_UDT".</comment>

<comment type="line">// Compare with GB_assign_scalar, which uses M and C_replace differently</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_scalar</name>        <comment type="line">// C(Rows,Cols)&lt;M&gt; += x</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// mask for C(Rows,Cols), unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// accum for Z=accum(C(Rows,Cols),T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,             <comment type="line">// scalar to assign to C(Rows,Cols)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>scalar_code</name></decl></parameter>, <comment type="line">// type code of scalar to assign</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Rows</name></decl></parameter>,          <comment type="line">// row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nRows</name></decl></parameter>,          <comment type="line">// number of row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>Cols</name></decl></parameter>,          <comment type="line">// column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nCols</name></decl></parameter>,          <comment type="line">// number of column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,      <comment type="line">// descriptor for C(Rows,Cols) and M</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Rows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Cols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>scalar_code</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols), scalar)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Mask_comp</name> <operator>&amp;&amp;</operator> <name>nRows</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nCols</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>C_replace</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C(i,j) = scalar or C(i,j) += scalar</comment>
        <return>return <expr><operator>(</operator><call><name>GB_setElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name><name>Rows</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Cols</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
            <argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><call><name>GB_subassign</name> <argument_list>(
            <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,               <comment type="line">// C matrix and its descriptor</comment>
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask matrix and its descriptor</comment>
            <argument><expr><name>false</name></expr></argument>,                      <comment type="line">// do not transpose the mask</comment>
            <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// for accum (C(Rows,Cols),scalar)</comment>
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,                <comment type="line">// no explicit matrix A</comment>
            <argument><expr><name>Rows</name></expr></argument>, <argument><expr><name>nRows</name></expr></argument>,                <comment type="line">// row indices</comment>
            <argument><expr><name>Cols</name></expr></argument>, <argument><expr><name>nCols</name></expr></argument>,                <comment type="line">// column indices</comment>
            <argument><expr><name>true</name></expr></argument>,                       <comment type="line">// do scalar expansion</comment>
            <argument><expr><name>scalar</name></expr></argument>,                     <comment type="line">// scalar to assign, expands to become A</comment>
            <argument><expr><name>scalar_code</name></expr></argument>,                <comment type="line">// type code of scalar to expand</comment>
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
