<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_msort_3.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_msort_3: sort a 3-by-n list of integers, using A[0:2][ ] as the key</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A parallel mergesort of an array of 3-by-n integers.  Each key</comment>
<comment type="line">// consists of three integers.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_msort_3.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_msort_3_binary_search: binary search for the pivot</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The Pivot value is Z [pivot], and a binary search for the Pivot is made in</comment>
<comment type="line">// the array X [p_pstart...p_end-1], which is sorted in non-decreasing order on</comment>
<comment type="line">// input.  The return value is pleft, where</comment>
<comment type="line">//</comment>
<comment type="line">//    X [p_start ... pleft-1] &lt;= Pivot and</comment>
<comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>
<comment type="line">//</comment>
<comment type="line">// pleft is returned in the range p_start to p_end.  If pleft is p_start, then</comment>
<comment type="line">// the Pivot is smaller than all entries in X [p_start...p_end-1], and the left</comment>
<comment type="line">// list X [p_start...pleft-1] is empty.  If pleft is p_end, then the Pivot is</comment>
<comment type="line">// larger than all entries in X [p_start...p_end-1], and the right list X</comment>
<comment type="line">// [pleft...p_end-1] is empty.</comment>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>GB_msort_3_binary_search</name>    <comment type="line">// return pleft</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z_0</name></decl></parameter>,         <comment type="line">// Pivot is Z [pivot]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pivot</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_0</name></decl></parameter>,         <comment type="line">// search in X [p_start..p_end_-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p_end</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find where the Pivot appears in X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// binary search of X [p_start...p_end-1] for the Pivot</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>p_start</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>p_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <while>while <condition>(<expr><name>pleft</name> <operator>&lt;</operator> <name>pright</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pmiddle</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>+</operator> <name>pright</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <comment type="line">// less = (X [pmiddle] &lt; Pivot)</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>less</name> <init>= <expr><call><name>GB_lt_3</name> <argument_list>(<argument><expr><name>X_0</name></expr></argument>, <argument><expr><name>X_1</name></expr></argument>, <argument><expr><name>X_2</name></expr></argument>, <argument><expr><name>pmiddle</name></expr></argument>,
                             <argument><expr><name>Z_0</name></expr></argument>, <argument><expr><name>Z_1</name></expr></argument>, <argument><expr><name>Z_2</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>pleft</name>  <operator>=</operator> <ternary><condition><expr><name>less</name></expr> ?</condition><then> <expr><operator>(</operator><name>pmiddle</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>pleft</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pright</name> <operator>=</operator> <ternary><condition><expr><name>less</name></expr> ?</condition><then> <expr><name>pright</name></expr> </then><else>: <expr><name>pmiddle</name></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// binary search is narrowed down to a single item</comment>
    <comment type="line">// or it has found the list is empty:</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pleft</name> <operator>==</operator> <name>pright</name> <operator>||</operator> <name>pleft</name> <operator>==</operator> <name>pright</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// If found is true then X [pleft == pright] == Pivot.  If duplicates</comment>
    <comment type="line">// appear then X [pleft] is any one of the entries equal to the Pivot</comment>
    <comment type="line">// in the list.  If found is false then</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft+1 ... p_end-1] &gt; Pivot holds.</comment>
    <comment type="line">//    The value X [pleft] may be either &lt; or &gt; Pivot.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>==</operator> <name>pright</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>GB_eq_3</name> <argument_list>(<argument><expr><name>X_0</name></expr></argument>, <argument><expr><name>X_1</name></expr></argument>, <argument><expr><name>X_2</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,
                                               <argument><expr><name>Z_0</name></expr></argument>, <argument><expr><name>Z_1</name></expr></argument>, <argument><expr><name>Z_2</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// Modify pleft and pright:</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pleft</name> <operator>==</operator> <name>pright</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GB_lt_3</name> <argument_list>(<argument><expr><name>X_0</name></expr></argument>, <argument><expr><name>X_1</name></expr></argument>, <argument><expr><name>X_2</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,
                     <argument><expr><name>Z_0</name></expr></argument>, <argument><expr><name>Z_1</name></expr></argument>, <argument><expr><name>Z_2</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>pleft</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
<comment type="line">//          pright++ ;  // (not needed)</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If found is false then</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt; Pivot holds,</comment>
    <comment type="line">//    and pleft-1 == pright</comment>

    <comment type="line">// If X has no duplicates, then whether or not Pivot is found,</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>

    <comment type="line">// If X has duplicates, then whether or not Pivot is found,</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt;= Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>

    <return>return <expr><operator>(</operator><name>pleft</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_msort_3_create_merge_tasks</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Recursively constructs ntasks tasks to merge two arrays, Left and Right,</comment>
<comment type="line">// into Sresult, where Left is L [pL_start...pL_end-1], Right is R</comment>
<comment type="line">// [pR_start...pR_end-1], and Sresult is S [pS_start...pS_start+total_work-1],</comment>
<comment type="line">// and where total_work is the total size of Left and Right.</comment>
<comment type="line">//</comment>
<comment type="line">// Task tid will merge L [L_task [tid] ... L_task [tid] + L_len [tid] - 1] and</comment>
<comment type="line">// R [R_task [tid] ... R_task [tid] + R_len [tid] -1] into the merged output</comment>
<comment type="line">// array S [S_task [tid] ... ].  The task tids created are t0 to</comment>
<comment type="line">// t0+ntasks-1.</comment>

<function><type><name>void</name></type> <name>GB_msort_3_create_merge_tasks</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_task</name></decl></parameter>,        <comment type="line">// L_task [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_len</name></decl></parameter>,         <comment type="line">// L_len  [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_task</name></decl></parameter>,        <comment type="line">// R_task [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_len</name></decl></parameter>,         <comment type="line">// R_len  [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_task</name></decl></parameter>,        <comment type="line">// S_task [t0...t0+ntasks-1] computed</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name></decl></parameter>,                       <comment type="line">// first task tid to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,                   <comment type="line">// # of tasks to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pS_start</name></decl></parameter>,             <comment type="line">// merge into S [pS_start...]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_0</name></decl></parameter>,     <comment type="line">// Left = L [pL_start...pL_end-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pL_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pL_end</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_0</name></decl></parameter>,     <comment type="line">// Right = R [pR_start...pR_end-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pR_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pR_end</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get problem size</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nleft</name>  <init>= <expr><name>pL_end</name> <operator>-</operator> <name>pL_start</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// size of Left array</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nright</name> <init>= <expr><name>pR_end</name> <operator>-</operator> <name>pR_start</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// size of Right array</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total_work</name> <init>= <expr><name>nleft</name> <operator>+</operator> <name>nright</name></expr></init></decl> ;</decl_stmt>       <comment type="line">// total work to do</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>total_work</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>ntasks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// a single task will merge all of Left and Right into Sresult</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>L_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pL_start</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>L_len</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>nleft</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>R_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pR_start</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>R_len</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>nright</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>S_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pS_start</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// partition the Left and Right arrays for multiple merge tasks</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name></decl>, <decl><type ref="prev"/><name>pright</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nleft</name> <operator>&gt;=</operator> <name>nright</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// split Left in half, and search for its pivot in Right</comment>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <operator>(</operator><name>pL_end</name> <operator>+</operator> <name>pL_start</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pright</name> <operator>=</operator> <call><name>GB_msort_3_binary_search</name> <argument_list>(
                        <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>L_2</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,
                        <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>R_2</name></expr></argument>, <argument><expr><name>pR_start</name></expr></argument>, <argument><expr><name>pR_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// split Right in half, and search for its pivot in Left</comment>
            <expr_stmt><expr><name>pright</name> <operator>=</operator> <operator>(</operator><name>pR_end</name> <operator>+</operator> <name>pR_start</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <call><name>GB_msort_3_binary_search</name> <argument_list>(
                        <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>R_2</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>,
                        <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>L_2</name></expr></argument>, <argument><expr><name>pL_start</name></expr></argument>, <argument><expr><name>pL_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// partition the tasks according to the work of each partition</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// work0 is the total work in the first partition</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>work0</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>-</operator> <name>pL_start</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pright</name> <operator>-</operator> <name>pR_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>round</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ntasks</name> <operator>*</operator>
            <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>work0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>total_work</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// ensure at least one task is assigned to each partition</comment>
        <expr_stmt><expr><name>ntasks0</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks0</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><name>ntasks</name> <operator>-</operator> <name>ntasks0</name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assign ntasks0 to the first half</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// ntasks0 tasks merge L [pL_start...pleft-1] and R [pR_start..pright-1]</comment>
        <comment type="line">// into the result S [pS_start...work0-1].</comment>

        <expr_stmt><expr><call><name>GB_msort_3_create_merge_tasks</name> <argument_list>(
            <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>pS_start</name></expr></argument>,
            <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>L_2</name></expr></argument>, <argument><expr><name>pL_start</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,
            <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>R_2</name></expr></argument>, <argument><expr><name>pR_start</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assign ntasks1 to the second half</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// ntasks1 tasks merge L [pleft...pL_end-1] and R [pright...pR_end-1]</comment>
        <comment type="line">// into the result S [pS_start+work0...pS_start+total_work].</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><name>t0</name> <operator>+</operator> <name>ntasks0</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// first task id of the second set of tasks</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pS_start1</name> <init>= <expr><name>pS_start</name> <operator>+</operator> <name>work0</name></expr></init></decl> ;</decl_stmt>  <comment type="line">// 2nd set starts here in S</comment>
        <expr_stmt><expr><call><name>GB_msort_3_create_merge_tasks</name> <argument_list>(
            <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>pS_start1</name></expr></argument>,
            <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>L_2</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,  <argument><expr><name>pL_end</name></expr></argument>,
            <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>R_2</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>pR_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_msort_3_merge: merge two sorted lists via a single thread</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// merge Left [0..nleft-1] and Right [0..nright-1] into S [0..nleft+nright-1] */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GB_msort_3_merge</name>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_0</name></decl></parameter>,              <comment type="line">// output of length nleft + nright</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_1</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Left_0</name></decl></parameter>,     <comment type="line">// left input of length nleft</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Left_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Left_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nleft</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Right_0</name></decl></parameter>,    <comment type="line">// right input of length nright</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Right_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Right_2</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nright</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>pleft</name></decl>, <decl><type ref="prev"/><name>pright</name></decl> ;</decl_stmt>

    <comment type="line">// merge the two inputs, Left and Right, while both inputs exist</comment>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pleft</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pright</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pleft</name> <operator>&lt;</operator> <name>nleft</name> <operator>&amp;&amp;</operator> <name>pright</name> <operator>&lt;</operator> <name>nright</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>GB_lt_3</name> <argument_list>(<argument><expr><name>Left_0</name></expr></argument>,  <argument><expr><name>Left_1</name></expr></argument>,  <argument><expr><name>Left_2</name></expr></argument>,  <argument><expr><name>pleft</name></expr></argument>,
                     <argument><expr><name>Right_0</name></expr></argument>, <argument><expr><name>Right_1</name></expr></argument>, <argument><expr><name>Right_2</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// S [p] = Left [pleft++]</comment>
            <expr_stmt><expr><name><name>S_0</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Left_0</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_1</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Left_1</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_2</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Left_2</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pleft</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// S [p] = Right [pright++]</comment>
            <expr_stmt><expr><name><name>S_0</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Right_0</name> <index>[<expr><name>pright</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_1</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Right_1</name> <index>[<expr><name>pright</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_2</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Right_2</name> <index>[<expr><name>pright</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pright</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// either input is exhausted; copy the remaining list into S</comment>
    <if_stmt><if>if <condition>(<expr><name>pleft</name> <operator>&lt;</operator> <name>nleft</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nremaining</name> <init>= <expr><operator>(</operator><name>nleft</name> <operator>-</operator> <name>pleft</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_0</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Left_0</name> <operator>+</operator> <name>pleft</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_1</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Left_1</name> <operator>+</operator> <name>pleft</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_2</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Left_2</name> <operator>+</operator> <name>pleft</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>pright</name> <operator>&lt;</operator> <name>nright</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nremaining</name> <init>= <expr><operator>(</operator><name>nright</name> <operator>-</operator> <name>pright</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_0</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Right_0</name> <operator>+</operator> <name>pright</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_1</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Right_1</name> <operator>+</operator> <name>pright</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_2</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Right_2</name> <operator>+</operator> <name>pright</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_msort_3: parallel mergesort</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_msort_3</name>    <comment type="line">// sort array A of size 3-by-n, using 3 keys (A [0:2][])</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,   <comment type="line">// size n array</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,   <comment type="line">// size n array</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_2</name></decl></parameter>,   <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>                <comment type="line">// # of threads to use</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle small problems with a single thread</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>&lt;=</operator> <name>GB_BASECASE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// sequential quicksort</comment>
        <expr_stmt><expr><call><name>GB_qsort_3</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name>A_2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// determine the number of levels to create, which must always be an</comment>
    <comment type="line">// even number.  The # of levels is chosen to ensure that the # of leaves</comment>
    <comment type="line">// of the task tree is between 4*nthreads and 16*nthreads.</comment>

    <comment type="line">//  2 to 4 threads:     4 levels, 16 qsort leaves</comment>
    <comment type="line">//  5 to 16 threads:    6 levels, 64 qsort leaves</comment>
    <comment type="line">// 17 to 64 threads:    8 levels, 256 qsort leaves</comment>
    <comment type="line">// 65 to 256 threads:   10 levels, 1024 qsort leaves</comment>
    <comment type="line">// 256 to 1024 threads: 12 levels, 4096 qsort leaves</comment>
    <comment type="line">// ...</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>ceil</name> <argument_list>(<argument><expr><call><name>log2</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nthreads</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>W_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><literal type="number">3</literal><operator>*</operator><name>n</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><name>W</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_0</name>    <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>n</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_1</name>    <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>n</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_2</name>    <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>n</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_len</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_len</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Slice</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <operator>(</operator><name>ntasks</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>  

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// partition and sort the leaves</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_eslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>leaf</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>leafsize</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>leaf</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_qsort_3</name> <argument_list>(<argument><expr><name>A_0</name> <operator>+</operator> <name>leaf</name></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>leaf</name></expr></argument>, <argument><expr><name>A_2</name> <operator>+</operator> <name>leaf</name></expr></argument>, <argument><expr><name>leafsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// merge each level</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>( <init>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>k</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// merge level k into level k-1, from A into W</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// TODO: skip k and k-1 for each group of 4 sublists of A if they are</comment>
        <comment type="line">// already sorted with respect to each other.</comment>

        <comment type="line">// this could be done in parallel if ntasks was large</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// create 2*nt tasks to merge two A sublists into one W sublist</comment>
            <expr_stmt><expr><call><name>GB_msort_3_create_merge_tasks</name> <argument_list>(
                <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nt</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name>A_2</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,    <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name>A_2</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>nt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// merge A [pL...pL+nL-1] and A [pR...pR+nR-1] into W [pS..]</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pL</name> <init>= <expr><name><name>L_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nL</name> <init>= <expr><name><name>L_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name> <init>= <expr><name><name>R_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nR</name> <init>= <expr><name><name>R_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pS</name> <init>= <expr><name><name>S_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <expr_stmt><expr><call><name>GB_msort_3_merge</name> <argument_list>(
                <argument><expr><name>W_0</name> <operator>+</operator> <name>pS</name></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pS</name></expr></argument>, <argument><expr><name>W_2</name> <operator>+</operator> <name>pS</name></expr></argument>,
                <argument><expr><name>A_0</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>A_2</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>nL</name></expr></argument>,
                <argument><expr><name>A_0</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>A_2</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>nR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nt</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// merge level k-1 into level k-2, from W into A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// this could be done in parallel if ntasks was large</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// create 2*nt tasks to merge two W sublists into one A sublist</comment>
            <expr_stmt><expr><call><name>GB_msort_3_create_merge_tasks</name> <argument_list>(
                <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nt</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>W_1</name></expr></argument>, <argument><expr><name>W_2</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,    <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>W_1</name></expr></argument>, <argument><expr><name>W_2</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>nt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// merge A [pL...pL+nL-1] and A [pR...pR+nR-1] into W [pS..]</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pL</name> <init>= <expr><name><name>L_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nL</name> <init>= <expr><name><name>L_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name> <init>= <expr><name><name>R_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nR</name> <init>= <expr><name><name>R_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pS</name> <init>= <expr><name><name>S_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_msort_3_merge</name> <argument_list>(
                <argument><expr><name>A_0</name> <operator>+</operator> <name>pS</name></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pS</name></expr></argument>, <argument><expr><name>A_2</name> <operator>+</operator> <name>pS</name></expr></argument>,
                <argument><expr><name>W_0</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>W_2</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>nL</name></expr></argument>,
                <argument><expr><name>W_0</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>W_2</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>nR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nt</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
