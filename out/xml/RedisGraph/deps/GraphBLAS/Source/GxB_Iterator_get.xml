<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Iterator_get.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Iterator_get_TYPE: get value of the current entry for any iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">// On input, the prior call to GxB_*Iterator_*seek*, or GxB_*Iterator_*next*</comment>
<comment type="line">// must have returned GrB_SUCCESS, indicating that the iterator is at a valid</comment>
<comment type="line">// current entry for either a matrix or vector.</comment>

<comment type="line">// Returns the value of the current entry at the position determined by the</comment>
<comment type="line">// iterator.  No typecasting is permitted; the method name must match the</comment>
<comment type="line">// type of the matrix or vector.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_BOOL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_INT8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_INT16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_INT32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_INT64</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_UINT8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_UINT16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_UINT32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_UINT64</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_FP32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_FP64</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_FC32</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_FC64</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_Iterator_get_UDT</name></cpp:undef>

<function><type><name>bool</name></type> <name>GxB_Iterator_get_BOOL</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>int8_t</name></type> <name>GxB_Iterator_get_INT8</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>int8_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>int16_t</name></type> <name>GxB_Iterator_get_INT16</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>GxB_Iterator_get_INT32</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>GxB_Iterator_get_INT64</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>GxB_Iterator_get_UINT8</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>uint16_t</name></type> <name>GxB_Iterator_get_UINT16</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GxB_Iterator_get_UINT32</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>GxB_Iterator_get_UINT64</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>float</name></type> <name>GxB_Iterator_get_FP32</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>GxB_Iterator_get_FP64</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GxB_FC32_t</name></type> <name>GxB_Iterator_get_FC32</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GxB_FC64_t</name></type> <name>GxB_Iterator_get_FC64</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_get</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GxB_Iterator_get_UDT</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>Ax</name></name><operator>)</operator><operator>)</operator> <operator>+</operator>
        <operator>(</operator><ternary><condition><expr><name><name>iterator</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>type_size</name></name> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>,
        <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>type_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
