<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Pending_realloc.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Pending_realloc: reallocate a list of pending tuples</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reallocate a list of pending tuples.  If it fails, the list is freed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Pending.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_Pending_realloc</name>     <comment type="line">// reallocate a list of pending tuples</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_Pending</name> <modifier>*</modifier></type><name>PHandle</name></decl></parameter>,    <comment type="line">// Pending tuple list to reallocate</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nnew</name></decl></parameter>,           <comment type="line">// # of new tuples to accomodate</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>PHandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>Pending</name> <init>= <expr><operator>(</operator><operator>*</operator><name>PHandle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure the list can hold at least nnew more tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>newsize</name> <init>= <expr><name>nnew</name> <operator>+</operator> <name><name>Pending</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>newsize</name> <operator>&gt;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// double the size if the list is not large enough</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>newsize</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>newsize</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// reallocate the i,j,x arrays</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>ok1</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok2</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok3</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>GB_REALLOC</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok1</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_REALLOC</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>j</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>j_size</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok2</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><name><name>Pending</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_REALLOC</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>newsize</name><operator>*</operator><name>s</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>ok3</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok1</name> <operator>||</operator> <operator>!</operator><name>ok2</name> <operator>||</operator> <operator>!</operator><name>ok3</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><call><name>GB_Pending_free</name> <argument_list>(<argument><expr><name>PHandle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// record the new size of the Pending tuple list</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name> <operator>=</operator> <name>newsize</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
