<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_cpu_features_impl.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cpu_features_impl.c: cpu features for GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Google's cpu_features package makes extensive use of bit field manipulation.</comment>
<comment type="line">// This makes the code easy to read, but the layout of the bits can depend on</comment>
<comment type="line">// the implementation by the compiler.  The cpu_features/CMakeLists.txt file</comment>
<comment type="line">// has this recommendation:</comment>

    <comment type="line">// cpu_features uses bit-fields which are to some extent implementation</comment>
    <comment type="line">// defined (see https://en.cppreference.com/w/c/language/bit_field).  As a</comment>
    <comment type="line">// consequence it is discouraged to use cpu_features as a shared library</comment>
    <comment type="line">// because different compilers may interpret the code in different ways.</comment>
    <comment type="line">// Prefer static linking from source whenever possible.</comment>
    <comment type="line">// option(BUILD_SHARED_LIBS "Build library as shared." OFF)</comment>

<comment type="line">// GraphBLAS avoids this issue by compiling the cpu_features source directly</comment>
<comment type="line">// into the libgraphblas.so and libgraphblas.a compiled libraries themselves.</comment>
<comment type="line">// This ensures that the same compiler is used for both GraphBLAS and</comment>
<comment type="line">// cpu_features.</comment>

<comment type="line">// This file simply #include's all of the cpu_features/src/impl_*.c files,</comment>
<comment type="line">// one for each architecture (and multiple ones for x86).  The supporting</comment>
<comment type="line">// files for cpu_features are #include'd by GB_cpu_features_support.c.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_cpu_features.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GBNCPUFEAT</name></expr></argument> )</argument_list></call></expr></cpp:if>

    <comment type="line">// include the implementation files from cpu_features/src/impl_*.c</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_aarch64.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_arm_linux_or_android.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_mips_linux_or_android.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_ppc_linux.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_x86_freebsd.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_x86_linux_or_android.c"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_x86_windows.c"</cpp:file></cpp:include>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GBX86</name></expr></cpp:if>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__apple__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MACH__</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
        <comment type="line">// needed for src/impl_x86_macos.c:</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_SYSCTLBYNAME</name></cpp:macro></cpp:define>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"src/impl_x86_macos.c"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
