<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_deserialize_from_blob.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_deserialize_from_blob: uncompress a set of blocks from the blob</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Decompress a single array from a set of compressed blocks in the blob.  If</comment>
<comment type="line">// the input data is mangled, this method is still safe, since it performs the</comment>
<comment type="line">// bare minimum sanity checks to ensure no out-of-bounds indexing of arrays.</comment>
<comment type="line">// However, the contents of output array are not fully checked.  This step is</comment>
<comment type="line">// done by GB_deserialize, if requested.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_lz4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_zstd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_FREE (&amp;X, X_size) ;  \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_deserialize_from_blob</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><modifier>*</modifier></type><name>X_handle</name></decl></parameter>,         <comment type="line">// uncompressed output array</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>X_size_handle</name></decl></parameter>,      <comment type="line">// size of X as allocated</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>X_len</name></decl></parameter>,              <comment type="line">// size of X in bytes</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>blob</name></decl></parameter>,        <comment type="line">// serialized blob of size blob_size</comment>
    <parameter><decl><type><name>size_t</name></type> <name>blob_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Sblocks</name></decl></parameter>,           <comment type="line">// array of size nblocks</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>nblocks</name></decl></parameter>,            <comment type="line">// # of compressed blocks for this array</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>method</name></decl></parameter>,             <comment type="line">// compression method used for each block</comment>
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>s_handle</name></decl></parameter>,           <comment type="line">// where to read from the blob</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

<comment type="line">//  GrB_Info info ;</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>blob</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>s_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>X_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>X_size_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>X_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>X_size_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// parse the method</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>algo</name></decl>, <decl><type ref="prev"/><name>level</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_serialize_method</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>algo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output array</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>X_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>X_len</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// decompress the blocks from the blob</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>*</operator><name>s_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>algo</name> <operator>==</operator> <name>GxB_COMPRESSION_NONE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// no compression; the array is held in a single block</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>nblocks</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>Sblocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>X_len</name> <operator>||</operator> <name>s</name> <operator>+</operator> <name>X_len</name> <operator>&gt;</operator> <name>blob_size</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// blob is invalid: guard against an unsafe memcpy</comment>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// copy the blob into the array X.  This is now safe and secure.</comment>
            <comment type="line">// The contents of X are not yet checked, however.</comment>
            <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>blob</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>X_len</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>algo</name> <operator>==</operator> <name>GxB_COMPRESSION_LZ4</name> <operator>||</operator> <name>algo</name> <operator>==</operator> <name>GxB_COMPRESSION_LZ4HC</name>
        <operator>||</operator> <name>algo</name> <operator>==</operator> <name>GxB_COMPRESSION_ZSTD</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// LZ4, LZ4HC, or ZSTD compression</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>blockid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:ok</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>blockid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>blockid</name> <operator>&lt;</operator> <name>nblocks</name></expr> ;</condition> <incr><expr><name>blockid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// get the start and end of the compressed and uncompressed blocks</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kstart</name></decl>, <decl><type ref="prev"/><name>kend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kstart</name></expr></argument>, <argument><expr><name>kend</name></expr></argument>, <argument><expr><name>X_len</name></expr></argument>, <argument><expr><name>blockid</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>s_start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>blockid</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>s_end</name>   <init>= <expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type>  <name>s_size</name>  <init>= <expr><name>s_end</name> <operator>-</operator> <name>s_start</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type>  <name>d_size</name>  <init>= <expr><name>kend</name> <operator>-</operator> <name>kstart</name></expr></init></decl> ;</decl_stmt>
            <comment type="line">// ensure s_start, s_end, kstart, and kend are all valid,</comment>
            <comment type="line">// to avoid accessing arrays out of bounds, if input is corrupted.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>kstart</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>kend</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>s_start</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>s_end</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>
                <name>kstart</name> <operator>&gt;=</operator> <name>kend</name> <operator>||</operator> <name>s_start</name> <operator>&gt;=</operator> <name>s_end</name> <operator>||</operator> <name>s_size</name></expr></argument> &gt;</argument_list></name> <name>INT32_MAX</name> <operator>||</operator>
                <name>s</name> <operator>+</operator> <name>s_start</name></expr></argument> &gt;</argument_list></name> <name>blob_size</name> <operator>||</operator> <name>s</name> <operator>+</operator> <name>s_end</name></expr></argument> &gt;</argument_list></name> <name>blob_size</name> <operator>||</operator>
                <name>kstart</name></expr></argument> &gt;</argument_list></name> <name>X_len</name> <operator>||</operator> <name>kend</name> <operator>&gt;</operator> <name>X_len</name> <operator>||</operator> <name>d_size</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// blob is invalid</comment>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// uncompress the compressed block of size s_size</comment>
                <comment type="line">// from blob [s + s_start:s_end-1] into X [kstart:kend-1].</comment>
                <comment type="line">// This is safe and secure so far.  The contents of X are</comment>
                <comment type="line">// not yet checked, however.  That step is done in</comment>
                <comment type="line">// GB_deserialize, if requested.</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>blob</name> <operator>+</operator> <name>s</name> <operator>+</operator> <name>s_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>X</name> <operator>+</operator> <name>kstart</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>algo</name> <operator>==</operator> <name>GxB_COMPRESSION_ZSTD</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// ZSTD</comment>
                    <decl_stmt><decl><type><name>size_t</name></type> <name>u</name> <init>= <expr><call><name>ZSTD_decompress</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>d_size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>s_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>d_size</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// blob is invalid</comment>
                        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// LZ4 or LZ4HC</comment>
                    <decl_stmt><decl><type><name>int</name></type> <name>src_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>s_size</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>dst_size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <name>d_size</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>LZ4_decompress_safe</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_size</name></expr></argument>, <argument><expr><name>dst_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>dst_size</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// blob is invalid</comment>
                        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// unknown compression method</comment>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// decompression failure; blob is invalid</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result: X, its size, and updated index into the blob</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>X_handle</name><operator>)</operator> <operator>=</operator> <name>X</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>X_size_handle</name><operator>)</operator> <operator>=</operator> <name>X_size</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nblocks</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>Sblocks</name> <index>[<expr><name>nblocks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>s_handle</name><operator>)</operator> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
