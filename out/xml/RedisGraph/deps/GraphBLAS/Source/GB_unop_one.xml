<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_unop_one.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_unop_one: return the ONE operator for a given type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_UnaryOp</name></type> <name>GB_unop_one</name> <parameter_list>(<parameter><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_BOOL</name>  <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_INT8</name>  <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_INT16</name> <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_INT32</name> <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_INT64</name> <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT8</name> <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT16</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT32</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT64</name><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_FP32</name>  <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_FP64</name>  <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_FC32</name>  <operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ONE_FC64</name>  <operator>)</operator></expr> ;</return>
        <default>default              :</default> <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
