<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_shallow_op.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_shallow_op:  create a shallow copy and apply a unary operator to a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = op (A), called only by GB_apply.</comment>

<comment type="line">// Create a shallow copy of a matrix, applying an operator to the entries.</comment>

<comment type="line">// The CSR/CSC format of C and A can differ, but they have they same vlen and</comment>
<comment type="line">// vdim.  This function is CSR/CSC agnostic, except that C_is_csc is used to</comment>
<comment type="line">// set the C-&gt;is_csc state in C.</comment>

<comment type="line">// The values are typically not a shallow copy, unless no typecasting is needed</comment>
<comment type="line">// and the operator is an identity operator.</comment>

<comment type="line">// The pattern is always a shallow copy.  No errors are checked except for</comment>
<comment type="line">// out-of-memory conditions.  This function is not user-callable.  Shallow</comment>
<comment type="line">// matrices are never passed back to the user.</comment>

<comment type="line">// Compare this function with GB_shallow_copy.c.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_apply.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GB_phybix_free (C) ;</cpp:value></cpp:define>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_shallow_op</name>      <comment type="line">// create shallow matrix and apply operator</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,           <comment type="line">// output C, of type op*-&gt;ztype, static header</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,    <comment type="line">// desired CSR/CSC format of C</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,       <comment type="line">// unary/index-unary/binop to apply</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,    <comment type="line">// scalar to bind to binary operator</comment>
        <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>,         <comment type="line">// if true, binop(x,A) else binop(A,y)</comment>
        <parameter><decl><type><name>bool</name></type> <name>flipij</name></decl></parameter>,                <comment type="line">// if true, flip i,j for user idxunop</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input matrix to typecast</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for shallow_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_OP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"unop/binop for shallow_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>op_intype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"unop for shallow_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>op_intype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"binop for shallow_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>op_intype</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>binop_bind1st</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>op_intype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// GB_IS_INDEXUNARYOP_CODE (opcode)</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT_INDEXUNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"ixdunop for shallow_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_intype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>op_intype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct a shallow copy of A for the pattern of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_iso_code</name></type> <name>C_code_iso</name> <init>= <expr><call><name>GB_iso_unop_code</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><operator>(</operator><name>C_code_iso</name> <operator>!=</operator> <name>GB_NON_ISO</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// initialized the header for C, but do not allocate C-&gt;{p,h,b,i,x}</comment>
    <comment type="line">// C has the exact same sparsity structure as A.</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// any sparsity, existing header</comment>
        <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make a shallow copy of the vector pointers</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>     <comment type="line">// C-&gt;p not freed when freeing C</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>     <comment type="line">// C-&gt;h not freed when freeing C</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>                       <comment type="line">// C-&gt;p is of size A-&gt;plen + 1</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>                       <comment type="line">// C-&gt;h is of size A-&gt;plen</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr> ;</expr_stmt>                 <comment type="line">// C and A have the same hyperlist sizes</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr> ;</expr_stmt>           <comment type="line">// C is jumbled if A is jumbled</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvals</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>C_iso</name></expr> ;</expr_stmt>                    <comment type="line">// OK</comment>
    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(iso apply) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make a shallow copy of the A-&gt;Y hyper_hash</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for empty matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz_max</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C-&gt;p and C-&gt;h are shallow but the rest is empty</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C = quick copy of empty A"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make a shallow copy of the pattern</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make a shallow copy of the values, if possible</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If the identity operator, first(A,y), or second(x,A) are used with no</comment>
    <comment type="line">// typecasting, C-&gt;x becomes a shallow copy of A-&gt;x, and no work is done.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>op_intype</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_IDENTITY_unop_code</name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name>  <operator>&amp;&amp;</operator> <operator>!</operator><name>binop_bind1st</name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>&amp;&amp;</operator>  <name>binop_bind1st</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no work is done at all.  C is a pure shallow copy</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(pure shallow) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>       <comment type="line">// C-&gt;x will not be freed when freeing C</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>           <comment type="line">// C has the same iso property as A</comment>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C = pure shallow (A)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the operator to the numerical values</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate new space for the numerical values of C; use calloc if bitmap</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>,     <comment type="line">// x:OK</comment>
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>          <comment type="line">// free C-&gt;x when freeing C</comment>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_apply_op</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
        <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C = shallow (op (A))"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
