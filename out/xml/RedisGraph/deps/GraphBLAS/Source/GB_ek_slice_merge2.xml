<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ek_slice_merge2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ek_slice_merge2: merge final results for matrix C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Prior to calling this function, a method using GB_ek_slice to slice an input</comment>
<comment type="line">// matrix A has computed the vector counts Cp, where Cp [k] is the number of</comment>
<comment type="line">// entries in the kth vector of C on input to this function.</comment>

<comment type="line">// The input matrix and the matrix C is sliced by kfirst_Aslice and</comment>
<comment type="line">// klast_Aslice, where kfirst = kfirst_Aslice [tid] is the first vector in A</comment>
<comment type="line">// and C computed by task tid, and klast = klast_Aslice [tid] is the last</comment>
<comment type="line">// vector computed by task tid.  Tasks tid and tid+1 may cooperate on a single</comment>
<comment type="line">// vector, however, where klast_Aslice [tid] may be the same as kfirst_Aslice</comment>
<comment type="line">// [tid].  The method has also computed Wfirst [tid] and Wlast [tid] for each</comment>
<comment type="line">// task id, tid.  Wfirst [tid] is the number of entries task tid contributes to</comment>
<comment type="line">// C(:,kfirst), and Wlast [tid] is the number of entries task tid contributes</comment>
<comment type="line">// to C(:,klast).</comment>

<comment type="line">// On output, Cp [0:cnvec] is overwritten with its cumulative sum.</comment>
<comment type="line">// C_nvec_nonempty is the count of how many vectors in C are empty.</comment>
<comment type="line">// Cp_kfirst [tid] is the position in C where task tid owns entries in</comment>
<comment type="line">// C(:,kfirst), which is a cumulative sum of the entries computed in C(:,k) for</comment>
<comment type="line">// all tasks that cooperate to compute that vector, starting at Cp [kfirst].</comment>
<comment type="line">// There is no need to compute this for C(:,klast):  if kfirst &lt; klast, then</comment>
<comment type="line">// either task tid fully owns C(:,klast), or it is always the first task to</comment>
<comment type="line">// operate on C(:,klast).  In both cases, task tid starts its computations at</comment>
<comment type="line">// the top of C(:,klast), which can be found at Cp [klast].</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_ek_slice_merge2</name>     <comment type="line">// merge final results for matrix C</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>C_nvec_nonempty</name></decl></parameter>,           <comment type="line">// # of non-empty vectors in C</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp_kfirst</name></decl></parameter>,     <comment type="line">// size ntasks</comment>
    <comment type="line">// input/output</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name></decl></parameter>,            <comment type="line">// size cnvec+1</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnvec</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wfirst</name></decl></parameter>,          <comment type="line">// size ntasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wlast</name></decl></parameter>,           <comment type="line">// size ntasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>,        <comment type="line">// size 3*ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,                   <comment type="line">// # of tasks used to construct C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>,                 <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Cp = cumsum (Cp)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>C_nvec_nonempty</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the slice boundaries in the new C matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>ntasks</name></expr></init></decl> ;</decl_stmt>
<comment type="line">//  const int64_t *restrict pstart_Aslice = A_ek_slicing + ntasks * 2 ;</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>kprior</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>kprior</name> <operator>&lt;</operator> <name>kfirst</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Task tid is the first one to do work on C(:,kfirst), so it</comment>
            <comment type="line">// starts at Cp [kfirst], and it contributes Wfirst [tid] entries</comment>
            <comment type="line">// to C(:,kfirst).</comment>
            <expr_stmt><expr><name>pC</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>kfirst</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kprior</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Task tid contributes Wfirst [tid] entries to C(:,kfirst)</comment>
        <expr_stmt><expr><name><name>Cp_kfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>pC</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pC</name> <operator>+=</operator> <name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><name><name>klast_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>kfirst</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Task tid is the last to contribute to C(:,kfirst).</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>==</operator> <name><name>Cp</name> <index>[<expr><name>kfirst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// Task tid contributes the first Wlast [tid] entries to</comment>
            <comment type="line">// C(:,klast), so the next task tid+1 starts at location Cp [klast]</comment>
            <comment type="line">// + Wlast [tid], if its first vector is klast of this task.</comment>
            <expr_stmt><expr><name>pC</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>klast</name></expr>]</index></name> <operator>+</operator> <name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>kprior</name> <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
