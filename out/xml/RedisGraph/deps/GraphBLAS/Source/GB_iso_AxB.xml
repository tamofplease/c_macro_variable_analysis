<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_AxB.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_AxB: check for iso result for C=A*B and compute the iso scalar for C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Return true if C=A*B results in an iso matrix C, and return the iso value of</comment>
<comment type="line">// C.  The type of the matrix C and scalar c is semiring-&gt;add-&gt;ztype.</comment>

<comment type="line">// If both A and B are full and iso, then C is also full and iso, for nearly</comment>
<comment type="line">// all semirings.  The inner dimension of the matrix multiply is required to</comment>
<comment type="line">// compute the iso value of C.  Assuming all matrices are CSC:</comment>

<comment type="line">//  C = A*B     n = A-&gt;vdim == B-&gt;vlen</comment>
<comment type="line">//  C = A'*B    n = A-&gt;vlen == B-&gt;vlen</comment>
<comment type="line">//  C = A*B'    n = A-&gt;vdim == B-&gt;vdim</comment>
<comment type="line">//  C = A'*B'   n = A-&gt;vlen == B-&gt;vdim</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_mult: c = mult(a,b) or c = mult(b,a)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GB_iso_mult</name>         <comment type="line">// c = mult(a,b) or c=mult(b,a)</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>c</name></decl></parameter>,        <comment type="line">// c has type zcode, and size zsize</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>bcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bsize</name></decl></parameter>,
    <parameter><decl><type><name>GxB_binary_function</name></type> <name>fmult</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>xcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ycode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ysize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>zcode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>zsize</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// c = mult(b,a)</comment>
        <expr_stmt><expr><call><name>GB_iso_mult</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name>fmult</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>fmult</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// fmult is the implicit FIRST operator from GB_reduce_to_vector</comment>
            <comment type="line">// c = (ztype) a</comment>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>acode</name> <operator>==</operator> <name>xcode</name> <operator>&amp;&amp;</operator> <name>bcode</name> <operator>==</operator> <name>ycode</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// c = fmult (a,b)</comment>
            <expr_stmt><expr><call><name>fmult</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// x = (xtype) a</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>x</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// y = (ytype) b</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>y</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// c = fmult (x,y)</comment>
            <expr_stmt><expr><call><name>fmult</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_AxB</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>GB_iso_AxB</name>             <comment type="line">// C = A*B, return true if C is iso</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>c</name></decl></parameter>,    <comment type="line">// output scalar of iso array (not computed if NULL)</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>,             <comment type="line">// inner dimension of the matrix multiply</comment>
    <parameter><decl><type><name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,  <comment type="line">// semiring</comment>
    <parameter><decl><type><name>bool</name></type> <name>flipxy</name></decl></parameter>,            <comment type="line">// true if z=fmult(b,a), false if z=fmult(a,b)</comment>
    <parameter><decl><type><name>bool</name></type> <name>ignore_monoid</name></decl></parameter>      <comment type="line">// rowscale and colscale do not use the monoid</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_iso_AxB"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for GB_iso_AxB"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring for GB_iso_AxB"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// quick return if multop is positional</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>add_binop_code</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>multiply</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>multiply</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is not iso if the multiply op is positional</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the binary operator and the types of C, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GxB_binary_function</name></type> <name>fmult</name> <init>= <expr><name><name>multiply</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>mult_binop_code</name> <init>= <expr><name><name>multiply</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>fmult</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>mult_binop_code</name> <operator>==</operator> <name>GB_FIRST_binop_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><name><name>multiply</name><operator>-&gt;</operator><name>xtype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ytype</name> <init>= <expr><name><name>multiply</name><operator>-&gt;</operator><name>ytype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>multiply</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>bcode</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>bsize</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// rename a boolean monoid:</comment>
        <comment type="line">// MIN_BOOL and TIMES_BOOL monoids become LAND</comment>
        <comment type="line">// MAX_BOOL and PLUS_BOOL monoids become LOR</comment>
        <expr_stmt><expr><name>add_binop_code</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>add_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// rename a boolean multiply op:</comment>
        <comment type="line">// DIV becomes FIRST, RDIV becomes SECOND; all other renaming has no</comment>
        <comment type="line">// effect on this method. </comment>
        <expr_stmt><expr><name>mult_binop_code</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>mult_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// "nice" monoids have the property that reducing a set of iso values to a</comment>
    <comment type="line">// single result doesn't change the result: ANY, LAND, LOR, BAND, BOR, MIN</comment>
    <comment type="line">// and MAX.  That is, x == reduce ([x x x x x ... x x x x]) holds for all</comment>
    <comment type="line">// these monoids.  The monoids that do not fall into this "nice" category</comment>
    <comment type="line">// are PLUS, TIMES, EQ (LXNOR), LXOR, BXOR, and BXNOR.  For row/col scaling,</comment>
    <comment type="line">// all monoids are "nice" since they aren't used.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>nice_monoid</name> <init>= <expr><name>ignore_monoid</name> <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_ANY_binop_code</name>  <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_LAND_binop_code</name> <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_LOR_binop_code</name>  <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_BAND_binop_code</name> <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_BOR_binop_code</name>  <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_MAX_binop_code</name>  <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_MIN_binop_code</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// Nearly all cases where C is iso require a "nice" monoid, with the</comment>
    <comment type="line">// exception of the EQ_PAIR and TIMES_PAIR semirings, which are the same</comment>
    <comment type="line">// as ANY_PAIR semirings.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>nice_with_pair</name> <init>= <expr><name>nice_monoid</name> <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_EQ_binop_code</name>  <operator>||</operator>
        <name>add_binop_code</name> <operator>==</operator> <name>GB_TIMES_binop_code</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// the FIRST or ANY multiply ops can both produce a FIRST result</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>first</name> <init>= <expr><operator>(</operator><name>mult_binop_code</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>mult_binop_code</name> <operator>==</operator>
            <operator>(</operator><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><name>GB_SECOND_binop_code</name></expr> </then><else>: <expr><name>GB_FIRST_binop_code</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// the SECOND or ANY multiply ops can both produce a SECOND result</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>second</name> <init>= <expr><operator>(</operator><name>mult_binop_code</name> <operator>==</operator> <name>GB_ANY_binop_code</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>mult_binop_code</name> <operator>==</operator>
            <operator>(</operator><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><name>GB_FIRST_binop_code</name></expr> </then><else>: <expr><name>GB_SECOND_binop_code</name></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if C is iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A and B are treated as if iso if they have 1 entry and are not bitmap</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <operator>(</operator><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <operator>(</operator><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nice_with_pair</name> <operator>&amp;&amp;</operator> <name>mult_binop_code</name> <operator>==</operator> <name>GB_PAIR_binop_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso, with c = 1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_cast_one</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>B_iso</name> <operator>&amp;&amp;</operator> <name>nice_monoid</name> <operator>&amp;&amp;</operator> <name>second</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso, with c = b</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>ycode</name> <operator>&amp;&amp;</operator> <name>bcode</name> <operator>==</operator> <name>ycode</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// c = Bx [0]</comment>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// c = (ztype) ((ytype) Bx [0])</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>y</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_iso</name> <operator>&amp;&amp;</operator> <name>nice_monoid</name> <operator>&amp;&amp;</operator> <name>first</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso, with c = a</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>xcode</name> <operator>&amp;&amp;</operator> <name>acode</name> <operator>==</operator> <name>xcode</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// c = Ax [0]</comment>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// c = (ztype) ((xtype) Ax [0])</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>x</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_iso</name> <operator>&amp;&amp;</operator> <name>B_iso</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// both A and B are iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Bx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nice_monoid</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is iso, with c = fmult(a,b), for any fmult, incl. user-defined</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_iso_mult</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>,
                    <argument><expr><name>fmult</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = A*B where A and B are both full and iso</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// If A and B are both full and iso, then C is also full and iso,</comment>
            <comment type="line">// for any semiring (including user-defined) except those with a</comment>
            <comment type="line">// positional multiplicative operator.  Each entry C(i,j) is the</comment>
            <comment type="line">// reduction of n copies of the single iso scalar t, where t =</comment>
            <comment type="line">// A(i,k)*B(k,j) is iso-valued for any i, j, or k, assuming n is</comment>
            <comment type="line">// the inner dimension of the C=A*B matrix multiply.</comment>

            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// t = A(i,k)*B(k,j)</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>t</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_iso_mult</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>bcode</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>,
                    <argument><expr><name>fmult</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>ysize</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// reduce n copies of t to the single scalar c, in O(log(n))</comment>
                <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>freduce</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>GB_iso_reduce_worker</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>freduce</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// the total time to compute C=A*B where all matrices are n-by-n</comment>
            <comment type="line">// and full is thus O(log(n)), much smaller than O(n^3) for the</comment>
            <comment type="line">// conventional matrix-multiply algorithm.  It would be possible to</comment>
            <comment type="line">// reduce the time still further, since most reductions of n copies</comment>
            <comment type="line">// of t can be done in O(1) time, but the O(log(n)) method works</comment>
            <comment type="line">// for any monoid, including user-defined ones.</comment>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// otherwise, C is not iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
