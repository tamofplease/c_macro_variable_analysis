<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_positional_offset.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_positional_offset: return the offset of a positional operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>int64_t</name></type> <name>GB_positional_offset</name>        <comment type="line">// return the positional thunk</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>,               <comment type="line">// opcode of positional operator</comment>
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>Thunk</name></decl></parameter>                <comment type="line">// thunk for idxunops, or NULL</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ithunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Thunk</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// get the value of the thunk, for positional idxunops</comment>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ithunk</name></expr></argument>, <argument><expr><name>GB_INT64_code</name></expr></argument>, <argument><expr><name><name>Thunk</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Thunk</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,
            <argument><expr><name><name>Thunk</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// these operators are offset by one</comment>
        <case>case <expr><name>GB_POSITIONI1_unop_code</name></expr> :</case> <comment type="line">// z = position_i1(A(i,j)) == i+1</comment>
        <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>   :</case> <comment type="line">// z = first_i1(A(i,j),y) == i+1</comment>
        <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>  :</case> <comment type="line">// z = second_i1(x,A(i,j)) == i+1</comment>
        <case>case <expr><name>GB_POSITIONJ1_unop_code</name></expr> :</case> <comment type="line">// z = position_j1(A(i,j)) == j+1</comment>
        <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>   :</case> <comment type="line">// z = first_j1(A(i,j),y) == j+1</comment>
        <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>  :</case> <comment type="line">// z = second_j1(x,A(i,j)) == j+1</comment>
            <return>return <expr><operator>(</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>

        <comment type="line">// idxunops</comment>
        <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr>  :</case>   <comment type="line">// (i+thunk): row index - thunk</comment>
        <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr>  :</case>   <comment type="line">// (j+thunk): col index - thunk</comment>
        <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case>   <comment type="line">// (j-(i+thunk)): diag index + thunk</comment>
        <case>case <expr><name>GB_FLIPDIAGINDEX_idxunop_code</name></expr> :</case>   <comment type="line">// (i-(j+thunk)), internal use</comment>
        <case>case <expr><name>GB_TRIL_idxunop_code</name></expr>      :</case>   <comment type="line">// (j &lt;= (i+thunk)): tril (A,thunk)</comment>
        <case>case <expr><name>GB_TRIU_idxunop_code</name></expr>      :</case>   <comment type="line">// (j &gt;= (i+thunk)): triu (A,thunk)</comment>
        <case>case <expr><name>GB_DIAG_idxunop_code</name></expr>      :</case>   <comment type="line">// (j == (i+thunk)): diag(A,thunk)</comment>
        <case>case <expr><name>GB_OFFDIAG_idxunop_code</name></expr>   :</case>   <comment type="line">// (j != (i+thunk)): offdiag(A,thunk)</comment>
        <case>case <expr><name>GB_COLLE_idxunop_code</name></expr>     :</case>   <comment type="line">// (j &lt;= thunk): A (:,0:thunk)</comment>
        <case>case <expr><name>GB_COLGT_idxunop_code</name></expr>     :</case>   <comment type="line">// (j &gt; thunk): A (:,thunk+1:ncols-1)</comment>
        <case>case <expr><name>GB_ROWLE_idxunop_code</name></expr>     :</case>   <comment type="line">// (i &lt;= thunk): A (0:thunk,:)</comment>
        <case>case <expr><name>GB_ROWGT_idxunop_code</name></expr>     :</case>   <comment type="line">// (i &gt; thunk): A (thunk+1:nrows-1,:)</comment>
            <return>return <expr><operator>(</operator><name>ithunk</name><operator>)</operator></expr> ;</return>

        <comment type="line">// all other operators have no offset</comment>
        <default>default:</default>
            <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
