<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Col_extract.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Col_extract: w&lt;M&gt; = accum (w, A(I,j)) or A(j,I)'</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extract a single row or column from a matrix.  Note that in the</comment>
<comment type="line">// GraphBLAS spec, row and column vectors are indistinguishable.  In this</comment>
<comment type="line">// implementation, both are the same as an n-by-1 GrB_Matrix, except with</comment>
<comment type="line">// restrictions on the matrix operations that can be performed on them.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_extract.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Col_extract</name>        <comment type="line">// w&lt;M&gt; = accum (w, A(I,j)) or (A(j,I))'</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,               <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,      <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// row indices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>ni</name></decl></parameter>,               <comment type="line">// number of row indices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>,                <comment type="line">// column index</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>   <comment type="line">// descriptor for w, M, and A</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Col_extract (w, M, accum, A, I, ni, j, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_extract"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M_in</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>A_transpose</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ancols</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>A_transpose</name></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>ancols</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>,
            <argument><expr><literal type="string">"Column index j="</literal> <name>GBu</name> <literal type="string">" out of bounds; must be &lt; "</literal> <name>GBu</name></expr></argument> ,
            <argument><expr><name>j</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the jth column (or jth row if A is transposed) using GB_extract</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// construct the column index list J = [ j ] of length nj = 1</comment>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>J</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// do the work in GB_extract</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_extract</name> <argument_list>(
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>,    <argument><expr><name>C_replace</name></expr></argument>,   <comment type="line">// w as a matrix, and descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,      <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                          <comment type="line">// optional accum for z=accum(w,t)</comment>
        <argument><expr><name>A</name></expr></argument>,                 <argument><expr><name>A_transpose</name></expr></argument>, <comment type="line">// A and its descriptor</comment>
        <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>,                          <comment type="line">// row indices I and length ni</comment>
        <argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,                           <comment type="line">// one column index, nj = 1</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
