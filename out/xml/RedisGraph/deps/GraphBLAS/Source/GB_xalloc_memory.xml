<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_xalloc_memory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_xalloc_memory: allocate an array for n entries, or 1 if iso</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name> <modifier>*</modifier></type><name>GB_xalloc_memory</name>      <comment type="line">// return the newly-allocated space</comment>
<parameter_list>(
    <comment type="line">// input</comment>
    <parameter><decl><type><name>bool</name></type> <name>use_calloc</name></decl></parameter>,        <comment type="line">// if true, use calloc</comment>
    <parameter><decl><type><name>bool</name></type> <name>iso</name></decl></parameter>,               <comment type="line">// if true, only allocate a single entry</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>n</name></decl></parameter>,              <comment type="line">// # of entries to allocate if non iso</comment>
    <parameter><decl><type><name>size_t</name></type> <name>type_size</name></decl></parameter>,       <comment type="line">// size of each entry</comment>
    <comment type="line">// output</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>,           <comment type="line">// resulting size</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>iso</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// always calloc the iso entry</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>type_size</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// x:OK</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>use_calloc</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>type_size</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>type_size</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>p</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
