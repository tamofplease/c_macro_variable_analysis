<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_memset.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_memset: parallel memset</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Note that this function uses its own hard-coded chunk size.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MEM_CHUNK</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>GB_memset</name>                  <comment type="line">// parallel memset</comment>
<parameter_list>(
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,                 <comment type="line">// destination</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name></decl></parameter>,                <comment type="line">// value to to set</comment>
    <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,                   <comment type="line">// # of bytes to set</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>                <comment type="line">// max # of threads to use</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>&lt;=</operator> <name>GB_MEM_CHUNK</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// memset using a single thread</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// memset using multiple threads</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>size_t</name></type> <name>nchunks</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>/</operator> <name>GB_MEM_CHUNK</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <name>nthreads</name><operator>)</operator> <operator>&gt;</operator> <name>nchunks</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>nchunks</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>pdest</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nchunks</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>start</name> <init>= <expr><name>k</name> <operator>*</operator> <name>GB_MEM_CHUNK</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>start</name> <operator>&lt;</operator> <name>n</name></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>size_t</name></type> <name>chunk</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name>GB_MEM_CHUNK</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>pdest</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
