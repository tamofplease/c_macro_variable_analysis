<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subref_phase3.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subref_phase3: C=A(I,J)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This function either frees Cp and Ch, or transplants then into C, as C-&gt;p</comment>
<comment type="line">// and C-&gt;h.  Either way, the caller must not free them.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sort.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subref_phase3</name>   <comment type="line">// C=A(I,J)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix, static header</comment>
    <comment type="line">// from phase2:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Cp_handle</name></decl></parameter>,        <comment type="line">// vector pointers for C</comment>
    <parameter><decl><type><name>size_t</name></type> <name>Cp_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec_nonempty</name></decl></parameter>,       <comment type="line">// # of non-empty vectors in C</comment>
    <comment type="line">// from phase1:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,                           <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>,                         <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>post_sort</name></decl></parameter>,               <comment type="line">// true if post-sort needed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Mark</name></decl></parameter>,                <comment type="line">// for I inverse buckets, size A-&gt;vlen</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Inext</name></decl></parameter>,               <comment type="line">// for I inverse buckets, size nI</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nduplicates</name></decl></parameter>,          <comment type="line">// # of duplicates, if I inverted</comment>
    <comment type="line">// from phase0:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ch_handle</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>Ch_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_end</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>need_qsort</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <comment type="line">// from GB_subref:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name></decl></parameter>,           <comment type="line">// if true, C is iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>cscalar</name></decl></parameter>,     <comment type="line">// iso value of C</comment>
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// format of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>symbolic</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cp_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cp</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for subref phase3"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// GB_bitmap_subref is used instead</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>Cnvec</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>symbolic</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_INT64</name></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">// allocate the result C (but do not allocate C-&gt;p or C-&gt;h)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><ternary><condition><expr><name>C_is_hyper</name></expr> ?</condition><then> <expr><name>GxB_HYPERSPARSE</name></expr> </then><else>: <expr><name>GxB_SPARSE</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <comment type="line">// set C-&gt;iso = C_iso       OK</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// sparse or hyper, existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Cp_handle</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Ch_handle</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add Cp as the vector pointers for C, from GB_subref_phase1</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Cp</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Cp_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">// add Ch as the hypersparse list for C, from GB_subref_phase0</comment>
    <if_stmt><if>if <condition>(<expr><name>C_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// transplant Ch into C</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Ch</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>Cnvec</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// now Cp and Ch have been transplanted into C, so they must not be freed.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>Cnvec_nonempty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase3: C = A(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>symbolic</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// symbolic subref</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>C_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// symbolic subref must handle zombies</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">// symbolic copy: Cx is int64_t; the values of A ignored</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_RANGE</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>            \
            <cpp:value>for (int64_t k = 0 ; k &lt; (len) ; k++)   \
            {                                       \
                Cx [(pC) + k] = (pA) + k ;          \
            }</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_ENTRY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [pC] = (pA) ;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CSIZE1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CSIZE2</name></cpp:macro> <cpp:value>(sizeof (int64_t))</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SYMBOLIC</name></cpp:macro></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref_template.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// iso numeric subref</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C is iso; no numeric values to extract; just set the iso value</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_RANGE</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_ENTRY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_SUBREF</name></cpp:macro></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref_template.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// non-iso numeric subref</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// TODO: create versions for asize = 1, 2, 4, 8, 16, and other</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
              <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">// C and A have the same type</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_RANGE</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>                                \
            <cpp:value>memcpy (Cx + (pC)*asize, Ax + (pA)*asize, (len) * asize) ;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_ENTRY</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                                    \
            <cpp:value>memcpy (Cx + (pC)*asize, Ax + (pA)*asize, asize) ;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CSIZE1</name></cpp:macro> <cpp:value>asize</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CSIZE2</name></cpp:macro> <cpp:value>asize</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref_template.c"</cpp:file></cpp:include>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remove empty vectors from C, if hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// caller must not free Cp or Ch</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for subref phase3"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
