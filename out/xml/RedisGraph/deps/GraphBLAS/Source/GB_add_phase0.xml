<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_add_phase0.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add_phase0: find vectors of C to compute for C=A+B or C&lt;M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The eWise add of two matrices, C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B starts with</comment>
<comment type="line">// this phase, which determines which vectors of C need to be computed.</comment>
<comment type="line">// This phase is also used for GB_masker, and for GB_SUBASSIGN_TWO_SLICE.</comment>

<comment type="line">// On input, A and B are the two matrices being added, and M is the optional</comment>
<comment type="line">// mask matrix (not complemented).  The complemented mask is handed in GB_mask,</comment>
<comment type="line">// not here.</comment>

<comment type="line">// On output, an integer (Cnvec) a boolean (Ch_to_Mh) and up to 3 arrays are</comment>
<comment type="line">// returned, either NULL or of size Cnvec.  Let n = A-&gt;vdim be the vector</comment>
<comment type="line">// dimension of A, B, M and C.</comment>

<comment type="line">//      Ch:  the list of vectors to compute.  If not NULL, Ch [k] = j is the</comment>
<comment type="line">//      kth vector in C to compute, which will become the hyperlist C-&gt;h of C.</comment>
<comment type="line">//      Note that some of these vectors may turn out to be empty, because of</comment>
<comment type="line">//      the mask, or because the vector j appeared in A or B, but is empty.</comment>
<comment type="line">//      It is pruned at the end of GB_add_phase2.  If Ch is NULL then it is an</comment>
<comment type="line">//      implicit list of size n, and Ch [k] == k for all k = 0:n-1.  In this</comment>
<comment type="line">//      case, C will be a sparse matrix, not hypersparse.  Thus, the kth</comment>
<comment type="line">//      vector is j = GBH (Ch, k).</comment>

<comment type="line">//      Ch is freed by GB_add if phase1 fails.  phase2 either frees it or</comment>
<comment type="line">//      transplants it into C, if C is hypersparse.</comment>

<comment type="line">//      Ch_is_Mh:  true if the mask M is present, hypersparse, and not</comment>
<comment type="line">//      complemented, false otherwise.  In this case Ch is a deep copy of Mh.</comment>
<comment type="line">//      Only GB_add uses this option; it is not used by GB_masker or</comment>
<comment type="line">//      GB_SUBASSIGN_TWO_SLICE (Ch_is_Mh is always false in this case).  This</comment>
<comment type="line">//      is determined by passing in p_Ch_is_Mh as a NULL or non-NULL pointer.</comment>

<comment type="line">//      C_to_A:  if A is hypersparse, then C_to_A [k] = kA if the kth vector,</comment>
<comment type="line">//      j = GBH (Ch, k) appears in A, as j = Ah [kA].  If j does not appear in</comment>
<comment type="line">//      A, then C_to_A [k] = -1.  If A is not hypersparse, then C_to_A is</comment>
<comment type="line">//      returned as NULL.</comment>

<comment type="line">//      C_to_B:  if B is hypersparse, then C_to_B [k] = kB if the kth vector,</comment>
<comment type="line">//      j = GBH (Ch, k) appears in B, as j = Bh [kB].  If j does not appear in</comment>
<comment type="line">//      B, then C_to_B [k] = -1.  If B is not hypersparse, then C_to_B is</comment>
<comment type="line">//      returned as NULL.</comment>

<comment type="line">//      C_to_M:  if M is hypersparse, and Ch_is_Mh is false, then C_to_M [k] =</comment>
<comment type="line">//      kM if the kth vector, j = GBH (Ch, k) appears in M, as j = Mh [kM].  If</comment>
<comment type="line">//      j does not appear in M, then C_to_M [k] = -1.  If M is not hypersparse,</comment>
<comment type="line">//      then C_to_M is returned as NULL.</comment>

<comment type="line">// M, A, B: any sparsity structure (hypersparse, sparse, bitmap, or full)</comment>
<comment type="line">// C: not present here, but its sparsity structure is finalized, via the</comment>
<comment type="line">// input/output parameter C_sparsity.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>           \
<cpp:value>{                                   \
    GB_WERK_POP (Work, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_FREE (&amp;Ch, Ch_size) ;                \
    GB_FREE_WORK (&amp;C_to_M, C_to_M_size) ;   \
    GB_FREE_WORK (&amp;C_to_A, C_to_A_size) ;   \
    GB_FREE_WORK (&amp;C_to_B, C_to_B_size) ;   \
    GB_FREE_WORKSPACE ;                     \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_allocate_result</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>GB_allocate_result</name>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Ch_handle</name></decl></parameter>,        <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Ch_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_M_handle</name></decl></parameter>,    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_M_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_A_handle</name></decl></parameter>,    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_A_size_handle</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_B_handle</name></decl></parameter>,    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_B_size_handle</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>Ch_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_handle</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>C_to_M_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_A_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>C_to_A_handle</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>C_to_A_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>C_to_A_handle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_B_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>*</operator><name>C_to_B_handle</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>C_to_B_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>C_to_B_handle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>ok</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add_phase0:  find the vectors of C for C&lt;M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_add_phase0</name>          <comment type="line">// find vectors in C for C=A+B or C&lt;M&gt;=A+B</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_Cnvec</name></decl></parameter>,           <comment type="line">// # of vectors to compute in C</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Ch_handle</name></decl></parameter>,        <comment type="line">// Ch: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Ch_size_handle</name></decl></parameter>,                 <comment type="line">// size of Ch in bytes</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_M_handle</name></decl></parameter>,    <comment type="line">// C_to_M: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_M_size_handle</name></decl></parameter>,             <comment type="line">// size of C_to_M in bytes</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_A_handle</name></decl></parameter>,    <comment type="line">// C_to_A: size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_A_size_handle</name></decl></parameter>,             <comment type="line">// size of C_to_A in bytes</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>C_to_B_handle</name></decl></parameter>,    <comment type="line">// C_to_B: of size Cnvec, or NULL</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>C_to_B_size_handle</name></decl></parameter>,             <comment type="line">// size of C_to_A in bytes</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_Ch_is_Mh</name></decl></parameter>,           <comment type="line">// if true, then Ch == Mh</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>C_sparsity</name></decl></parameter>,            <comment type="line">// sparsity structure of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// optional mask, may be NULL; not complemented</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// first input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,         <comment type="line">// second input matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// M, A, and B can be jumbled for this phase, but not phase1 or phase2</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Cnvec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_A_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_B_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for add phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for add phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for add phase0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// pattern not accessed</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p_Ch_is_Mh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ch_is_Mh</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_BITMAP</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_FULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do in phase0 for C bitmap or full</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name><operator>)</operator> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr> ;</expr_stmt>  <comment type="line">// not needed; to be consistent with GB_emult</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_M_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_A_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>C_to_B_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Work</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>      <comment type="line">// nthreads depends on Cnvec, computed below</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get content of M, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Cnvec</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>Anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><operator>(</operator><name>Ah</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><operator>(</operator><name>Bh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Mnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Mnvec</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mh</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// For GB_add, if M is present, hypersparse, and not complemented, then C</comment>
    <comment type="line">// will be hypersparse, and it will have set of vectors as M (Ch == Mh).</comment>
    <comment type="line">// For GB_masker, Ch is never equal to Mh.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>Ch_is_Mh</name> <init>= <expr><operator>(</operator><name>p_Ch_is_Mh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>M_is_hyper</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the set union of the non-empty vectors of A and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Ch_is_Mh</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C and M are hypersparse, with the same vectors as the hypersparse M</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>Mnvec</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_allocate_result</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>,    <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>,   <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_A</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A_size</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>B_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_B</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// copy Mh into Ch.  Ch is Mh so C_to_M is not needed.</comment>
        <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>Mnvec</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// construct the mapping from C to A and B, if they are hypersparse</comment>
        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name> <operator>||</operator> <name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// create the A-&gt;Y and B-&gt;Y hyper_hashes</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>B_Yx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>B_hash_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>B</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C_to_A [k] = kA if Ah [kA] == j and A(:,j) is non-empty</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>,
                        <argument><expr><name>A_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pA</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kA</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C_to_B [k] = kB if Bh [kB] == j and B(:,j) is non-empty</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>B_Yp</name></expr></argument>, <argument><expr><name>B_Yi</name></expr></argument>, <argument><expr><name>B_Yx</name></expr></argument>,
                        <argument><expr><name>B_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pB</name> <operator>&lt;</operator> <name>pB_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kB</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A and B are hypersparse: C will be hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Ch is the set union of Ah and Bh.  This is handled with a parallel</comment>
        <comment type="line">// merge, since Ah and Bh are both sorted lists.</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// create the tasks to construct Ch</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>Anvec</name> <operator>+</operator> <name>Bnvec</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>work</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// allocate workspace</comment>
        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Work</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>ntasks</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kA_start</name> <init>= <expr><name>Work</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kB_start</name> <init>= <expr><name>Work</name> <operator>+</operator> <operator>(</operator><name>ntasks</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kC_start</name> <init>= <expr><name>Work</name> <operator>+</operator> <operator>(</operator><name>ntasks</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><name><name>kA_start</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Anvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>kB_start</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Bnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>kA_start</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Anvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>Anvec</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>kB_start</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>Bnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>Bnvec</name></expr></else></ternary></expr> ;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// create tasks: A and B are both hyper</comment>
            <decl_stmt><decl><type><name>double</name></type> <name>target_work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ntasks</name><operator>-</operator><name>taskid</name><operator>)</operator> <operator>*</operator> <name>work</name><operator>)</operator> <operator>/</operator> <name>ntasks</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_slice_vector</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>kA_start</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>kB_start</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>)</operator></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,                 <comment type="line">// Mi not present</comment>
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Anvec</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>,               <comment type="line">// Ah, explicit list</comment>
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Bnvec</name></expr></argument>, <argument><expr><name>Bh</name></expr></argument>,               <comment type="line">// Bh, explicit list</comment>
                <argument><expr><name>n</name></expr></argument>,                          <comment type="line">// Ah and Bh have dimension n</comment>
                <argument><expr><name>target_work</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// count the entries in Ch for each task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name> <omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// merge Ah and Bh into Ch</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name><name>kA_start</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name><name>kB_start</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA_end</name> <init>= <expr><name><name>kA_start</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB_end</name> <init>= <expr><name><name>kB_start</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>( <init>;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>jA</name> <operator>&lt;</operator> <name>jB</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// jA appears in A but not B</comment>
                    <expr_stmt><expr><name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>jB</name> <operator>&lt;</operator> <name>jA</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// jB appears in B but not A</comment>
                    <expr_stmt><expr><name>kB</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// j = jA = jB appears in both A and B</comment>
                    <expr_stmt><expr><name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>kB</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>kC_start</name> <index>[<expr><name>taskid</name></expr>]</index></name> <operator>=</operator> <name>kC</name> <operator>+</operator> <operator>(</operator><name>kA_end</name> <operator>-</operator> <name>kA</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>kB_end</name> <operator>-</operator> <name>kB</name><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// cumulative sum of entries in Ch for each task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>kC_start</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name><name>kC_start</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate the result: Ch and the mappings C_to_[MAB]</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C will be hypersparse, so Ch is allocated.  The mask M is ignored</comment>
        <comment type="line">// for computing Ch.  Ch is the set union of Ah and Bh.</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_allocate_result</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Ch</name></expr></argument>,    <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>M_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_M</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute the result: Ch and the mappings C_to_[AB]</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name> <omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// merge Ah and Bh into Ch</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name><name>kA_start</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name><name>kB_start</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><name><name>kC_start</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA_end</name> <init>= <expr><name><name>kA_start</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB_end</name> <init>= <expr><name><name>kB_start</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// merge Ah and Bh into Ch</comment>
            <for>for <control>( <init>;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>jA</name> <operator>&lt;</operator> <name>jB</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// append jA to Ch</comment>
                    <expr_stmt><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>       <comment type="line">// jA does not appear in B</comment>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>jB</name> <operator>&lt;</operator> <name>jA</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// append jB to Ch</comment>
                    <expr_stmt><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jB</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>       <comment type="line">// jB does not appear in A</comment>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kB</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// j appears in both A and B; append it to Ch</comment>
                    <expr_stmt><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kB</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// B is exhausted but A is not</comment>
                <for>for <control>( <init>;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr><operator>,</operator> <expr><name>kC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// append jA to Ch</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kA</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// A is exhausted but B is not</comment>
                <for>for <control>( <init>;</init> <condition><expr><name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>kB</name><operator>++</operator></expr><operator>,</operator> <expr><name>kC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// append jB to Ch</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jB</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>kB</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kC</name> <operator>==</operator> <name><name>kC_start</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// check result via a sequential merge</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
        <comment type="line">// merge Ah and Bh into Ch</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>Anvec</name> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name>Bnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>jA</name> <operator>&lt;</operator> <name>jB</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// append jA to Ch</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>jA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// jA does not appear in B</comment>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>jB</name> <operator>&lt;</operator> <name>jA</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// append jB to Ch</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>jB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// jB does not appear in A</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>kB</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// j appears in both A and B; append it to Ch</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>jA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>kA</name><operator>++</operator></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>kB</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>kA</name> <operator>&lt;</operator> <name>Anvec</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// B is exhausted but A is not</comment>
            <for>for <control>( <init>;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>Anvec</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr><operator>,</operator> <expr><name>kC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// append jA to Ch</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>jA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>kB</name> <operator>&lt;</operator> <name>Bnvec</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is exhausted but B is not</comment>
            <for>for <control>( <init>;</init> <condition><expr><name>kB</name> <operator>&lt;</operator> <name>Bnvec</name></expr> ;</condition> <incr><expr><name>kB</name><operator>++</operator></expr><operator>,</operator> <expr><name>kC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// append jB to Ch</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ch</name>     <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>jB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_A</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C_to_B</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>==</operator> <name>kB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kC</name> <operator>==</operator> <name>Cnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>B_is_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is hypersparse, B is not hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C will be sparse.  Construct the C_to_A mapping.</comment>

        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_allocate_result</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>M_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_M</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>C_to_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_A_size</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// scatter Ah into C_to_A</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>kA</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>Anvec</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C_to_A</name> <index>[<expr><name>jA</name></expr>]</index></name> <operator>=</operator> <name>kA</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>A_is_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is not hypersparse, B is hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C will be sparse.  Construct the C_to_B mapping.</comment>

        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_allocate_result</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>M_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_M</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>C_to_B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_B_size</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// scatter Bh into C_to_B</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>kB</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kB</name> <operator>&lt;</operator> <name>Bnvec</name></expr> ;</condition> <incr><expr><name>kB</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>C_to_B</name> <index>[<expr><name>jB</name></expr>]</index></name> <operator>=</operator> <name>kB</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A and B are both non-hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C will be sparse</comment>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_allocate_result</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>M_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>&amp;</operator><name>C_to_M</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_to_M_size</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C_to_M if needed, if M is hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_to_M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C is hypersparse</comment>

            <comment type="line">// create the M-&gt;Y hyper_hash</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yx</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>M_hash_bits</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <comment type="line">// C_to_M [k] = kM if Mh [kM] == j and M(:,j) is non-empty</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name> <init>= <expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>M_Yp</name></expr></argument>, <argument><expr><name>M_Yi</name></expr></argument>, <argument><expr><name>M_Yx</name></expr></argument>,
                    <argument><expr><name>M_hash_bits</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>C_to_M</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pM</name> <operator>&lt;</operator> <name>pM_end</name><operator>)</operator></expr> ?</condition><then> <expr><name>kM</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C is sparse</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>C_to_M</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <comment type="line">// scatter Mh into C_to_M</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>kM</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kM</name> <operator>&lt;</operator> <name>Mnvec</name></expr> ;</condition> <incr><expr><name>kM</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jM</name> <init>= <expr><name><name>Mh</name> <index>[<expr><name>kM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>C_to_M</name> <index>[<expr><name>jM</name></expr>]</index></name> <operator>=</operator> <name>kM</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name><operator>)</operator> <operator>=</operator> <name>Cnvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>Ch</name></expr> ;</expr_stmt>             <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_size_handle</name><operator>)</operator> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_to_M_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_M</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_M_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_M_size</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_A</name></expr> ;</expr_stmt>     <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_A_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_A_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_B</name></expr> ;</expr_stmt>     <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_to_B_size_handle</name><operator>)</operator> <operator>=</operator> <name>C_to_B_size</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p_Ch_is_Mh</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// return Ch_is_Mh to GB_add.  For GB_masker, Ch is never Mh.</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ch_is_Mh</name><operator>)</operator> <operator>=</operator> <name>Ch_is_Mh</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// The code below describes what the output contains:</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <comment type="line">// the mappings are only constructed when C is sparse or hypersparse</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// A and B are always present</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>jlast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// C(:,j) is in the list, as the kth vector</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C will be constructed as sparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C will be constructed as hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_sparsity</name><operator>)</operator> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// vectors j in Ch are sorted, and in the range 0:n-1</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;</operator> <name>jlast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>jlast</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>

        <comment type="line">// see if A (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>C_to_A</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name><name>C_to_A</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kA</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kA</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kA</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// A is not hypersparse</comment>
            <comment type="line">// C_to_A exists only if A is hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>A_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// see if B (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>C_to_B</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// B is hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name><name>C_to_B</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kB</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kB</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kB</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// B is not hypersparse</comment>
            <comment type="line">// C_to_B exists only if B is hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// see if M (:,j) exists</comment>
        <if_stmt><if>if <condition>(<expr><name>Ch_is_Mh</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Ch is the same as Mh</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_to_M</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_to_M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// M is present and hypersparse</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name> <init>= <expr><name><name>C_to_M</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kM</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kM</name> <operator>&lt;</operator> <name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>kM</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jM</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>jM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// M is not present, or present and sparse, bitmap or full</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
