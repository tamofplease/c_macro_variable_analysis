<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_08n.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_08n: C(I,J)&lt;M&gt; += A ; no S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 08n: C(I,J)&lt;M&gt; += A ; no S</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       present</comment>
<comment type="line">// A:           matrix</comment>
<comment type="line">// S:           none</comment>

<comment type="line">// C not bitmap; C can be full since no zombies are inserted in that case.</comment>
<comment type="line">// If C is bitmap, then GB_bitmap_assign_M_accum is used instead.</comment>
<comment type="line">// M, A: not bitmap; Method 08s is used instead if M or A are bitmap.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_PHASE1_ACTION</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// action to take for phase 1 when A(i,j) exists and M(i,j)=1</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE1_ACTION</name></cpp:macro>                                                    \
<cpp:value>{                                                                           \
    if (cjdense)                                                            \
    {                                                                       \
        <comment type="block">/* direct lookup of C(iC,jC) */</comment>                                     \
        GB_iC_DENSE_LOOKUP ;                                                \
        <comment type="block">/* ----[C A 1] or [X A 1]------------------------------- */</comment>         \
        <comment type="block">/* [C A 1]: action: ( =C+A ): apply accum                */</comment>         \
        <comment type="block">/* [X A 1]: action: ( undelete ): zombie lives           */</comment>         \
        GB_withaccum_C_A_1_matrix ;                                         \
    }                                                                       \
    else                                                                    \
    {                                                                       \
        <comment type="block">/* binary search for C(iC,jC) in C(:,jC) */</comment>                         \
        GB_iC_BINARY_SEARCH ;                                               \
        if (cij_found)                                                      \
        {                                                                   \
            <comment type="block">/* ----[C A 1] or [X A 1]--------------------------- */</comment>         \
            <comment type="block">/* [C A 1]: action: ( =C+A ): apply accum            */</comment>         \
            <comment type="block">/* [X A 1]: action: ( undelete ): zombie lives       */</comment>         \
            GB_withaccum_C_A_1_matrix ;                                     \
        }                                                                   \
        else                                                                \
        {                                                                   \
            <comment type="block">/* ----[. A 1]-------------------------------------- */</comment>         \
            <comment type="block">/* [. A 1]: action: ( insert )                       */</comment>         \
            task_pending++ ;                                                \
        }                                                                   \
    }                                                                       \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_PHASE2_ACTION</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// action to take for phase 2 when A(i,j) exists and M(i,j)=1</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE2_ACTION</name></cpp:macro>                                                    \
<cpp:value>{                                                                           \
    ASSERT (!cjdense) ;                                                     \
    {                                                                       \
        <comment type="block">/* binary search for C(iC,jC) in C(:,jC) */</comment>                         \
        GB_iC_BINARY_SEARCH ;                                               \
        if (!cij_found)                                                     \
        {                                                                   \
            <comment type="block">/* ----[. A 1]-------------------------------------- */</comment>         \
            <comment type="block">/* [. A 1]: action: ( insert )                       */</comment>         \
            GB_PENDING_INSERT_aij ;                                         \
        }                                                                   \
    }                                                                       \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_08n: C(I,J)&lt;M&gt; += A ; no S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_08n</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 08s is used if M is bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 08s is used if A is bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==A</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_EMPTY_TASKLIST</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_GET_C</name></expr> ;</expr_stmt>      <comment type="line">// C must not be bitmap</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>zorig</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_C_HYPER_HASH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_MASK</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_A</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_ACCUM</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 08n: C(I,J)&lt;M&gt; += A ; no S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Close to optimal. Omega (sum_j (min (nnz (A(:,j)), nnz (M(:,j)))),</comment>
    <comment type="line">// since only the intersection of A.*M needs to be considered.  If either</comment>
    <comment type="line">// M(:,j) or A(:,j) are very sparse compared to the other, then the shorter</comment>
    <comment type="line">// is traversed with a linear-time scan and a binary search is used for the</comment>
    <comment type="line">// other.  If the number of nonzeros is comparable, a linear-time scan is</comment>
    <comment type="line">// used for both.  Once two entries M(i,j)=1 and A(i,j) are found with the</comment>
    <comment type="line">// same index i, the entry A(i,j) is accumulated or inserted into C.</comment>

    <comment type="line">// The algorithm is very much like the eWise multiplication of A.*M, so the</comment>
    <comment type="line">// parallel scheduling relies on GB_emult_phase0 and GB_ewise_slice.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: slice the eWiseMult of Z=A.*M (Method 08n only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Method 08n only.  If C is sparse, it is sliced for a fine task, so that</comment>
    <comment type="line">// it can do a binary search via GB_iC_BINARY_SEARCH.  But if C(:,jC) is</comment>
    <comment type="line">// dense, C(:,jC) is not sliced, so the fine task must do a direct lookup</comment>
    <comment type="line">// via GB_iC_DENSE_LOOKUP.  Otherwise a race condition will occur.</comment>
    <comment type="line">// The Z matrix is not constructed, except for its hyperlist (Zh_shallow)</comment>
    <comment type="line">// and mapping to A and M.</comment>

    <comment type="line">// No matrix (C, M, or A) can be bitmap.  C, M, A can be sparse/hyper/full,</comment>
    <comment type="line">// in any combination.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Znvec</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Zh_shallow</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subassign_08n_slice</name> <argument_list>(
        <argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>Znvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Zh_shallow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_A_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Z_to_M_size</name></expr></argument>,
        <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_ALLOCATE_NPENDING_WERK</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 1: undelete zombies, update entries, and count pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE1</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Zh_shallow</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_A</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_M</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// quick checks for empty intersection of A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>iA_last</name> <operator>&lt;</operator> <name>iM_first</name> <operator>||</operator> <name>iM_last</name> <operator>&lt;</operator> <name>iA_first</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name> <init>= <expr><name>pM</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>


            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; += A(:,j) ; no S</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>mjnz</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// A(:,j) is much denser than M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// find iA in A(:,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                        <comment type="line">// FUTURE::: exploit dense A(:,j)</comment>
                        <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE1_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>ajnz</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// M(:,j) is much denser than A(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// FUTURE::: exploit dense mask</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

                <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE1_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//----------------------------------------------------------</comment>
                <comment type="line">// A(:,j) and M(:,j) have about the same # of entries</comment>
                <comment type="line">//----------------------------------------------------------</comment>

                <comment type="line">// linear-time scan of A(:,j) and M(:,j)</comment>

                <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>iA</name> <operator>&lt;</operator> <name>iM</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// A(i,j) exists but not M(i,j)</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iM</name> <operator>&lt;</operator> <name>iA</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// M(i,j) exists but not A(i,j)</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// both A(i,j) and M(i,j) exist</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE1_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 2: insert pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_PENDING_CUMSUM</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>zorig</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE2</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Zh_shallow</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_A</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_GET_EVEC</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>pB_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Z_to_M</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// quick checks for empty intersection of A(:,j) and M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_first</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_last</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>iA_last</name> <operator>&lt;</operator> <name>iM_first</name> <operator>||</operator> <name>iM_last</name> <operator>&lt;</operator> <name>iA_first</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name> <init>= <expr><name>pM</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cjdense</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; += A(:,j) ; no S</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>mjnz</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// A(:,j) is much denser than M(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// find iA in A(:,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                        <comment type="line">// FUTURE::: exploit dense A(:,j)</comment>
                        <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE2_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>ajnz</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// M(:,j) is much denser than A(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// FUTURE::: exploit dense mask</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>mjdense</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

                <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_MIJ_BINARY_SEARCH_OR_DENSE_LOOKUP</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE2_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//----------------------------------------------------------</comment>
                <comment type="line">// A(:,j) and M(:,j) have about the same # of entries</comment>
                <comment type="line">//----------------------------------------------------------</comment>

                <comment type="line">// linear-time scan of A(:,j) and M(:,j)</comment>

                <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>iA</name> <operator>&lt;</operator> <name>iM</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// A(i,j) exists but not M(i,j)</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iM</name> <operator>&lt;</operator> <name>iA</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// M(i,j) exists but not A(i,j)</comment>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// both A(i,j) and M(i,j) exist</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_PHASE2_ACTION</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_NEXT</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
