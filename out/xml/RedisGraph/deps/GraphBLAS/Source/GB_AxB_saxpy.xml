<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy: compute C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<comment type="line">// TODO: allow bitmap multiply to work in-place as well</comment>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_saxpy</name>               <comment type="line">// C = A*B using Gustavson/Hash/Bitmap</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// output, static header</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C_in</name></decl></parameter>,                <comment type="line">// original input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// optional mask matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C=A*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// if true, do z=fmult(b,a) vs fmult(a,b)</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>mask_applied</name></decl></parameter>,             <comment type="line">// if true, then mask was applied</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>done_in_place</name></decl></parameter>,            <comment type="line">// if true, C was computed in-place </comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Value</name></type> <name>AxB_method</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>do_sort</name></decl></parameter>,              <comment type="line">// if nonzero, try to sort in saxpy3</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
<comment type="line">// double tt1 = omp_get_wtime ( ) ;</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for saxpy A*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for saxpy A*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for saxpy A*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring for saxpy A*B"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>C_sparsity</name></decl>, <decl><type ref="prev"/><name>saxpy_method</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_AxB_saxpy_sparsity</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C_sparsity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saxpy_method</name></expr></argument>,
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if C is iso</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><call><name>GB_iso_AxB</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// revise the method if A and B are both iso and full</comment>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>B</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>saxpy_method</name> <operator>=</operator> <name>GB_SAXPY_METHOD_ISO_FULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if saxpy4 or saxpy5 can be used: C += A*B where C is full</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_iso</name>                              <comment type="line">// C must be non-iso on output</comment>
        <operator>&amp;&amp;</operator> <name>C_in</name> <operator>!=</operator> <name>NULL</name>                     <comment type="line">// GB_AxB_meta says it is OK</comment>
        <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>)</argument_list></call>             <comment type="line">// C must be "as if" full</comment>
        <operator>&amp;&amp;</operator> <name>M</name> <operator>==</operator> <name>NULL</name>                        <comment type="line">// no mask present</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>accum</name> <operator>!=</operator> <name>NULL</name><operator>)</operator>                  <comment type="line">// accum is present</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>accum</name> <operator>==</operator> <name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name></name><operator>)</operator>     <comment type="line">// accum is same as monoid</comment>
        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C_in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>accum</name><operator>-&gt;</operator><name>ztype</name></name><operator>)</operator></expr>)</condition>    <comment type="line">// no typecast from accum output</comment>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator>
        <operator>&amp;&amp;</operator>  <operator>(</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// GB_AxB_saxpy4 computes C += A*B where C is as-if-full, no mask</comment>
            <comment type="line">// is present, accum is present and matches the monoid, no</comment>
            <comment type="line">// typecasting, A is sparse or hypersparse, and B is bitmap or</comment>
            <comment type="line">// as-if-full.  Only built-in semirings are supported, but not all:</comment>
            <comment type="line">// (1) the ANY monoid is not supported since it would be unusual to</comment>
            <comment type="line">// use ANY as the accum, and (2) only monoids that can be done</comment>
            <comment type="line">// atomically without a critical section are supported.  The method</comment>
            <comment type="line">// is not used if A*B is iso; C may be iso on input but it is</comment>
            <comment type="line">// non-iso on output.</comment>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
            <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
                <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy4</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>done_in_place</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_NO_VALUE</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// return if saxpy4 has handled this case, otherwise fall</comment>
                <comment type="line">// through to saxpy3, dot2, or bitmap_saxpy below.</comment>
                <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>(</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator>
             <operator>&amp;&amp;</operator>  <operator>(</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// GB_AxB_saxpy5 computes C+=A*B where C is as-if-full, just like</comment>
            <comment type="line">// GB_AxB_saxpy4, except that the sparsity format of A and B are</comment>
            <comment type="line">// reversed.  A is bitmap or full, and B is sparse or hypersparse.</comment>
            <comment type="line">// Only built-in semirings are supported, except for the ANY</comment>
            <comment type="line">// monoid.  Unlike GB_AxB_saxpy4, built-in monoids without their</comment>
            <comment type="line">// own atomics (TIMES for complex) are supported.</comment>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
            <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
                <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy5</name> <argument_list>(<argument><expr><name>C_in</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>done_in_place</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_NO_VALUE</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// return if saxpy5 has handled this case, otherwise fall</comment>
                <comment type="line">// through to saxpy3, dot2, or bitmap_saxpy below.</comment>
                <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// burble</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%s = %s*%s, anz: %g bnz: %g) "</literal></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char</name> <argument_list>(<argument><expr><name>C_sparsity</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%s%s%s%s%s = %s*%s) "</literal></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char</name> <argument_list>(<argument><expr><name>C_sparsity</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"{"</literal></expr> </then><else>: <expr><literal type="string">"&lt;"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name>Mask_comp</name></expr> ?</condition><then> <expr><literal type="string">"!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"}"</literal></expr> </then><else>: <expr><literal type="string">"&gt;"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the method to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_ISO_FULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso and full; do not apply the mask</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso full saxpy) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// set C-&gt;iso = true    OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// existing header</comment>
            <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GxB_FULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><name>GB_HYPER_SWITCH_DEFAULT</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>saxpy_method</name> <operator>==</operator> <name>GB_SAXPY_METHOD_3</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// saxpy3: general-purpose Gustavson/Hash method, C is sparse/hyper</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C is sparse or hypersparse</comment>

        <comment type="line">// This method allocates its own workspace, which is very small if the</comment>
        <comment type="line">// Hash method is used.  The workspace for Gustavson's method is</comment>
        <comment type="line">// larger, but saxpy3 selects that method only if the total work is</comment>
        <comment type="line">// high enough so that the time to initialize the space.  C is sparse</comment>
        <comment type="line">// or hypersparse.</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
        <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
            <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name> <operator>||</operator> <name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy3</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>,
            <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>mask_applied</name></expr></argument>, <argument><expr><name>AxB_method</name></expr></argument>,
            <argument><expr><name>do_sort</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// The mask is present but has been discarded since it results in</comment>
            <comment type="line">// too much work.  The analysis must be redone, which is done by</comment>
            <comment type="line">// calling this function once again, recursively, without the mask.</comment>
            <comment type="line">// GB_AxB_saxpy_sparsity will be called again, and it might choose</comment>
            <comment type="line">// the bitmap method instead.  If saxpy3 is still chosen, this</comment>
            <comment type="line">// results in a different analysis in GB_AxB_saxpy3, with no mask</comment>
            <comment type="line">// present.  Otherwise, GB_bitmap_AxB_saxpy, below, is called.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_saxpy</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
                <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>mask_applied</name></expr></argument>, <argument><expr><name>done_in_place</name></expr></argument>, <argument><expr><name>AxB_method</name></expr></argument>,
                <argument><expr><name>do_sort</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// bitmap method: C is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C&lt;#M&gt; = A*B via dot products, where A is bitmap or full and B is</comment>
            <comment type="line">// sparse or hypersparse, using the dot2 method with A not</comment>
            <comment type="line">// explicitly transposed.</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_dot2</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
                <argument><expr><name>true</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
            <expr_stmt><expr><call><name>GB_debugify_mxm</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
                <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">// C&lt;#M&gt; = A*B via bitmap saxpy method</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bitmap_AxB_saxpy</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
                <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// the mask is always applied if present</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_applied</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

<comment type="line">// tt1 = omp_get_wtime ( ) - tt1 ; printf ("saxpy time: %g\n", tt1) ;</comment>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
