<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Global_Option_set.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Global_Option_set: set a global default option for all future matrices</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Global_Option_set</name>      <comment type="line">// set a global default option</comment>
<parameter_list>(
    <parameter><decl><type><name>GxB_Option_Field</name></type> <name>field</name></decl></parameter>,         <comment type="line">// option to change</comment>
    <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                             <comment type="line">// value to change it to</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Global_Option_set (field, value)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set the global option</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// matrix format</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_HYPER_SWITCH</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>hyper_switch</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_hyper_switch_set</name> <argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>hyper_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP_SWITCH</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>bitmap_switch</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>bitmap_switch</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// set all switches to their default</comment>
                    <expr_stmt><expr><call><name>GB_Global_bitmap_switch_default</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GxB_NBITMAP_SWITCH</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>float</name></type> <name>b</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name><name>bitmap_switch</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_Global_bitmap_switch_set</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_FORMAT</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>format</name> <operator>==</operator> <name>GxB_BY_ROW</name> <operator>||</operator> <name>format</name> <operator>==</operator> <name>GxB_BY_COL</name><operator>)</operator></expr>)</condition>
                <block>{<block_content> 
                    <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>GB_Global_is_csc_set</name> <argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>GxB_BY_ROW</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
            </block_content>}</block>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// OpenMP control</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_GLOBAL_NTHREADS</name></expr> :</case>      <comment type="line">// same as GxB_NTHREADS</comment>

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>nthreads_max_new</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// if &lt; 1, then treat it as if nthreads_max = 1</comment>
                <expr_stmt><expr><name>nthreads_max_new</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nthreads_max_new</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_nthreads_max_set</name> <argument_list>(<argument><expr><name>nthreads_max_new</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_GLOBAL_CHUNK</name></expr> :</case>         <comment type="line">// same as GxB_CHUNK</comment>

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>chunk</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_chunk_set</name> <argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// memory pool control</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_MEMORY_POOL</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>free_pool_limit</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>free_pool_limit</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// set all limits to their default</comment>
                    <expr_stmt><expr><call><name>GB_Global_free_pool_init</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <expr_stmt><expr><call><name>GB_Global_free_pool_limit_set</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>free_pool_limit</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// diagnostics</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_BURBLE</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>burble</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_burble_set</name> <argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>burble</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_PRINTF</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>printf_func</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_printf_set</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_printf_function_t</name><operator>)</operator> <name>printf_func</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_FLUSH</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>flush_func</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_flush_set</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_flush_function_t</name><operator>)</operator> <name>flush_func</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_PRINT_1BASED</name></expr> :</case> 

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>onebased</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_print_one_based_set</name> <argument_list>(<argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>onebased</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// CUDA (DRAFT: in progress, do not use)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GxB_GLOBAL_GPU_CONTROL</name></expr> :</case>       <comment type="line">// same as GxB_GPU_CONTROL</comment>

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>gpu_control</name> <init>= <expr><operator>(</operator><name>GrB_Desc_Value</name><operator>)</operator> <call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_gpu_control_set</name> <argument_list>(<argument><expr><name>gpu_control</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <case>case <expr><name>GxB_GLOBAL_GPU_CHUNK</name></expr> :</case>         <comment type="line">// same as GxB_GPU_CHUNK</comment>

            <block>{<block_content>
                <expr_stmt><expr><call><name>va_start</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>double</name></type> <name>gpu_chunk</name> <init>= <expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>va_end</name> <argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_Global_gpu_chunk_set</name> <argument_list>(<argument><expr><name>gpu_chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>

        <default>default :</default> 

            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
