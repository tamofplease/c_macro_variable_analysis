<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_import_CSR.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_import_CSR: import a matrix in CSR format</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_import_CSR</name>      <comment type="line">// import a CSR matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,      <comment type="line">// handle of matrix to create</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,      <comment type="line">// type of matrix to create</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,    <comment type="line">// number of rows of the matrix</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,    <comment type="line">// number of columns of the matrix</comment>

    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ap</name></decl></parameter>,     <comment type="line">// row "pointers"</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Aj</name></decl></parameter>,     <comment type="line">// column indices</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ax</name></decl></parameter>,          <comment type="line">// values</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ap_size</name></decl></parameter>,  <comment type="line">// size of Ap in bytes</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Aj_size</name></decl></parameter>,  <comment type="line">// size of Aj in bytes</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ax_size</name></decl></parameter>,  <comment type="line">// size of Ax in bytes</comment>
    <parameter><decl><type><name>bool</name></type> <name>iso</name></decl></parameter>,           <comment type="line">// if true, A is iso</comment>

    <parameter><decl><type><name>bool</name></type> <name>jumbled</name></decl></parameter>,       <comment type="line">// if true, indices in each row may be unsorted</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs and get the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_import_CSR (&amp;A, type, nrows, ncols, "</literal>
        <literal type="string">"&amp;Ap, &amp;Aj, &amp;Ax, Ap_size, Aj_size, Ax_size, iso, "</literal>
        <literal type="string">"jumbled, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_import_CSR"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx4</name></expr></argument>, <argument><expr><name>xx5</name></expr></argument>, <argument><expr><name>xx6</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR_IMPORT</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>fast_import</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// import the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_import</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
        <argument><expr><name>Ap</name></expr></argument>,   <argument><expr><name>Ap_size</name></expr></argument>,  <comment type="line">// Ap</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,        <comment type="line">// Ah</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,        <comment type="line">// Ab</comment>
        <argument><expr><name>Aj</name></expr></argument>,   <argument><expr><name>Aj_size</name></expr></argument>,  <comment type="line">// Ai</comment>
        <argument><expr><name>Ax</name></expr></argument>,   <argument><expr><name>Ax_size</name></expr></argument>,  <comment type="line">// Ax</comment>
        <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,                      <comment type="line">// jumbled or not</comment>
        <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// sparse by row</comment>
        <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>fast_import</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
