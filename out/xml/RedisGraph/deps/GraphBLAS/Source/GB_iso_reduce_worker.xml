<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_reduce_worker.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_reduce_worker: reduce n entries, all equal to a, to the scalar s</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Some built-in monoids could be done in O(1) time, but this takes at most</comment>
<comment type="line">// O(log (n)) time which is fast enough, even if n = 2^60, and it works for all</comment>
<comment type="line">// monoids including user-defined ones.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_iso_reduce_worker</name>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>s</name></decl></parameter>,            <comment type="line">// output scalar</comment>
    <parameter><decl><type><name>GxB_binary_function</name></type> <name>freduce</name></decl></parameter>,    <comment type="line">// reduction function</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>a</name></decl></parameter>,            <comment type="line">// iso value of A</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>n</name></decl></parameter>,                     <comment type="line">// number of entries in A to reduce</comment>
    <parameter><decl><type><name>size_t</name></type> <name>zsize</name></decl></parameter>                    <comment type="line">// size of s and a</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">// reduce floor (n/2) entries to the scalar s</comment>
        <expr_stmt><expr><call><name>GB_iso_reduce_worker</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>freduce</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// s = freduce (s, s)</comment>
        <expr_stmt><expr><call><name>freduce</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// if n is even, s is now the reduction of 2*floor(n/2) == n entries.</comment>
        <comment type="line">// if n is odd, s is now the reduction of 2*floor(n/2) == n-1 entries.</comment>

        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// n is odd, so add more more entry with s = freduce (s, a)</comment>
            <expr_stmt><expr><call><name>freduce</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
