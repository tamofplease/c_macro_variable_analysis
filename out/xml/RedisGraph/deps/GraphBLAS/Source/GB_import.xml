<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_import.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_import: import a matrix in any format</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This method takes O(1) time and memory, unless secure is true (used</comment>
<comment type="line">// when the input data is not trusted).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GB_Matrix_free (A) ;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_import</name>      <comment type="line">// import/pack a matrix in any format</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>packing</name></decl></parameter>,       <comment type="line">// pack if true, create and import false</comment>

    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A</name></decl></parameter>,      <comment type="line">// handle of matrix to create, or pack</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,      <comment type="line">// type of matrix to create</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>vlen</name></decl></parameter>,     <comment type="line">// vector length</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>vdim</name></decl></parameter>,     <comment type="line">// vector dimension</comment>
    <parameter><decl><type><name>bool</name></type> <name>is_sparse_vector</name></decl></parameter>,      <comment type="line">// true if A is a sparse GrB_Vector</comment>

    <comment type="line">// the 5 arrays:</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ap</name></decl></parameter>,     <comment type="line">// pointers, for sparse and hypersparse formats.</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ap_size</name></decl></parameter>,  <comment type="line">// size of Ap in bytes</comment>

    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ah</name></decl></parameter>,     <comment type="line">// vector indices for hypersparse matrices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ah_size</name></decl></parameter>,  <comment type="line">// size of Ah in bytes</comment>

    <parameter><decl><type><name>int8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ab</name></decl></parameter>,        <comment type="line">// bitmap, for bitmap format only.</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ab_size</name></decl></parameter>,  <comment type="line">// size of Ab in bytes</comment>

    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ai</name></decl></parameter>,     <comment type="line">// indices for hyper and sparse formats</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ai_size</name></decl></parameter>,  <comment type="line">// size of Ai in bytes</comment>

    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ax</name></decl></parameter>,          <comment type="line">// values</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>Ax_size</name></decl></parameter>,  <comment type="line">// size of Ax in bytes</comment>

    <comment type="line">// additional information for specific formats:</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl></parameter>,    <comment type="line">// # of entries for bitmap format, or for a vector</comment>
                        <comment type="line">// in CSC format.</comment>
    <parameter><decl><type><name>bool</name></type> <name>jumbled</name></decl></parameter>,       <comment type="line">// if true, sparse/hypersparse may be jumbled.</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nvec</name></decl></parameter>,     <comment type="line">// size of Ah for hypersparse format.</comment>

    <comment type="line">// information for all formats:</comment>
    <parameter><decl><type><name>int</name></type> <name>sparsity</name></decl></parameter>,       <comment type="line">// hypersparse, sparse, bitmap, or full</comment>
    <parameter><decl><type><name>bool</name></type> <name>is_csc</name></decl></parameter>,        <comment type="line">// if true then matrix is by-column, else by-row</comment>
    <parameter><decl><type><name>bool</name></type> <name>iso</name></decl></parameter>,           <comment type="line">// if true then A is iso and only one entry is provided</comment>
                        <comment type="line">// in Ax, regardless of nvals(A).</comment>
    <comment type="line">// fast vs secure import:</comment>
    <parameter><decl><type><name>bool</name></type> <name>fast_import</name></decl></parameter>,   <comment type="line">// if true: trust the data, if false: check it</comment>

    <parameter><decl><type><name>bool</name></type> <name>add_to_memtable</name></decl></parameter>,   <comment type="line">// if true: add to debug memtable</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>packing</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>vlen</name>  <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>vdim</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>nvals</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>nvec</name> <operator>&gt;</operator> <name>GB_NMAX</name>
        <operator>||</operator> <name>Ap_size</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>Ah_size</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>Ab_size</name> <operator>&gt;</operator> <name>GB_NMAX</name>
        <operator>||</operator> <name>Ai_size</name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name>Ax_size</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Ax_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Ax and (*Ax) are ignored if Ax_size is zero</comment>
        <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>full_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ax_size_for_non_iso</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name> <operator>||</operator> <name>sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>full_size</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>full_size</name> <operator>=</operator> <name>INT64_MAX</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <comment type="line">// check Ap and get nvals</comment>
            <if_stmt><if>if <condition>(<expr><name>nvec</name> <operator>&gt;</operator> <name>vdim</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ap_size</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>vdim</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nvec</name></expr></else></ternary><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>nvals</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Ap</name><operator>)</operator> <index>[<expr><name>nvec</name></expr>]</index></expr> ;</expr_stmt>
            <comment type="line">// check Ah</comment>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ah</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ah_size</name> <operator>&lt;</operator> <name>nvec</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// check Ai</comment>
            <if_stmt><if>if <condition>(<expr><name>Ai_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ai_size</name> <operator>&lt;</operator> <name>nvals</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>Ax_size_for_non_iso</name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <comment type="line">// check Ap and get nvals</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_sparse_vector</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// GxB_Vector_import_CSC passes in Ap as a NULL, and nvals as</comment>
                <comment type="line">// the # of entries in the vector.  All other uses of GB_import</comment>
                <comment type="line">// pass in Ap for the sparse case</comment>
                <if_stmt><if>if <condition>(<expr><name>Ap_size</name> <operator>&lt;</operator> <operator>(</operator><name>vdim</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
                <block>{<block_content> 
                    <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>nvals</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Ap</name><operator>)</operator> <index>[<expr><name>vdim</name></expr>]</index></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// check Ai</comment>
            <if_stmt><if>if <condition>(<expr><name>Ai_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ai_size</name> <operator>&lt;</operator> <name>nvals</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>Ax_size_for_non_iso</name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <comment type="line">// check Ab</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ab_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><operator>*</operator><name>Ab</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>&gt;</operator> <name>full_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Ab_size</name> <operator>&lt;</operator> <name>full_size</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>Ax_size_for_non_iso</name> <operator>=</operator> <name>full_size</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><name>Ax_size_for_non_iso</name> <operator>=</operator> <name>full_size</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <comment type="line">// check the size of Ax</comment>
    <if_stmt><if>if <condition>(<expr><name>iso</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is iso: Ax must be non-NULL and large enough to hold a single entry</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso import) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ax</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Ax_size</name> <operator>&lt;</operator> <name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// A is non-iso: Ax_size must be zero (and Ax must then be NULL),</comment>
        <comment type="line">// or Ax_size must be at least as large as Ax_size_for_non_iso</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>Ax_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>Ax</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
              <operator>(</operator><name>Ax_size</name> <operator>&gt;=</operator> <name>Ax_size_for_non_iso</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>Ax</name> <operator>!=</operator> <name>NULL</name><operator>)</operator><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate/reuse the header of the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>packing</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// clear the content and reuse the header</comment>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>static_header</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// also create A-&gt;p if this is a sparse GrB_Vector</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_new</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <comment type="line">// any sparsity, new or existing user header</comment>
        <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>, <argument><expr><ternary><condition><expr><name>is_sparse_vector</name></expr> ?</condition><then> <expr><name>GB_Ap_calloc</name></expr> </then><else>: <expr><name>GB_Ap_null</name></expr></else></ternary></expr></argument>,
        <argument><expr><name>is_csc</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// A never has a static header</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>static_header</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// import the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// transplant the user's content into the matrix</comment>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>iso</name></expr> ;</expr_stmt>   <comment type="line">// OK</comment>

    <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>nvec</name></expr> ;</expr_stmt>

            <comment type="line">// import A-&gt;h, then fall through to sparse case</comment>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>Ah</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ah</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ah_size</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>add_to_memtable</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// for debugging only</comment>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"import A-&gt;h to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>h_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// fall through to the sparse case</comment>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>jumbled</name></expr> ;</expr_stmt>   <comment type="line">// import jumbled status</comment>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>  <comment type="line">// not computed; delay until required</comment>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>is_sparse_vector</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// GxB_Vector_import_CSC passes in Ap as NULL</comment>
                <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// import A-&gt;p, unless already created for a sparse CSC vector</comment>
                <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>Ap</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Ap_size</name></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>add_to_memtable</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// for debugging only</comment>
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"import A-&gt;p to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// import A-&gt;i</comment>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>*</operator><name>Ai</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>Ai_size</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>add_to_memtable</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// for debugging only</comment>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"import A-&gt;i to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>

            <comment type="line">// import A-&gt;b</comment>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Ab</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ab</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <name>Ab_size</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>add_to_memtable</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// for debugging only</comment>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"import A-&gt;b to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>b_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>Ax</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// import A-&gt;x</comment>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>Ax</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Ax_size</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>add_to_memtable</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// for debugging only</comment>
            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"import A-&gt;x to memtable: %p size: %lu\n"</literal></expr></argument>,
                <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>A</name><operator>)</operator><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// fast vs secure import</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fast_import</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Deserialization of untrusted data is a common security problem:</comment>
        <comment type="line">// https://cwe.mitre.org/data/definitions/502.html</comment>
        <comment type="line">//</comment>
        <comment type="line">// If fast_import is true, GB_import trusts its input data, so it can</comment>
        <comment type="line">// operate in O(1) time and memory.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The import may be coming from untrusted data.  To this point in this</comment>
        <comment type="line">// function, no kind of mangled data (malicious or inadvertant) can</comment>
        <comment type="line">// cause a failure.  However, the content of the A-&gt;[phbix] arrays has</comment>
        <comment type="line">// not been exhaustively checked.  This check takes time, so a fast</comment>
        <comment type="line">// import that trusts the input as valid can skip this check.  The</comment>
        <comment type="line">// import is fast by default, but if the import comes from possibily</comment>
        <comment type="line">// untrusted sources (a file, say), then the user application should</comment>
        <comment type="line">// use the descriptor setting:</comment>
        <comment type="line">//</comment>
        <comment type="line">//      GxB_set (desc, GxB_IMPORT, GxB_SECURE_IMPORT)</comment>
        <comment type="line">//</comment>
        <comment type="line">// and use the desc as input to GxB_Matrix_import_*.  The check does</comment>
        <comment type="line">// not produce any output to stdout.  It just checks the matrix</comment>
        <comment type="line">// exhaustively (and securly) and returns GrB_INVALID_OBJECT if</comment>
        <comment type="line">// anything is amiss.  Once this check is passed, the data has been</comment>
        <comment type="line">// validated and security is ensured.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Since it has no descriptor, GrB_Matrix_import assumes that it</comment>
        <comment type="line">// cannot trust its input.  The method takes O(nvals(A)) time anyway,</comment>
        <comment type="line">// since it must copy the data from input arrays.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The GxB_Matrix_import_* assumes the data can be trusted, since it</comment>
        <comment type="line">// is designed like the move constructor in C++, taking O(1) time by</comment>
        <comment type="line">// default.  As a result, the descriptor default is fast, not secure.</comment>
        <comment type="line">//</comment>
        <comment type="line">// The time for this check is proportional to the size of the 5 input</comment>
        <comment type="line">// arrays, far higher than the O(1) time for the fast import.  However,</comment>
        <comment type="line">// this check is essential if the input data is not trusted.</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(secure) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_matvec_check</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"secure import"</literal></expr></argument>, <argument><expr><name>GxB_SILENT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// import is successful</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If debug is enabled, this check repeats the GB_matvec_check for the</comment>
    <comment type="line">// secure import.</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A imported"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
