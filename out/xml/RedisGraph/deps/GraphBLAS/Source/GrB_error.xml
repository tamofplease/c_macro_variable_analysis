<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_error.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_error: return an error string describing the last error</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>empty</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl> ;</decl_stmt>

<function><type><name>GrB_Info</name></type> <name>GrB_Type_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_UnaryOp_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_UnaryOp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_BinaryOp_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_IndexUnaryOp_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_IndexUnaryOp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GxB_SelectOp_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_SelectOp</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Monoid_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Semiring_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Scalar_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>logger</name></name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// historical; use GrB_Scalar_error instead.</comment>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GrB_Scalar_error</name> <argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>logger</name></name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>logger</name></name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>GrB_Info</name></type> <name>GrB_Descriptor_error</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name>empty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>logger</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>error</name><operator>)</operator> <operator>=</operator> <name><name>d</name><operator>-&gt;</operator><name>logger</name></name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
