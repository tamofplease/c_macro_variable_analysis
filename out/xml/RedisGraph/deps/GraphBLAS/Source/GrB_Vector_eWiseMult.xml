<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Vector_eWiseMult.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_eWiseMult: vector element-wise multiplication</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// w&lt;M&gt; = accum (w,u.*v)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ewise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EWISE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
    <comment type="block">/* check inputs */</comment>                                                      \
    <cpp:value>GB_RETURN_IF_NULL_OR_FAULTY (w) ;                                       \
    GB_RETURN_IF_NULL_OR_FAULTY (u) ;                                       \
    GB_RETURN_IF_NULL_OR_FAULTY (v) ;                                       \
    GB_RETURN_IF_FAULTY (M_in) ;                                            \
    ASSERT (GB_VECTOR_OK (w)) ;                                             \
    ASSERT (GB_VECTOR_OK (u)) ;                                             \
    ASSERT (GB_VECTOR_OK (v)) ;                                             \
    ASSERT (M_in == NULL || GB_VECTOR_OK (M_in)) ;                          \
    <comment type="block">/* get the descriptor */</comment>                                                \
    GB_GET_DESCRIPTOR (info, desc, C_replace, Mask_comp, Mask_struct,       \
        xx1, xx2, xx3, xx7) ;                                               \
    <comment type="block">/* get the mask */</comment>                                                      \
    GrB_Matrix M = GB_get_mask ((GrB_Matrix) M_in, &amp;Mask_comp, &amp;Mask_struct) ;\
    <comment type="block">/* w&lt;M&gt; = accum (w,t) where t = u.*v, u'.*v, u.*v', or u'.*v' */</comment>        \
    info = GB_ewise (                                                       \
        (GrB_Matrix) w, C_replace,  <comment type="block">/* w and its descriptor        */</comment>       \
        M, Mask_comp, Mask_struct,  <comment type="block">/* mask and descriptor */</comment>               \
        accum,                      <comment type="block">/* accumulate operator         */</comment>       \
        op,                         <comment type="block">/* operator that defines '.*'  */</comment>       \
        (GrB_Matrix) u, false,      <comment type="block">/* u, never transposed         */</comment>       \
        (GrB_Matrix) v, false,      <comment type="block">/* v, never transposed         */</comment>       \
        false,                      <comment type="block">/* eWiseMult                   */</comment>       \
        false, NULL, NULL,          <comment type="block">/* not eWiseUnion              */</comment>       \
        Context) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_eWiseMult_BinaryOp: vector element-wise multiplication</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_eWiseMult_BinaryOp</name>       <comment type="line">// w&lt;M&gt; = accum (w, u.*v)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>mult</name></decl></parameter>,        <comment type="line">// defines '.*' for t=u.*v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>v</name></decl></parameter>,             <comment type="line">// second input: vector v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_eWiseMult_BinaryOp "</literal>
        <literal type="string">"(w, M, accum, mult, u, v, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_eWiseMult"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the eWise kernel (using set intersection)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_EWISE</name> <argument_list>(<argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_eWiseMult_Monoid: vector element-wise multiplication</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_eWiseMult_Monoid</name>         <comment type="line">// w&lt;M&gt; = accum (w, u.*v)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,        <comment type="line">// defines '.*' for t=u.*v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>v</name></decl></parameter>,             <comment type="line">// second input: vector v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_eWiseMult_Monoid "</literal>
        <literal type="string">"(w, M, accum, monoid, u, v, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_eWiseMult"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>monoid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// eWise multiply using the monoid operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_EWISE</name> <argument_list>(<argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_eWiseMult_Semiring: vector element-wise multiplication</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_eWiseMult_Semiring</name>       <comment type="line">// w&lt;M&gt; = accum (w, u.*v)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// defines '.*' for t=u.*v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>v</name></decl></parameter>,             <comment type="line">// second input: vector v</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w and M</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_Vector_eWiseMult_Semiring "</literal>
        <literal type="string">"(w, M, accum, semiring, u, v, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_eWiseMult"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// eWise multiply using the semiring multiply operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_EWISE</name> <argument_list>(<argument><expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
