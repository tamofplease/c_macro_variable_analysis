<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Vector_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Vector_new: create a new vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The new vector is n-by-1, with no entries in it.</comment>
<comment type="line">// A-&gt;p is size 2 and all zero.  Contents A-&gt;x and A-&gt;i are NULL.</comment>
<comment type="line">// If this method fails, *v is set to NULL.  Vectors are not hypersparse,</comment>
<comment type="line">// so format is standard CSC, and A-&gt;h is NULL.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Vector_new</name>     <comment type="line">// create a new vector with no entries</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,          <comment type="line">// handle of vector to create</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,          <comment type="line">// type of vector to create</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>n</name></decl></parameter>             <comment type="line">// dimension is n-by-1</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Vector_new (&amp;v, type, n)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// problem too large</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>n</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name> <operator>*</operator><operator>)</operator> <name>v</name></expr></argument>, <comment type="line">// new user header</comment>
        <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>,
        <argument><expr><name>true</name></expr></argument>,  <comment type="line">// a GrB_Vector is always held by-column</comment>
        <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>, <argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
