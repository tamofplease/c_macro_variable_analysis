<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_semiring_builtin.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_semiring_builtin:  determine if semiring is built-in</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determine if A*B uses a built-in semiring, and if so, determine the</comment>
<comment type="line">// opcodes and type codes of the semiring.</comment>

<comment type="line">// This function is not used by the CUDA jitified kernels, since they can</comment>
<comment type="line">// typecast the entries in the matrices A and B to the types of x and y of the</comment>
<comment type="line">// operator, as needed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_AxB_semiring_builtin</name>        <comment type="line">// true if semiring is builtin</comment>
<parameter_list>(
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_pattern</name></decl></parameter>,        <comment type="line">// true if only the pattern of A is used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_pattern</name></decl></parameter>,        <comment type="line">// true if only the pattern of B is used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// semiring that defines C=A*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// true if z=fmult(y,x), flipping x and y</comment>
    <comment type="line">// outputs:</comment>
    <parameter><decl><type><name>GB_Opcode</name> <modifier>*</modifier></type><name>mult_binop_code</name></decl></parameter>,     <comment type="line">// multiply opcode</comment>
    <parameter><decl><type><name>GB_Opcode</name> <modifier>*</modifier></type><name>add_binop_code</name></decl></parameter>,      <comment type="line">// add opcode</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>xcode</name></decl></parameter>,            <comment type="line">// type code for x input</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>ycode</name></decl></parameter>,            <comment type="line">// type code for y input</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>zcode</name></decl></parameter>             <comment type="line">// type code for z output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// quick return.  All built-in semirings have been handled already</comment>
        <comment type="line">// in GB_AxB_meta, and flipxy is now false.  If flipxy is still true,</comment>
        <comment type="line">// the semiring is not built-in.</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// A and B may be aliased</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>add</name>  <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl> ;</decl_stmt>     <comment type="line">// add operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>    <comment type="line">// multiply operator</comment>

    <comment type="line">// add is a monoid</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name></name> <operator>==</operator> <name><name>add</name><operator>-&gt;</operator><name>ztype</name></name> <operator>&amp;&amp;</operator> <name><name>add</name><operator>-&gt;</operator><name>ytype</name></name> <operator>==</operator> <name><name>add</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// in a semiring, the ztypes of add and mult are always the same:</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name><name>mult</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The conditions above are true for any semiring and any A and B, whether</comment>
    <comment type="line">// or not this function handles the semiring as hard-coded.  Now return for</comment>
    <comment type="line">// cases this function does not handle.</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mult_binop_code</name><operator>)</operator> <operator>=</operator> <name>GB_NOP_code</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>xcode</name><operator>)</operator> <operator>=</operator> <name>GB_ignore_code</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ycode</name><operator>)</operator> <operator>=</operator> <name>GB_ignore_code</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>zcode</name><operator>)</operator> <operator>=</operator> <name>GB_ignore_code</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>=</operator> <name><name>add</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><operator>*</operator><name>add_binop_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>add_binop_code</name> <operator>==</operator> <name>GB_USER_binop_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// semiring has a user-defined add operator for its monoid</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename redundant boolean monoids</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Only the LAND, LOR, LXOR, and EQ monoids remain if z is</comment>
        <comment type="line">// boolean.  MIN, MAX, PLUS, and TIMES are renamed.</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><operator>*</operator><name>add_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the multiply operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>,
        <argument><expr><name>mult</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>mult_binop_code</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename to ANY_PAIR</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>mult_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_PAIR_binop_code</name></expr>)</condition>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_EQ_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_LAND_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_BAND_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_LOR_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_BOR_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_MAX_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_MIN_binop_code</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>==</operator> <name>GB_TIMES_binop_code</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <comment type="line">// rename to ANY_PAIR</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>add_binop_code</name><operator>)</operator> <operator>=</operator> <name>GB_ANY_binop_code</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
