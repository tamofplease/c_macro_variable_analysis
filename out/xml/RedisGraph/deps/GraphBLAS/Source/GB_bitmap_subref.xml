<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_subref.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_subref: C = A(I,J) where A is bitmap or full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C=A(I,J), where A is bitmap or full, symbolic and numeric.</comment>
<comment type="line">// See GB_subref for details.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_IxJ_slice.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>             \
<cpp:value>{                               \
    GB_phybix_free (C) ;        \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_subref</name>       <comment type="line">// C = A(I,J): either symbolic or numeric</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix, static header</comment>
    <comment type="line">// input, not modified</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name></decl></parameter>,           <comment type="line">// if true, C is iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>cscalar</name></decl></parameter>,     <comment type="line">// scalar value of C, if iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// requested format of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,           <comment type="line">// length of I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,           <comment type="line">// length of J, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>symbolic</name></decl></parameter>,        <comment type="line">// if true, construct C as symbolic</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for C=A(I,J) bitmap subref"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the properties of I and J</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C = A(I,J) so I is in range 0:avlen-1 and J is in range 0:avdim-1</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nI</name></decl>, <decl><type ref="prev"/><name>nJ</name></decl>, <decl><type ref="prev"/><name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Ikind</name></decl>, <decl><type ref="prev"/><name>Jkind</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>I_unsorted</name></decl>, <decl><type ref="prev"/><name>I_has_dupl</name></decl>, <decl><type ref="prev"/><name>I_contig</name></decl>, <decl><type ref="prev"/><name>J_unsorted</name></decl>, <decl><type ref="prev"/><name>J_has_dupl</name></decl>, <decl><type ref="prev"/><name>J_contig</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl>, <decl><type ref="prev"/><name>jmin</name></decl>, <decl><type ref="prev"/><name>jmax</name></decl> ;</decl_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ijproperties</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>I_unsorted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_has_dupl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_contig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imax</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// I invalid</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ijproperties</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>J_unsorted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_has_dupl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_contig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmax</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// J invalid</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnzmax</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>cnzmax</name><operator>)</operator></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cnzmax</name> <operator>=</operator> <name>INT64_MAX</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><ternary><condition><expr><name>symbolic</name></expr> ?</condition><then> <expr><name>GrB_INT64</name></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><ternary><condition><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>GxB_BITMAP</name></expr> </then><else>: <expr><name>GxB_FULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// bitmap or full, existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cnzmax</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// In GB_bitmap_assign_IxJ_template, vlen is the vector length of the</comment>
    <comment type="line">// submatrix C(I,J), but here the template is used to access A(I,J), and so</comment>
    <comment type="line">// the vector length is A-&gt;vlen, not C-&gt;vlen.  The pointers pA and pC are</comment>
    <comment type="line">// swapped in the macros below, since C=A(I,J) is being computed, instead</comment>
    <comment type="line">// of C(I,J)=A for the bitmap assignment.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><name>avlen</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A (I,J) where A and C are both bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// symbolic subref is only used by GB_subassign_symbolic, which only</comment>
        <comment type="line">// operates on a matrix that is hypersparse, sparse, or full, but not</comment>
        <comment type="line">// bitmap.  As a result, the symbolic subref C=A(I,J) where both A and</comment>
        <comment type="line">// C are bitmap is not needed.  The code is left here in case it is</comment>
        <comment type="line">// needed in the future.</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>symbolic</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        if (symbolic)
        {
            <comment type="line">// C=A(I,J) symbolic with A and C bitmap</comment>
            ASSERT (GB_DEAD_CODE) ;
            int64_t *restrict Cx = (int64_t *) C-&gt;x ;
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                int8_t ab = Ab [pA] ;                                       \
                Cb [pC] = ab ;                                              \
                Cx [pC] = pA ;                                              \
                task_cnvals += ab ;                                         \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
        }
        else
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C=A(I,J) iso numeric with A and C bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                int8_t ab = Ab [pA] ;                                       \
                Cb [pC] = ab ;                                              \
                task_cnvals += ab ;                                         \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C=A(I,J) non-iso numeric with A and C bitmap; both non-iso</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
                  <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                int8_t ab = Ab [pA] ;                                       \
                Cb [pC] = ab ;                                              \
                if (ab)                                                     \
                {                                                           \
                    <comment type="block">/* Cx [pC] = Ax [pA] */</comment>                                 \
                    memcpy (Cx +((pC)*asize), Ax +((pA)*asize), asize) ;    \
                    task_cnvals++ ;                                         \
                }                                                           \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A (I,J) where A and C are both full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>symbolic</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C=A(I,J) symbolic with A and C full (from GB_subassign_symbolic)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                Cx [pC] = pA ;                                              \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_iso</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C=A(I,J) iso numeric with A and C full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C=A(I,J) non-iso numeric with A and C full, both are non-iso</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
                  <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                <comment type="block">/* Cx [pC] = Ax [pA] */</comment>                                     \
                memcpy (Cx +((pC)*asize), Ax +((pA)*asize), asize) ;        \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for bitmap subref C=A(I,J)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
