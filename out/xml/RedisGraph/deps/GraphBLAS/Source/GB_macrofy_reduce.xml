<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_reduce.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_reduce: construct all macros for a reduction to scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_reduce</name>      <comment type="line">// construct all macros for GrB_reduce to scalar</comment>
<parameter_list>(
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,               <comment type="line">// target file to write, already open</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>rcode</name></decl></parameter>,         <comment type="line">// encoded problem</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>monoid</name></decl></parameter>,      <comment type="line">// monoid to macrofy</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>atype</name></decl></parameter>          <comment type="line">// type of the A matrix to reduce</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the reduction rcode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// monoid</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>red_ecode</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id_ecode</name>    <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>term_ecode</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_term</name>    <init>= <expr><operator>(</operator><name>term_ecode</name> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// type of the monoid</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>zcode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// type of A</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>acode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// format of A</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>asparsity</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>rcode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros for the type name</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// GB_reduce_%016"</literal> <name>PRIX64</name> <literal type="string">".h (%s %s A: %s)\n"</literal></expr></argument>, <argument><expr><name>rcode</name></expr></argument>,
        <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the typedefs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_macrofy_types</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros for the type names</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// monoid type:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_Z_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>monoid</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the monoid macros</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// reduction monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_monoid</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>red_ecode</name></expr></argument>, <argument><expr><name>id_ecode</name></expr></argument>, <argument><expr><name>term_ecode</name></expr></argument>, <argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros for A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// A matrix:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_sparsity</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>asparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_A_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
