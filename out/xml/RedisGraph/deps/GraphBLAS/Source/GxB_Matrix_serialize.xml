<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_serialize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_serialize: copy a matrix into a serialized array of bytes</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// serialize a GrB_Matrix into a blob of bytes</comment>

<comment type="line">// This method is similar to GrB_Matrix_serialize.  In contrast with the GrB*</comment>
<comment type="line">// method, this method allocates the blob itself, and hands over the allocated</comment>
<comment type="line">// space to the user application.  The blob must be freed by the same free</comment>
<comment type="line">// function passed in to GxB_init, or by the ANSI C11 free() if GrB_init was</comment>
<comment type="line">// used.  On input, the blob_size need not be initialized; it is returned as</comment>
<comment type="line">// the size of the blob as allocated.</comment>

<comment type="line">// This method also includes the descriptor as the last parameter, which allows</comment>
<comment type="line">// for the compression method to be selected, and controls the # of threads</comment>
<comment type="line">// used to create the blob.  Example usage:</comment>

<comment type="block">/*
    void *blob = NULL ;
    GrB_Index blob_size = 0 ;
    GrB_Matrix A, B = NULL ;
    // construct a matrix A, then serialized it:
    GxB_Matrix_serialize (&amp;blob, &amp;blob_size, A, NULL) ; // GxB mallocs the blob
    GxB_Matrix_deserialize (&amp;B, atype, blob, blob_size, NULL) ;
    free (blob) ;                                   // user frees the blob
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_serialize</name>       <comment type="line">// serialize a GrB_Matrix to a blob</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>blob_handle</name></decl></parameter>,             <comment type="line">// the blob, allocated on output</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>blob_size_handle</name></decl></parameter>,    <comment type="line">// size of the blob on output</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                   <comment type="line">// matrix to serialize</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor to select compression method</comment>
                                    <comment type="line">// and to control # of threads used</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_serialize (&amp;blob, &amp;blob_size, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_serialize"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>blob_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>blob_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx4</name></expr></argument>, <argument><expr><name>xx5</name></expr></argument>, <argument><expr><name>xx6</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the compression method from the descriptor</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>compression</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// serialize the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>blob_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>blob_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_serialize</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>blob_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>method</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>blob_size_handle</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>blob_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
