<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_binop_builtin.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop_builtin:  determine if a binary operator is built-in</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determine if the binary operator is built-in, for the multiplicative binary</comment>
<comment type="line">// operator for A*B, or the binary operator for ewise operations (A+B, A.*B,</comment>
<comment type="line">// and some uses of accum in GrB_assign)</comment>

<comment type="line">// If so, determine the opcodes and type codes of the semiring.</comment>

<comment type="line">// If the op is NULL, then it is the implicit GrB_SECOND_[A_type] operator.</comment>
<comment type="line">// This is a built-in operator for built-in types.  This feature is only used</comment>
<comment type="line">// by GB_wait.</comment>

<comment type="line">// This function is not used by the CUDA jitified kernels, since they can</comment>
<comment type="line">// typecast the entries in the matrices A and B to the types of x and y of the</comment>
<comment type="line">// operator, as needed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_binop_builtin</name>               <comment type="line">// true if binary operator is builtin</comment>
<parameter_list>(
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>A_type</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_pattern</name></decl></parameter>,        <comment type="line">// true if only the pattern of A is used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>B_type</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_pattern</name></decl></parameter>,        <comment type="line">// true if only the pattern of B is used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// binary operator; may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// true if z=op(y,x), flipping x and y</comment>
    <comment type="line">// outputs, unused by caller if this function returns false</comment>
    <parameter><decl><type><name>GB_Opcode</name> <modifier>*</modifier></type><name>opcode</name></decl></parameter>,              <comment type="line">// opcode for the binary operator</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>xcode</name></decl></parameter>,            <comment type="line">// type code for x input</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>ycode</name></decl></parameter>,            <comment type="line">// type code for y input</comment>
    <parameter><decl><type><name>GB_Type_code</name> <modifier>*</modifier></type><name>zcode</name></decl></parameter>             <comment type="line">// type code for z output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the flipxy (for a semiring only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// For a semiring, GB_AxB_meta has already handled flipxy for built-in</comment>
        <comment type="line">// semirings and operators that can be flipped.  If flipxy is still</comment>
        <comment type="line">// true, the binary operator is not part of a built-in semiring.</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if the operator is builtin, with no typecasting</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>op_xtype</name></decl>, <decl><type ref="prev"/><name>op_ytype</name></decl>, <decl><type ref="prev"/><name>op_ztype</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GB_wait: implicit GB_SECOND_[TYPE] operator</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_type</name> <operator>==</operator> <name>B_type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>opcode</name><operator>)</operator> <operator>=</operator> <name>GB_SECOND_binop_code</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_xtype</name> <operator>=</operator> <name>A_type</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ytype</name> <operator>=</operator> <name>A_type</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ztype</name> <operator>=</operator> <name>A_type</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>opcode</name><operator>)</operator> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_xtype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ytype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_ztype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><operator>*</operator><name>opcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>opcode</name> <operator>==</operator> <name>GB_USER_binop_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// the binary operator is user-defined</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><operator>*</operator><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check if A matches the input to the operator</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>A_type</name> <operator>!=</operator> <name>op_xtype</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>A_type</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <name>GB_UDT_code</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is a user-defined type, or its type does not match the input</comment>
            <comment type="line">// to the operator</comment>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check if B matches the input to the operator</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>B_is_pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>B_type</name> <operator>!=</operator> <name>op_ytype</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>B_type</name><operator>-&gt;</operator><name>code</name></name> <operator>&gt;=</operator> <name>GB_UDT_code</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// B is a user-defined type, or its type does not match the input</comment>
            <comment type="line">// to the operator</comment>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename redundant boolean operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>xcode</name><operator>)</operator> <operator>=</operator> <name><name>op_xtype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ycode</name><operator>)</operator> <operator>=</operator> <name><name>op_ytype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>zcode</name><operator>)</operator> <operator>=</operator> <name><name>op_ztype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>xcode</name><operator>)</operator> <operator>&lt;</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ycode</name><operator>)</operator> <operator>&lt;</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>zcode</name><operator>)</operator> <operator>&lt;</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>xcode</name><operator>)</operator> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// z = op(x,y) where both x and y are boolean.</comment>
        <comment type="line">// DIV becomes FIRST</comment>
        <comment type="line">// RDIV becomes SECOND</comment>
        <comment type="line">// MIN and TIMES become LAND</comment>
        <comment type="line">// MAX and PLUS become LOR</comment>
        <comment type="line">// NE, ISNE, RMINUS, and MINUS become LXOR</comment>
        <comment type="line">// ISEQ becomes EQ</comment>
        <comment type="line">// ISGT becomes GT</comment>
        <comment type="line">// ISLT becomes LT</comment>
        <comment type="line">// ISGE and POW become GE</comment>
        <comment type="line">// ISLE becomes LE</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>opcode</name><operator>)</operator> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><operator>*</operator><name>opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
