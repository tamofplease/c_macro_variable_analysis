<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subref_phase0.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subref_phase0: find vectors of C = A(I,J) and determine I,J properties</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_Ai</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GBI_UNFLIP (Ai, p, avlen)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_find_Ap_start_end</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Find pA and pA_end so that Ai,Ax [pA:pA_end-1] contains the vector</comment>
<comment type="line">// A(imin:imax,kA).  If A(:,kA) is dense, [pA:pA_end-1] is the entire dense</comment>
<comment type="line">// vector (it is not trimmed).  Otherwise, if A(imin:imax,kA) is empty, then</comment>
<comment type="line">// pA and pA_end are set to -1 to denote an empty list.  The resulting pointers</comment>
<comment type="line">// are then returned in Ap_start [kC] and Ap_end [kC].</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>GB_find_Ap_start_end</name>
<parameter_list>(
    <comment type="line">// input, not modified</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>imin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>imax</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kC</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nzombies</name></decl></parameter>,
    <comment type="line">// output: Ap_start [kC] and Ap_end [kC]:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_start</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_end</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A(:,kA)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name>     <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// trim it to A(imin:imax,kA)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <name>avlen</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A (:,kA) is dense; use pA and pA_end as-is</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <empty_stmt>;</empty_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ajnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>imax</name> <operator>||</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>imin</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// intersection of A(:,kA) and imin:imax is empty</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>pA</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pA_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A (:,kA) is sparse, with at least one entry</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// trim the leading part of A(:,kA)</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>imin</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>is_zombie</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>,
                <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// trim the trailing part of A (:,kA)</comment>
        <if_stmt><if>if <condition>(<expr><name>imin</name> <operator>==</operator> <name>imax</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>imin</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// found the the single entry A (i,kA)</comment>
                <expr_stmt><expr><name>pA_end</name> <operator>=</operator> <name>pA</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A (i,kA) has not been found</comment>
                <expr_stmt><expr><name>pA</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pA_end</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>imax</name> <operator>&lt;</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>, <decl><type ref="prev"/><name>is_zombie</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>,
                <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pA_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>found</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>pleft</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>pleft</name></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
        <expr_stmt><expr><name>ajnz</name> <operator>=</operator> <name>pA_end</name> <operator>-</operator> <name>pA</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>Ap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A(imin:imax,kA) is now in Ai [pA:pA_end-1]</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name> <operator>&lt;</operator> <name>pA</name></expr></argument>,  <argument><expr><call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>imin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>pA_end</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>imax</name> <operator>&lt;</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>imin</name> <operator>&lt;=</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>imax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The result [pA:pA_end-1] defines the range of entries that need to be</comment>
    <comment type="line">// accessed for constructing C(:,kC).</comment>

    <expr_stmt><expr><name><name>Ap_start</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>pA</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Ap_end</name>   <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>pA_end</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subref_phase0</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>           \
<cpp:value>{                                   \
    GB_WERK_POP (Count, int64_t) ;  \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    GB_FREE (&amp;Ch, Ch_size) ;                    \
    GB_FREE_WORK (&amp;Ap_start, Ap_start_size) ;   \
    GB_FREE_WORK (&amp;Ap_end, Ap_end_size) ;       \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_subref_phase0</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Ch</name></decl></parameter>,         <comment type="line">// Ch = C-&gt;h hyperlist, or NULL standard</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Ch_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Ap_start</name></decl></parameter>,   <comment type="line">// A(:,kA) starts at Ap_start [kC]</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Ap_start_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Ap_end</name></decl></parameter>,     <comment type="line">// ... and ends at Ap_end [kC] - 1</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Ap_end_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_Cnvec</name></decl></parameter>,       <comment type="line">// # of vectors in C</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_need_qsort</name></decl></parameter>,     <comment type="line">// true if C must be sorted</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_Ikind</name></decl></parameter>,           <comment type="line">// kind of I</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_nI</name></decl></parameter>,          <comment type="line">// length of I</comment>
    <parameter><decl><type><name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,     <comment type="line">// for GB_RANGE, GB_STRIDE</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_nJ</name></decl></parameter>,          <comment type="line">// length of J</comment>
    <comment type="line">// input, not modified</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,     <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,       <comment type="line">// length of I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,     <comment type="line">// index list for C = A(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,       <comment type="line">// length of J, or special</comment>
<comment type="line">//  const bool must_sort,   // true if C must be returned sorted</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for subref phase 0"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// GB_bitmap_subref is used instead</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ch</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ap_start</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ap_end</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Cnvec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nJ</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ikind</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nI</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Icolon</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>J</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name>       <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_start</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_start_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_end</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_end_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ch</name>        <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_start</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_end</name>    <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name>     <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_need_qsort</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ikind</name>     <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nI</name>        <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nJ</name>        <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>   <comment type="line">// Ap (but not A-&gt;p) may be trimmed</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>   <comment type="line">// Ah (but not A-&gt;h) may be trimmed</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>       <comment type="line">// may be trimmed</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the properties of I and J</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C = A(I,J) so I is in range 0:avlen-1 and J is in range 0:avdim-1</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nI</name></decl>, <decl><type ref="prev"/><name>nJ</name></decl>, <decl><type ref="prev"/><name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Ikind</name></decl>, <decl><type ref="prev"/><name>Jkind</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>I_unsorted</name></decl>, <decl><type ref="prev"/><name>I_has_dupl</name></decl>, <decl><type ref="prev"/><name>I_contig</name></decl>, <decl><type ref="prev"/><name>J_unsorted</name></decl>, <decl><type ref="prev"/><name>J_has_dupl</name></decl>, <decl><type ref="prev"/><name>J_contig</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl>, <decl><type ref="prev"/><name>jmin</name></decl>, <decl><type ref="prev"/><name>jmax</name></decl> ;</decl_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ijproperties</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>nI</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>I_unsorted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_has_dupl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_contig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>imax</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// I invalid or out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ijproperties</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>J_unsorted</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_has_dupl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_contig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jmax</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// J invalid or out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>need_qsort</name> <init>= <expr><name>I_unsorted</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if C is empty</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_empty</name> <init>= <expr><operator>(</operator><name>nI</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>nJ</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><operator>(</operator><name>Ah</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// trim the hyperlist of A for (J = jbegin:jend case only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Ah, Ap, and anvec are modified to include just the vectors in range</comment>
    <comment type="line">// jmin:jmax, inclusive.  A itself is not modified, just the Ah and Ap</comment>
    <comment type="line">// pointers, and the scalar anvec.  If J is ":", then jmin is zero and</comment>
    <comment type="line">// jmax is avdim-1, so there is nothing to trim from Ah.  If C is empty,</comment>
    <comment type="line">// then Ah and Ap will not be accessed at all, so this can be skipped.</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_empty</name> <operator>&amp;&amp;</operator> <name>A_is_hyper</name> <operator>&amp;&amp;</operator> <name>Jkind</name> <operator>==</operator> <name>GB_RANGE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// trim the leading end of Ah so that it starts with jmin:...</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>jmin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kright</name> <init>= <expr><name>anvec</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>jmin</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kleft</name></expr></argument>, <argument><expr><name>kright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ah</name> <operator>+=</operator> <name>kleft</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Ap</name> <operator>+=</operator> <name>kleft</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>anvec</name> <operator>-=</operator> <name>kleft</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// trim the trailing end of Ah so that it ends with ..:jmax</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>jmax</name> <operator>&lt;</operator> <name>avdim</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kright</name> <init>= <expr><name>anvec</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>jmax</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kleft</name></expr></argument>, <argument><expr><name>kright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>anvec</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>found</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>kleft</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>kleft</name></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Ah has been trimmed</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>anvec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>jmin</name> <operator>&lt;=</operator> <name><name>Ah</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Ah</name> <index>[<expr><name>anvec</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>jmax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Ah may now be empty, after being trimmed</comment>
    <expr_stmt><expr><name>C_empty</name> <operator>=</operator> <name>C_empty</name> <operator>||</operator> <operator>(</operator><name>anvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build the hyper_hash, if needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>J_is_all_or_range</name> <init>= <expr><operator>(</operator><name>Jkind</name> <operator>==</operator> <name>GB_ALL</name> <operator>||</operator> <name>Jkind</name> <operator>==</operator> <name>GB_RANGE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>J_is_long_stride</name> <init>= <expr><operator>(</operator><name>Jkind</name> <operator>==</operator> <name>GB_STRIDE</name> <operator>&amp;&amp;</operator> <name>anvec</name> <operator>&lt;</operator> <name>nJ</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>use_hyper_hash</name> <init>= <expr><operator>!</operator><name>C_empty</name> <operator>&amp;&amp;</operator> <name>A_is_hyper</name> <operator>&amp;&amp;</operator>
            <operator>!</operator><name>J_is_all_or_range</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>J_is_long_stride</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>nJ</name> <operator>&gt;</operator> <name>anvec</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>use_hyper_hash</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>use_hyper_hash</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>use_hyper_hash</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>use_hyper_hash</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>use_hyper_hash</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTASKS_PER_THREAD</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntasks</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks_max</name> <init>= <expr><name>nthreads_max</name> <operator>*</operator> <name>NTASKS_PER_THREAD</name></expr></init></decl> ;</decl_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_NTHREADS_AND_NTASKS</name><parameter_list>(<parameter><type><name>work</name></type></parameter>)</parameter_list></cpp:macro>                            \
    <cpp:value>{                                                                   \
        nthreads = GB_nthreads (work, chunk, nthreads_max) ;            \
        ntasks = (nthreads == 1) ? 1 : (NTASKS_PER_THREAD * nthreads) ; \
        ntasks = GB_IMIN (ntasks, work) ;                               \
        ntasks = GB_IMAX (ntasks, 1) ;                                  \
    }</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks_max</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Count</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute Cnvec and determine the format of Ch</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Ch is an explicit or implicit array of size Cnvec &lt;= nJ.  jC = Ch [kC]</comment>
    <comment type="line">// if C(:,jC) is the (kC)th vector of C.  If NULL, then C is standard, and</comment>
    <comment type="line">// jC == kC.  jC is in the range 0 to nJ-1.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>jbegin</name> <init>= <expr><name><name>Jcolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>jinc</name>   <init>= <expr><name><name>Jcolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_empty</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is an empty hypersparse matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <empty_stmt>;</empty_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>A_is_hyper</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// both C and A are standard matrices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>nJ</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_GET_NTHREADS_AND_NTASKS</name> <argument_list>(<argument><expr><name>nJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>J_is_all_or_range</name></expr>)</condition> <comment type="line">// (Jkind == GB_ALL || Jkind == GB_RANGE)</comment>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is ":" or jbegin:jend</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// For the case where J is jbegin:jend, Ah has been trimmed (see above).</comment>
        <comment type="line">// Ch is a shifted copy of the trimmed Ah, of length Cnvec = anvec.  </comment>
        <comment type="line">// so kA = kC, and jC = Ch [kC] = jA - jmin.  Ap has also been trimmed.</comment>

        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name>anvec</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cnvec</name> <operator>&lt;=</operator> <name>nJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_GET_NTHREADS_AND_NTASKS</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>J_is_long_stride</name></expr>)</condition> <comment type="line">// (Jkind == GB_STRIDE &amp;&amp; anvec &lt; nJ * 64)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is jbegin:jinc:jend, but J is large</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// The case for Jkind == GB_STRIDE can be done by either this method,</comment>
        <comment type="line">// or the one below.  This takes O(anvec) time, and the one below</comment>
        <comment type="line">// takes O(nj*log2(anvec)), so use this method if anvec &lt; nj * 64.</comment>

        <comment type="line">// Ch is a list of length Cnvec, where Cnvec is the length of</comment>
        <comment type="line">// the intersection of Ah and jbegin:jinc:jend.</comment>

        <comment type="line">// count the length of Ch</comment>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_AND_NTASKS</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// scan all of Ah and check each entry if it appears in J</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA_start</name></decl>, <decl><type ref="prev"/><name>kA_end</name></decl>, <decl><type ref="prev"/><name>my_Cnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kA_start</name></expr></argument>, <argument><expr><name>kA_end</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name>jinc</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>tid</name></expr> </then><else>: <expr><operator>(</operator><name>ntasks</name><operator>-</operator><name>tid</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>GB_ij_is_in_list</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>my_Cnvec</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_Cnvec</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name><name>Count</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// Jkind == GB_LIST or GB_STRIDE</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is an explicit list, or jbegin:jinc:end</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Ch is an explicit list: the intersection of Ah and J</comment>

        <comment type="line">// count the length of Ch</comment>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_AND_NTASKS</name> <argument_list>(<argument><expr><name>nJ</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// scan all of J and check each entry if it appears in Ah</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC_start</name></decl>, <decl><type ref="prev"/><name>jC_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jC_start</name></expr></argument>, <argument><expr><name>jC_end</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>my_Cnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><name>jC_start</name></expr></init></decl> ;</init> <condition><expr><name>jC</name> <operator>&lt;</operator> <name>jC_end</name></expr> ;</condition> <incr><expr><name>jC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>use_hyper_hash</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// find jA using the hyper_hash</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>ignore1</name></decl>, <decl><type ref="prev"/><name>ignore2</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>kA</name> <operator>=</operator> <call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>,
                        <argument><expr><name>A_hash_bits</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>kA</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// find jA using binary search</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kright</name> <init>= <expr><name>anvec</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>jA</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>, <argument><expr><name>kright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>my_Cnvec</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_Cnvec</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cnvec</name> <operator>=</operator> <name><name>Count</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate Ch, Ap_start, and Ap_end</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>C_empty</name> <operator>=</operator> <name>C_empty</name> <operator>||</operator> <operator>(</operator><name>Cnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>

    <comment type="line">// C is hypersparse if A is hypersparse, or if C is empty</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><name>A_is_hyper</name> <operator>||</operator> <name>C_empty</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_is_hyper</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ch</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>Cnvec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Ap_start</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_start_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ap_end</name>   <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_end_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ap_start</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Ap_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create Ch, Ap_start, and Ap_end</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// For the (kC)th vector of C, which corresponds to the (kA)th vector of A,</comment>
    <comment type="line">// pA = Ap_start [kC] and pA_end = Ap_end [kC] are pointers to the range</comment>
    <comment type="line">// of entries in A(imin:imax,kA).</comment>

    <if_stmt><if>if <condition>(<expr><name>C_empty</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is an empty hypersparse matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <empty_stmt>;</empty_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>A_is_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// both C and A are standard matrices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>jC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>jC</name> <operator>&lt;</operator> <name>nJ</name></expr> ;</condition> <incr><expr><name>jC</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_find_Ap_start_end</name> <argument_list>(<argument><expr><name>jA</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>, <argument><expr><name>imax</name></expr></argument>,
                <argument><expr><name>jC</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>J_is_all_or_range</name></expr>)</condition> <comment type="line">// (Jkind == GB_ALL || Jkind == GB_RANGE)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is ":" or jbegin:jend</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C and A are both hypersparse.  Ch is a shifted copy of the trimmed</comment>
        <comment type="line">// Ah, of length Cnvec = anvec.  so kA = kC.  Ap has also been trimmed.</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>kC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kC</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kC</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><name>jA</name> <operator>-</operator> <name>jmin</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jC</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_find_Ap_start_end</name> <argument_list>(<argument><expr><name>kA</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>, <argument><expr><name>imax</name></expr></argument>,
                <argument><expr><name>kC</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>J_is_long_stride</name></expr>)</condition> <comment type="line">// (Jkind == GB_STRIDE &amp;&amp; anvec &lt; nJ * 64)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is jbegin:jinc:jend where jinc may be positive or negative</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C and A are both hypersparse.  Ch is constructed by scanning all</comment>
        <comment type="line">// vectors in Ah [0..anvec-1] and checking if they appear in the</comment>
        <comment type="line">// jbegin:jinc:jend sequence.</comment>

        <if_stmt><if>if <condition>(<expr><name>jinc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kA_start</name></decl>, <decl><type ref="prev"/><name>kA_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kA_start</name></expr></argument>, <argument><expr><name>kA_end</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_ij_is_in_list</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><operator>(</operator><name>jA</name> <operator>-</operator> <name>jbegin</name><operator>)</operator> <operator>/</operator> <name>jinc</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jC</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_find_Ap_start_end</name> <argument_list>(<argument><expr><name>kA</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>, <argument><expr><name>imax</name></expr></argument>,
                            <argument><expr><name>kC</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>kC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kA_start</name></decl>, <decl><type ref="prev"/><name>kA_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kA_start</name></expr></argument>, <argument><expr><name>kA_end</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>ntasks</name><operator>-</operator><name>tid</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_end</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&gt;=</operator> <name>kA_start</name></expr> ;</condition> <incr><expr><name>kA</name><operator>--</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_ij_is_in_list</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><operator>(</operator><name>jA</name> <operator>-</operator> <name>jbegin</name><operator>)</operator> <operator>/</operator> <name>jinc</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jC</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_find_Ap_start_end</name> <argument_list>(<argument><expr><name>kA</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>, <argument><expr><name>imax</name></expr></argument>,
                            <argument><expr><name>kC</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>kC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// Jkind == GB_LIST or GB_STRIDE</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// J is an explicit list, or jbegin:jinc:jend</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C and A are both hypersparse.  Ch is constructed by scanning the</comment>
        <comment type="line">// list J, or the entire jbegin:jinc:jend sequence.  Each vector is</comment>
        <comment type="line">// then found in Ah, via binary search.</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC_start</name></decl>, <decl><type ref="prev"/><name>jC_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jC_start</name></expr></argument>, <argument><expr><name>jC_end</name></expr></argument>, <argument><expr><name>nJ</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><name>jC_start</name></expr></init></decl> ;</init> <condition><expr><name>jC</name> <operator>&lt;</operator> <name>jC_end</name></expr> ;</condition> <incr><expr><name>jC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>use_hyper_hash</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// find jA using the hyper_hash</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>ignore1</name></decl>, <decl><type ref="prev"/><name>ignore2</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>kA</name> <operator>=</operator> <call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>,
                        <argument><expr><name>A_hash_bits</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>kA</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// find jA using binary search</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kright</name> <init>= <expr><name>anvec</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>jA</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>, <argument><expr><name>kright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>jA</name> <operator>==</operator> <name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jC</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_find_Ap_start_end</name> <argument_list>(<argument><expr><name>kA</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>imin</name></expr></argument>, <argument><expr><name>imax</name></expr></argument>,
                        <argument><expr><name>kC</name></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name>Ap_start</name></expr></argument>, <argument><expr><name>Ap_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>kC</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kC</name> <operator>&lt;</operator> <name>Cnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// jC is the (kC)th vector of C = A(I,J)</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>kC</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <comment type="line">// jA is the corresponding (kA)th vector of A.</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start_all</name></decl>, <decl><type ref="prev"/><name>pA_end_all</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>GB_lookup</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>,   <comment type="line">// for debug only</comment>
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kA</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_start_all</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end_all</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>jA</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name>      <init>= <expr><name><name>Ap_start</name> <index>[<expr><name>kC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>  <init>= <expr><name><name>Ap_end</name>   <index>[<expr><name>kC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <name>avlen</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A(:,kA) is dense; Ai [pA:pA_end-1] is the entire vector.</comment>
            <comment type="line">// C(:,kC) will have exactly nI entries.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA</name>     <operator>==</operator> <name>pA_start_all</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA_end</name> <operator>==</operator> <name>pA_end_all</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>ajnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A(imin:imax,kA) has at least one entry, in Ai [pA:pA_end-1]</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>imin</name> <operator>&lt;=</operator> <call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Ai</name> <argument_list>(<argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>imax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA_start_all</name> <operator>&lt;=</operator> <name>pA</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pA_end</name> <operator>&lt;=</operator> <name>pA_end_all</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// A(imin:imax,kA) and C(:,kC) are empty</comment>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ch</name>        <operator>)</operator> <operator>=</operator> <name>Ch</name></expr> ;</expr_stmt>          <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ch_size</name><operator>)</operator> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_start</name>  <operator>)</operator> <operator>=</operator> <name>Ap_start</name></expr> ;</expr_stmt>    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_start_size</name><operator>)</operator> <operator>=</operator> <name>Ap_start_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_end</name>    <operator>)</operator> <operator>=</operator> <name>Ap_end</name></expr> ;</expr_stmt>      <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_end_size</name><operator>)</operator> <operator>=</operator> <name>Ap_end_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Cnvec</name>     <operator>)</operator> <operator>=</operator> <name>Cnvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_need_qsort</name><operator>)</operator> <operator>=</operator> <name>need_qsort</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ikind</name>     <operator>)</operator> <operator>=</operator> <name>Ikind</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nI</name>        <operator>)</operator> <operator>=</operator> <name>nI</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nJ</name>        <operator>)</operator> <operator>=</operator> <name>nJ</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
