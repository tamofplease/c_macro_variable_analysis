<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_add_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add_phase2: C=A+B or C&lt;M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_add_phase2 computes C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;A+B.  It is preceded first</comment>
<comment type="line">// by GB_add_phase0, which computes the list of vectors of C to compute (Ch)</comment>
<comment type="line">// and their location in A and B (C_to_[AB]).  Next, GB_add_phase1 counts the</comment>
<comment type="line">// entries in each vector C(:,j) and computes Cp.</comment>

<comment type="line">// GB_add_phase2 computes the pattern and values of each vector of C(:,j),</comment>
<comment type="line">// entirely in parallel.</comment>

<comment type="line">// C, M, A, and B can be standard sparse or hypersparse, as determined by</comment>
<comment type="line">// GB_add_phase0.  The mask can be either: not present, or present and</comment>
<comment type="line">// not complemented.  The complemented mask is handled in most cases,</comment>
<comment type="line">// except when C, M, A, and B are all sparse or hypersparse.</comment>

<comment type="line">// This function either frees Cp and Ch, or transplants then into C, as C-&gt;p</comment>
<comment type="line">// and C-&gt;h.  Either way, the caller must not free them.</comment>

<comment type="line">// op may be NULL.  In this case, the intersection of A and B must be empty.</comment>
<comment type="line">// This is used by GB_wait only, for merging the pending tuple matrix T into A.</comment>
<comment type="line">// In this case, C is always sparse or hypersparse, not bitmap or full.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_WORKSPACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
<cpp:value>{                                           \
    GB_WERK_POP (B_ek_slicing, int64_t) ;   \
    GB_WERK_POP (A_ek_slicing, int64_t) ;   \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_FREE_WORKSPACE ;             \
    GB_phybix_free (C) ;            \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_add_phase2</name>      <comment type="line">// C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,           <comment type="line">// output matrix, static header</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,   <comment type="line">// type of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,    <comment type="line">// format of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,  <comment type="line">// op to perform C = op (A,B), or NULL if no op</comment>
    <comment type="line">// from phase1:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Cp_handle</name></decl></parameter>,    <comment type="line">// vector pointers for C</comment>
    <parameter><decl><type><name>size_t</name></type> <name>Cp_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec_nonempty</name></decl></parameter>,   <comment type="line">// # of non-empty vectors in C</comment>
    <comment type="line">// tasks from phase1a:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_ntasks</name></decl></parameter>,         <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,       <comment type="line">// # of threads to use</comment>
    <comment type="line">// analysis from phase0:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Ch_handle</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>Ch_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Ch_is_Mh</name></decl></parameter>,        <comment type="line">// if true, then Ch == M-&gt;h</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_sparsity</name></decl></parameter>,
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// optional mask, may be NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>,   <comment type="line">// if true, eWiseUnion, else eWiseAdd</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>alpha</name></decl></parameter>,     <comment type="line">// alpha and beta ignored for eWiseAdd,</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>beta</name></decl></parameter>,      <comment type="line">// nonempty scalars for GxB_eWiseUnion</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for add phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for add phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for add phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for add phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>B_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cp_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ch_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the opcode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_sparse_or_hyper</name> <init>= <expr><operator>(</operator><name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name><operator>)</operator> <operator>||</operator> <name>C_is_hyper</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_is_sparse_or_hyper</name> <operator>==</operator> <operator>(</operator><name>Cp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_is_hyper</name> <operator>==</operator> <operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GB_NOP_code</name></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_first</name>  <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_second</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_pair</name>   <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// GB_wait does no typecasting.  A and T have the same type when</comment>
        <comment type="line">// computing A=A+T, and no operator is used since A and T have disjoint</comment>
        <comment type="line">// nonzero patterns.  No mask is used.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_is_sparse_or_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// assert that the op is compatible with A, B, and C</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// eWiseMult uses GB_add when A and B are both as-if-full,</comment>
            <comment type="line">// and in this case, the entries of A and B are never typecasted</comment>
            <comment type="line">// directly to C.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name><operator>)</operator></expr></argument>,
                <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>op_is_first</name>  <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name><operator>)</operator></expr></argument>,
                <argument><expr><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the typecasting functions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>fadd</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>, <decl><type ref="prev"/><name>xsize</name></decl>, <decl><type ref="prev"/><name>ysize</name></decl>, <decl><type ref="prev"/><name>zsize</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>cast_B_to_C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name></decl>, <decl><type ref="prev"/><name>cast_B_to_Y</name></decl>, <decl><type ref="prev"/><name>cast_Z_to_C</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GB_wait: implicit GB_SECOND_[type] operator with no typecasting</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>is_eWiseUnion</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>fadd</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>               <comment type="line">// the operator is not called</comment>
        <expr_stmt><expr><name>asize</name> <operator>=</operator> <name>csize</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>bsize</name> <operator>=</operator> <name>csize</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xsize</name> <operator>=</operator> <name>csize</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ysize</name> <operator>=</operator> <name>csize</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>zsize</name> <operator>=</operator> <name>csize</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_A_to_X</name> <operator>=</operator> <name>GB_copy_user_user</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_B_to_Y</name> <operator>=</operator> <name>GB_copy_user_user</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_A_to_C</name> <operator>=</operator> <name>GB_copy_user_user</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_B_to_C</name> <operator>=</operator> <name>GB_copy_user_user</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_Z_to_C</name> <operator>=</operator> <name>GB_copy_user_user</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// normal case, with optional typecasting</comment>
        <expr_stmt><expr><name>fadd</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr> ;</expr_stmt>       <comment type="line">// NULL if op is positional</comment>
        <expr_stmt><expr><name>asize</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>bsize</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>op_is_second</name> <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the op does not depend on the value of A(i,j)</comment>
            <expr_stmt><expr><name>xsize</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cast_A_to_X</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>xsize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cast_A_to_X</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>op_is_first</name> <operator>||</operator> <name>op_is_pair</name> <operator>||</operator> <name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the op does not depend on the value of B(i,j)</comment>
            <expr_stmt><expr><name>ysize</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cast_B_to_Y</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>ysize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cast_B_to_Y</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>zsize</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_eWiseUnion</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecasting for eWiseAdd only</comment>
            <expr_stmt><expr><name>cast_A_to_C</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>cast_B_to_C</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>cast_Z_to_C</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// cast the alpha and beta scalars, if present</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>alpha_scalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>beta_scalar</name>  <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// alpha_scalar = (xtype) alpha</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>alpha</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>alpha</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, 
            <argument><expr><name><name>alpha</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>alpha</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// beta_scalar = (ytype) beta</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>beta</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>beta_scalar</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>beta</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,
            <argument><expr><name><name>beta</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>beta</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if C is iso and compute its iso value if it is</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><call><name>GB_iso_add</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>,
        <argument><expr><name>B</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>is_eWiseUnion</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GB_debugify_ewise</name> <argument_list>(<argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>C_sparsity</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
        <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output matrix C: hypersparse, sparse, bitmap, or full</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C is hypersparse if both A and B are (contrast with GrB_Matrix_emult),</comment>
    <comment type="line">// or if M is present, not complemented, and hypersparse.</comment>
    <comment type="line">// C acquires the same hyperatio as A.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>C_is_sparse_or_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>Cp</name> <index>[<expr><name>Cnvec</name></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><call><name>GB_nnz_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">// allocate the result C (but do not allocate C-&gt;p or C-&gt;h)</comment>
    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// any sparsity, existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><name>C_sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>Cnvec</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory; caller must free C_to_M, C_to_A, C_to_B</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Cp_handle</name></expr></argument>, <argument><expr><name>Cp_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Ch_handle</name></expr></argument>, <argument><expr><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add Cp as the vector pointers for C, from GB_add_phase1</comment>
    <if_stmt><if>if <condition>(<expr><name>C_is_sparse_or_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>Cnvec_nonempty</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Cp</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Cp_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add Ch as the hypersparse list for C, from GB_add_phase0</comment>
    <if_stmt><if>if <condition>(<expr><name>C_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Ch</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>Cnvec</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// now Cp and Ch have been transplanted into C</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Cp_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Ch_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// using a built-in binary operator (except for positional operators)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>

    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Cx [0] = cscalar = op (A,B)</comment>
        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"(iso add) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// pattern of C = set union of pattern of A and B</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_ADD</name></cpp:macro></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>GB_PRAGMA_SIMD</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
        <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is non-iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// define the worker for the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_AaddB</name><parameter_list>(<parameter><type><name>mult</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_AaddB_ ## mult ## xname)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_WORKER</name><parameter_list>(<parameter><type><name>mult</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                             \
            <cpp:value>{                                                               \
                info = GB_AaddB(mult,xname) (C, C_sparsity,                 \
                    M, Mask_struct, Mask_comp,                              \
                    A, B, is_eWiseUnion, alpha_scalar, beta_scalar,         \
                    Ch_is_Mh, C_to_M, C_to_A, C_to_B,                       \
                    TaskList, C_ntasks, C_nthreads, Context) ;              \
                done = (info != GrB_NO_VALUE) ;                             \
            }                                                               \
            break ;</cpp:value></cpp:define>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// launch the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl>, <decl><type ref="prev"/><name>ycode</name></decl>, <decl><type ref="prev"/><name>zcode</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>op_is_positional</name> <operator>&amp;&amp;</operator>
                <call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ccode</name> <operator>==</operator> <name>zcode</name></expr>)</condition>
            <block>{<block_content> 
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// TODO: M, A, and B can be sliced before calling the worker, then</comment>
            <comment type="line">// the worker can't run out of memory. Then pass in the ek_slice</comment>
            <comment type="line">// arrays to the worker.</comment>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_OUT_OF_MEMORY</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// generic worker for positional ops, user-defined ops, and typecasting</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"(generic add: %s) "</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>op</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"2nd"</literal></expr> </then><else>: <expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C(i,j) = (ctype) A(i,j), located in Ax [pA]</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY_A_TO_C</name></cpp:undef> 
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_A_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>                             \
            <cpp:value>cast_A_to_C (cij, Ax +((A_iso) ? 0: (pA)*asize), asize) ;</cpp:value></cpp:define>

        <comment type="line">// C(i,j) = (ctype) B(i,j), located in Bx [pB]</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_COPY_B_TO_C</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_B_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro>                             \
            <cpp:value>cast_B_to_C (cij, Bx +((B_iso) ? 0: (pB)*bsize), bsize) ;</cpp:value></cpp:define>

        <comment type="line">// aij = (xtype) A(i,j), located in Ax [pA]</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GETA</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETA</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>                                    \
            <cpp:value>GB_void aij [GB_VLA(xsize)] ;                                   \
            if (cast_A_to_X != NULL)                                        \
            {                                                               \
                cast_A_to_X (aij, Ax +((A_iso) ? 0:(pA)*asize), asize) ;    \
            }</cpp:value></cpp:define>

        <comment type="line">// bij = (ytype) B(i,j), located in Bx [pB]</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GETB</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETB</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro>                                    \
            <cpp:value>GB_void bij [GB_VLA(ysize)] ;                                   \
            if (cast_B_to_Y != NULL)                                        \
            {                                                               \
                cast_B_to_Y (bij, Bx +((B_iso) ? 0:(pB)*bsize), bsize) ;    \
            }</cpp:value></cpp:define>

        <comment type="line">// address of Cx [p]</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CX</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx +((p)*csize)</cpp:value></cpp:define>

        <comment type="line">// loops cannot be vectorized</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>

        <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(i,j) = positional_op (aij, bij)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><call><name>GB_positional_offset</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_POSITIONAL_OP</name></cpp:macro></cpp:define>

            <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
            <block>{<block_content> 
                <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>    :</case> <comment type="line">// first_i(A(i,j),y) == i</comment>
                    <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>   :</case> <comment type="line">// first_i1(A(i,j),y) == i+1</comment>
                    <case>case <expr><name>GB_SECONDI_binop_code</name></expr>   :</case> <comment type="line">// second_i(x,A(i,j)) == i</comment>
                    <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>  :</case> <comment type="line">// second_i1(x,A(i,j)) == i+1</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   \
                            <cpp:value>int64_t z = i + offset ;            \
                            cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>
                    <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>    :</case> <comment type="line">// first_j(A(i,j),y) == j</comment>
                    <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>   :</case> <comment type="line">// first_j1(A(i,j),y) == j+1</comment>
                    <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>   :</case> <comment type="line">// second_j(x,A(i,j)) == j</comment>
                    <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>  :</case> <comment type="line">// second_j1(x,A(i,j)) == j+1</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   \
                            <cpp:value>int64_t z = j + offset ;            \
                            cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>
                    <default>default:</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>    :</case> <comment type="line">// first_i(A(i,j),y) == i</comment>
                    <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>   :</case> <comment type="line">// first_i1(A(i,j),y) == i+1</comment>
                    <case>case <expr><name>GB_SECONDI_binop_code</name></expr>   :</case> <comment type="line">// second_i(x,A(i,j)) == i</comment>
                    <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>  :</case> <comment type="line">// second_i1(x,A(i,j)) == i+1</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>       \
                            <cpp:value>int32_t z = (int32_t) (i + offset) ;    \
                            cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>
                    <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>    :</case> <comment type="line">// first_j(A(i,j),y) == j</comment>
                    <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>   :</case> <comment type="line">// first_j1(A(i,j),y) == j+1</comment>
                    <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>   :</case> <comment type="line">// second_j(x,A(i,j)) == j</comment>
                    <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>  :</case> <comment type="line">// second_j1(x,A(i,j)) == j+1</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>       \
                            <cpp:value>int32_t z = (int32_t) (j + offset) ;    \
                            cast_Z_to_C (cij, &amp;z, csize) ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
                        <break>break ;</break>
                    <default>default:</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// standard binary operator</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_POSITIONAL_OP</name></cpp:undef>

            <comment type="line">// C(i,j) = (ctype) (A(i,j) + B(i,j))</comment>
            <comment type="line">// not used if op is null since the intersection of A and B is empty</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>, <parameter><type><name>bij</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro>   \
                <cpp:value>ASSERT (op != NULL) ;               \
                GB_void z [GB_VLA(zsize)] ;         \
                fadd (z, aij, bij) ;                \
                cast_Z_to_C (cij, z, csize) ;</cpp:value></cpp:define>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remove empty vectors from C, if hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// caller must free C_to_M, C_to_A, and C_to_B, but not Cp or Ch</comment>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for add phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
