<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Descriptor_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Descriptor_check: check and print a Descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dc: check a single descriptor field</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>GB_dc</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>kind</name></decl></parameter>,                           <comment type="line">// 0, 1, or 2</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Value</name></type> <name>v</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Value</name></type> <name>nondefault</name></decl></parameter>,    <comment type="line">// for kind == 0</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                             <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter> 
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.%s = "</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <switch>switch <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>v</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_DEFAULT</name></expr>            :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"default   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GrB_COMP</name></expr>               :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"complement"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GrB_STRUCTURE</name></expr>          :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"structure "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GrB_COMP</name><operator>+</operator><name>GrB_STRUCTURE</name></expr> :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"structural complement"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GrB_TRAN</name></expr>               :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"transpose "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GrB_REPLACE</name></expr>            :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"replace   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_AxB_SAXPY</name></expr>          :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"saxpy     "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_AxB_GUSTAVSON</name></expr>      :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"Gustavson "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_AxB_HASH</name></expr>           :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"hash      "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_AxB_DOT</name></expr>            :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"dot       "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <default>default                     :</default> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"unknown   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// most descriptor fields can be set to the default,</comment>
            <comment type="line">// or just one non-default value</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>v</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>nondefault</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// mask: can only be one of 4 different values</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>v</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>GrB_COMP</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>GrB_STRUCTURE</name> <operator>||</operator>
                   <name>v</name> <operator>==</operator> <operator>(</operator><name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name><operator>)</operator><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// kind == 2</comment>
        <block>{<block_content>
            <comment type="line">// GxB_AxB_METHOD:</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>v</name> <operator>==</operator> <name>GxB_DEFAULT</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>GxB_AxB_GUSTAVSON</name>
                <operator>||</operator> <name>v</name> <operator>==</operator> <name>GxB_AxB_DOT</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>GxB_AxB_HASH</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>GxB_AxB_SAXPY</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" (invalid value for this field)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Descriptor_check</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_Descriptor_check</name>    <comment type="line">// check a GraphBLAS descriptor</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>D</name></decl></parameter>,     <comment type="line">// GraphBLAS descriptor to print and check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,           <comment type="line">// name of the descriptor, optional</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                     <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>                     <comment type="line">// file for output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n    GraphBLAS Descriptor: %s "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>D</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check object</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CHECK_MAGIC</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name><name>info</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>info</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_dc</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"out     "</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>out</name></name></expr></argument>,  <argument><expr><name>GrB_REPLACE</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>info</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_dc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mask    "</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>info</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_dc</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"in0     "</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>in0</name></name></expr></argument>,  <argument><expr><name>GrB_TRAN</name></expr></argument>,    <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>info</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_dc</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"in1     "</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>in1</name></name></expr></argument>,  <argument><expr><name>GrB_TRAN</name></expr></argument>,    <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>info</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_dc</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"axb     "</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>axb</name></name></expr></argument>,  <argument><expr><name>GxB_DEFAULT</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>info</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    Descriptor field set to an invalid value\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads_max</name> <init>= <expr><name><name>D</name><operator>-&gt;</operator><name>nthreads_max</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>chunk</name> <init>= <expr><name><name>D</name><operator>-&gt;</operator><name>chunk</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.nthreads = "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nthreads_max</name> <operator>&lt;=</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"default\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.chunk    = "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>chunk</name> <operator>&lt;=</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"default\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%g\n"</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>do_sort</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.sort     = true\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>import</name></name> <operator>!=</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.import   = secure\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>D</name><operator>-&gt;</operator><name>compression</name></name> <operator>!=</operator> <name>GxB_DEFAULT</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    d.compression = %d\n"</literal></expr></argument>, <argument><expr><name><name>D</name><operator>-&gt;</operator><name>compression</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
