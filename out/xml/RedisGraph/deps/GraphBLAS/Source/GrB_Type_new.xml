<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Type_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Type_new: create a new user-defined type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GrB_Type_new is implemented both as a macro and a function.  Both are</comment>
<comment type="line">// user-callable.  The default is to use the macro, since this allows the name</comment>
<comment type="line">// of the type to be saved as a string, for subsequent error reporting by</comment>
<comment type="line">// GrB_error and for the return value of GxB_Matrix_type_name.  It is also</comment>
<comment type="line">// provided as a function so that applications that require a function instead</comment>
<comment type="line">// of macro can access it.  User code can simply do #undef GrB_Type_new before</comment>
<comment type="line">// using the function.  This approach also places the function GrB_Type_new in</comment>
<comment type="line">// the linkable SuiteSparse:GraphBLAS library so that it is visible for linking</comment>
<comment type="line">// with applications in languages other than ANSI C.  The function version does</comment>
<comment type="line">// not allow the name of the ctype to be saved in the new GraphBLAS type,</comment>
<comment type="line">// however.  It is given a generic name, "user_type_of_size_%d" where "%d" is</comment>
<comment type="line">// the size of the type.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">// the macro version of this function must first be #undefined</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrB_Type_new</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GrM_Type_new</name></cpp:undef>

<function><type><name>GrB_Info</name> <name>GRB</name></type> (<name>Type_new</name>)         <comment type="line">// create a new GraphBLAS type</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,             <comment type="line">// handle of user type to create</comment>
    <parameter><decl><type><name>size_t</name></type> <name>sizeof_ctype</name></decl></parameter>         <comment type="line">// size = sizeof (ctype) of the C type</comment>
)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GxB_Type_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>sizeof_ctype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
