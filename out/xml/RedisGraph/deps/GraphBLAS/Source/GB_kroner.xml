<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_kroner.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_kroner: Kronecker product, C = kron (A,B)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = kron(A,B) where op determines the binary multiplier to use.  The type of</comment>
<comment type="line">// A and B are compatible with the x and y inputs of z=op(x,y), but can be</comment>
<comment type="line">// different.  The type of C is the type of z.  C is hypersparse if either A</comment>
<comment type="line">// or B are hypersparse.</comment>

<comment type="line">// FUTURE: this would be faster with built-in types and operators.</comment>

<comment type="line">// FUTURE: at most one thread is used for each vector of C=kron(A,B).  The</comment>
<comment type="line">// matrix C is normally very large, but if both A and B are n-by-1, then C is</comment>
<comment type="line">// n^2-by-1 and only a single thread is used.  A better method for this case</comment>
<comment type="line">// would construct vectors of C in parallel.</comment>

<comment type="line">// FUTURE: each vector C(:,k) takes O(nnz(C(:,k))) work, but this is not</comment>
<comment type="line">// accounted for in the parallel load-balancing.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>   \
<cpp:value>{                           \
    GB_Matrix_free (&amp;A2) ;  \
    GB_Matrix_free (&amp;B2) ;  \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_FREE_WORKSPACE ;     \
    GB_phybix_free (C) ;    \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_kron.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_kroner</name>                  <comment type="line">// C = kron (A,B)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// output matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,            <comment type="line">// desired format of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,          <comment type="line">// multiply operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A_in</name></decl></parameter>,          <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>bool</name></type> <name>A_is_pattern</name></decl></parameter>,              <comment type="line">// true if values of A are not used</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B_in</name></decl></parameter>,          <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>bool</name></type> <name>B_is_pattern</name></decl></parameter>,              <comment type="line">// true if values of B are not used</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>A2_header</name></decl>, <decl><type ref="prev"/><name>B2_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A2</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A_in</name></expr></argument>, <argument><expr><literal type="string">"A_in for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B_in</name></expr></argument>, <argument><expr><literal type="string">"B_in for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>B_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// bitmap case: create sparse copies of A and B if they are bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>A_in</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"A:"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// set A2-&gt;iso = A-&gt;iso     OK: no need for burble</comment>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>A2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A2_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A2</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A2</name></expr></argument>, <argument><expr><literal type="string">"dup A2 for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_to_sparse</name> <argument_list>(<argument><expr><name>A2</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A2</name></expr></argument>, <argument><expr><literal type="string">"to sparse, A2 for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A2</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>B</name> <init>= <expr><name>B_in</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"B:"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// set B2-&gt;iso = B-&gt;iso     OK: no need for burble</comment>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>B2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B2_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B2</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B2</name></expr></argument>, <argument><expr><literal type="string">"dup B2 for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_to_sparse</name> <argument_list>(<argument><expr><name>B2</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B2</name></expr></argument>, <argument><expr><literal type="string">"to sparse, B2 for kron (A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B</name> <operator>=</operator> <name>B2</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><ternary><condition><expr><name>A_is_pattern</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><ternary><condition><expr><name>B_is_pattern</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bsize</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvlen</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvdim</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>anz</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bnz</name><operator>)</operator>
                <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>anvec</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bnvec</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if C is iso and compute its iso value if it is</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>cscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><call><name>GB_iso_emult</name> <argument_list>(<argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C has the same type as z for the multiply operator, z=op(x,y)</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cvlen</name></decl>, <decl><type ref="prev"/><name>cvdim</name></decl>, <decl><type ref="prev"/><name>cnzmax</name></decl>, <decl><type ref="prev"/><name>cnvec</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cvlen</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cvdim</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>bvdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cnzmax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>bnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cnvec</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>bnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// the values of A and B are no longer needed if C is iso</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso kron) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_is_pattern</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>B_is_pattern</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// C is hypersparse if either A or B are hypersparse.  It is never bitmap.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>cvdim</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>Ah</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>Bh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><ternary><condition><expr><name>C_is_full</name></expr> ?</condition><then> <expr><name>GxB_FULL</name></expr> </then><else>:
        <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>C_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_HYPERSPARSE</name></expr> </then><else>: <expr><name>GxB_SPARSE</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// full, sparse, or hyper; existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>cvlen</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>cvdim</name></expr></argument>, <argument><expr><name>GB_Ap_malloc</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>cnzmax</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C and the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx_int64</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx_int32</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>fmult</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>cast_B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_pattern</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>cast_A</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>B_is_pattern</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>cast_B</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>GB_positional_offset</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cx_int64</name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Cx</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Cx_int32</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>Cx</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is64</name> <init>= <expr><operator>(</operator><name>ctype</name> <operator>==</operator> <name>GrB_INT64</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute the column counts of C, and C-&gt;h if C is hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_is_full</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is sparse or hypersparse</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>guided</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>kC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kC</name> <operator>&lt;</operator> <name>cnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kC</name> <operator>/</operator> <name>bnvec</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB</name> <init>= <expr><name>kC</name> <operator>%</operator> <name>bnvec</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// get A(:,jA), the (kA)th vector of A</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aknz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Ap</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>avlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <comment type="line">// get B(:,jB), the (kB)th vector of B</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>jB</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>kB</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bknz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Bp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>bvlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Bp</name> <index>[<expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Bp</name> <index>[<expr><name>kB</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <comment type="line">// determine # entries in C(:,jC), the (kC)th vector of C</comment>
            <comment type="line">// int64_t kC = kA * bnvec + kB ;</comment>
            <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>aknz</name> <operator>*</operator> <name>bknz</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>C_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Ch</name> <index>[<expr><name>kC</name></expr>]</index></name> <operator>=</operator> <name>jA</name> <operator>*</operator> <name>bvdim</name> <operator>+</operator> <name>jB</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>cnvec</name></expr>]</index></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_is_hyper</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>cnvec</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = kron (A,B) where C is iso and full</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Cx [0] = cscalar = op (A,B)</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>cscalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>C_is_full</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// no more work to do if C is iso and full</comment>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C=kron(A,B), iso full"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = kron (A,B)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>guided</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>kC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>kC</name> <operator>&lt;</operator> <name>cnvec</name></expr> ;</condition> <incr><expr><name>kC</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kC</name> <operator>/</operator> <name>bnvec</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name>kC</name> <operator>%</operator> <name>bnvec</name></expr></init></decl> ;</decl_stmt>

        <comment type="line">// get B(:,jB), the (kB)th vector of B</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>kB</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>kB</name></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>bknz</name> <init>= <expr><name>pB_start</name> <operator>-</operator> <name>pB_end</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>bwork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>B_is_pattern</name> <operator>&amp;&amp;</operator> <name>B_iso</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>cast_B</name> <argument_list>(<argument><expr><name>bwork</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get C(:,jC), the (kC)th vector of C</comment>
        <comment type="line">// int64_t kC = kA * bnvec + kB ;</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>kC</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// get A(:,jA), the (kA)th vector of A</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>awork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_pattern</name> <operator>&amp;&amp;</operator> <name>A_iso</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>cast_A</name> <argument_list>(<argument><expr><name>awork</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// awork = A(iA,jA), typecasted to op-&gt;xtype</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iAblock</name> <init>= <expr><name>iA</name> <operator>*</operator> <name>bvlen</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>A_iso</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>cast_A</name> <argument_list>(<argument><expr><name>awork</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><name>pA</name><operator>*</operator><name>asize</name><operator>)</operator></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// bwork = B(iB,jB), typecasted to op-&gt;ytype</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iB</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>B_is_pattern</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>B_iso</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>cast_B</name> <argument_list>(<argument><expr><name>bwork</name></expr></argument>, <argument><expr><name>Bx</name> <operator>+</operator><operator>(</operator><name>pB</name><operator>*</operator><name>bsize</name><operator>)</operator></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// C(iC,jC) = A(iA,jA) * B(iB,jB)</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>C_is_full</name></expr>)</condition>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><name>iAblock</name> <operator>+</operator> <name>iB</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>iC</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// positional binary operator</comment>
                    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case> 
                            <comment type="line">// z = first_i(A(iA,jA),y) == iA</comment>
                        <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case> 
                            <comment type="line">// z = first_i1(A(iA,jA),y) == iA+1</comment>
                            <if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int64</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>iA</name> <operator>+</operator> <name>offset</name></expr> ;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int32</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>iA</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <break>break ;</break>
                        <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case> 
                            <comment type="line">// z = first_j(A(iA,jA),y) == jA</comment>
                        <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case> 
                            <comment type="line">// z = first_j1(A(iA,jA),y) == jA+1</comment>
                            <if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int64</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>jA</name> <operator>+</operator> <name>offset</name></expr> ;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int32</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>jA</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <break>break ;</break>
                        <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case> 
                            <comment type="line">// z = second_i(x,B(iB,jB)) == iB</comment>
                        <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case> 
                            <comment type="line">// z = second_i1(x,B(iB,jB)) == iB+1</comment>
                            <if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int64</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>iB</name> <operator>+</operator> <name>offset</name></expr> ;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int32</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>iB</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <break>break ;</break>
                        <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case> 
                            <comment type="line">// z = second_j(x,B(iB,jB)) == jB</comment>
                        <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case> 
                            <comment type="line">// z = second_j1(x,B(iB,jB)) == jB+1</comment>
                            <if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int64</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>jB</name> <operator>+</operator> <name>offset</name></expr> ;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <expr_stmt><expr><name><name>Cx_int32</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator> <operator>(</operator><name>jB</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                            <break>break ;</break>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><name>C_iso</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// standard binary operator</comment>
                    <expr_stmt><expr><call><name>fmult</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><name>pC</name><operator>*</operator><name>csize</name><operator>)</operator></expr></argument>, <argument><expr><name>awork</name></expr></argument>, <argument><expr><name>bwork</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// remove empty vectors from C, if hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C=kron(A,B)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
