<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_free_pool_finalize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_free_pool_finalize: finalize the free_pool</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_free_pool_finalize</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free all memory pools</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">64</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// get a block from the kth free_pool and free it</comment>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GB_Global_free_pool_get</name> <argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_free_memory</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
