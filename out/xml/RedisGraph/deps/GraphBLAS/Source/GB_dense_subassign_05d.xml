<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_dense_subassign_05d.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_subassign_05d: C(:,:)&lt;M&gt; = scalar where C is as-if-full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 05d: C(:,:)&lt;M&gt; = scalar ; no S, C is dense</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           scalar</comment>
<comment type="line">// S:           none</comment>

<comment type="line">// C can have any sparsity structure, but it must be entirely dense with</comment>
<comment type="line">// all entries present.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_type__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_WORKSPACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GB_FREE_WORKSPACE</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_dense_subassign_05d</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for subassign method_05d"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for subassign method_05d"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_ENSURE_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// convert C to full, if sparsity control allows it</comment>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// work has already been done by GB_assign_prep</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_SCALAR</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 05d: C(:,:)&lt;M&gt; = scalar ; no S; C is dense</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Optimal:  the method must iterate over all entries in M,</comment>
    <comment type="line">// and the time is O(nnz(M)).</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: slice M into equal-sized chunks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the entries for each task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>M_ntasks</name></decl>, <decl><type ref="prev"/><name>M_nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = x for built-in types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// define the worker for the switch factory</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_Cdense_05d</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_Cdense_05d_ ## cname)</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro>                                              \
        <cpp:value>{                                                                     \
            info = GB_Cdense_05d(cname) (C, M, Mask_struct, cwork,            \
                M_ek_slicing, M_ntasks, M_nthreads) ;                         \
            done = (info != GrB_NO_VALUE) ;                                   \
        }                                                                     \
        break ;</cpp:value></cpp:define>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// launch the switch factory</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C&lt;M&gt; = x</comment>
        <switch>switch <condition>(<expr><name>ccode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_bool</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int8</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int16</argument> )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int32</argument> )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int64</argument> )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint8</argument> )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint16</argument>)</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint32</argument>)</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint64</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fp32</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fp64</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fc32</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fc64</argument>  )</argument_list></macro>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = x for user-defined types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get operators, functions, workspace, contents of A and C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"(generic C(:,:)&lt;M&gt;=x assign) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">// Cx [p] = scalar</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_SCALAR_TO_C</name><parameter_list>(<parameter><type><name>p</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
            <cpp:value>memcpy (Cx + ((p)*csize), x, csize)</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>

        <comment type="line">// no vectorization</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_05d_template.c"</cpp:file></cpp:include>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for subassign method_05d"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
