<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_qsort_3.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_3: sort a 3-by-n list of integers, using A[0:2][] as the key</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sort.h"</cpp:file></cpp:include>

<comment type="line">// returns true if A [a] &lt; B [b]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_lt</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                  \
    <cpp:value>GB_lt_3 (A ## _0, A ## _1, A ## _2, a, B ## _0, B ## _1, B ## _2, b)</cpp:value></cpp:define>

<comment type="line">// argument list for calling a function</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>A ## _0, A ## _1, A ## _2</cpp:value></cpp:define>

<comment type="line">// argument list for calling a function, with offset</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_arg_offset</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>              \
    <cpp:value>A ## _0 + (x), A ## _1 + (x), A ## _2 + (x)</cpp:value></cpp:define>

<comment type="line">// argument list for defining a function</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_args</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>                      \
    <cpp:value>int64_t *restrict A ## _0,          \
    int64_t *restrict A ## _1,          \
    int64_t *restrict A ## _2</cpp:value></cpp:define>

<comment type="line">// each entry has a 3-integer key</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_K</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="line">// swap A [a] and A [b]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_swap</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
<cpp:value>{                                                                             \
    int64_t t0 = A ## _0 [a] ; A ## _0 [a] = A ## _0 [b] ; A ## _0 [b] = t0 ; \
    int64_t t1 = A ## _1 [a] ; A ## _1 [a] = A ## _1 [b] ; A ## _1 [b] = t1 ; \
    int64_t t2 = A ## _2 [a] ; A ## _2 [a] = A ## _2 [b] ; A ## _2 [b] = t2 ; \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_partition</name></cpp:macro> <cpp:value>GB_partition_3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_quicksort</name></cpp:macro> <cpp:value>GB_quicksort_3</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_qsort_template.c"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_qsort_3</name>     <comment type="line">// sort array A of size 3-by-n, using 3 keys (A [0:2][])</comment>
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_2</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
