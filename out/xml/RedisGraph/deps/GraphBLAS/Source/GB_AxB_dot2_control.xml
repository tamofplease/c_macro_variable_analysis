<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_dot2_control.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot2_control.c: determine when to use GB_AxB_dot2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C=A'*B, C&lt;M&gt;=A'*B, or C&lt;!M&gt;=A'*B where C is constructed in bitmap format.</comment>
<comment type="line">// C must be small and likely very dense.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_AxB_dot2_control</name>  <comment type="line">// true: use dot2, false: use saxpy</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A'*B is very efficient if A and/or B are full or bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// both A and B are sparse or hyper</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Notation: C=A'*B where all 3 matrices are CSC.  This might be C=A*B'</comment>
    <comment type="line">// where all 3 matrices are CSR, equivalently.  The comments here assume</comment>
    <comment type="line">// CSC, but this method is CSC/CSR agnostic.</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>       <comment type="line">// # of entries in A</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>bnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>       <comment type="line">// # of entries in B</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A-&gt;nvec_nonempty is used to select the method </comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// B-&gt;nvec_nonempty is used to select the method </comment>
        <expr_stmt><expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>bnvec</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>avlen</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>cnz</name> <init>= <expr><operator>(</operator><name>anvec</name> <operator>*</operator> <name>bnvec</name><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// size of the C bitmap</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>row_degree</name> <init>= <expr><name>anz</name> <operator>/</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>avlen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>col_degree</name> <init>= <expr><name>anz</name> <operator>/</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>cnz</name> <operator>&gt;</operator> <name>anz</name> <operator>+</operator> <name>bnz</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// The C bitmap is too big, use saxpy and construct C as sparse</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(C large: use saxpy C=(A')*B) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>anz</name> <operator>+</operator> <name>bnz</name> <operator>&gt;</operator> <literal type="number">10000</literal> <operator>*</operator> <name>cnz</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cnz</name> <operator>&lt;=</operator> <literal type="number">100</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// The C bitmap is very small compared with A and B, so use dot2</comment>
        <comment type="line">// and construct C as bitmap</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(C tiny: dot) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// average # of entries in each row and column of A (assuming A is CSC)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>row_degree</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.125</literal> <operator>&amp;&amp;</operator> <name>col_degree</name></expr></argument> &gt;</argument_list></name> <literal type="number">1200</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// If AT=A' is computed, it will have mostly empty vectors (the</comment>
        <comment type="line">// row_degree of A), so do not transpose it.  If the fraction of</comment>
        <comment type="line">// populated vectors in AT is very low (&lt; 0.0625 by default), then AT</comment>
        <comment type="line">// will become hypersparse, and this slows down the saxpy method.  If</comment>
        <comment type="line">// the vectors (col_degree) have lots of entries, then dot2 is</comment>
        <comment type="line">// efficient in this case.  If both conditions hold, use dot2 and</comment>
        <comment type="line">// compute C as bitmap.</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(A' implicit: dot) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if none of the above rules trigger, use saxpy</comment>
    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(saxpy C=(A')*B) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
