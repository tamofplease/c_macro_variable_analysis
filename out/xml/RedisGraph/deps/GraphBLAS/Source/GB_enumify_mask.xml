<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_mask.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_mask: return mask_ecode to define mask macros</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// User-defined types cannot be used as a valued mask.  They can be used</comment>
<comment type="line">// as structural masks.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_mask</name>       <comment type="line">// return enum to define mask macros</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>mask_ecode</name></decl></parameter>,            <comment type="line">// enumified mask</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>mcode</name></decl></parameter>,   <comment type="line">// typecode of the mask matrix M,</comment>
                                <comment type="line">// or 0 if M is not present</comment>
    <parameter><decl><type><name>bool</name></type> <name>Mask_struct</name></decl></parameter>,           <comment type="line">// true if M structural, false if valued</comment>
    <parameter><decl><type><name>bool</name></type> <name>Mask_comp</name></decl></parameter>              <comment type="line">// true if M complemented</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// Mask_comp becomes the least significant bit, so that</comment>
    <comment type="line">// Mask_comp = (mask_ecode &amp; 0x1) can be computed later.</comment>
    <comment type="line">// Mask_struct = (mask_ecode == 2 || mask_ecode == 3)</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>mcode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// no mask is present</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Mask_struct is ignored, but the mask may be complemented or not</comment>

        <comment type="line">// user-defined types are OK.  The values of M are not accessed.</comment>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>Mask_struct</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, and structural (not valued).</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// user-defined types are OK.  The values of M are not accessed.</comment>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is present, and valued</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>mcode</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_BOOL_code</name></expr>:</case>
            <case>case <expr><name>GB_INT8_code</name></expr>:</case>
            <case>case <expr><name>GB_UINT8_code</name></expr>:</case>

                <comment type="line">// valued mask, values are 1 byte in size</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_INT16_code</name></expr>:</case>
            <case>case <expr><name>GB_UINT16_code</name></expr>:</case>

                <comment type="line">// valued mask, values are 2 bytes in size</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">7</literal></expr></else></ternary></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_INT32_code</name></expr>:</case>
            <case>case <expr><name>GB_UINT32_code</name></expr>:</case>
            <case>case <expr><name>GB_FP32_code</name></expr>:</case>

                <comment type="line">// valued mask, values are 4 bytes in size</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_INT64_code</name></expr>:</case>
            <case>case <expr><name>GB_UINT64_code</name></expr>:</case>
            <case>case <expr><name>GB_FC32_code</name></expr>:</case>
            <case>case <expr><name>GB_FP64_code</name></expr>:</case>

                <comment type="line">// valued mask, values are 8 bytes in size</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">11</literal></expr></else></ternary></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_FC64_code</name></expr>:</case>

                <comment type="line">// valued mask, values are 16 bytes in size</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr> ;</expr_stmt>
                <break>break ;</break>

            <default>default:</default> <empty_stmt>;</empty_stmt>
                <comment type="line">// user-defined types are not allowed</comment>
                <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>mask_ecode</name><operator>)</operator> <operator>=</operator> <name>e</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
