<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_build.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_build: build a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// CALLED BY: GrB_Matrix_build_*, GrB_Vector_build_*,</comment>
<comment type="line">//            GxB_Matrix_build_Scalar, GxB_Vector_build_Scalar</comment>
<comment type="line">// CALLS:     GB_builder</comment>

<comment type="line">// GrB_Matrix_build_* and GrB_Vector_build_* always build a non-iso matrix.</comment>
<comment type="line">// X is non-iso, and T is non-iso on output.  dup can be a valid binary</comment>
<comment type="line">// operator, NULL, or the special binary operator GxB_IGNORE_DUP.</comment>
<comment type="line">// For a non-iso build, dup may be NULL, which indicates that duplicates are</comment>
<comment type="line">// not expected.  If any duplicates do appear, an error is reported.</comment>
<comment type="line">// If dup is GxB_IGNORE_DUP, then duplicates are discarded.  If (i,j,x1)</comment>
<comment type="line">// appears as the (k1)th tuple, and (i,j,x2) as the (k2)th tuple, and</comment>
<comment type="line">// k1 &lt; k2, then the first tuple is ignored and C(i,j) is equal to x2.</comment>

<comment type="line">// GxB_Matrix_build_Scalar and GxB_Vector_build_Scalar always build an iso</comment>
<comment type="line">// matrix:  X is iso, only the first entry X [0] is used, and dup does not</comment>
<comment type="line">// appear (it is passed here as GxB_IGNORE_DUP).  The matrix T is iso on</comment>
<comment type="line">// output.  For an iso build, duplicates are discarded.</comment>

<comment type="line">// For all of these cases, the tuples must be checked for duplicates.  They</comment>
<comment type="line">// might be sorted on input, so this condition is checked and exploited if that</comment>
<comment type="line">// condition is found.  All of these conditions are checked in GB_builder.</comment>

<comment type="line">// GB_build constructs a matrix C from a list of indices and values.  Any</comment>
<comment type="line">// duplicate entries with identical indices are assembled using the binary dup</comment>
<comment type="line">// operator provided on input, or discarded if dup is NULL or GxB_IGNORE_DUP.</comment>
<comment type="line">// All three types (x,y,z for z=dup(x,y)) must be identical.  The types of dup,</comment>
<comment type="line">// X, and C must all be compatible.</comment>

<comment type="line">// Duplicates are assembled using T(i,j) = dup (T (i,j), X (k)) into a</comment>
<comment type="line">// temporary matrix T that has the same type as the dup operator.  The</comment>
<comment type="line">// GraphBLAS spec requires dup to be associative so that entries can be</comment>
<comment type="line">// assembled in any order.  There is no way to check this condition if dup is a</comment>
<comment type="line">// user-defined operator.  It could be checked for built-in operators, but the</comment>
<comment type="line">// GraphBLAS spec does not require this condition to cause an error so that is</comment>
<comment type="line">// not done here.  If dup is not associative, the GraphBLAS spec states that</comment>
<comment type="line">// the results are not defined.</comment>

<comment type="line">// SuiteSparse:GraphBLAS provides a well-defined order of assembly, however.</comment>
<comment type="line">// For a CSC format, entries in [I,J,X] are first sorted in increasing order of</comment>
<comment type="line">// row and column index via a stable sort, with ties broken by the position of</comment>
<comment type="line">// the tuple in the [I,J,X] list.  If duplicates appear, they are assembled in</comment>
<comment type="line">// the order they appear in the [I,J,X] input.  That is, if the same indices i</comment>
<comment type="line">// and j appear in positions k1, k2, k3, and k4 in [I,J,X], where k1 &lt; k2 &lt; k3</comment>
<comment type="line">// &lt; k4, then the following operations will occur in order:</comment>

<comment type="line">//      T (i,j) = X (k1) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k2)) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k3)) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k4)) ;</comment>

<comment type="line">// This is a well-defined order but the user should not depend upon it since</comment>
<comment type="line">// the GraphBLAS spec does not require this ordering.  Results may differ in</comment>
<comment type="line">// different implementations of GraphBLAS.</comment>

<comment type="line">// However, with this well-defined order, the SECOND operator will result in</comment>
<comment type="line">// the last tuple overwriting the earlier ones.  This is relied upon internally</comment>
<comment type="line">// by GB_wait.</comment>

<comment type="line">// After the matrix T is assembled, it is typecasted into the type of C, the</comment>
<comment type="line">// final output matrix.  No typecasting is done during assembly of duplicates,</comment>
<comment type="line">// since mixing the two can break associativity and lead to unpredictable</comment>
<comment type="line">// results.  Note that this is not the case for GB_wait, which must typecast</comment>
<comment type="line">// each tuple into its output matrix in the same order they are seen in the</comment>
<comment type="line">// [I,J,X] pending tuples.</comment>

<comment type="line">// On input, C must not be NULL.  C-&gt;type, C-&gt;vlen, C-&gt;vdim and C-&gt;is_csc must</comment>
<comment type="line">// be valid on input and are unchanged on output.  C must not have any existing</comment>
<comment type="line">// entries on input (GrB_*_nvals (C) must return zero, per the specification).</comment>
<comment type="line">// However, all existing content in C is freed.</comment>

<comment type="line">// The list of numerical values is given by the void * X array and its type,</comment>
<comment type="line">// xtype.  The latter is defined by the actual C type of the X parameter in</comment>
<comment type="line">// the user-callable functions.  However, for user-defined types, there is no</comment>
<comment type="line">// way of knowing that the X array has the same type as dup or C, since in that</comment>
<comment type="line">// case X is just a void * pointer.  Behavior is undefined if the user breaks</comment>
<comment type="line">// this condition.</comment>

<comment type="line">// C is returned as hypersparse or non-hypersparse, depending on the number of</comment>
<comment type="line">// non-empty vectors of C.  If C has very few non-empty vectors, then it is</comment>
<comment type="line">// returned as hypersparse.  Only if the number of non-empty vectors is</comment>
<comment type="line">// Omega(nh) is C returned as non-hypersparse, which implies nvals is Omega(n),</comment>
<comment type="line">// where n = # of columns of C if CSC, or # of rows if CSR.  As a result, the</comment>
<comment type="line">// time taken by this function is just O(nvals*log(nvals)), regardless of what</comment>
<comment type="line">// format C is returned in.</comment>

<comment type="line">// The input arrays I, J, and X are not modified.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GrB_Matrix_free (&amp;T) ;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_build</name>               <comment type="line">// build matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// matrix to build</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// row indices of tuples</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// col indices of tuples (NULL for vector)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,              <comment type="line">// values, size 1 if iso</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nvals</name></decl></parameter>,      <comment type="line">// number of tuples</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>dup</name></decl></parameter>,     <comment type="line">// binary op to assemble duplicates (or NULL)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,       <comment type="line">// type of X array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_matrix</name></decl></parameter>,       <comment type="line">// true if C is a matrix, false if GrB_Vector</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>X_iso</name></decl></parameter>,           <comment type="line">// if true the C is iso and X has size 1 entry</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// check C</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// The matrix has existing entries.  This is required by the GraphBLAS</comment>
        <comment type="line">// API specification to generate an error, so the test is made here.</comment>
        <comment type="line">// However, any existing content is safely freed immediately below, so</comment>
        <comment type="line">// this test is not required, except to conform to the spec.  Zombies</comment>
        <comment type="line">// are excluded from this test.</comment>
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_OUTPUT_NOT_EMPTY</name></expr></argument>,
            <argument><expr><literal type="string">"Output already has %s"</literal></expr></argument>, <argument><expr><literal type="string">"existing entries"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check I</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>GrB_ALL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Row indices cannot be %s"</literal></expr></argument>, <argument><expr><literal type="string">"GrB_ALL"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check J</comment>
    <if_stmt><if>if <condition>(<expr><name>is_matrix</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>J</name> <operator>==</operator> <name>GrB_ALL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Column indices cannot be %s"</literal></expr></argument>,
                <argument><expr><literal type="string">"GrB_ALL"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// only G*B_Vector_build_* calls this function with J == NULL</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>J</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check X</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>==</operator> <name>GxB_RANGE</name> <operator>||</operator> <name>nvals</name> <operator>==</operator> <name>GxB_STRIDE</name> <operator>||</operator> <name>nvals</name> <operator>==</operator> <name>GxB_BACKWARDS</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"nvals cannot be %s"</literal></expr></argument>,
            <argument><expr><literal type="string">"GxB_RANGE, GxB_STRIDE, or GxB_BACKWARDS"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// problem too large</comment>
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Problem too large: nvals "</literal> <name>GBu</name>
            <literal type="string">" exceeds "</literal> <name>GBu</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>GB_NMAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C and X must be compatible</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>xtype</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Value(s) of type [%s] cannot be typecast to matrix of type"</literal>
            <literal type="string">" [%s]\n"</literal></expr></argument>, <argument><expr><name><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the dup operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>dup2</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>discard_duplicates</name> <init>= <expr><operator>(</operator><name>dup</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>dup</name> <operator>==</operator> <name>GxB_IGNORE_DUP</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>discard_duplicates</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// discard all duplicates</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>dup2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// "sum" up duplicates using the binary dup operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>dup2</name> <operator>=</operator> <name>dup</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GB_OP_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// dup operator cannot be a positional op</comment>
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>, <argument><expr><literal type="string">"Positional op z=%s(x,y) "</literal>
                <literal type="string">"not supported as dup op\n"</literal></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">"dup for assembling duplicates"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// check types of dup</comment>
        <if_stmt><if>if <condition>(<expr><name><name>dup</name><operator>-&gt;</operator><name>xtype</name></name> <operator>!=</operator> <name><name>dup</name><operator>-&gt;</operator><name>ztype</name></name> <operator>||</operator> <name><name>dup</name><operator>-&gt;</operator><name>ytype</name></name> <operator>!=</operator> <name><name>dup</name><operator>-&gt;</operator><name>ztype</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// all 3 types of z = dup (x,y) must be the same.  dup must also be</comment>
            <comment type="line">// associative but there is no way to check this in general.</comment>
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>, <argument><expr><literal type="string">"All domains of dup "</literal>
                <literal type="string">"operator for assembling duplicates must be identical.\n"</literal>
                <literal type="string">"operator is: [%s] = %s ([%s],[%s])"</literal></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
                <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// the type of C and dup must be compatible</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                <argument><expr><literal type="string">"Operator [%s] for assembling duplicates has type [%s],\n"</literal>
                <literal type="string">"cannot be typecast to entries in output of type [%s]"</literal></expr></argument>,
                <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>dup</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free all content of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// the type, dimensions, hyper_switch, bitmap_switch and sparsity control</comment>
    <comment type="line">// are still preserved in C.</comment>
    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build the matrix T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// T is always built as hypersparse.  Its type is the same as the z output</comment>
    <comment type="line">// of the z=dup(x,y) operator if dup is present, or xtype if dup is NULL.</comment>
    <comment type="line">// If C-&gt;type differs from T-&gt;type, it is typecasted by</comment>
    <comment type="line">// GB_transplant_conform.</comment>

    <comment type="line">// X must be treated as read-only, so GB_builder is not allowed to</comment>
    <comment type="line">// transplant it into T-&gt;x.</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>no_I_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>I_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>no_J_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>J_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>no_X_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>X_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ttype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>discard_duplicates</name><operator>)</operator></expr> ?</condition><then> <expr><name>xtype</name></expr> </then><else>: <expr><name><name>dup</name><operator>-&gt;</operator><name>ztype</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_builder</name> <argument_list>(
        <argument><expr><name>T</name></expr></argument>,              <comment type="line">// create T using a static header</comment>
        <argument><expr><name>ttype</name></expr></argument>,          <comment type="line">// the type of T</comment>
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>,        <comment type="line">// T-&gt;vlen = C-&gt;vlen</comment>
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>,        <comment type="line">// T-&gt;vdim = C-&gt;vdim</comment>
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>,      <comment type="line">// T has the same CSR/CSC format as C</comment>
        <argument><expr><operator>&amp;</operator><name>no_I_work</name></expr></argument>,     <comment type="line">// I_work_handle, not used here</comment>
        <argument><expr><operator>&amp;</operator><name>I_work_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>no_J_work</name></expr></argument>,     <comment type="line">// J_work_handle, not used here</comment>
        <argument><expr><operator>&amp;</operator><name>J_work_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>no_X_work</name></expr></argument>,     <comment type="line">// X_work_handle, not used here</comment>
        <argument><expr><operator>&amp;</operator><name>X_work_size</name></expr></argument>,
        <argument><expr><name>false</name></expr></argument>,          <comment type="line">// known_sorted: not yet known</comment>
        <argument><expr><name>false</name></expr></argument>,          <comment type="line">// known_no_duplicates: not yet known</comment>
        <argument><expr><literal type="number">0</literal></expr></argument>,              <comment type="line">// I_work, J_work, and X_work not used here</comment>
        <argument><expr><name>is_matrix</name></expr></argument>,      <comment type="line">// true if T is a GrB_Matrix</comment>
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>I</name></expr> </then><else>: <expr><name>J</name></expr></else></ternary><operator>)</operator></expr></argument>,  <comment type="line">// size nvals</comment>
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>J</name></expr> </then><else>: <expr><name>I</name></expr></else></ternary><operator>)</operator></expr></argument>,  <comment type="line">// size nvals, or NULL for vector</comment>
        <argument><expr><operator>(</operator><specifier>const</specifier> <name>GB_void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>,                <comment type="line">// values, size nvals or 1 if iso</comment>
        <argument><expr><name>X_iso</name></expr></argument>,          <comment type="line">// true if X is iso</comment>
        <argument><expr><name>nvals</name></expr></argument>,          <comment type="line">// number of tuples</comment>
        <argument><expr><name>dup2</name></expr></argument>,           <comment type="line">// operator to assemble duplicates (may be NULL)</comment>
        <argument><expr><name>xtype</name></expr></argument>,          <comment type="line">// type of the X array</comment>
        <argument><expr><name>true</name></expr></argument>,           <comment type="line">// burble is OK</comment>
        <argument><expr><name>Context</name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return an error if any duplicates found when they were not expected</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>tnvals</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dup</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>nvals</name> <operator>!=</operator> <name>tnvals</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// T has been successfully built by ignoring the duplicate values, via</comment>
        <comment type="line">// the implicit SECOND dup operator.  If the # of entries in T does not</comment>
        <comment type="line">// match nvals, then duplicates have been detected.  In the v2.0 C API,</comment>
        <comment type="line">// this is an error condition.  If the user application wants the C</comment>
        <comment type="line">// matrix returned with duplicates discarded, use dup = GxB_IGNORE_DUP</comment>
        <comment type="line">// instead. </comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>, <argument><expr><literal type="string">"Duplicates appear ("</literal> <name>GBd</name> <literal type="string">") but dup "</literal>
            <literal type="string">"is NULL"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name><operator>)</operator> <operator>-</operator> <name>tnvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if T is iso, for non-iso build</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// GxB_Matrix_build_Scalar and GxB_Vector_build_Scalar always build an iso</comment>
    <comment type="line">// matrix T, so this test is skipped (X_iso is true in that case).</comment>
    <comment type="line">// GrB_Matrix_build_[TYPE] and GrB_Vector_build_[TYPE] may have just</comment>
    <comment type="line">// created an iso-valued matrix T, but this is not yet known.  X_iso is</comment>
    <comment type="line">// false for these methods.  Since it has not yet been conformed to its</comment>
    <comment type="line">// final sparsity structure, the matrix T is hypersparse, not bitmap.  It</comment>
    <comment type="line">// has no zombies or pending tuples, so GB_iso_check does need to handle</comment>
    <comment type="line">// those cases.  T-&gt;x [0] is the new iso value of T.</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>X_iso</name> <operator>&amp;&amp;</operator> <call><name>GB_iso_check</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// All entries in T are the same; convert T to iso</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(post iso) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_iso</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transplant and typecast T into C, conform C, and free T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_transplant_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
