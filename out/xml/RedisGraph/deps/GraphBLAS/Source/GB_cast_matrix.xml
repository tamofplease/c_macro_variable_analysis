<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_cast_matrix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cast_matrix: copy or typecast the values from A into C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The values of C must already be allocated, of size large enough to hold</comment>
<comment type="line">// the values of A.  The pattern of C must match the pattern of A, but the</comment>
<comment type="line">// pattern is not accessed (except to compute GB_nnz_held (A)).</comment>

<comment type="line">// Note that A may contain zombies, or entries not in the bitmap pattern of A</comment>
<comment type="line">// if A is bitmap, and the values of these entries might be uninitialized</comment>
<comment type="line">// values in A-&gt;x.  All entries are typecasted or memcpy'ed from A-&gt;x to C-&gt;x,</comment>
<comment type="line">// including zombies, non-entries, and live entries alike.  valgrind may</comment>
<comment type="line">// complain about typecasting these uninitialized values, but these warnings</comment>
<comment type="line">// are false positives.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_cast_matrix</name>         <comment type="line">// copy or typecast the values from A into C</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>==</operator> <name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy or typecast from A into C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// copy A-&gt;x into C-&gt;x</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A iso, ctype == atype</comment>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// copy all the values, no typecast</comment>
            <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name> <operator>*</operator> <name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// typecast Ax into C-&gt;x</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Cx [0] = (ctype) Ax [0]</comment>
            <expr_stmt><expr><call><name>GB_iso_unop</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>GB_ISO_A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// typecast all the values from Ax to Cx</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>Cx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_cast_array</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>Ax</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
