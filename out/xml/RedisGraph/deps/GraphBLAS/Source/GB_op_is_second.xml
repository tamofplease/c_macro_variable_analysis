<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_op_is_second.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_op_is_second: return true if op is the SECOND operator of the right type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>bool</name></type> <name>GB_op_is_second</name>    <comment type="line">// return true if op is SECOND, of the right type</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// op is NULL, which is interpretted as the implied SECOND operator</comment>
        <comment type="line">// of the right type</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name> <operator>==</operator> <name>GB_SECOND_binop_code</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// op is the explict SECOND operator; check its type</comment>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// type is implicitly the right type</comment>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>type</name> <operator>&amp;&amp;</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>==</operator> <name>type</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// type is explicitly the right type</comment>
            <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// wrong opcode or wrong type</comment>
    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
