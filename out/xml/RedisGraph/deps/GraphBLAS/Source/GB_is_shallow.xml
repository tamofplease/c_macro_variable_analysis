<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_is_shallow.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_is_shallow: determine if a GrB_matrix has any shallow components</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>bool</name></type> <name>GB_is_shallow</name>              <comment type="line">// true if any component of A is shallow</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>                <comment type="line">// matrix to query</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// a NULL pointer is not shallow</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// check if any component of A is shallow</comment>
        <return>return <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>||</operator>
                <name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>||</operator>
                <call><name>GB_is_shallow</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
