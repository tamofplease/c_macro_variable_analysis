<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Pending_alloc.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Pending_alloc: allocate a list of pending tuples</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Pending.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_Pending_alloc</name>       <comment type="line">// create a list of pending tuples</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_Pending</name> <modifier>*</modifier></type><name>PHandle</name></decl></parameter>,    <comment type="line">// output</comment>
    <parameter><decl><type><name>bool</name></type> <name>iso</name></decl></parameter>,               <comment type="line">// if true, do not allocate Pending-&gt;x</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,          <comment type="line">// type of pending tuples</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,        <comment type="line">// operator for assembling pending tuples</comment>
    <parameter><decl><type><name>bool</name></type> <name>is_matrix</name></decl></parameter>,         <comment type="line">// true if Pending-&gt;j must be allocated</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nmax</name></decl></parameter>            <comment type="line">// # of pending tuples to hold</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>PHandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>PHandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the Pending header</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>Pending</name> <init>= <expr><call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_Pending_struct</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize the contents of the Pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>nmax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nmax</name></expr></argument>, <argument><expr><name>GB_PENDING_INIT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>                    <comment type="line">// no pending tuples yet</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name> <operator>=</operator> <name>nmax</name></expr> ;</expr_stmt>              <comment type="line">// initial size of list</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>sorted</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>            <comment type="line">// keep track if tuples are sorted</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr> ;</expr_stmt>              <comment type="line">// type of pending tuples</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>        <comment type="line">// size of pending tuple type</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iso</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>op</name></expr></else></ternary></expr> ;</expr_stmt>   <comment type="line">// pending operator (NULL is OK)</comment>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>j_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nmax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_matrix</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nmax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>j_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>iso</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nmax</name> <operator>*</operator> <name><name>Pending</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>,  <comment type="line">// x:OK</comment>
            <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name>
        <operator>||</operator> <operator>(</operator><operator>!</operator><name>iso</name> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><name>is_matrix</name> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_Pending_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Pending</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>PHandle</name><operator>)</operator> <operator>=</operator> <name>Pending</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
