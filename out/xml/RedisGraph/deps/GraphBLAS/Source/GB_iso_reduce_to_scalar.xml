<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_reduce_to_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_reduce_to_scalar: reduce an iso matrix to a scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_iso_reduce_to_scalar</name>        <comment type="line">// s = reduce (A) where A is iso</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>s</name></decl></parameter>,    <comment type="line">// output scalar of type reduce-&gt;op-&gt;ztype</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>reduce</name></decl></parameter>,      <comment type="line">// monoid to use for the reduction</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for iso_reduce_to_scalar"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>reduce</name></expr></argument>, <argument><expr><literal type="string">"monoid for iso_reduce_to_scalar"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get input matrix and the monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A consists of n entries, all equal to Ax [0]</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the monoid</comment>
    <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>freduce</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// a = (ztype) Ax [0]</comment>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>a</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>zcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce n entries, all equal to a, to the scalar s, in O(log(n)) time</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_iso_reduce_worker</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>freduce</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
