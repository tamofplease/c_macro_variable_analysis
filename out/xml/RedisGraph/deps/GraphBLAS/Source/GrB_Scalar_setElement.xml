<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Scalar_setElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Scalar_setElement: set an entry in a GrB_Scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Set a single scalar, s = x, typecasting from the type of x to</comment>
<comment type="line">// the type of s as needed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SET</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>,<parameter><type><name>ampersand</name></type></parameter>)</parameter_list></cpp:macro>                                            \
<cpp:value>GrB_Info GB_EVAL2 (GRB (Scalar_setElement_), T)    <comment type="block">/* s = x */</comment>              \
(                                                                           \
    GrB_Scalar s,                       <comment type="block">/* GrB_Scalar to modify       */</comment>    \
    type x                              <comment type="block">/* user scalar to assign to s */</comment>    \
)                                                                           \
{                                                                           \
    GB_WHERE (s, "GrB_Scalar_setElement_" GB_STR(T) " (w, x)") ;            \
    GB_RETURN_IF_NULL_OR_FAULTY (s) ;                                       \
    ASSERT (GB_SCALAR_OK (s)) ;                                             \
    return (GB_setElement ((GrB_Matrix) s, NULL, ampersand x, 0, 0,         \
        GB_ ## T ## _code, Context)) ;                                      \
}</cpp:value></cpp:define>

<macro><name>GB_SET</name> <argument_list>(<argument>bool</argument>      , <argument>BOOL</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>int8_t</argument>    , <argument>INT8</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>int16_t</argument>   , <argument>INT16</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>int32_t</argument>   , <argument>INT32</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>int64_t</argument>   , <argument>INT64</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>uint8_t</argument>   , <argument>UINT8</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>uint16_t</argument>  , <argument>UINT16</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>uint32_t</argument>  , <argument>UINT32</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>uint64_t</argument>  , <argument>UINT64</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>float</argument>     , <argument>FP32</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>double</argument>    , <argument>FP64</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_SET</name> <argument_list>(<argument>void *</argument>    , <argument>UDT</argument>    ,  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Scalar_setElement for complex types</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GXB_SET</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>,<parameter><type><name>ampersand</name></type></parameter>)</parameter_list></cpp:macro>                                           \
<cpp:value>GrB_Info GB_EVAL2 (GXB (Scalar_setElement_), T)    <comment type="block">/* s = x */</comment>              \
(                                                                           \
    GrB_Scalar s,                       <comment type="block">/* GrB_Scalar to modify       */</comment>    \
    type x                              <comment type="block">/* user scalar to assign to s */</comment>    \
)                                                                           \
{                                                                           \
    GB_WHERE (s, "GxB_Scalar_setElement_" GB_STR(T) " (w, x)") ;            \
    GB_RETURN_IF_NULL_OR_FAULTY (s) ;                                       \
    ASSERT (GB_SCALAR_OK (s)) ;                                             \
    return (GB_setElement ((GrB_Matrix) s, NULL, ampersand x, 0, 0,         \
        GB_ ## T ## _code, Context)) ;                                      \
}</cpp:value></cpp:define>

<macro><name>GXB_SET</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>FC32</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GXB_SET</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>FC64</argument>  , <argument>&amp;</argument>)</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Scalar_setElement: set an entry in a GrB_Scalar (historical)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_BOOL</name>   <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>bool</name></type>     <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_BOOL</name>   <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_INT8</name>   <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type>   <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_INT8</name>   <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_INT16</name>  <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type>  <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_INT16</name>  <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_INT32</name>  <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type>  <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_INT32</name>  <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_INT64</name>  <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type>  <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_INT64</name>  <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_UINT8</name>  <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type>  <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_UINT8</name>  <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_UINT16</name> <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_UINT16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_UINT32</name> <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_UINT32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_UINT64</name> <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_UINT64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_FP32</name>   <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>float</name></type>    <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_FP32</name>   <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_FP64</name>   <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>double</name></type>   <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_FP64</name>   <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
<function><type><name>GrB_Info</name></type> <name>GxB_Scalar_setElement_UDT</name>    <parameter_list>(<parameter><decl><type><name>GrB_Scalar</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>void</name>    <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><call><name>GrB_Scalar_setElement_UDT</name>    <argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return> </block_content>}</block></function>
</unit>
