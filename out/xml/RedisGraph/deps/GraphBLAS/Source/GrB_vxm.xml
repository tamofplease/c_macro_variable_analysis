<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_vxm.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_vxm: vector-matrix multiply</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// w'&lt;M'&gt; = accum (w',t) where t = u'*A or u'*A'</comment>

<comment type="line">// Rows w', u', and M' are simply columns w, u, and M.  Thus:</comment>
<comment type="line">// w&lt;M&gt; = accum (w,t) where t = A'*u or A*u, but with the multiply operator</comment>
<comment type="line">// flipped.  The input descriptor for A, inp1, is also negated.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_vxm</name>                    <comment type="line">// w'&lt;M&gt; = accum (w', u'*A)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name></type> <name>w</name></decl></parameter>,                   <comment type="line">// input/output vector for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for w, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for z=accum(w,t)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// defines '+' and '*' for matrix multiply</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Vector</name></type> <name>u</name></decl></parameter>,             <comment type="line">// first input:  vector u</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// second input: matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for w, M, and A</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="string">"GrB_vxm (w, M, accum, semiring, u, A, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_vxm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_in</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>A_transpose</name></expr></argument>, <argument><expr><name>AxB_method</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// w'&lt;M'&gt; = accum (w',u'*A) and variations, using the mxm kernel</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// w, M, and u are treated as column vectors and passed as n-by-1 matrices</comment>
    <comment type="line">// to GB_mxm A and u are swapped, and A_transpose is negated:</comment>
    <comment type="line">//      u'*A  == A'*u</comment>
    <comment type="line">//      u'*A' == A*u</comment>
    <comment type="line">// Since A and u are swapped, in all the matrix multiply kernels,</comment>
    <comment type="line">// the multiplier must be flipped, so flipxy is passed in as true.</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_mxm</name> <argument_list>(
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>w</name></expr></argument>,     <argument><expr><name>C_replace</name></expr></argument>,      <comment type="line">// w and its descriptor</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,          <comment type="line">// mask and its descriptor</comment>
        <argument><expr><name>accum</name></expr></argument>,                              <comment type="line">// for accum (w,t)</comment>
        <argument><expr><name>semiring</name></expr></argument>,                           <comment type="line">// definition of matrix multiply</comment>
        <argument><expr><name>A</name></expr></argument>,                  <argument><expr><operator>!</operator><name>A_transpose</name></expr></argument>,   <comment type="line">// allow A to be transposed</comment>
        <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>u</name></expr></argument>,     <argument><expr><name>false</name></expr></argument>,          <comment type="line">// u is never transposed</comment>
        <argument><expr><name>true</name></expr></argument>,                               <comment type="line">// fmult(y,x), flipxy = true</comment>
        <argument><expr><name>AxB_method</name></expr></argument>, <argument><expr><name>do_sort</name></expr></argument>,                <comment type="line">// algorithm selector</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
