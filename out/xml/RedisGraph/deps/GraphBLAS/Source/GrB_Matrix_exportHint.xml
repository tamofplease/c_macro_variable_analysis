<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_exportHint.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_exportHint: determine sizes of arrays for GrB_Matrix_export</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_exportHint</name>  <comment type="line">// suggest the best export format</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Format</name> <modifier>*</modifier></type><name>format</name></decl></parameter>,     <comment type="line">// export format</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>            <comment type="line">// matrix to export</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_exportHint (&amp;format, A)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_exportHint"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// finish any pending work since this can change the sparsity of A</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine format that requires the least amount of modification</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
    <block>{<block_content>
        <default>default:</default>
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <comment type="line">// CSR and CSC formats are supported by GraphBLAS, so if the matrix</comment>
            <comment type="line">// is sparse by-row or sparse by-column, then suggest CSR or CSC.</comment>
            <comment type="line">// The matrix can be exported with no change at all.</comment>
        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <comment type="line">// Bitmap is not supported as a GrB_Format.  It cannot be exported</comment>
            <comment type="line">// as full, in general, so select CSR or CSC.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>format</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>is_csc</name></expr> ?</condition><then> <expr><name>GrB_CSC_FORMAT</name></expr> </then><else>: <expr><name>GrB_CSR_FORMAT</name></expr></else></ternary></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <comment type="line">// Hypersparse is not supported as a GrB_Format.  Expanding a huge</comment>
            <comment type="line">// hypersparse matrix to sparse can be costly, so suggest COO.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>format</name><operator>)</operator> <operator>=</operator> <name>GrB_COO_FORMAT</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <comment type="line">// Full is not supported by GraphBLAS</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>format</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>is_csc</name></expr> ?</condition><then> <expr><name>GrB_CSC_FORMAT</name></expr> </then><else>: <expr><name>GrB_CSR_FORMAT</name></expr></else></ternary></expr> ;</expr_stmt>
            <comment type="line">// if full was supported by GraphBLAS;</comment>
<comment type="line">//          (*format) = is_csc ?  GrB_DENSE_COL_FORMAT : GrB_DENSE_ROW_FORMAT ; </comment>
            <break>break ;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
