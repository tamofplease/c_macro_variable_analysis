<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_code_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_code_check: print an entry using a type code</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Only prints entries of built-in types; user-defined types can't be printed.</comment>
<comment type="line">// Entries are always printed if this function is called</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRINT_INF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GBPR ((x &lt; 0) ? "-Inf" : "Inf")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRINT_FLOAT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                                           \
<cpp:value>{                                                                   \
    switch (fpclassify (s))                                         \
    {                                                               \
        case FP_NAN:      GBPR ("NaN") ; break ;                    \
        case FP_INFINITE: GB_PRINT_INF (s) ; break ;                \
        case FP_ZERO:     GBPR ("0") ; break ;                      \
        default:          GBPR ("%.6g", (double) s) ;               \
    }                                                               \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRINT_DOUBLE</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>pr_verbose</name></type></parameter>)</parameter_list></cpp:macro>                               \
<cpp:value>{                                                                   \
    switch (fpclassify (d))                                         \
    {                                                               \
        case FP_NAN:      GBPR ("NaN") ; break ;                    \
        case FP_INFINITE: GB_PRINT_INF (d) ; break ;                \
        case FP_ZERO:     GBPR ("0") ; break ;                      \
        default:                                                    \
            if (pr_verbose)                                         \
            {                                                       \
                <comment type="block">/* long format */</comment>                                   \
                GBPR ("%.15g", d) ;                                 \
            }                                                       \
            else                                                    \
            {                                                       \
                <comment type="block">/* short format */</comment>                                  \
                GBPR ("%.6g", d) ;                                  \
            }                                                       \
            break ;                                                 \
    }                                                               \
}</cpp:value></cpp:define>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_code_check</name>          <comment type="line">// print an entry using a type code</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code</name></decl></parameter>,    <comment type="line">// type code of value to print</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,              <comment type="line">// entry to print</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                     <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>                     <comment type="line">// file to print to</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>code</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>s</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_FC32_t</name></type> <name>c</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_FC64_t</name></type> <name>z</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pr_verbose</name> <init>= <expr><operator>(</operator><name>pr</name> <operator>==</operator> <name>GxB_SHORT_VERBOSE</name> <operator>||</operator> <name>pr</name> <operator>==</operator> <name>GxB_COMPLETE_VERBOSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>code</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name>     <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name>   <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name>  <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name>  <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name>  <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name>  <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBd</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  "</literal> <name>GBu</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> 
            <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_PRINT_FLOAT</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> 
            <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_PRINT_DOUBLE</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pr_verbose</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> 
            <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_PRINT_FLOAT</name> <argument_list>(<argument><expr><call><name>crealf</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>cimagf</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_PRINT_FLOAT</name> <argument_list>(<argument><expr><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_PRINT_FLOAT</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> 
            <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_PRINT_DOUBLE</name> <argument_list>(<argument><expr><call><name>creal</name> <argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pr_verbose</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>cimag</name> <argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">" - "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_PRINT_DOUBLE</name> <argument_list>(<argument><expr><operator>-</operator><name>d</name></expr></argument>, <argument><expr><name>pr_verbose</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">" + "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_PRINT_DOUBLE</name> <argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pr_verbose</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> 
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"[user-defined value]"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// FUTURE: GraphBLAS does not have a method for the user to</comment>
                <comment type="line">// register a print function for a user-defined type.</comment>
            </block_content>}</block>
            <break>break ;</break>
        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
