<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_06n.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_06n: C(I,J)&lt;M&gt; = A ; no S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 06n: C(I,J)&lt;M&gt; = A ; no S</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// C_replace:   false</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           matrix</comment>
<comment type="line">// S:           none (see also GB_subassign_06s)</comment>

<comment type="line">// FULL: if A and C are dense, then C remains dense.</comment>

<comment type="line">// If A is sparse and C dense, C will likely become sparse, except if M(i,j)=0</comment>
<comment type="line">// wherever A(i,j) is not present.  So if M==A is aliased and A is sparse, then</comment>
<comment type="line">// C remains dense.  Need C(I,J)&lt;A,struct&gt;=A kernel.  Then in that case, if C</comment>
<comment type="line">// is dense it remains dense, even if A is sparse.   If that change is made,</comment>
<comment type="line">// this kernel can start with converting C to sparse if A is sparse.</comment>

<comment type="line">// C is not bitmap: GB_bitmap_assign is used if C is bitmap.</comment>
<comment type="line">// M and A are not bitmap: 06s is used instead, if M or A are bitmap.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_06n</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Ikind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nJ</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>Jkind</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 06n is not used for M bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Method 06n is not used for A bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==A</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for 06n"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M input for 06n"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for 06n"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_EMPTY_TASKLIST</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>GB_GET_C</name></expr> ;</expr_stmt>      <comment type="line">// C must not be bitmap</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>zorig</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_hyper</name> <init>= <expr><operator>(</operator><name>Ch</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_GET_C_HYPER_HASH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_MASK</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_GET_A</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><operator>(</operator><name>Ah</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 06n: C(I,J)&lt;M&gt; = A ; no S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: O(nnz(M)*(log(a)+log(c)), where a and c are the # of entries in a</comment>
    <comment type="line">// vector of A and C, respectively.  The entries in the intersection of M</comment>
    <comment type="line">// (where the entries are true) and the matrix addition C(I,J)+A must be</comment>
    <comment type="line">// examined.  This method scans M, and searches for entries in A and C(I,J)</comment>
    <comment type="line">// using two binary searches.  If M is very dense, this method can be</comment>
    <comment type="line">// slower than Method 06s.  This method is selected if nnz (A) &gt;= nnz (M).</comment>

    <comment type="line">// Compare with Methods 05 and 07, which use a similar algorithmic outline</comment>
    <comment type="line">// and parallelization strategy.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: slice M into coarse/fine tasks (Method 05, 06n, 07)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_SUBASSIGN_ONE_SLICE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// M cannot be jumbled </comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 1: create zombies, update entries, and count pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE1</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of M</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_VECTOR</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get A(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ajdense</name> <init>= <expr><operator>(</operator><name>ajnz</name> <operator>==</operator> <name>Avlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>pA</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ajnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><name>cjnz</name> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; = A(:,j) ; no S</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>cjdense</name> <operator>&amp;&amp;</operator> <name>ajdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) and A(:,j) are both dense</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>GB_iC_DENSE_LOOKUP</name></expr> ;</expr_stmt>

                        <comment type="line">// find iA in A(:,j)</comment>
                        <comment type="line">// A(:,j) is dense; no need for binary search</comment>
                        <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pA_start</name> <operator>+</operator> <name>iA</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// ----[C A 1] or [X A 1]-----------------------</comment>
                        <comment type="line">// [C A 1]: action: ( =A ): copy A to C, no acc</comment>
                        <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                        <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>cjdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is dense, A(:,j) is sparse</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>GB_iC_DENSE_LOOKUP</name></expr> ;</expr_stmt>

                        <comment type="line">// find iA in A(:,j)</comment>
                        <decl_stmt><decl><type><name>bool</name></type> <name>aij_found</name></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>apright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>apright</name></expr></argument>, <argument><expr><name>aij_found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>aij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (iC,jC) is present but A (i,j) is not</comment>
                            <comment type="line">// ----[C . 1] or [X . 1]---------------------------</comment>
                            <comment type="line">// [C . 1]: action: ( delete ): becomes zombie</comment>
                            <comment type="line">// [X . 1]: action: ( X ): still zombie</comment>
                            <expr_stmt><expr><name>GB_DELETE_ENTRY</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): copy A to C, no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ajdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is sparse, A(:,j) is dense</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                        <comment type="line">// find C(iC,jC) in C(:,jC)</comment>
                        <expr_stmt><expr><name>GB_iC_BINARY_SEARCH</name></expr> ;</expr_stmt>

                        <comment type="line">// lookup iA in A(:,j)</comment>
                        <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pA_start</name> <operator>+</operator> <name>iA</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name>cij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): copy A into C, no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// C (iC,jC) is not present, A (i,j) is present</comment>
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) and A(:,j) are both sparse</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                        <comment type="line">// find C(iC,jC) in C(:,jC)</comment>
                        <expr_stmt><expr><name>GB_iC_BINARY_SEARCH</name></expr> ;</expr_stmt>

                        <comment type="line">// find iA in A(:,j)</comment>
                        <decl_stmt><decl><type><name>bool</name></type> <name>aij_found</name></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>apright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>apright</name></expr></argument>, <argument><expr><name>aij_found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name>cij_found</name> <operator>&amp;&amp;</operator> <name>aij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// ----[C A 1] or [X A 1]---------------------------</comment>
                            <comment type="line">// [C A 1]: action: ( =A ): copy A into C, no accum</comment>
                            <comment type="line">// [X A 1]: action: ( undelete ): zombie lives</comment>
                            <expr_stmt><expr><name>GB_noaccum_C_A_1_matrix</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><operator>!</operator><name>cij_found</name> <operator>&amp;&amp;</operator> <name>aij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (iC,jC) is not present, A (i,j) is present</comment>
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>task_pending</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>cij_found</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>aij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (iC,jC) is present but A (i,j) is not</comment>
                            <comment type="line">// ----[C . 1] or [X . 1]---------------------------</comment>
                            <comment type="line">// [C . 1]: action: ( delete ): becomes zombie</comment>
                            <comment type="line">// [X . 1]: action: ( X ): still zombie</comment>
                            <expr_stmt><expr><name>GB_DELETE_ENTRY</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE1_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase 2: insert pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_PENDING_CUMSUM</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>zorig</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:pending_sorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_TASK_DESCRIPTOR_PHASE2</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of M</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_GET_VECTOR</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get A(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ajdense</name> <init>= <expr><operator>(</operator><name>ajnz</name> <operator>==</operator> <name>Avlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>pA</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_LOOKUP_VECTOR_jC</name> <argument_list>(<argument><expr><name>fine_task</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>cjdense</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name><operator>)</operator> <operator>==</operator> <name>Cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(I,jC)&lt;M(:,j)&gt; = A(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cjdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,jC) is sparse; use binary search for C</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// update C(iC,jC), but only if M(iA,j) allows it</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                        <comment type="line">// find iA in A(:,j)</comment>
                        <if_stmt><if>if <condition>(<expr><name>ajdense</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// A(:,j) is dense; no need for binary search</comment>
                            <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pA_start</name> <operator>+</operator> <name>iA</name></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Avlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>iA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// A(:,j) is sparse; use binary search</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>apright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><name>bool</name></type> <name>aij_found</name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>apright</name></expr></argument>, <argument><expr><name>aij_found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>aij_found</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                        </block_content>}</block></else></if_stmt>

                        <comment type="line">// find C(iC,jC) in C(:,jC)</comment>
                        <expr_stmt><expr><name>GB_iC_BINARY_SEARCH</name></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cij_found</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (iC,jC) is not present, A (i,j) is present</comment>
                            <comment type="line">// ----[. A 1]--------------------------------------</comment>
                            <comment type="line">// [. A 1]: action: ( insert )</comment>
                            <expr_stmt><expr><name>GB_PENDING_INSERT_aij</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>GB_PHASE2_TASK_WRAPUP</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the matrix and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_SUBASSIGN_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
