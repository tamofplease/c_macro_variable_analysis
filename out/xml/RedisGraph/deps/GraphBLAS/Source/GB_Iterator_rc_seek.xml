<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Iterator_rc_seek.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Iterator_rc_seek: seek a row/col iterator to A(:,j) or to jth vector of A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Seek a row iterator to A(j,:), a col iterator to A(:,j).  If jth_vector is</comment>
<comment type="line">// true, seek to the jth vector instead.  For sparse, bitmap, or full matrices,</comment>
<comment type="line">// this is the same as A(j,:) for a row iterator or A(:,j) for a col iterator.</comment>
<comment type="line">// The jth_vector parameter only affects how hypersparse matrices are</comment>
<comment type="line">// traversed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Iterator_rc_seek</name>
<parameter_list>(
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>j</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>jth_vector</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if the iterator is exhausted</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>jth_vector</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr> </then><else>: <expr><name><name>iterator</name><operator>-&gt;</operator><name>avdim</name></name></expr></else></ternary><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// attach the iterator to A(:,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>A_sparsity</name></name></expr>)</condition>
    <block>{<block_content>
        <default>default:</default> 
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
        <block>{<block_content> 
            <comment type="line">// attach to A(:,j), which is also the jth vector of A</comment>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>jth_vector</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// attach to the jth vector of A; this is much faster than</comment>
                <comment type="line">// searching Ah for the value j, to attach to A(:,j)</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// find k so that j = Ah [k], or if not found, return k as the</comment>
                <comment type="line">// smallest value so that j &lt; Ah [k]. </comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>iterator</name><operator>-&gt;</operator><name>Ah</name></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="line">// If j is found, A(:,j) is the kth vector in the Ah hyperlist.</comment>
            <comment type="line">// If j is not found, the iterator is placed at the first vector</comment>
            <comment type="line">// after j in the hyperlist, if this vector exists.</comment>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the kth vector does not exist</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// the kth vector exists</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
        <block>{<block_content> 
            <comment type="line">// attach to A(:,j), which is also the jth vector of A</comment>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name>j</name> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_bitmap_next</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
        <block>{<block_content> 
            <comment type="line">// attach to A(:,j), which is also the jth vector of A</comment>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name>j</name> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block>
        <break>break ;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_NO_VALUE</name></expr> </then><else>: <expr><name>GrB_SUCCESS</name></expr></else></ternary><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
