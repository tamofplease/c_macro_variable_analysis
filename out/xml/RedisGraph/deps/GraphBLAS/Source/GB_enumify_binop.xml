<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_binop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_binop: convert binary opcode and xcode into a single enum</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// ecodes 0 to 31 can be used as a monoid, but only 0:22 are currently in use.</comment>
<comment type="line">// ecodes 32 and up are not valid for use in a monoid; only 32:139 are in use.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_binop</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ecode</name></decl></parameter>,         <comment type="line">// enumerated operator, range 0 to 139</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>,   <comment type="line">// opcode of GraphBLAS operator to convert into a macro</comment>
    <parameter><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl></parameter>, <comment type="line">// op-&gt;xtype-&gt;code of the operator</comment>
    <parameter><decl><type><name>bool</name></type> <name>for_semiring</name></decl></parameter>   <comment type="line">// true for A*B, false for A+B or A.*B</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// user-defined operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_USER_binop_code</name></expr> :</case>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// built-in ops that can be used in a monoid:</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_FIRST_binop_code</name></expr> :</case>  <comment type="line">// z = x, can be used as the ANY monoid</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_ANY_binop_code</name></expr> :</case>    <comment type="line">// z = y (same as SECOND)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_MIN_binop_code</name></expr> :</case>    <comment type="line">// z = min(x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">18</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x &amp;&amp; y</comment>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">3</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// fminf (x,y)</comment>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">4</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// fmin (x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">5</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_IMIN (x,y)</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr> :</case>    <comment type="line">// z = max(x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">17</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x || y</comment>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">6</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// fmaxf (x,y)</comment>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">7</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// fmax (x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">8</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_IMAX (x,y)</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr> :</case>   <comment type="line">// z = x + y</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">17</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x || y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">9</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_add(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_add(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">11</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x + y</comment>
            </block_content>}</block></switch>

            <break>break ;</break>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case>  <comment type="line">// z = x * y</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">18</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x &amp;&amp; y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">12</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_mul(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">13</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_mul(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">14</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x * y</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_EQ_binop_code</name></expr> :</case>     <comment type="line">// z = (x == y), the LXNOR monoid for bool</comment>

            <comment type="line">// only a monoid for bool (lxnor)</comment>
            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">15</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x == y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">32</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_eq (x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">33</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_eq (x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">15</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x == y, not a monoid</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_NE_binop_code</name></expr> :</case>     <comment type="line">// z = (x != y), the LXOR monoid for bool</comment>

            <comment type="line">// only a monoid for bool (lxor)</comment>
            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">36</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_ne (x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">37</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_ne (x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x || y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">17</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x || y</comment>
                <default>default            :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">40</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// not a monoid</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LAND_binop_code</name></expr> :</case>   <comment type="line">// z = (x &amp;&amp; y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">18</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x &amp;&amp; y</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">41</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// not a monoid</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LXOR_binop_code</name></expr> :</case>   <comment type="line">// z = (x != y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// not a monoid</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x | y), bitwise or</comment>

            <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>&gt;=</operator> <name>GB_INT8_code</name> <operator>&amp;&amp;</operator> <name>xcode</name> <operator>&lt;=</operator> <name>GB_UINT64_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">19</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_BAND_binop_code</name></expr> :</case>   <comment type="line">// z = (x &amp; y), bitwise and</comment>

            <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>&gt;=</operator> <name>GB_INT8_code</name> <operator>&amp;&amp;</operator> <name>xcode</name> <operator>&lt;=</operator> <name>GB_UINT64_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">20</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_BXOR_binop_code</name></expr> :</case>   <comment type="line">// z = (x ^ y), bitwise xor</comment>

            <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>&gt;=</operator> <name>GB_INT8_code</name> <operator>&amp;&amp;</operator> <name>xcode</name> <operator>&lt;=</operator> <name>GB_UINT64_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">21</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GB_BXNOR_binop_code</name></expr> :</case>  <comment type="line">// z = ~(x ^ y), bitwise xnor</comment>

            <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>&gt;=</operator> <name>GB_INT8_code</name> <operator>&amp;&amp;</operator> <name>xcode</name> <operator>&lt;=</operator> <name>GB_UINT64_code</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">22</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// built-in ops that cannot be used in a monoid:</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_SECOND_binop_code</name></expr> :</case> <comment type="line">// z = y (same as ANY, but not a monoid)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_ISEQ_binop_code</name></expr> :</case>   <comment type="line">// z = (x == y), but not a monoid</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">15</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x == y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">34</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_iseq(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">35</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_iseq(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">15</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x == y, not a monoid</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ISNE_binop_code</name></expr> :</case>   <comment type="line">// z = (x != y), but not a monoid</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">38</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_isne(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">39</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_isne(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MINUS_binop_code</name></expr> :</case>  <comment type="line">// z = x - y</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">43</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_minus(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">44</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_minus(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">45</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x - y</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_RMINUS_binop_code</name></expr> :</case> <comment type="line">// z = y - x</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x != y</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">46</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_minus(y,x)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">47</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_minus(y,x)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">48</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// y - x</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_DIV_binop_code</name></expr> :</case>    <comment type="line">// z = x / y ;</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">49</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int8 (x,y)</comment>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">50</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int16 (x,y)</comment>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">51</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int32 (x,y)</comment>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">52</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int64 (x,y)</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">53</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint8 (x,y)</comment>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">54</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint16 (x,y)</comment>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">55</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint32 (x,y)</comment>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">56</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint64 (x,y)</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">57</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_div(x,y)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">58</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_div(x,y)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">59</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// (x) / (y)</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_RDIV_binop_code</name></expr> :</case>   <comment type="line">// z = y / x ;</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// y</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">60</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int8 (y,x)</comment>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">61</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int16 (y,x)</comment>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">62</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int32 (y,x)</comment>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">63</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_int64 (y,x)</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">64</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint8 (y,x)</comment>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">65</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint16 (y,x)</comment>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">66</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint32 (y,x)</comment>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">67</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_idiv_uint64 (y,x)</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">68</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC32_div(y,x)</comment>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">69</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// GB_FC64_div(y,x)</comment>
                <default>default             :</default> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">70</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// (y) / (x)</comment>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_GT_binop_code</name></expr> :</case>
        <case>case <expr><name>GB_ISGT_binop_code</name></expr> :</case>   <comment type="line">// z = (x &gt; y)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">71</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_LT_binop_code</name></expr> :</case>
        <case>case <expr><name>GB_ISLT_binop_code</name></expr> :</case>   <comment type="line">// z = (x &lt; y)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">72</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_GE_binop_code</name></expr> :</case>
        <case>case <expr><name>GB_ISGE_binop_code</name></expr> :</case>   <comment type="line">// z = (x &gt;= y)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">73</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_LE_binop_code</name></expr> :</case>
        <case>case <expr><name>GB_ISLE_binop_code</name></expr> :</case>   <comment type="line">// z = (x &lt;= y)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">74</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_BGET_binop_code</name></expr> :</case>   <comment type="line">// z = bitget (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">75</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">76</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">77</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">78</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">79</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">80</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">81</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">82</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BSET_binop_code</name></expr> :</case>   <comment type="line">// z = bitset (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">83</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">84</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">85</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">86</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">87</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">88</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">89</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">90</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BCLR_binop_code</name></expr> :</case>   <comment type="line">// z = bitclr (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">91</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">92</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">93</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">94</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">95</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">96</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">97</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">98</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BSHIFT_binop_code</name></expr> :</case> <comment type="line">// z = bitshift (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">99</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">100</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">101</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">102</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">103</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">104</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">105</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">106</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_POW_binop_code</name></expr> :</case>    <comment type="line">// z = pow (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">71</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// x &gt;= y</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">107</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">108</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">109</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">110</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">111</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">112</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">113</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">114</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">115</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">116</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">117</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">118</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ATAN2_binop_code</name></expr> :</case>  <comment type="line">// z = atan2 (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">119</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">120</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_HYPOT_binop_code</name></expr> :</case>  <comment type="line">// z = hypot (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">121</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">122</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_FMOD_binop_code</name></expr> :</case>   <comment type="line">// z = fmod (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">123</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">124</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_REMAINDER_binop_code</name></expr> :</case>  <comment type="line">// z = remainder (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">125</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">126</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_COPYSIGN_binop_code</name></expr> :</case>   <comment type="line">// z = copysign (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">127</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">128</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LDEXP_binop_code</name></expr> :</case>  <comment type="line">// z = ldexp (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">129</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">130</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_CMPLX_binop_code</name></expr> :</case>  <comment type="line">// z = cmplx (x,y)</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">131</literal></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">132</literal></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_PAIR_binop_code</name></expr> :</case>   <comment type="line">// z = 1</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">133</literal></expr> ;</expr_stmt> <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// positional ops</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_FIRSTI_binop_code</name></expr> :</case>     <comment type="line">// z = i</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">134</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr> :</case>    <comment type="line">// z = i+1</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">137</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr> :</case>     <comment type="line">// z = for_semiring ? (k) : (j)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><name>for_semiring</name></expr> ?</condition><then> <expr><literal type="number">135</literal></expr> </then><else>: <expr><literal type="number">136</literal></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr> :</case>    <comment type="line">// z = for_semiring ? (k+1) : (j+1)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><name>for_semiring</name></expr> ?</condition><then> <expr><literal type="number">138</literal></expr> </then><else>: <expr><literal type="number">139</literal></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_SECONDI_binop_code</name></expr> :</case>    <comment type="line">// z = for_semiring ? (k) : (i)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><name>for_semiring</name></expr> ?</condition><then> <expr><literal type="number">135</literal></expr> </then><else>: <expr><literal type="number">134</literal></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case>   <comment type="line">// z = for_semiring ? (k+1) : (i+1)</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><name>for_semiring</name></expr> ?</condition><then> <expr><literal type="number">138</literal></expr> </then><else>: <expr><literal type="number">139</literal></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_SECONDJ_binop_code</name></expr> :</case>    <comment type="line">// z = j</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">136</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case>   <comment type="line">// z = j+1</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">139</literal></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GB_NOP_code</name></expr> :</case>              <comment type="line">// no operator for GB_wait</comment>

            <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">140</literal></expr> ;</expr_stmt> <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ecode</name><operator>)</operator> <operator>=</operator> <name>e</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
