<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_hyper_prune.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_hyper_prune: remove empty vectors from a hypersparse Ap, Ah list</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Removes empty vectors from a hypersparse list.  On input, *Ap and *Ah are</comment>
<comment type="line">// assumed to be NULL.  The input arrays Ap_old and Ah_old are not modified,</comment>
<comment type="line">// and thus can be shallow content from another matrix.  New hyperlists Ap and</comment>
<comment type="line">// Ah are allocated, for nvec vectors, all nonempty.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_hyper_prune</name>
<parameter_list>(
    <comment type="line">// output, not allocated on input:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Ap</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Ap_size</name></decl></parameter>,      <comment type="line">// size plen+1</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Ah</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Ah_size</name></decl></parameter>,      <comment type="line">// size plen</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_nvec</name></decl></parameter>,                <comment type="line">// # of vectors, all nonempty</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_plen</name></decl></parameter>,                <comment type="line">// size of Ap and Ah</comment>
    <comment type="line">// input, not modified</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Ap_old</name></decl></parameter>,          <comment type="line">// size nvec_old+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Ah_old</name></decl></parameter>,          <comment type="line">// size nvec_old</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nvec_old</name></decl></parameter>,         <comment type="line">// original number of vectors</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ap</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_Ah</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nvec</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ap_old</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ah_old</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nvec_old</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ah</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ah_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nvec</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>W_size</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ah_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>nvec_old</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>nvec_old</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count the # of nonempty vectors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec_old</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <comment type="line">// W [k] = 1 if the kth vector is nonempty; 0 if empty</comment>
        <expr_stmt><expr><name><name>W</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>Ap_old</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>Ap_old</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>nvec_old</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>plen</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>Ap</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>plen</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Ah</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>plen</name></expr></argument>  , <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Ah</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the Ap and Ah result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec_old</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>Ap_old</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>Ap_old</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>knew</name> <init>= <expr><name><name>W</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>Ap</name> <index>[<expr><name>knew</name></expr>]</index></name> <operator>=</operator> <name><name>Ap_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Ah</name> <index>[<expr><name>knew</name></expr>]</index></name> <operator>=</operator> <name><name>Ah_old</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>Ap</name> <index>[<expr><name>nvec</name></expr>]</index></name> <operator>=</operator> <name><name>Ap_old</name> <index>[<expr><name>nvec_old</name></expr>]</index></name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap</name><operator>)</operator> <operator>=</operator> <name>Ap</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ap_size</name><operator>)</operator> <operator>=</operator> <name>Ap_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ah</name><operator>)</operator> <operator>=</operator> <name>Ah</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Ah_size</name><operator>)</operator> <operator>=</operator> <name>Ah_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nvec</name><operator>)</operator> <operator>=</operator> <name>nvec</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_plen</name><operator>)</operator> <operator>=</operator> <name>plen</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
