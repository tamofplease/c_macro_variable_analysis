<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Type_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Type_check: check and print a built-in or user-defined type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// There are two character strings: name passed in from the caller, and</comment>
<comment type="line">// type-&gt;name.  The caller can use the name argument to print "the type of</comment>
<comment type="line">// matrix A:", for example.  The internal name is the C typedef with which the</comment>
<comment type="line">// GraphBLAS GrB_Type was created.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_Type_check</name>      <comment type="line">// check a GraphBLAS Type</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>,    <comment type="line">// GraphBLAS type to print and check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,       <comment type="line">// name of the type from the caller; optional</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                 <comment type="line">// print level</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>                 <comment type="line">// file for output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    GraphBLAS type: "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"NULL\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check object</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CHECK_MAGIC</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"bool"</literal></expr></argument>     )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"int8_t"</literal></expr></argument>   )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"uint8_t"</literal></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"int16_t"</literal></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"uint16_t"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"int32_t"</literal></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"uint32_t"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"int64_t"</literal></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"uint64_t"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"float"</literal></expr></argument>    )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>   )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"float complex"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GB_UDT_code</name></expr>    :</case> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"user-defined: [%s]"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <default>default             :</default> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"unknown type\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" size: %zu\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>type</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <call><name>GB_code_size</name> <argument_list>(<argument><expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    Type has an invalid size\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>defn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    %s\n"</literal></expr></argument>, <argument><expr><name><name>type</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
