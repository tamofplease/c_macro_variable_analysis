<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_boolean_rename.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_boolean_rename: rename a boolean opcode</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns the equivalent opcode when an operator's x and y arguments are</comment>
<comment type="line">// boolean.  15 of the 25 binary opcodes are redundant when applied to</comment>
<comment type="line">// boolean inputs, leaving 10 unique binary opcodes z=f(x,y) when all three</comment>
<comment type="line">// operands x,y,z are boolean.</comment>

<comment type="line">// Another 4 boolean operators are not considered here since they share</comment>
<comment type="line">// the same opcode:</comment>

<comment type="line">// GrB_LOR  == GxB_LOR_BOOL     GB_LOR_binop_code</comment>
<comment type="line">// GrB_LAND == GxB_LAND_BOOL    GB_LAND_binop_code</comment>
<comment type="line">// GrB_LXOR == GxB_LXOR_BOOL    GB_LXOR_binop_code</comment>
<comment type="line">// GrB_LXNOR == GxB_EQ_BOOL     GB_EQ_binop_code</comment>

<comment type="line">// Those 6 names are in GraphBLAS but the pairs of names are equivalent.</comment>

<comment type="line">// See discussion on Source/GB.h on boolean and integer division</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>GB_Opcode</name></type> <name>GB_boolean_rename</name>     <comment type="line">// renamed opcode</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>      <comment type="line">// binary opcode to rename</comment>
)</parameter_list>
<block>{<block_content>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// FIRST and DIV are the same for boolean:</comment>
        <case>case <expr><name>GB_DIV_binop_code</name></expr>     :</case>            <comment type="line">// z = x / y</comment>
            <return>return <expr><operator>(</operator><name>GB_FIRST_binop_code</name><operator>)</operator></expr> ;</return>      <comment type="line">// z = x</comment>

        <comment type="line">// SECOND and RDIV are the same for boolean:</comment>
        <case>case <expr><name>GB_RDIV_binop_code</name></expr>    :</case>            <comment type="line">// z = y / x</comment>
            <return>return <expr><operator>(</operator><name>GB_SECOND_binop_code</name><operator>)</operator></expr> ;</return>     <comment type="line">// z = y</comment>

        <comment type="line">// MIN, TIMES, and AND are the same for boolean:</comment>
        <case>case <expr><name>GB_MIN_binop_code</name></expr>     :</case>            <comment type="line">// z = min(x,y)</comment>
        <case>case <expr><name>GB_TIMES_binop_code</name></expr>   :</case>            <comment type="line">// z = x * y</comment>
            <return>return <expr><operator>(</operator><name>GB_LAND_binop_code</name><operator>)</operator></expr> ;</return>       <comment type="line">// z = x &amp;&amp; y</comment>

        <comment type="line">// MAX, PLUS, and OR are the same for boolean:</comment>
        <case>case <expr><name>GB_MAX_binop_code</name></expr>     :</case>            <comment type="line">// z = max(x,y)</comment>
        <case>case <expr><name>GB_PLUS_binop_code</name></expr>    :</case>            <comment type="line">// z = x + y</comment>
            <return>return <expr><operator>(</operator><name>GB_LOR_binop_code</name><operator>)</operator></expr> ;</return>        <comment type="line">// z = x || y</comment>

        <comment type="line">// ISNE, NE, MINUS, RMINUS, and XOR are the same for boolean:</comment>
        <case>case <expr><name>GB_MINUS_binop_code</name></expr>   :</case>            <comment type="line">// z = x - y</comment>
        <case>case <expr><name>GB_RMINUS_binop_code</name></expr>  :</case>            <comment type="line">// z = y - x</comment>
        <case>case <expr><name>GB_ISNE_binop_code</name></expr>    :</case>            <comment type="line">// z = (x != y)</comment>
        <case>case <expr><name>GB_NE_binop_code</name></expr>      :</case>            <comment type="line">// z = (x != y)</comment>
            <return>return <expr><operator>(</operator><name>GB_LXOR_binop_code</name><operator>)</operator></expr> ;</return>       <comment type="line">// z = (x != y)</comment>

        <comment type="line">// ISEQ, EQ are the same for boolean:</comment>
        <case>case <expr><name>GB_ISEQ_binop_code</name></expr>    :</case>            <comment type="line">// z = (x == y)</comment>
            <return>return <expr><operator>(</operator><name>GB_EQ_binop_code</name><operator>)</operator></expr> ;</return>

        <comment type="line">// ISGT, GT are the same for boolean:</comment>
        <case>case <expr><name>GB_ISGT_binop_code</name></expr>    :</case>            <comment type="line">// z = (x &gt; y)</comment>
            <return>return <expr><operator>(</operator><name>GB_GT_binop_code</name><operator>)</operator></expr> ;</return>

        <comment type="line">// ISLT, LT are the same for boolean:</comment>
        <case>case <expr><name>GB_ISLT_binop_code</name></expr>    :</case>            <comment type="line">// z = (x &lt; y)</comment>
            <return>return <expr><operator>(</operator><name>GB_LT_binop_code</name><operator>)</operator></expr> ;</return>

        <comment type="line">// POW, ISGE, GE are the same for boolean:</comment>
        <case>case <expr><name>GB_POW_binop_code</name></expr>     :</case>            <comment type="line">// z = (x to the y)</comment>
        <case>case <expr><name>GB_ISGE_binop_code</name></expr>    :</case>            <comment type="line">// z = (x &gt;= y)</comment>
            <return>return <expr><operator>(</operator><name>GB_GE_binop_code</name><operator>)</operator></expr> ;</return>

        <comment type="line">// ISLE, LE are the same for boolean:</comment>
        <case>case <expr><name>GB_ISLE_binop_code</name></expr>    :</case>            <comment type="line">// z = (x &lt;= y)</comment>
            <return>return <expr><operator>(</operator><name>GB_LE_binop_code</name><operator>)</operator></expr> ;</return>

        <comment type="line">// opcode not renamed</comment>
        <default>default :</default> 
            <return>return <expr><operator>(</operator><name>opcode</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
