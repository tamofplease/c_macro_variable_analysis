<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Semiring_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Semiring_new: create a new semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Semiring_new.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Semiring_new</name>            <comment type="line">// create a semiring</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,          <comment type="line">// semiring to create</comment>
    <parameter><decl><type><name>GrB_Monoid</name></type> <name>add</name></decl></parameter>,                 <comment type="line">// additive monoid of the semiring</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>multiply</name></decl></parameter>           <comment type="line">// multiply operator of the semiring</comment>
)</parameter_list>
<block>{<block_content>


<comment type="line">//  printf("inside GB_semiring_new\n");</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>semiring</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>add</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>multiply</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><literal type="string">"semiring-&gt;add"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>multiply</name></expr></argument>, <argument><expr><literal type="string">"semiring-&gt;multiply"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// z = multiply(x,y); type of z must match monoid z = add(z,z)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>multiply</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr>)</condition>
    <block>{<block_content>
<comment type="line">//      printf("z doesn't match monoid z\n");</comment>
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// initialize the semiring</comment>
    <expr_stmt><expr><name><name>semiring</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name> <operator>=</operator> <name>add</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name> <operator>=</operator> <name>multiply</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"new semiring"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
