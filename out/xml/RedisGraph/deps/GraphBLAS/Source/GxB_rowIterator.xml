<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_rowIterator.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_*: iterate over the rows of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_attach</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_kount</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_seekRow</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_kseek</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_nextRow</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_nextCol</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_getRowIndex</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GxB_rowIterator_getColIndex</name></cpp:undef>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_attach: attach a row iterator to a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the iterator must already exist, having been created by</comment>
<comment type="line">// GxB_Iterator_new.</comment>

<comment type="line">// GxB_rowIterator_attach attaches a row iterator to a matrix.  If the iterator</comment>
<comment type="line">// is already attached to a matrix, it is detached and then attached to the</comment>
<comment type="line">// given matrix A.</comment>

<comment type="line">// The following error conditions are returned:</comment>
<comment type="line">// GrB_NULL_POINTER:    if the iterator or A are NULL.</comment>
<comment type="line">// GrB_INVALID_OBJECT:  if the matrix A is invalid.</comment>
<comment type="line">// GrB_NOT_IMPLEMENTED: if the matrix A cannot be iterated by row.</comment>
<comment type="line">// GrB_OUT_OF_MEMORY:   if the method runs out of memory.</comment>

<comment type="line">// If successful, the row iterator is attached to the matrix, but not to any</comment>
<comment type="line">// specific row.  Use GxB_rowIterator_*seek* to move the iterator to a row.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_rowIterator_attach</name>
<parameter_list>(
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_kount: upper bound on the # of nonempty rows of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the row iterator must be attached to a matrix, but need not be at</comment>
<comment type="line">// any specific row; results are undefined if this condition is not met.</comment>

<comment type="line">// GxB_rowIterator_kount returns an upper bound on the # of non-empty rows of a</comment>
<comment type="line">// matrix.  A GraphBLAS library may always return this as simply nrows(A), but</comment>
<comment type="line">// in some libraries, it may be a value between the # of rows with at least one</comment>
<comment type="line">// entry, and nrows(A), inclusive.  Any value in this range is a valid return</comment>
<comment type="line">// value from this function.</comment>

<comment type="line">// For SuiteSparse:GraphBLAS: If A is m-by-n, and sparse, bitmap, or full, then</comment>
<comment type="line">// kount == m.  If A is hypersparse, kount is the # of vectors held in the data</comment>
<comment type="line">// structure for the matrix, some of which may be empty, and kount &lt;= m.</comment>

<function><type><name>GrB_Index</name></type> <name>GxB_rowIterator_kount</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_seekRow:  move a row iterator to a different row of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the row iterator must be attached to a matrix, but need not be at</comment>
<comment type="line">// any specific row; results are undefined if this condition is not met.</comment>

<comment type="line">// GxB_rowIterator_seekRow moves a row iterator to the first entry of A(row,:).</comment>
<comment type="line">// If A(row,:) has no entries, the iterator may move to the first entry of next</comment>
<comment type="line">// nonempty row i for some i &gt; row.  The row index can be determined by</comment>
<comment type="line">// GxB_rowIterator_getRowIndex.</comment>

<comment type="line">// For SuiteSparse:GraphBLAS: If the matrix is hypersparse, and the row</comment>
<comment type="line">// does not appear in the hyperlist, then the iterator is moved to the first</comment>
<comment type="line">// row after the given row that does appear in the hyperlist.  </comment>

<comment type="line">// The method is always successful; the following are conditions are returned:</comment>
<comment type="line">// GxB_EXHAUSTED:   if the row index is &gt;= nrows(A); the row iterator is</comment>
<comment type="line">//                  exhausted, but is still attached to the matrix.</comment>
<comment type="line">// GrB_NO_VALUE:    if the row index is valid but A(row,:) has no entries; the</comment>
<comment type="line">//                  row iterator is positioned at A(row,:).</comment>
<comment type="line">// GrB_SUCCESS:     if the row index is valid and A(row,:) has at least one</comment>
<comment type="line">//                  entry. The row iterator is positioned at A(row,:).</comment>
<comment type="line">//                  GxB_rowIterator_get* can be used to return the indices of</comment>
<comment type="line">//                  the first entry in A(row,:), and GxB_Iterator_get* can</comment>
<comment type="line">//                  return its value.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_rowIterator_seekRow</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>row</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_seek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_kseek:  move a row iterator to a different row of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the row iterator must be attached to a matrix, but need not be at</comment>
<comment type="line">// any specific row; results are undefined if this condition is not met.</comment>

<comment type="line">// GxB_rowIterator_kseek is identical to GxB_rowIterator_seekRow, except for</comment>
<comment type="line">// how the row index is specified.  The row is the kth non-empty row of A.</comment>
<comment type="line">// More precisely, k is in the range 0 to kount-1, where kount is the value</comment>
<comment type="line">// returned by GxB_rowIterator_kount.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_rowIterator_kseek</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>, <parameter><decl><type><name>GrB_Index</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_seek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_nextRow: move a row iterator to the next row of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the row iterator must already be attached to a matrix via a prior</comment>
<comment type="line">// call to GxB_rowIterator_attach, and the iterator must be at a specific row,</comment>
<comment type="line">// via a prior call to GxB_rowIterator_*seek* or GxB_rowIterator_nextRow;</comment>
<comment type="line">// results are undefined if this condition is not met.</comment>

<comment type="line">// If the the row iterator is currently at A(row,:), it is moved to A(row+1,:),</comment>
<comment type="line">// or to the first non-empty row after A(row,:), at the discretion of this</comment>
<comment type="line">// method.  That is, empty rows may be skipped.</comment>

<comment type="line">// The method is always successful, and the return conditions are identical to</comment>
<comment type="line">// the return conditions of GxB_rowIterator_seekRow.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_rowIterator_nextRow</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_knext</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_nextCol: move a row iterator to the next entry in A(row,:)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the row iterator must already be attached to a matrix via a prior</comment>
<comment type="line">// call to GxB_rowIterator_attach, and the iterator must be at a specific row,</comment>
<comment type="line">// via a prior call to GxB_rowIterator_*seek* or GxB_rowIterator_nextRow;</comment>
<comment type="line">// results are undefined if this condition is not met.</comment>

<comment type="line">// The method is always successful, and returns the following conditions:</comment>
<comment type="line">// GrB_NO_VALUE:    If the iterator is already exhausted, or if there is no</comment>
<comment type="line">//                  entry in the current A(row,;),</comment>
<comment type="line">// GrB_SUCCESS:     If the row iterator has been moved to the next entry in</comment>
<comment type="line">//                  A(row,:).</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_rowIterator_nextCol</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_inext</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_getRowIndex: get current row index of a row iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the iterator must be already successfully attached to matrix as a</comment>
<comment type="line">// row iterator; results are undefined if this condition is not met.</comment>

<comment type="line">// The method returns nrows(A) if the iterator is exhausted, or the current</comment>
<comment type="line">// row index otherwise.  There need not be any entry in the current row.</comment>
<comment type="line">// Zero is returned if the iterator is attached to the matrix but</comment>
<comment type="line">// GxB_rowIterator_*seek* has not been called, but this does not mean the</comment>
<comment type="line">// iterator is positioned at row zero.</comment>

<function><type><name>GrB_Index</name></type> <name>GxB_rowIterator_getRowIndex</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_getj</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_rowIterator_getColIndex: get current column index of a row iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the iterator must be already successfully attached to matrix as a</comment>
<comment type="line">// row iterator, and in addition, the row iterator must be positioned at a</comment>
<comment type="line">// valid entry present in the matrix.  That is, the last call to</comment>
<comment type="line">// GxB_rowIterator_*seek* or GxB_rowIterator_*next*, must have returned</comment>
<comment type="line">// GrB_SUCCESS.  Results are undefined if this condition is not met.</comment>

<function><type><name>GrB_Index</name></type> <name>GxB_rowIterator_getColIndex</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_rc_geti</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
