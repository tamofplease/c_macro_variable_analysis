<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_is_diagonal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_is_diagonal: check if A is a diagonal matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns true if A is a square diagonal matrix, with all diagonal entries</comment>
<comment type="line">// present.  All pending tuples are ignored.  Zombies are treated as entries.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_is_diagonal</name>             <comment type="line">// true if A is diagonal</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix to examine</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A check diag"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// trivial cases</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name>     <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ncols</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>ncols</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is rectangular</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// never treat bitmaps as diagonal</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is full, and is diagonal only if 1-by-1, but always return</comment>
        <comment type="line">// false so that GB_AxB_rowscale and GB_AxB_colscale are not used</comment>
        <comment type="line">// by GB_reduce_to_vector.</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name>  <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name>anz</name> <operator>||</operator> <name>n</name> <operator>!=</operator> <name>nvec</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A must have exactly n entries in n vectors.  A can be sparse or</comment>
        <comment type="line">// hypersparse.  If hypersparse, all vectors must be present, so</comment>
        <comment type="line">// Ap has size n+1 whether sparse or hypersparse.</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Break the work into lots of tasks so the early-exit can be exploited.</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// examine each vector of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>diagonal</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// check for early exit</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>diag</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>GB_ATOMIC_READ</name></type>
            <name>diag</name> <init>= <expr><name>diagonal</name></expr></init></decl> ;</decl_stmt>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>diag</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// check if vectors jstart:jend-1 are diagonal</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>diag</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>p</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A(:,j) must have exactly one entry</comment>
                <expr_stmt><expr><name>diag</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the single entry must be A(i,i)</comment>
                <expr_stmt><expr><name>diag</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// early exit: tell all other tasks to halt</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>diag</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>GB_ATOMIC_WRITE</name></type>
            <name>diagonal</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><operator>(</operator><name>bool</name><operator>)</operator> <name>diagonal</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
