<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Vector_diag.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Vector_diag: extract a diagonal from a matrix, as a vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>   \
<cpp:value>{                           \
    GB_Matrix_free (&amp;T) ;   \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_FREE_WORKSPACE ;     \
    GB_phybix_free (V) ;    \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_diag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Vector_diag</name>     <comment type="line">// extract a diagonal from a matrix, as a vector</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>V</name></decl></parameter>,                   <comment type="line">// output vector (as an n-by-1 matrix)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>k</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for GB_Vector_diag"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="string">"V input for GB_Vector_diag"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_VECTOR_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>             <comment type="line">// V is a vector on input</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <comment type="line">// A and V cannot be aliased</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// vectors cannot be hypersparse</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>vtype</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows</name> <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ncols</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>ncols</name> <operator>||</operator> <name>k</name> <operator>&lt;=</operator> <operator>-</operator><name>nrows</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// output vector V must have zero length</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if k is in range 0 to n-1, V must have length min (m,n-k)</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// if k is in range -1 to -m+1, V must have length min (m+k,n)</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nrows</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <name><name>V</name><operator>-&gt;</operator><name>vlen</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Input vector must have size "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><name>vtype</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>, <argument><expr><literal type="string">"Input matrix of type [%s] "</literal>
            <literal type="string">"cannot be typecast to output of type [%s]\n"</literal></expr></argument>,
            <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>vtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work in A and clear the output vector V</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the CSR/CSC format of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>csc</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// The kth diagonal of a CSC matrix is the same as the (-k)th diagonal</comment>
        <comment type="line">// of the CSR format, so if A is CSR, negate the value of k.  Then</comment>
        <comment type="line">// treat A as if it were CSC in the rest of this method.</comment>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><name>k</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the kth diagonal of A into the temporary hypersparse matrix T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_selector</name> <argument_list>(
        <argument><expr><name>T</name></expr></argument>,                      <comment type="line">// output matrix</comment>
        <argument><expr><name>GB_DIAG_selop_code</name></expr></argument>,     <comment type="line">// just use the DIAG opcode</comment>
        <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// do not use the GB_Operator</comment>
        <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// flipij is false</comment>
        <argument><expr><name>A</name></expr></argument>,                      <comment type="line">// input matrix</comment>
        <argument><expr><name>k</name></expr></argument>,                      <comment type="line">// ithunk = k</comment>
        <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no GrB_Scalar Thunk</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T = diag (A,k)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transplant the pattern of T into the sparse vector V</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>bitmap_switch</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <comment type="line">// existing header</comment>
        <argument><expr><name>vtype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_Ap_malloc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>,
        <argument><expr><name>GxB_NEVER_HYPER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>bitmap_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>       <comment type="line">// OK</comment>
    <if_stmt><if>if <condition>(<expr><name><name>V</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso diag) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>vnz</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>vnz</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// transplant T-&gt;i into V-&gt;i</comment>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// transplant T-&gt;h into V-&gt;i</comment>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transplant or typecast the values from T to V</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>vcode</name> <init>= <expr><name><name>vtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>vcode</name> <operator>==</operator> <name>acode</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// transplant T-&gt;x into V-&gt;x</comment>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// V-&gt;x = (vtype) T-&gt;x</comment>
        <comment type="line">// V is sparse so malloc is OK</comment>
        <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>vnz</name></expr></argument>, <argument><expr><name><name>vtype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>V</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GB_cast_matrix</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the vector V</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>jumbled</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vnz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace, conform V to its desired format, and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="string">"V before conform for GB_Vector_diag"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="string">"V output for GB_Vector_diag"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
