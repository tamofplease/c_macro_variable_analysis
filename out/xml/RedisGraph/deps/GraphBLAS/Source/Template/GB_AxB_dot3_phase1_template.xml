<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot3_phase1_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_phase1_template: analysis phase for dot3; C&lt;M&gt; = A'*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>fine_task</name> <init>= <expr><operator>(</operator><name>klast</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// a fine task operates on a slice of a single vector</comment>
            <expr_stmt><expr><name>klast</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of C and M</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_MASK_SPARSE_AND_STRUCTURAL</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <comment type="line">// M and C are sparse</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name>k</name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="line">// M and C are either both sparse or both hypersparse</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name>GB_GET_VECTOR</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_B_IS_HYPER</name></expr></cpp:if>
                <comment type="line">// B is hyper: find B(:,j) using the B-&gt;Y hyper hash</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>B_Yp</name></expr></argument>, <argument><expr><name>B_Yi</name></expr></argument>, <argument><expr><name>B_Yx</name></expr></argument>, <argument><expr><name>B_hash_bits</name></expr></argument>,
                    <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_B_IS_SPARSE</name></expr></cpp:elif>
                <comment type="line">// B is sparse</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <comment type="line">// B is bitmap or full</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bjnz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// estimate the work to compute each entry of C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// A decent estimate of the work to compute the dot product C(i,j)</comment>
            <comment type="line">// = A(:,i)'*B(:,j) is min (|A(:,i)|, |B(:,j)|) + 1.  This is a</comment>
            <comment type="line">// lower bound.  The actual work could require a binary search of</comment>
            <comment type="line">// either A(:,i) or B(:,j), or a merge of the two vectors.  Or it</comment>
            <comment type="line">// could require no work at all if all entries in A(:,i) appear</comment>
            <comment type="line">// before all entries in B(:,j), or visa versa.  No work is done if</comment>
            <comment type="line">// M(i,j)=0.</comment>

            <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// B(:,j) is empty, so C(:,j) is empty as well.  No work is to</comment>
                <comment type="line">// be done, but it still takes unit work to flag each C(:,j) as</comment>
                <comment type="line">// a zombie</comment>
                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Cwork</name> <index>[<expr><name>pM</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>work</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_MASK_SPARSE_AND_STRUCTURAL</name></expr></argument> )</argument_list></call></expr></cpp:if>
                    <comment type="line">// if M is structural, no need to check its values</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
                        <comment type="line">// A is hyper: find A(:,i) using the A-&gt;Y hyper hash</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>, <argument><expr><name>A_hash_bits</name></expr></argument>,
                            <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ainz</name></expr></argument>, <argument><expr><name>bjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_A_IS_SPARSE</name></expr></cpp:elif>
                        <comment type="line">// A is sparse</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>work</name> <operator>+=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ainz</name></expr></argument>, <argument><expr><name>bjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <comment type="line">// A is bitmap or full</comment>
                        <expr_stmt><expr><name>work</name> <operator>+=</operator> <name>bjnz</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>Cwork</name> <index>[<expr><name>pM</name></expr>]</index></name> <operator>=</operator> <name>work</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
