<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_dense_ewise3_noaccum_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_ewise3_noaccum_template: C = A+B where all 3 matrices are dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// any matrix may be aliased to any other (C==A, C==B, and/or A==B)</comment>
    <decl_stmt><decl><type><name>GB_ATYPE</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_BTYPE</name> <modifier>*</modifier></type><name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A+B where all 3 matrices are dense</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_CTYPE_IS_BTYPE</name></expr></cpp:if>

    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>B</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A+C where A and C are dense</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// C and B cannot be aliased if their types differ</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                <comment type="line">// aij = Ax [p]</comment>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// Cx [p] = aij+Cx [p]</comment>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else 
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_CTYPE_IS_ATYPE</name></expr></cpp:if>

    if <condition>(<expr><name>C</name> <operator>==</operator> <name>A</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = C+B where B and C are dense</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                   <comment type="line">// bij = Bx [p]</comment>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Cx [p] += bij</comment>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A+B where all 3 matrices are dense</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// note that A and B may still be aliased to each other</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <comment type="line">// aij = Ax [p]</comment>
            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <comment type="line">// bij = Bx [p]</comment>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// Cx [p] = aij + bij</comment>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
