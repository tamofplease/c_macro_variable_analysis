<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot3_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_template: C&lt;M&gt;=A'*B via dot products, where C is sparse/hyper</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C and M are both sparse or hyper, and C-&gt;h is a copy of M-&gt;h.</comment>
<comment type="line">// M is present, and not complemented.  It may be valued or structural.</comment>

<block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>tid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>TaskList</name> <index>[<expr><name>tid</name></expr>]</index></name><operator>.</operator><name>klast</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_first</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>tid</name></expr>]</index></name><operator>.</operator><name>pC</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_last</name>  <init>= <expr><name><name>TaskList</name> <index>[<expr><name>tid</name></expr>]</index></name><operator>.</operator><name>pC_end</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_nzombies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>     <comment type="line">// # of zombies found by this task</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get C(:,k) and M(:k)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_MASK_SPARSE_AND_STRUCTURAL</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <comment type="line">// M and C are sparse</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name>k</name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="line">// M and C are either both sparse or both hypersparse</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_end</name>   <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>kfirst</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// First vector for task; may only be partially owned.</comment>
                <expr_stmt><expr><name>pC_start</name> <operator>=</operator> <name>pC_first</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pC_end</name>   <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>pC_end</name></expr></argument>, <argument><expr><name>pC_last</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>klast</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// Last vector for task; may only be partially owned.</comment>
                <expr_stmt><expr><name>pC_end</name>   <operator>=</operator> <name>pC_last</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// task completely owns this vector C(:,k).</comment>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_B_IS_HYPER</name></expr></cpp:if>
                <comment type="line">// B is hyper: find B(:,j) using the B-&gt;Y hyper hash</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>B_Yp</name></expr></argument>, <argument><expr><name>B_Yi</name></expr></argument>, <argument><expr><name>B_Yx</name></expr></argument>, <argument><expr><name>B_hash_bits</name></expr></argument>,
                    <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_B_IS_SPARSE</name></expr></cpp:elif>
                <comment type="line">// B is sparse</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <comment type="line">// B is bitmap or full</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GB_B_IS_SPARSE</name> <operator>||</operator> <name>GB_B_IS_HYPER</name><operator>)</operator></expr></cpp:if>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bjnz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// no work to do if B(:,j) is empty, except for zombies</comment>
                    <expr_stmt><expr><name>task_nzombies</name> <operator>+=</operator> <operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC_start</name><operator>)</operator></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) is a zombie</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                    <continue>continue ;</continue>
                </block_content>}</block></if></if_stmt>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>GB_A_IS_SPARSE</name> <operator>||</operator> <name>GB_A_IS_HYPER</name><operator>)</operator></expr></cpp:if>
                    <comment type="line">// Both A and B are sparse; get first and last in B(:,j)</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ib_first</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB_start</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ib_last</name>  <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j)&lt;M(:,j)&gt; = A(:,i)'*B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get C(i,j) and M(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>bool</name></type> <name>cij_exists</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_CIJ_DECLARE</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// get the value of M(i,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_MASK_SPARSE_AND_STRUCTURAL</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <comment type="line">// if M is structural, no need to check its values</comment>
                <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pC</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// the mask allows C(i,j) to be computed</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
                    <comment type="line">// A is hyper: find A(:,i) using the A-&gt;Y hyper hash</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>A_Yp</name></expr></argument>, <argument><expr><name>A_Yi</name></expr></argument>, <argument><expr><name>A_Yx</name></expr></argument>, <argument><expr><name>A_hash_bits</name></expr></argument>,
                        <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_A_IS_SPARSE</name></expr></cpp:elif>
                    <comment type="line">// A is sparse</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <comment type="line">// A is bitmap or full</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt></block_content></block></if></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(:,i)'*B(:,j)</comment>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot_cij.c"</cpp:file></cpp:include>
                    </block_content>}</block>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>GB_CIJ_EXISTS</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C(i,j) is a zombie</comment>
                    <expr_stmt><expr><name>task_nzombies</name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nzombies</name> <operator>+=</operator> <name>task_nzombies</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_SPARSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_HYPER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_BITMAP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_FULL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_SPARSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_HYPER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_BITMAP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_FULL</name></cpp:undef>

</unit>
