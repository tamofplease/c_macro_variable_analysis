<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_assign_C_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_C_template: iterate over a bitmap matrix C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The #include'ing file defines a GB_CIJ_WORK macro for the body of the loop,</comment>
<comment type="line">// which operates on the entry C(iC,jC) at position Cx [pC] and Cb [pC].  The C</comment>
<comment type="line">// matrix held in bitmap form.  If the mask matrix is also a bitmap matrix or</comment>
<comment type="line">// full matrix, the GB_GET_MIJ macro can compute the effective value of the</comment>
<comment type="line">// mask for the C(iC,jC) entry.</comment>

<comment type="line">// C must be bitmap or full.  If M is accessed, it must also be bitmap or full.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_GET_MIJ</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_MIJ</name><parameter_list>(<parameter><type><name>mij</name></type></parameter>,<parameter><type><name>pM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>
    <switch>switch <condition>(<expr><name>assign_kind</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// row assignment: C&lt;M'&gt;(iC,:), M is a column vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_ROW_ASSIGN</name></expr> :</case> 
        <block>{<block_content>
            <comment type="line">// iterate over all of C(iC,:)</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>iC</name> <init>= <expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>jC_start</name></decl>, <decl><type ref="prev"/><name>jC_end</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jC_start</name></expr></argument>, <argument><expr><name>jC_end</name></expr></argument>, <argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><name>jC_start</name></expr></init></decl> ;</init> <condition><expr><name>jC</name> <operator>&lt;</operator> <name>jC_end</name></expr> ;</condition> <incr><expr><name>jC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>iC</name> <operator>+</operator> <name>jC</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>mij</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// mij = Mask (jC)</comment>
                    <expr_stmt><expr><call><name>GB_CIJ_WORK</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <comment type="line">// operate on C(iC,jC)</comment>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// column assignment: C&lt;M&gt;(:,jC), M is a column vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <case>case <expr><name>GB_COL_ASSIGN</name></expr> :</case> 
        <block>{<block_content>
            <comment type="line">// iterate over all of C(:,jC)</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>jC</name> <init>= <expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC0</name> <init>= <expr><name>jC</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC_start</name></decl>, <decl><type ref="prev"/><name>iC_end</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>iC_start</name></expr></argument>, <argument><expr><name>iC_end</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><name>iC_start</name></expr></init></decl> ;</init> <condition><expr><name>iC</name> <operator>&lt;</operator> <name>iC_end</name></expr> ;</condition> <incr><expr><name>iC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>iC</name> <operator>+</operator> <name>pC0</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>mij</name></expr></argument>, <argument><expr><name>iC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// mij = Mask (iC)</comment>
                    <expr_stmt><expr><call><name>GB_CIJ_WORK</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <comment type="line">// operate on C(iC,jC)</comment>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GrB_assign: C&lt;M&gt;(I,J), M is a matrix the same size as C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ASSIGN_CASE</name></cpp:ifndef>
        <case>case <expr><name>GB_ASSIGN</name></expr> :</case> 
        <block>{<block_content>
            <comment type="line">// iterate over all of C(:,:).</comment>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_C_whole_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// GxB_subassign: C(I,J)&lt;M&gt;, M is a matrix the same size as C(I,J)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_SUBASSIGN_CASE</name></cpp:ifndef>
        <case>case <expr><name>GB_SUBASSIGN</name></expr> :</case> 
        <block>{<block_content>
            <comment type="line">// iterate over all of C(I,J)</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_IXJ_WORK</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IXJ_WORK</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                                      \
            <cpp:value>{                                                               \
                GB_GET_MIJ (mij, pA) ;          <comment type="block">/* mij = Mask (pA)      */</comment>  \
                GB_CIJ_WORK (pC) ;              <comment type="block">/* operate on C(iC,jC)  */</comment>  \
            }</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_IxJ_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_ASSIGN_CASE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_SUBASSIGN_CASE</name></cpp:undef>
</unit>
