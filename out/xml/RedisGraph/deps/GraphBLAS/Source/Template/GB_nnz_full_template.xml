<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_nnz_full_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_nnz_full_template.c: number of entries in a full matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>int64_t</name></type> <name>GB_nnz_full</name>      <comment type="line">// return nnz(A) or INT64_MAX if integer overflow</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anz</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anz</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>anz</name><operator>)</operator></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
