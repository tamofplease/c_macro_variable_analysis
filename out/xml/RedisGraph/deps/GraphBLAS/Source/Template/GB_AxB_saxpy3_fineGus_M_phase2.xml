<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_fineGus_M_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_fineGus_M_phase2: C&lt;M&gt;=A*B, fine Gustavson, phase2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: fine Gustavson task, C(:,j)&lt;M(:,j)&gt;=A*B(:,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Hf [i] is 0 if M(i,j) not present or M(i,j)=0.</comment>
    <comment type="line">// 0 -&gt; 1 : has already been done in phase0 if M(i,j)=1.</comment>

    <comment type="line">// 0 -&gt; 0 : to ignore, if M(i,j)=0</comment>
    <comment type="line">// 1 -&gt; 3 : to lock, if i seen for first time</comment>
    <comment type="line">// 2 -&gt; 3 : to lock, if i seen already</comment>
    <comment type="line">// 3 -&gt; 2 : to unlock; now i has been seen</comment>

    <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>                <comment type="line">// get M(:,j)</comment>
    <expr_stmt><expr><call><name>GB_GET_M_j_RANGE</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// get first and last in M(:,j)</comment>
    <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
    <block>{<block_content> 
        <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index k of B(k,j)</comment>
        <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
        <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>               <comment type="line">// bkj = B(k,j)</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(i,j) += A(i,k)*B(k,j) ; with the ANY monoid</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IKJ</name></cpp:macro>                                              \
                <cpp:value>int8_t f ;                                              \
                GB_ATOMIC_READ                                          \
                f = Hf [i] ;                <comment type="block">/* grab the entry */</comment>        \
                if (f == 0 || f == 2) continue ;                        \
                GB_ATOMIC_WRITE                                         \
                Hf [i] = 2 ;                <comment type="block">/* unlock the entry */</comment>      \
                GB_MULT_A_ik_B_kj ;         <comment type="block">/* t = A(i,k) * B(k,j) */</comment>   \
                GB_ATOMIC_WRITE_HX (i, t) ;</cpp:value></cpp:define> <comment type="block">/* Hx [i] = t */</comment>

        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(i,j) += A(i,k)*B(k,j) ; all other monoids</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IKJ</name></cpp:macro>                                              \
            <cpp:value>{                                                           \
                GB_MULT_A_ik_B_kj ;     <comment type="block">/* t = A(i,k) * B(k,j) */</comment>       \
                int8_t f ;                                              \
                GB_ATOMIC_READ                                          \
                f = Hf [i] ;            <comment type="block">/* grab the entry */</comment>            \
                if (GB_HAS_ATOMIC &amp;&amp; (f == 2))                          \
                {                                                       \
                    <comment type="block">/* C(i,j) already seen; update it */</comment>                \
                    GB_ATOMIC_UPDATE_HX (i, t) ;    <comment type="block">/* Hx [i] += t */</comment>   \
                    continue ;       <comment type="block">/* C(i,j) has been updated */</comment>      \
                }                                                       \
                if (f == 0) continue ; <comment type="block">/* M(i,j)=0; ignore C(i,j) */</comment>    \
                do  <comment type="block">/* lock the entry */</comment>                                \
                {                                                       \
                    <comment type="block">/* do this atomically: */</comment>                           \
                    <comment type="block">/* { f = Hf [i] ; Hf [i] = 3 ; } */</comment>                 \
                    GB_ATOMIC_CAPTURE_INT8 (f, Hf [i], 3) ;             \
                } while (f == 3) ; <comment type="block">/* lock owner gets f=1 or 2 */</comment>       \
                if (f == 1)                                             \
                {                                                       \
                    <comment type="block">/* C(i,j) is a new entry */</comment>                         \
                    GB_ATOMIC_WRITE_HX (i, t) ;     <comment type="block">/* Hx [i] = t */</comment>    \
                }                                                       \
                else <comment type="block">/* f == 2 */</comment>                                       \
                {                                                       \
                    <comment type="block">/* C(i,j) already appears in C(:,j) */</comment>              \
                    GB_ATOMIC_UPDATE_HX (i, t) ;    <comment type="block">/* Hx [i] += t */</comment>   \
                }                                                       \
                GB_ATOMIC_WRITE                                         \
                Hf [i] = 2 ;                <comment type="block">/* unlock the entry */</comment>      \
            }</cpp:value></cpp:define>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>GB_SCAN_M_j_OR_A_k</name> <argument_list>(<argument><expr><name>A_ok_for_binary_search</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_IKJ</name></cpp:undef>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
