<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_dense_subassign_23_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_subassign_23_template: C += B where C is dense; B is sparse or dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += B when C is dense and B is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                 <comment type="line">// bij = B(i,j)</comment>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// C(i,j) += bij</comment>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>B_ek_slicing</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += B when both C and B are dense</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                 <comment type="line">// bij = B(i,j)</comment>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// C(i,j) += bij</comment>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += B when C is dense and B is sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvlen</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>B_jumbled</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>jumbled</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Bslice</name> <init>= <expr><name>B_ek_slicing</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Bslice</name>  <init>= <expr><name>kfirst_Bslice</name> <operator>+</operator> <name>B_ntasks</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Bslice</name> <init>= <expr><name>klast_Bslice</name> <operator>+</operator> <name>B_ntasks</name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>B_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">// if kfirst &gt; klast then taskid does no work at all</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Bslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Bslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,kfirst:klast) += B(:,kfirst:klast)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// find the part of B(:,k) and C(:,k) for this task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>my_pB_start</name></decl>, <decl><type ref="prev"/><name>my_pB_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>my_pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>my_pB_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                    <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Bslice</name></expr></argument>, <argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>bvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>bjdense</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pB_end</name> <operator>-</operator> <name>pB_start</name><operator>)</operator> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

                <comment type="line">// pC points to the start of C(:,j) if C is dense</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(:,j) += B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <if_stmt><if>if <condition>(<expr><name>bjdense</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>B_jumbled</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// both C(:,j) and B(:,j) are dense</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></macro>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>my_pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>my_pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>pB</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// bij = B(i,j)</comment>
                        <comment type="line">// C(i,j) += bij</comment>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C(:,j) is dense; B(:,j) is sparse </comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></macro>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>my_pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>my_pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// bij = B(i,j)</comment>
                        <comment type="line">// C(i,j) += bij</comment>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
