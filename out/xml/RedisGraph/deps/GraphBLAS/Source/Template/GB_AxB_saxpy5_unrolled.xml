<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy5_unrolled.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy5_unrolled.c: C+=A*B when C is full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is as-if-full.</comment>
<comment type="line">// A is full and not iso-valued nor pattern-only</comment>
<comment type="line">// B is sparse or hypersparse.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>m</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>     <comment type="line">// # of rows of C and A</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_B_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// define the vectors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// GB_CIJ_MULTADD:  C(i,j) += A(i,k) * B(k,j)</comment>
    <comment type="line">// the semiring is not positional (or A would be pattern-only), so the</comment>
    <comment type="line">// i, k, j values are not needed</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CIJ_MULTADD</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>aik</name></type></parameter>,<parameter><type><name>bkj</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>GB_MULTADD (cij, aik, bkj, ignore, ignore, ignore) ;</cpp:value></cpp:define>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name></expr></cpp:if>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v16</name> ;</typedef>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v16u</name> ;</typedef>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v8</name> ;</typedef>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v8u</name> ;</typedef>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v4</name> ;</typedef>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v4u</name> ;</typedef>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v2</name> ;</typedef>
    <typedef>typedef <type><name>GB_CTYPE</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><call><name>vector_size</name> <argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>,</operator> <call><name>aligned</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list> <name>v2u</name> ;</typedef>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C += A*B where A is full (and not iso or pattern-only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator> <operator>(</operator> <name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name> <operator>)</operator></expr></cpp:if>
        <comment type="line">// get workspace</comment>
        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name><name>cx</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="line">// get the task descriptor</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>jB_start</name> <init>= <expr><name><name>B_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>jB_end</name>   <init>= <expr><name><name>B_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <comment type="line">// C(:,jB_start:jB_end-1) += A * B(:,jB_start:jB_end-1)</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>jB</name> <init>= <expr><name>jB_start</name></expr></init></decl> ;</init> <condition><expr><name>jB</name> <operator>&lt;</operator> <name>jB_end</name></expr> ;</condition> <incr><expr><name>jB</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// get B(:,j) and C(:,j)</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>jB</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxj</name> <init>= <expr><name>Cx</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>jB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name>   <init>= <expr><name><name>Bp</name> <index>[<expr><name>jB</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) += A*B(:,j), on sets of 16 rows of C and A at a time</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name> <operator>-</operator> <literal type="number">15</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// get C(i:i+15,j)</comment>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name></expr></cpp:if>
                <decl_stmt><decl><type><name>v16</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v16u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V8</name></expr></cpp:elif>
                <decl_stmt><decl><type><name>v8</name></type>  <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>v8</name></type>  <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                <decl_stmt><decl><type><name>v4</name></type>  <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>v4</name></type>  <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>v4</name></type>  <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>v4</name></type>  <name>c4</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxj</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <comment type="line">// get A(i,0)</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axi</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// bkj = B(k,j)</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// get A(i,k)</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axi</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C(i:i+15,j) += A(i:i+15,k)*B(k,j)</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v16u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V8</name></expr></cpp:elif>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
                <comment type="line">// save C(i:i+15,j)</comment>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name></expr></cpp:if>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v16u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V8</name></expr></cpp:elif>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name>    <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name>  <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxj</name> <operator>+</operator> <name>i</name> <operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c4</name></expr> ;</expr_stmt>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxj</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></for>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(m-N:m-1,j) += A(m-N:m-1,j)*B(:,j) for last 0 to 15 rows</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>m</name> <operator>&amp;</operator> <literal type="number">15</literal></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-15:m-1,j) += A(m-15:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">15</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-15:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">15</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c4</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c5</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-15,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">15</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-15,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-15:m-1,j) += A(m-15:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c5</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-15:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c4</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name>c5</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-14:m-1,j) += A(m-14:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">14</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-14:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">14</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c4</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-14,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">14</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-14,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-14:m-1,j) += A(m-14:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-14:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator> <literal type="number">12</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c4</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-13:m-1,j) += A(m-13:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">13</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-13:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">13</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c4</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-13,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">13</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-13,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-13:m-1,j) += A(m-13:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-13:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name>c4</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-12:m-1,j) += A(m-12:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">12</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-12:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-12,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-12,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-12:m-1,j) += A(m-12:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-12:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-11:m-1,j) += A(m-11:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">11</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-11:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">11</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c4</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-11,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">11</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-11,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-11:m-1,j) += A(m-11:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-11:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name>c4</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">11</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-10:m-1,j) += A(m-10:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">10</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-10:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c3</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-10,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-10,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-10:m-1,j) += A(m-10:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-10:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-9:m-1,j) += A(m-9:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">9</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-9:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c3</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-9,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-9,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-9:m-1,j) += A(m-9:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-9:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-8:m-1,j) += A(m-8:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">8</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-8:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v8</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-8,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-8,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-8:m-1,j) += A(m-8:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-8:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v8u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_V4</name></expr></cpp:elif>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-7:m-1,j) += A(m-7:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">7</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-7:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c3</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-7,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-7,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-7:m-1,j) += A(m-7:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-7:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>c3</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-6:m-1,j) += A(m-6:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">6</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-6:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">6</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c2</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-6,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">6</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-6,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-6:m-1,j) += A(m-6:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-6:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name>     <operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name> <operator>+</operator>  <literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-5:m-1,j) += A(m-5:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">5</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-5:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c2</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-5,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">5</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-5,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-5:m-1,j) += A(m-5:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>ax</name>    <operator>)</operator><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-5:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-4:m-1,j) += A(m-4:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">4</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-4:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v4</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-4,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-4,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-4:m-1,j) += A(m-4:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <name>ax</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-4:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v4u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-3:m-1,j) += A(m-3:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">3</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-3:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c2</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-3,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-3,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-3:m-1,j) += A(m-3:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <name>ax</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-3:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>c2</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-2:m-1,j) += A(m-2:m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">2</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-2:m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <decl_stmt><decl><type><name>v2</name></type> <name>c1</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>Cxm</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <comment type="line">// get A(m-2,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-2,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-2:m-1,j) += A(m-2:m-1,k)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <name>ax</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ax</name> <index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-2:m-1,j)</comment>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_V16</name> <operator>||</operator> <name>GB_V8</name> <operator>||</operator> <name>GB_V4</name></expr></cpp:if>
                        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>v2u</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>Cxm</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cxm</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GB_CTYPE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <break>break ;</break>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(m-1,j) += A(m-1,j)*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <case>case <expr><literal type="number">1</literal></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// load C(m-1,j)</comment>
                        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cxm</name> <init>= <expr><name>Cxj</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name>c1</name> <init>= <expr><name><name>Cxm</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// get A(m-1,0)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Axm</name> <init>= <expr><name>Ax</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// bkj = B(k,j)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bkj</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// get A(m-1,k)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ax</name> <init>= <expr><name>Axm</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>*</operator> <name>m</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C(m-1,j) += A(m-1,k)*B(k,j)</comment>
                            <expr_stmt><expr><call><name>GB_CIJ_MULTADD</name> <argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name><name>ax</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bkj</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                        <comment type="line">// save C(m-1,j)</comment>
                        <expr_stmt><expr><name><name>Cxm</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c1</name></expr> ;</expr_stmt>
                    </block_content>}</block>
                    <break>break ;</break>

                <default>default:</default>
                    <break>break ;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_V16</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_V8</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_V4</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_CIJ_MULTADD</name></cpp:undef>

</unit>
