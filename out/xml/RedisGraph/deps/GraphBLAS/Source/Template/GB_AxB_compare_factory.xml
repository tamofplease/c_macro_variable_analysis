<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_compare_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_compare_factory.c: switch factory for C=A*B with comparator ops</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A template file #include'd in GB_AxB_factory.c, which calls 50 or 55</comment>
<comment type="line">// semirings, with 5 monoids (lor, land, eq, lxor, any) and 10 or 11 types (the</comment>
<comment type="line">// 10 real, non-boolean times, plus boolean).</comment>

<comment type="line">// The multiply operator is a comparator: EQ, NE, GT, LT, GE, LE.</comment>
<comment type="line">// z=f(x,y): x and x are either boolean or non-boolean.  z is boolean.</comment>

<comment type="line">// Since z is boolean, the only monoids available are OR, AND, XOR, EQ, and</comment>
<comment type="line">// ANY.  All the other four (max==plus==or, min==times==and) are redundant.</comment>
<comment type="line">// Those opcodes have been renamed, and handled by the OR and AND workers</comment>
<comment type="line">// defined here.</comment>

<comment type="line">// There is one special case to consider.  For boolean x, y, and z, the</comment>
<comment type="line">// function z=NE(x,y) is the same as z=XOR(x,y).  If z is boolean, the multiply</comment>
<comment type="line">// operator NE has already been renamed XOR by GB_AxB_semiring_builtin, and</comment>
<comment type="line">// thus NE will never use the boolean case, below.  Thus it is removed with the</comment>
<comment type="line">// #ifndef GB_NO_BOOLEAN, resulting in 50 semirings for the NE muliply</comment>
<comment type="line">// operator.</comment>

<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<block>{<block_content>

    <comment type="line">// C = A*B where C is boolean, but A and B are non-boolean.</comment>
    <comment type="line">// The result of the compare(A,B) operation is boolean.</comment>
    <comment type="line">// There are 4 monoids available: OR, AND, XOR, EQ</comment>

    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GB_LOR_binop_code</name></expr>     :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LAND_binop_code</name></expr>    :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types, plus boolean</comment>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LXOR_binop_code</name></expr>    :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_EQ_binop_code</name></expr>    :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ANY_MONOID</name></cpp:ifndef>
        <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MNAME</name></cpp:undef>

</unit>
