<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_assign_A_whole_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_A_whole_template: traverse A for bitmap assignment into C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This template traverses over all the entries of the matrix A and operates on</comment>
<comment type="line">// the corresponding entry in C(i,j), using the GB_AIJ_WORK macro.  A can be</comment>
<comment type="line">// hypersparse or sparse, not bitmap or full.  It is not a scalar.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// matrix assignment: slice the entries of A for each task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_ntasks</name></decl>, <decl><type ref="prev"/><name>A_nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// traverse of the entries of the matrix A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// if kfirst &gt; klast then task tid does no work at all</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// traverse over A (:,kfirst:klast)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// find the part of A(:,k) for this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// traverse over A(:,j), the kth vector of A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC0</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>      <comment type="line">// first entry in C(:,j)</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pC0</name></expr></init></decl> ;</decl_stmt>
                <comment type="line">// operate on C(i,j) at pC, and A(i,j) at pA.  The mask</comment>
                <comment type="line">// can be accessed at pC if M is bitmap or full.  A has any</comment>
                <comment type="line">// sparsity format so only A(i,j) can be accessed at pA.</comment>
                <expr_stmt><expr><call><name>GB_AIJ_WORK</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
