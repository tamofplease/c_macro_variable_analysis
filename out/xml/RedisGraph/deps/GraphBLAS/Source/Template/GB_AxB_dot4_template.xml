<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot4_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot4_template:  C+=A'*B via dot products, where C is full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C+=A'*B where C is full and computed in-place.  The monoid of the semiring</comment>
<comment type="line">// matches the accum operator, and the type of C matches the ztype of accum.</comment>

<comment type="line">// The PAIR and FIRSTJ multiplicative operators are important special cases.</comment>

<comment type="line">// The matrix C is the user input matrix.  C is not iso on output, but might</comment>
<comment type="line">// iso on input, in which case the input iso scalar is cinput, and C-&gt;x has</comment>
<comment type="line">// been expanded to non-iso, and initialized if A and/or B are hypersparse.</comment>
<comment type="line">// A and/or B can be iso.</comment>

<comment type="line">// MIN_FIRSTJ or MIN_FIRSTJ1 semirings:</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></cpp:macro> <cpp:value>(GB_IS_IMIN_MONOID &amp;&amp; GB_IS_FIRSTJ_MULTIPLIER)</cpp:value></cpp:define>
<comment type="line">// MAX_FIRSTJ or MAX_FIRSTJ1 semirings:</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></cpp:macro> <cpp:value>(GB_IS_IMAX_MONOID &amp;&amp; GB_IS_FIRSTJ_MULTIPLIER)</cpp:value></cpp:define>
<comment type="line">// GB_OFFSET is 1 for the MIN/MAX_FIRSTJ1 semirings, and 0 otherwise.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"dot4 is not used for the ANY monoid"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET4C</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET4C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cij = (C_in_iso) ? cinput : Cx [p]</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>GB_A_IS_BITMAP</name> <operator>||</operator> <name>GB_A_IS_FULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GB_B_IS_BITMAP</name> <operator>||</operator> <name>GB_B_IS_FULL</name> <operator>)</operator><operator>)</operator></expr></cpp:if>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C += A'*B where A and B are both bitmap/full</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE: This method is not particularly efficient when both A and B are</comment>
    <comment type="line">// bitmap/full.  A better method would use tiles to reduce memory traffic.</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_tid</name> <init>= <expr><name>tid</name> <operator>/</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_tid</name> <init>= <expr><name>tid</name> <operator>%</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_start</name> <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_end</name>   <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kB_start</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j) and C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) += A'*B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get A(:,i)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// C(i,j) is at Cx [pC]</comment>
                <function_decl><type><name>GB_CTYPE</name></type> <name>GB_GET4C</name> <parameter_list>(<parameter><decl><type><name>cij</name></type></decl></parameter>, <parameter><decl><type><name>pC</name></type></decl></parameter>)</parameter_list> ;</function_decl>   <comment type="line">// cij = Cx [pC]</comment>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(i,j) += A (:,i)*B(:,j): a single dot product</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</decl_stmt>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_FULL</name> <operator>&amp;&amp;</operator> <name>GB_B_IS_FULL</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// both A and B are full</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_PAIR_MULTIPLIER</name></expr></cpp:if>
                    <block>{<block_content> 
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_EQ_MONOID</name></expr></cpp:if>
                        <comment type="line">// EQ_PAIR semiring</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>cij</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>GB_CTYPE_BITS</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:elif>
                        <comment type="line">// PLUS, XOR monoids: A(:,i)'*B(:,j) is nnz(A(:,i)),</comment>
                        <comment type="line">// for bool, 8-bit, 16-bit, or 32-bit integer</comment>
                        <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>cij</name><operator>)</operator> <operator>+</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <name>GB_CTYPE_BITS</name><operator>)</operator></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC32_MONOID</name></expr></cpp:elif>
                        <comment type="line">// PLUS monoid for float complex</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLXF</name> <argument_list>(<argument><expr><call><name>crealf</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>vlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC64_MONOID</name></expr></cpp:elif>
                        <comment type="line">// PLUS monoid for double complex</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><call><name>creal</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>vlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <comment type="line">// PLUS monoid for float, double, or 64-bit integers </comment>
                        <expr_stmt><expr><name>cij</name> <operator>+=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <name>vlen</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry</comment>
                        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry</comment>
                        <if_stmt><if>if <condition>(<expr><name>vlen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>vlen</name><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_FULL</name> <operator>&amp;&amp;</operator> <name>GB_B_IS_BITMAP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// A is full and B is bitmap</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry in B(:,j)</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry in B(:,j)</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>vlen</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_BITMAP</name> <operator>&amp;&amp;</operator> <name>GB_B_IS_FULL</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// A is bitmap and B is full</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry in A(:,i)</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry in A(:,i)</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>vlen</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_BITMAP</name> <operator>&amp;&amp;</operator> <name>GB_B_IS_BITMAP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// both A and B are bitmap</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>vlen</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// save C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cij</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><operator>(</operator><name>GB_A_IS_SPARSE</name> <operator>||</operator> <name>GB_A_IS_HYPER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GB_B_IS_BITMAP</name> <operator>||</operator> <name>GB_B_IS_FULL</name> <operator>)</operator><operator>)</operator></expr></cpp:elif>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C += A'*B when A is sparse/hyper and B is bitmap/full</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// special cases: these methods are very fast, but cannot do not need</comment>
    <comment type="line">// to be unrolled.</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_SPECIAL_CASE_OR_TERMINAL</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SPECIAL_CASE_OR_TERMINAL</name></cpp:macro> \
       <cpp:value>(   GB_IS_PAIR_MULTIPLIER        <comment type="block">/* the multiply op is PAIR */</comment>       \
        || GB_IS_MIN_FIRSTJ_SEMIRING    <comment type="block">/* min_firstj semiring */</comment>           \
        || GB_IS_MAX_FIRSTJ_SEMIRING    <comment type="block">/* max_firstj semiring */</comment>           \
        || GB_MONOID_IS_TERMINAL        <comment type="block">/* monoid has a terminal value */</comment>   \
        || GB_B_IS_PATTERN )</cpp:value></cpp:define>            <comment type="block">/* B is pattern-only */</comment>

    <comment type="line">// Transpose B and unroll the innermost loop if this condition holds: A</comment>
    <comment type="line">// must be sparse, B must be full, and no special semirings or operators</comment>
    <comment type="line">// can be used.  The monoid must not be terminal.  These conditions are</comment>
    <comment type="line">// known at compile time.</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_UNROLL</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_UNROLL</name></cpp:macro> \
        <cpp:value>( GB_A_IS_SPARSE &amp;&amp; GB_B_IS_FULL &amp;&amp; !( GB_SPECIAL_CASE_OR_TERMINAL ) )</cpp:value></cpp:define>

    <comment type="line">// If GB_UNROLL is true at compile-time, the simpler variant can still be</comment>
    <comment type="line">// used, without unrolling, for any of these conditions:  (1) A is very</comment>
    <comment type="line">// sparse (fewer entries than the size of the W workspace) or (2) B is iso.</comment>

    <comment type="line">// The unrolled method does not allow B to be iso or pattern-only (such as</comment>
    <comment type="line">// for the FIRST multiplicative operator.  If B is iso or pattern-only, the</comment>
    <comment type="line">// dense matrix G = B' would be a single scalar, or its values would not be</comment>
    <comment type="line">// accessed at all, so there is no benefit to computing G.</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_UNROLL</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>wp</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bvdim</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>bvdim</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>&lt;</operator> <name>wp</name> <operator>*</operator> <name>vlen</name> <operator>||</operator> <name>B_iso</name></expr>)</condition>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += A'*B without workspace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get the task descriptor</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C+=A'*B where A is sparse/hyper and B is bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>bvdim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C += A'*B where C is a single vector</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pC_start</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pB</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// get A(:,i)</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA</name></expr></init></decl> ;</decl_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C(i) += A(:,i)'*B(:,0)</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot4_cij.c"</cpp:file></cpp:include>
                </block_content>}</block></for>
                <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pC_start</name></cpp:undef>
                <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>pB</name></cpp:undef>
                <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>j</name></cpp:undef>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C += A'*B where C is a matrix</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// get A(:,i)</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA</name></expr></init></decl> ;</decl_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C(i,:) += A(:,i)'*B</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bvdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get B(:,j) and C(:,j)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// C(i,j) += A(:,i)'*B(:,j)</comment>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot4_cij.c"</cpp:file></cpp:include>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_UNROLL</name></expr></cpp:if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C += A'*B: with workspace W for transposing B, one panel at a time</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>size_t</name></type> <name>W_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>bvdim</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>wp</name> <operator>*</operator> <name>vlen</name></expr></argument>, <argument><expr><name>GB_BTYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j1</name> <operator>&lt;</operator> <name>bvdim</name></expr> ;</condition> <incr><expr><name>j1</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j1:j2-1) += A * B (:,j1:j2-1) for a single panel</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j2</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>j1</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>bvdim</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>j2</name> <operator>-</operator> <name>j1</name></expr>)</condition>
            <block>{<block_content>

                <default>default :</default>
                <case>case <expr><literal type="number">1</literal></expr> :</case>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C(:,j1:j2-1) is a single vector; use B(:,j1) in place</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>G</name> <init>= <expr><name>Bx</name> <operator>+</operator> <name>j1</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get the task descriptor</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <comment type="line">// get A(:,i)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// cx [0] = C(i,j1)</comment>
                            <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j1</name><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// cx [0] += A (:,i)'*G</comment>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <comment type="line">// aki = A(k,i)</comment>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aki</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <comment type="line">// cx [0] += A(k,i)*G(k,0)</comment>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                            <comment type="line">// C(i,j1) = cx [0]</comment>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <name>j1</name><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><literal type="number">2</literal></expr> :</case>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// G = B(:,j1:j1+1) and convert to row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>G</name> <init>= <expr><name>W</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// G (k,0:1) = B (k,j1:j1+1)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k2</name> <init>= <expr><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k2</name></expr>    ]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name>    <operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                    </block_content>}</block></for>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C += A'*G where G is vlen-by-2 in row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get the task descriptor</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <comment type="line">// get A(:,i)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// cx [0:1] = C(i,j1:j1+1)</comment>
                            <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// cx [0:1] += A (:,i)'*G</comment>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <comment type="line">// aki = A(k,i)</comment>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aki</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k2</name> <init>= <expr><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// cx [0:1] += A(k,i)*G(k,0:1)</comment>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k2</name></expr>]</index></name></expr></argument>,   <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                            <comment type="line">// C(i,j1:j1+1) = cx [0:1]</comment>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><literal type="number">3</literal></expr> :</case>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// G = B(:,j1:j1+2) and convert to row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>G</name> <init>= <expr><name>W</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// G (k,0:2) = B (k,j1:j1+2)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k3</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k3</name></expr>    ]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name>    <operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k3</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k3</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                    </block_content>}</block></for>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C += A'*G where G is vlen-by-3 in row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get the task descriptor</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <comment type="line">// get A(:,i)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// cx [0:2] = C(i,j1:j1+2)</comment>
                            <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name><name>cx</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// cx [0:2] += A (:,i)'*G</comment>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <comment type="line">// aki = A(k,i)</comment>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aki</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k3</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">3</literal></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// cx [0:2] += A(k,i)*G(k,0:2)</comment>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k3</name></expr>  ]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k3</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k3</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                            <comment type="line">// C(i,j1:j1+2) = cx [0:2]</comment>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <break>break ;</break>

                <case>case <expr><literal type="number">4</literal></expr> :</case>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// G = B(:,j1:j1+3) and convert to row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>G</name> <init>= <expr><name>W</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// G (k,0:3) = B (k,j1:j1+3)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k4</name> <init>= <expr><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k4</name></expr>    ]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name>    <operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k4</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k4</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>G</name> <index>[<expr><name>k4</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>Bx</name> <index>[<expr><name>k</name> <operator>+</operator> <operator>(</operator><name>j1</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>vlen</name></expr>]</index></name></expr> ;</expr_stmt>
                    </block_content>}</block></for>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C += A'*G where G is vlen-by-4 in row-form</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get the task descriptor</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <comment type="line">// get A(:,i)</comment>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// cx [0:3] = C(i,j1:j1+3)</comment>
                            <decl_stmt><decl><type><name>GB_CTYPE</name></type> <name><name>cx</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_GET4C</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// cx [0:3] += A (:,i)'*G</comment>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <comment type="line">// aki = A(k,i)</comment>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aki</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k4</name> <init>= <expr><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// cx [0:3] += A(k,i)*G(k,0:3)</comment>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k4</name></expr>  ]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k4</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k4</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_MULTADD</name> <argument_list>(<argument><expr><name><name>cx</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aki</name></expr></argument>, <argument><expr><name><name>G</name> <index>[<expr><name>k4</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j1</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                            <comment type="line">// C(i,j1:j1+3) = cx [0:3]</comment>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name>  <operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>i</name> <operator>+</operator> <operator>(</operator><name>j1</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>cvlen</name></expr>]</index></name> <operator>=</operator> <name><name>cx</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <break>break ;</break>
            </block_content>}</block></switch>
        </block_content>}</block></for>

        <comment type="line">// free workspace</comment>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>(</operator><name>GB_A_IS_BITMAP</name> <operator>||</operator> <name>GB_A_IS_FULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GB_B_IS_SPARSE</name> <operator>||</operator> <name>GB_B_IS_HYPER</name><operator>)</operator><operator>)</operator></expr></cpp:elif>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C += A'*B where A is bitmap/full and B is sparse/hyper</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE: this can be unrolled, like the case above</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_start</name> <init>= <expr><name><name>B_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_end</name>   <init>= <expr><name><name>B_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name>kB_start</name></expr></init></decl> ;</init> <condition><expr><name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>kB</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j) and C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_B_IS_HYPER</name></expr></cpp:if>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name>kB</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bjnz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) += A'*B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get A(:,i)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// C(i,j) is at Cx [pC]</comment>
                <function_decl><type><name>GB_CTYPE</name></type> <name>GB_GET4C</name> <parameter_list>(<parameter><decl><type><name>cij</name></type></decl></parameter>, <parameter><decl><type><name>pC</name></type></decl></parameter>)</parameter_list> ;</function_decl>   <comment type="line">// cij = Cx [pC]</comment>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(i,j) += A (:,i)*B(:,j): a single dot product</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</decl_stmt>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_FULL</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// A is full and B is sparse/hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_PAIR_MULTIPLIER</name></expr></cpp:if>
                    <block>{<block_content> 
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_EQ_MONOID</name></expr></cpp:if>
                        <comment type="line">// EQ_PAIR semiring</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>cij</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>GB_CTYPE_BITS</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:elif>
                        <comment type="line">// PLUS, XOR monoids: A(:,i)'*B(:,j) is nnz(A(:,i)),</comment>
                        <comment type="line">// for bool, 8-bit, 16-bit, or 32-bit integer</comment>
                        <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>cij</name><operator>)</operator> <operator>+</operator> <name>bjnz</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <name>GB_CTYPE_BITS</name><operator>)</operator></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC32_MONOID</name></expr></cpp:elif>
                        <comment type="line">// PLUS monoid for float complex</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLXF</name> <argument_list>(<argument><expr><call><name>crealf</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>bjnz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC64_MONOID</name></expr></cpp:elif>
                        <comment type="line">// PLUS monoid for double complex</comment>
                        <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><call><name>creal</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>bjnz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <comment type="line">// PLUS monoid for float, double, or 64-bit integers</comment>
                        <expr_stmt><expr><name>cij</name> <operator>+=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <name>bjnz</name></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry in B(:,j)</comment>
                        <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name> <operator>+</operator> <name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry in B(:,j)</comment>
                        <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pB</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// A is bitmap and B is sparse/hyper</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                    <block>{<block_content>
                        <comment type="line">// MIN_FIRSTJ semiring: take the first entry</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pB</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
                    <block>{<block_content>
                        <comment type="line">// MAX_FIRSTJ semiring: take the last entry</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pB_end</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>pB</name></expr> ;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content>
                        <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pB</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>pA</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                            <block>{<block_content> 
                                <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>pA</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// save C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cij</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>(</operator><name>GB_A_IS_SPARSE</name> <operator>||</operator> <name>GB_A_IS_HYPER</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>GB_B_IS_SPARSE</name> <operator>||</operator> <name>GB_B_IS_HYPER</name><operator>)</operator><operator>)</operator></expr></cpp:elif>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C+=A'*B where A and B are both sparse/hyper</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_tid</name> <init>= <expr><name>tid</name> <operator>/</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_tid</name> <init>= <expr><name>tid</name> <operator>%</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_start</name> <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_end</name>   <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C+=A'*B via dot products</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kB</name> <init>= <expr><name>kB_start</name></expr></init></decl> ;</init> <condition><expr><name>kB</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>kB</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j) and C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_B_IS_HYPER</name></expr></cpp:if>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Bh</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>j</name> <init>= <expr><name>kB</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>kB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>kB</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bjnz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) += A'*B(:,j) where C is full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kA</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>kA</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>kA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get A(:,i)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA</name></expr></init></decl> ;</decl_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>kA</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// C(i,j) is at Cx [pC]</comment>
                <function_decl><type><name>GB_CTYPE</name></type> <name>GB_GET4C</name> <parameter_list>(<parameter><decl><type><name>cij</name></type></decl></parameter>, <parameter><decl><type><name>pC</name></type></decl></parameter>)</parameter_list> ;</function_decl>   <comment type="line">// cij = Cx [pC]</comment>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(i,j) += A (:,i)*B(:,j): a single dot product</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//----------------------------------------------------------</comment>
                <comment type="line">// both A and B are sparse/hyper</comment>
                <comment type="line">//----------------------------------------------------------</comment>

                <comment type="line">// The MIN_FIRSTJ semirings are exploited, by terminating as</comment>
                <comment type="line">// soon as any entry is found.  The MAX_FIRSTJ semirings are</comment>
                <comment type="line">// not treated specially here.  They could be done with a</comment>
                <comment type="line">// backwards traversal of the sparse vectors A(:,i) and</comment>
                <comment type="line">// B(:,j).</comment>

                <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>bjnz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 
                    <name><name>Ai</name> <index>[<expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Bi</name> <index>[<expr><name>pB_start</name></expr>]</index></name> <operator>||</operator>
                    <name><name>Bi</name> <index>[<expr><name>pB_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 

                    <comment type="line">//------------------------------------------------------</comment>
                    <comment type="line">// A(:,i) and B(:,j) don't overlap, or are empty</comment>
                    <comment type="line">//------------------------------------------------------</comment>

                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>bjnz</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//------------------------------------------------------</comment>
                    <comment type="line">// B(:,j) is very sparse compared to A(:,i)</comment>
                    <comment type="line">//------------------------------------------------------</comment>

                    <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ia</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ib</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <name>ib</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// A(ia,i) appears before B(ib,j)</comment>
                            <comment type="line">// discard all entries A(ia:ib-1,i)</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>pA</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_TRIM_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>ib</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pleft</name> <operator>&gt;</operator> <name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pleft</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>ib</name> <operator>&lt;</operator> <name>ia</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// B(ib,j) appears before A(ia,i)</comment>
                            <expr_stmt><expr><name>pB</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else <comment type="line">// ia == ib == k</comment>
                        <block>{<block_content> 
                            <comment type="line">// A(k,i) and B(k,j) are next entries to merge</comment>
                            <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>ia</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                            <break>break ;</break>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>pA</name><operator>++</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>pB</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></while>

                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>bjnz</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>ainz</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//------------------------------------------------------</comment>
                    <comment type="line">// A(:,i) is very sparse compared to B(:,j)</comment>
                    <comment type="line">//------------------------------------------------------</comment>

                    <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ia</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ib</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <name>ib</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// A(ia,i) appears before B(ib,j)</comment>
                            <expr_stmt><expr><name>pA</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>ib</name> <operator>&lt;</operator> <name>ia</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// B(ib,j) appears before A(ia,i)</comment>
                            <comment type="line">// discard all entries B(ib:ia-1,j)</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>pB</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_TRIM_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>ia</name></expr></argument>, <argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pleft</name> <operator>&gt;</operator> <name>pB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>pB</name> <operator>=</operator> <name>pleft</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else <comment type="line">// ia == ib == k</comment>
                        <block>{<block_content> 
                            <comment type="line">// A(k,i) and B(k,j) are next entries to merge</comment>
                            <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>ia</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                            <break>break ;</break>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>pA</name><operator>++</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>pB</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></while>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content>

                    <comment type="line">//------------------------------------------------------</comment>
                    <comment type="line">// A(:,i) and B(:,j) have about the same sparsity</comment>
                    <comment type="line">//------------------------------------------------------</comment>

                    <while>while <condition>(<expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ia</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>ib</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>ia</name> <operator>&lt;</operator> <name>ib</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// A(ia,i) appears before B(ib,j)</comment>
                            <expr_stmt><expr><name>pA</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>ib</name> <operator>&lt;</operator> <name>ia</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// B(ib,j) appears before A(ia,i)</comment>
                            <expr_stmt><expr><name>pB</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else <comment type="line">// ia == ib == k</comment>
                        <block>{<block_content> 
                            <comment type="line">// A(k,i) and B(k,j) are the entries to merge</comment>
                            <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>ia</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
                            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
                            <break>break ;</break>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>pA</name><operator>++</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>pB</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></while>
                </block_content>}</block></else></if_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// save C(i,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cij</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_IS_MIN_FIRSTJ_SEMIRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_IS_MAX_FIRSTJ_SEMIRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_GET4C</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_SPECIAL_CASE_OR_TERMINAL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_UNROLL</name></cpp:undef>


</unit>
