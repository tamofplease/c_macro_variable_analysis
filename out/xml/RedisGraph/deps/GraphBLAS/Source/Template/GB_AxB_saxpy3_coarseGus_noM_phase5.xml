<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_coarseGus_noM_phase5.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_coarseGus_noM_phase5: numeric coarse Gustavson, no mask</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get C(:,j) and B(:,j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>pC</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>           <comment type="line">// no work to do if C(:,j) empty</comment>
        <expr_stmt><expr><name>GB_GET_B_j</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// special case when C (:,j) is dense</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_GENERIC</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <name>cvlen</name></expr>)</condition>          <comment type="line">// C(:,j) is dense</comment>
        <block>{<block_content> 
            <comment type="line">// This is not used for the generic saxpy3.</comment>
            <expr_stmt><expr><name>GB_COMPUTE_DENSE_C_j</name></expr> ;</expr_stmt>  <comment type="line">// C(:,j) = A*B(:,j)</comment>
            <continue>continue ;</continue>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C(:,j) = A*B(:,j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>mark</name><operator>++</operator></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>A_is_sparse</name> <operator>||</operator> <name>A_is_hyper</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) = A(:,k)*B(k,j) where B(:,j) has a single entry</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>GB_COMPUTE_C_j_WHEN_NNZ_B_j_IS_ONE</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><literal type="number">16</literal> <operator>*</operator> <name>cjnz</name> <operator>&gt;</operator> <name>cvlen</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) is not very sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
            <block>{<block_content>
                <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>             <comment type="line">// get index k of entry B(k,j)</comment>
                <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                    <comment type="line">// get A(:,k)</comment>
                <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>       <comment type="line">// skip if A(:,k) is empty</comment>
                <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>                   <comment type="line">// bkj = B(k,j)</comment>
                <comment type="line">// scan A(:,k)</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index i of entry A(i,k)</comment>
                    <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>         <comment type="line">// t = A(i,k)*B(k,j)</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>mark</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(i,k) * B(k,j)</comment>
                        <expr_stmt><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mark</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_HX_WRITE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Hx [i] = t</comment>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) += A(i,k) * B(k,j)</comment>
                        <expr_stmt><expr><call><name>GB_HX_UPDATE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// Hx [i] += t</comment>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>GB_GATHER_ALL_C_j</name> <argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>          <comment type="line">// gather into C(:,j) </comment>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j) is very sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
            <block>{<block_content>
                <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>             <comment type="line">// get index k of entry B(k,j)</comment>
                <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                    <comment type="line">// get A(:,k)</comment>
                <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>       <comment type="line">// skip if A(:,k) is empty</comment>
                <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>                   <comment type="line">// bkj = B(k,j)</comment>
                <comment type="line">// scan A(:,k)</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index i of entry A(i,k)</comment>
                    <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>         <comment type="line">// t = A(i,k)*B(k,j)</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>mark</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(i,k) * B(k,j)</comment>
                        <expr_stmt><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mark</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_HX_WRITE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Hx [i] = t</comment>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) += A(i,k) * B(k,j)</comment>
                        <expr_stmt><expr><call><name>GB_HX_UPDATE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// Hx [i] += t</comment>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><name>GB_SORT_AND_GATHER_C_j</name></expr> ;</expr_stmt>            <comment type="line">// gather into C(:,j)</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
