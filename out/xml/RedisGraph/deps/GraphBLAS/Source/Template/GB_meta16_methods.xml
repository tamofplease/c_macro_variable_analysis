<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_meta16_methods.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_meta16_methods: methods for GB_meta16_factory.c</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">// declare macros that depend on the sparsity of A and B</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_definitions.h"</cpp:file></cpp:include>

    <comment type="line">// dot product methods</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DOT4</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot4_template.c"</cpp:file></cpp:include>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DOT3_PHASE1</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot3_phase1_template.c"</cpp:file></cpp:include>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DOT3_PHASE2</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot3_template.c"</cpp:file></cpp:include>
    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DOT2</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>

    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"method undefined"</cpp:literal></cpp:error>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// undefine the macros that define the A and B sparsity</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_SPARSE</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_HYPER</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_BITMAP</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_FULL</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_SPARSE</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_HYPER</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_BITMAP</name></cpp:undef>
    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_FULL</name></cpp:undef>
</block_content>}</block>

</unit>
