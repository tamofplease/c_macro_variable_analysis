<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_assign_IxJ_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_IxJ_template: iterate over all of C(I,J)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Iterate over all positions in the IxJ Cartesian product.  This is all</comment>
<comment type="line">// entries C(i,j) where i is in the list I and j is in the list J.  This</comment>
<comment type="line">// traversal occurs whether or not C(i,j) is an entry present in C.</comment>

<comment type="line">// The C matrix is accessed at C(I,J).  The A matrix is size |I|-by-|J|.</comment>
<comment type="line">// For bitmap assignent, C(I,J)=A is being computed.  For bitmap extraction,</comment>
<comment type="line">// C=A(I,J) so the roles of A and C are swapped (see GB_bitmap_subref.c).</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the tasks to iterate over IxJ</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nthreads</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier></type><name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subassign_IxJ_slice</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ntasks</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>, <comment type="block">/* I, */</comment> <argument><expr><name>nI</name></expr></argument>, <comment type="block">/* Ikind, Icolon, J, */</comment> <argument><expr><name>nJ</name></expr></argument>,
        <comment type="block">/* Jkind, Jcolon, */</comment> <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// iterate over all IxJ</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>fine_task</name> <init>= <expr><operator>(</operator><name>klast</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iA_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>iA_end</name> <init>= <expr><name>nI</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// a fine task operates on a slice of a single vector</comment>
            <expr_stmt><expr><name>klast</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>iA_start</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pA</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>iA_end</name>   <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pA_end</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>jA</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>jA</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>jA</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get jC, the corresponding vector of C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jA</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC0</name> <init>= <expr><name>jC</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>       <comment type="line">// first entry in C(:,jC)</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA0</name> <init>= <expr><name>jA</name> <operator>*</operator> <name>nI</name></expr></init></decl> ;</decl_stmt>         <comment type="line">// first entry in A(:,jA)</comment>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// operate on C (I(iA_start,iA_end-1),jC)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>iA</name> <init>= <expr><name>iA_start</name></expr></init></decl> ;</init> <condition><expr><name>iA</name> <operator>&lt;</operator> <name>iA_end</name></expr> ;</condition> <incr><expr><name>iA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>iA</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>iC</name> <operator>+</operator> <name>pC0</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>iA</name> <operator>+</operator> <name>pA0</name></expr></init></decl> ;</decl_stmt>
                <comment type="line">// operate on C(iC,jC) at pC (if C is bitmap or full)</comment>
                <comment type="line">// and A(iA,jA) or M(iA,jA) at pA, if A and/or M are</comment>
                <comment type="line">// bitmap or full.  M(iA,jA) is accessed only for the</comment>
                <comment type="line">// subassign method when M is bitmap or full.</comment>
                <expr_stmt><expr><call><name>GB_IXJ_WORK</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workpace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><name>TaskList_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
