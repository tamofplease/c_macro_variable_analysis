<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_sort_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sort_template: sort all vectors in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">//  macros:</comment>
<comment type="line">//  GB_SORT (func)      defined as GB_sort_func_TYPE_ascend or _descend,</comment>
<comment type="line">//                      GB_msort_ISO_ascend or _descend,</comment>
<comment type="line">//                      or GB_msort_func_UDT</comment>
<comment type="line">//  GB_TYPE             bool, int8_, ... or GB_void for UDT or ISO</comment>
<comment type="line">//  GB_ADDR(A,p)        A+p for builtin, A + p * GB_SIZE otherwise</comment>
<comment type="line">//  GB_SIZE             size of each entry: sizeof (GB_TYPE) for built-in</comment>
<comment type="line">//  GB_GET(x,X,i)       x = X [i] for built-in, memcpy for UDT</comment>
<comment type="line">//  GB_COPY(A,i,C,k)    A[i] = C [k]</comment>
<comment type="line">//  GB_SWAP(A,i,k)      swap A[i] and A[k]</comment>
<comment type="line">//  GB_LT               compare two entries, x &lt; y, or x &gt; y for descending sort</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (partition): use a pivot to partition an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C.A.R Hoare partition method, partitions an array in-place via a pivot.</comment>
<comment type="line">// k = partition (A, n) partitions A [0:n-1] such that all entries in</comment>
<comment type="line">// A [0:k] are &lt;= all entries in A [k+1:n-1].</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name> <name>GB_SORT</name></type> (<name>partition</name>)
<parameter_list>(
    <parameter><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,  <comment type="line">// size n arrays to partition</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,  <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,        <comment type="line">// size of the array(s) to partition</comment>
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>          <comment type="line">// random number seed, modified on output</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// select a pivot at random</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pivot</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>GB_RAND_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_rand15</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_rand</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Pivot = A [pivot]</comment>
    <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// Pivot0 = A_0 [pivot]</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>Pivot1</name> <init>= <expr><name><name>A_1</name> <index>[<expr><name>pivot</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// At the top of the while loop, A [left+1...right-1] is considered, and</comment>
    <comment type="line">// entries outside this range are in their proper place and not touched.</comment>
    <comment type="line">// Since the input specification of this function is to partition A</comment>
    <comment type="line">// [0..n-1], left must start at -1 and right must start at n.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>right</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// keep partitioning until the left and right sides meet</comment>
    <while>while <condition>(<expr><name>true</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// loop invariant:  A [0..left] &lt; pivot and A [right..n-1] &gt; Pivot,</comment>
        <comment type="line">// so the region to be considered is A [left+1 ... right-1].</comment>

        <comment type="line">// increment left until finding an entry A [left] &gt;= Pivot</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>less</name></decl> ;</decl_stmt>
        <do>do
        <block>{<block_content> 
            <expr_stmt><expr><name>left</name><operator>++</operator></expr> ;</expr_stmt>
            <comment type="line">// a0 = A_0 [left]</comment>
            <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// less =   (a0, A_1 [left]) &lt; (Pivot0, Pivot1)</comment>
            <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name><name>A_1</name> <index>[<expr><name>left</name></expr>]</index></name></expr></argument>,    <argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>Pivot1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>less</name></expr>)</condition> ;</do>

        <comment type="line">// decrement right until finding an entry A [right] &lt;= Pivot</comment>
        <do>do
        <block>{<block_content> 
            <expr_stmt><expr><name>right</name><operator>--</operator></expr> ;</expr_stmt>
            <comment type="line">// a0 = A_0 [right]</comment>
            <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// less =   (Pivot0, Pivot1) &lt; (a1, A_1 [right])</comment>
            <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>Pivot1</name></expr></argument>,    <argument><expr><name>a1</name></expr></argument>, <argument><expr><name><name>A_1</name> <index>[<expr><name>right</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>less</name></expr>)</condition> ;</do>

        <comment type="line">// now A [0..left-1] &lt; pivot and A [right+1..n-1] &gt; pivot, but</comment>
        <comment type="line">// A [left] &gt; pivot and A [right] &lt; pivot, so these two entries</comment>
        <comment type="line">// are out of place and must be swapped.</comment>

        <comment type="line">// However, if the two sides have met, the partition is finished.</comment>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A has been partitioned into A [0:right] and A [right+1:n-1].</comment>
            <comment type="line">// k = right+1, so A is split into A [0:k-1] and A [k:n-1].</comment>
            <return>return <expr><operator>(</operator><name>right</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// since A [left] &gt; pivot and A [right] &lt; pivot, swap them</comment>
        <expr_stmt><expr><call><name>GB_SWAP</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>t1</name> <init>= <expr><name><name>A_1</name> <index>[<expr><name>left</name></expr>]</index></name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name><name>A_1</name> <index>[<expr><name>left</name></expr>]</index></name> <operator>=</operator> <name><name>A_1</name> <index>[<expr><name>right</name></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A_1</name> <index>[<expr><name>right</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr> ;</expr_stmt>

        <comment type="line">// after the swap this condition holds:</comment>
        <comment type="line">// A [0..left] &lt; pivot and A [right..n-1] &gt; pivot</comment>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (quicksort): recursive single-threaded quicksort</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name> <name>GB_SORT</name></type> (<name>quicksort</name>)    <comment type="line">// sort A [0:n-1]</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,  <comment type="line">// size n arrays to sort</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,  <comment type="line">// size n array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,        <comment type="line">// size of the array(s) to sort</comment>
    <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>seed</name></decl></parameter>          <comment type="line">// random number seed</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// in-place insertion sort on A [0:n-1], where n is small</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>k</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// a0 = A_0 [j]</comment>
                <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>a0</name></expr></argument>, <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// a1 = A_0 [j-1]</comment>
                <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// break if A [j] &gt;= A [j-1]</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>less</name></decl> ;</decl_stmt>
                <comment type="line">// less =   (a0, A_1 [j]) &lt; (a1, A_1 [j-1])</comment>
                <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>a0</name></expr></argument>, <argument><expr><name><name>A_1</name> <index>[<expr><name>j</name></expr>]</index></name></expr></argument>,    <argument><expr><name>a1</name></expr></argument>, <argument><expr><name><name>A_1</name> <index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>less</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
                <comment type="line">// swap A [j-1] and A [j]</comment>
                <expr_stmt><expr><call><name>GB_SWAP</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>t1</name> <init>= <expr><name><name>A_1</name> <index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name><name>A_1</name> <index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>A_1</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A_1</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t1</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// partition A [0:n-1] into A [0:k-1] and A [k:n-1]</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>partition</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// sort each partition</comment>

        <comment type="line">// sort A [0:k-1]</comment>
        <function_decl><type><name>GB_SORT</name></type> (<name>quicksort</name>) <parameter_list>(<parameter><decl><type><name>A_0</name></type></decl></parameter>, <parameter><decl><type><name>A_1</name></type></decl></parameter>, <parameter><decl><type><name>k</name></type></decl></parameter>, <parameter><decl><type><name>seed</name></type></decl></parameter>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <parameter><decl><type><name>csize</name></type></decl></parameter>, <parameter><decl><type><name>xsize</name></type></decl></parameter>, <parameter><decl><type><name>flt</name></type></decl></parameter>, <parameter><decl><type><name>fcast</name></type></decl></parameter>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</parameter_list> ;</function_decl>

        <comment type="line">// sort A [k:n-1]</comment>
        <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>quicksort</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>k</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (binary_search): binary search for the pivot</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The Pivot value is Z [pivot], and a binary search for the Pivot is made in</comment>
<comment type="line">// the array X [p_pstart...p_end-1], which is sorted in non-decreasing order on</comment>
<comment type="line">// input.  The return value is pleft, where</comment>
<comment type="line">//</comment>
<comment type="line">//    X [p_start ... pleft-1] &lt;= Pivot and</comment>
<comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>
<comment type="line">//</comment>
<comment type="line">// pleft is returned in the range p_start to p_end.  If pleft is p_start, then</comment>
<comment type="line">// the Pivot is smaller than all entries in X [p_start...p_end-1], and the left</comment>
<comment type="line">// list X [p_start...pleft-1] is empty.  If pleft is p_end, then the Pivot is</comment>
<comment type="line">// larger than all entries in X [p_start...p_end-1], and the right list X</comment>
<comment type="line">// [pleft...p_end-1] is empty.</comment>

<function><type><specifier>static</specifier> <name>int64_t</name> <name>GB_SORT</name></type> (<name>binary_search</name>)  <comment type="line">// return pleft</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z_0</name></decl></parameter>,        <comment type="line">// Pivot is Z [pivot]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Z_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pivot</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_0</name></decl></parameter>,        <comment type="line">// search in X [p_start..p_end_-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p_end</name></decl></parameter>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find where the Pivot appears in X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// binary search of X [p_start...p_end-1] for the Pivot</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name> <init>= <expr><name>p_start</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>p_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>Z_0</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// Pivot0 = Z_0 [pivot]</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>Pivot1</name> <init>= <expr><name><name>Z_1</name> <index>[<expr><name>pivot</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>less</name></decl> ;</decl_stmt>
    <while>while <condition>(<expr><name>pleft</name> <operator>&lt;</operator> <name>pright</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pmiddle</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>+</operator> <name>pright</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <comment type="line">// x0 = X_0 [pmiddle]</comment>
        <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>X_0</name></expr></argument>, <argument><expr><name>pmiddle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// less =   (x0, X_1 [pmiddle]) &lt; (Pivot0, Pivot1)</comment>
        <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>X_1</name> <index>[<expr><name>pmiddle</name></expr>]</index></name></expr></argument>,    <argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>Pivot1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pleft</name>  <operator>=</operator> <ternary><condition><expr><name>less</name></expr> ?</condition><then> <expr><operator>(</operator><name>pmiddle</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>pleft</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pright</name> <operator>=</operator> <ternary><condition><expr><name>less</name></expr> ?</condition><then> <expr><name>pright</name></expr> </then><else>: <expr><name>pmiddle</name></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// binary search is narrowed down to a single item</comment>
    <comment type="line">// or it has found the list is empty:</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pleft</name> <operator>==</operator> <name>pright</name> <operator>||</operator> <name>pleft</name> <operator>==</operator> <name>pright</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// If found is true then X [pleft == pright] == Pivot.  If duplicates</comment>
    <comment type="line">// appear then X [pleft] is any one of the entries equal to the Pivot</comment>
    <comment type="line">// in the list.  If found is false then</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft+1 ... p_end-1] &gt; Pivot holds.</comment>
    <comment type="line">//    The value X [pleft] may be either &lt; or &gt; Pivot.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>==</operator> <name>pright</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>X_1</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>==</operator> <name>Pivot1</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// Modify pleft and pright:</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pleft</name> <operator>==</operator> <name>pright</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// x0 = X_0 [pleft]</comment>
        <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name>X_0</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// less =   (x0, X_1 [pleft]) &lt; (Pivot0, Pivot1)</comment>
        <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>X_1</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>,    <argument><expr><name>Pivot0</name></expr></argument>, <argument><expr><name>Pivot1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>less</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pleft</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
<comment type="line">//          pright++ ;  // (not needed)</comment>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If found is false then</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt; Pivot holds,</comment>
    <comment type="line">//    and pleft-1 == pright</comment>

    <comment type="line">// If X has no duplicates, then whether or not Pivot is found,</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt; Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>

    <comment type="line">// If X has duplicates, then whether or not Pivot is found,</comment>
    <comment type="line">//    X [p_start ... pleft-1] &lt;= Pivot and</comment>
    <comment type="line">//    X [pleft ... p_end-1] &gt;= Pivot holds.</comment>

    <return>return <expr><operator>(</operator><name>pleft</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (create_merge_tasks)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Recursively constructs ntasks tasks to merge two arrays, Left and Right,</comment>
<comment type="line">// into Sresult, where Left is L [pL_start...pL_end-1], Right is R</comment>
<comment type="line">// [pR_start...pR_end-1], and Sresult is S [pS_start...pS_start+total_work-1],</comment>
<comment type="line">// and where total_work is the total size of Left and Right.</comment>
<comment type="line">//</comment>
<comment type="line">// Task tid will merge L [L_task [tid] ... L_task [tid] + L_len [tid] - 1] and</comment>
<comment type="line">// R [R_task [tid] ... R_task [tid] + R_len [tid] -1] into the merged output</comment>
<comment type="line">// array S [S_task [tid] ... ].  The task tids created are t0 to</comment>
<comment type="line">// t0+ntasks-1.</comment>

<function><type><specifier>static</specifier> <name>void</name> <name>GB_SORT</name></type> (<name>create_merge_tasks</name>)
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_task</name></decl></parameter>,        <comment type="line">// L_task [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_len</name></decl></parameter>,         <comment type="line">// L_len  [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_task</name></decl></parameter>,        <comment type="line">// R_task [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_len</name></decl></parameter>,         <comment type="line">// R_len  [t0...t0+ntasks-1] computed</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_task</name></decl></parameter>,        <comment type="line">// S_task [t0...t0+ntasks-1] computed</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>t0</name></decl></parameter>,                    <comment type="line">// first task tid to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,                <comment type="line">// # of tasks to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pS_start</name></decl></parameter>,          <comment type="line">// merge into S [pS_start...]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_0</name></decl></parameter>,     <comment type="line">// Left = L [pL_start...pL_end-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pL_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pL_end</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_0</name></decl></parameter>,     <comment type="line">// Right = R [pR_start...pR_end-1]</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pR_start</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pR_end</name></decl></parameter>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get problem size</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nleft</name>  <init>= <expr><name>pL_end</name> <operator>-</operator> <name>pL_start</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// size of Left array</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nright</name> <init>= <expr><name>pR_end</name> <operator>-</operator> <name>pR_start</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// size of Right array</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total_work</name> <init>= <expr><name>nleft</name> <operator>+</operator> <name>nright</name></expr></init></decl> ;</decl_stmt>       <comment type="line">// total work to do</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>total_work</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>ntasks</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// a single task will merge all of Left and Right into Sresult</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>L_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pL_start</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>L_len</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>nleft</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>R_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pR_start</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>R_len</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>nright</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>S_task</name> <index>[<expr><name>t0</name></expr>]</index></name> <operator>=</operator> <name>pS_start</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// partition the Left and Right arrays for multiple merge tasks</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name></decl>, <decl><type ref="prev"/><name>pright</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nleft</name> <operator>&gt;=</operator> <name>nright</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// split Left in half, and search for its pivot in Right</comment>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <operator>(</operator><name>pL_end</name> <operator>+</operator> <name>pL_start</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pright</name> <operator>=</operator> <call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>binary_search</name></expr></argument>)</argument_list></call> <argument_list>(
                        <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>,
                        <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>pR_start</name></expr></argument>, <argument><expr><name>pR_end</name></expr></argument>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                        , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// split Right in half, and search for its pivot in Left</comment>
            <expr_stmt><expr><name>pright</name> <operator>=</operator> <operator>(</operator><name>pR_end</name> <operator>+</operator> <name>pR_start</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>binary_search</name></expr></argument>)</argument_list></call> <argument_list>(
                        <argument><expr><name>R_0</name></expr></argument>, <argument><expr><name>R_1</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>,
                        <argument><expr><name>L_0</name></expr></argument>, <argument><expr><name>L_1</name></expr></argument>, <argument><expr><name>pL_start</name></expr></argument>, <argument><expr><name>pL_end</name></expr></argument>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                        , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// partition the tasks according to the work of each partition</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// work0 is the total work in the first partition</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>work0</name> <init>= <expr><operator>(</operator><name>pleft</name> <operator>-</operator> <name>pL_start</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pright</name> <operator>-</operator> <name>pR_start</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>round</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ntasks</name> <operator>*</operator>
            <operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>work0</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>total_work</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// ensure at least one task is assigned to each partition</comment>
        <expr_stmt><expr><name>ntasks0</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks0</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><name>ntasks</name> <operator>-</operator> <name>ntasks0</name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assign ntasks0 to the first half</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// ntasks0 tasks merge L [pL_start...pleft-1] and R [pR_start..pright-1]</comment>
        <comment type="line">// into the result S [pS_start...work0-1].</comment>

        <function_decl><type><name>GB_SORT</name></type> (<name>create_merge_tasks</name>) <parameter_list>(
            <parameter><decl><type><name>L_task</name></type></decl></parameter>, <parameter><decl><type><name>L_len</name></type></decl></parameter>, <parameter><decl><type><name>R_task</name></type></decl></parameter>, <parameter><decl><type><name>R_len</name></type></decl></parameter>, <parameter><decl><type><name>S_task</name></type></decl></parameter>, <parameter><decl><type><name>t0</name></type></decl></parameter>, <parameter><decl><type><name>ntasks0</name></type></decl></parameter>, <parameter><decl><type><name>pS_start</name></type></decl></parameter>,
            <parameter><decl><type><name>L_0</name></type></decl></parameter>, <parameter><decl><type><name>L_1</name></type></decl></parameter>, <parameter><decl><type><name>pL_start</name></type></decl></parameter>, <parameter><decl><type><name>pleft</name></type></decl></parameter>,
            <parameter><decl><type><name>R_0</name></type></decl></parameter>, <parameter><decl><type><name>R_1</name></type></decl></parameter>, <parameter><decl><type><name>pR_start</name></type></decl></parameter>, <parameter><decl><type><name>pright</name></type></decl></parameter>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <parameter><decl><type><name>csize</name></type></decl></parameter>, <parameter><decl><type><name>xsize</name></type></decl></parameter>, <parameter><decl><type><name>flt</name></type></decl></parameter>, <parameter><decl><type><name>fcast</name></type></decl></parameter>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</parameter_list> ;</function_decl>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assign ntasks1 to the second half</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// ntasks1 tasks merge L [pleft...pL_end-1] and R [pright...pR_end-1]</comment>
        <comment type="line">// into the result S [pS_start+work0...pS_start+total_work].</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><name>t0</name> <operator>+</operator> <name>ntasks0</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// first task id of the second set of tasks</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pS_start1</name> <init>= <expr><name>pS_start</name> <operator>+</operator> <name>work0</name></expr></init></decl> ;</decl_stmt>  <comment type="line">// 2nd set starts here in S</comment>
        <function_decl><type><name>GB_SORT</name></type> (<name>create_merge_tasks</name>) <parameter_list>(
            <parameter><decl><type><name>L_task</name></type></decl></parameter>, <parameter><decl><type><name>L_len</name></type></decl></parameter>, <parameter><decl><type><name>R_task</name></type></decl></parameter>, <parameter><decl><type><name>R_len</name></type></decl></parameter>, <parameter><decl><type><name>S_task</name></type></decl></parameter>, <parameter><decl><type><name>t1</name></type></decl></parameter>, <parameter><decl><type><name>ntasks1</name></type></decl></parameter>, <parameter><decl><type><name>pS_start1</name></type></decl></parameter>,
            <parameter><decl><type><name>L_0</name></type></decl></parameter>, <parameter><decl><type><name>L_1</name></type></decl></parameter>, <parameter><decl><type><name>pleft</name></type></decl></parameter>,  <parameter><decl><type><name>pL_end</name></type></decl></parameter>,
            <parameter><decl><type><name>R_0</name></type></decl></parameter>, <parameter><decl><type><name>R_1</name></type></decl></parameter>, <parameter><decl><type><name>pright</name></type></decl></parameter>, <parameter><decl><type><name>pR_end</name></type></decl></parameter>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <parameter><decl><type><name>csize</name></type></decl></parameter>, <parameter><decl><type><name>xsize</name></type></decl></parameter>, <parameter><decl><type><name>flt</name></type></decl></parameter>, <parameter><decl><type><name>fcast</name></type></decl></parameter>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</parameter_list> ;</function_decl>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (merge): merge two sorted lists via a single thread</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// merge Left [0..nleft-1] and Right [0..nright-1] into S [0..nleft+nright-1] */</comment>

<function><type><specifier>static</specifier> <name>void</name> <name>GB_SORT</name></type> (<name>merge</name>)
<parameter_list>(
    <parameter><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_0</name></decl></parameter>,              <comment type="line">// output of length nleft + nright</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Left_0</name></decl></parameter>,     <comment type="line">// left input of length nleft</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Left_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nleft</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Right_0</name></decl></parameter>,    <comment type="line">// right input of length nright</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Right_1</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nright</name></decl></parameter>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>pleft</name></decl>, <decl><type ref="prev"/><name>pright</name></decl> ;</decl_stmt>

    <comment type="line">// merge the two inputs, Left and Right, while both inputs exist</comment>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pleft</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pright</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pleft</name> <operator>&lt;</operator> <name>nleft</name> <operator>&amp;&amp;</operator> <name>pright</name> <operator>&lt;</operator> <name>nright</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// left0 = Left_0 [pleft]</comment>
        <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>left0</name></expr></argument>, <argument><expr><name>Left_0</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// right0 = Right_0 [pright]</comment>
        <expr_stmt><expr><call><name>GB_GET</name> <argument_list>(<argument><expr><name>right0</name></expr></argument>, <argument><expr><name>Right_0</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>less</name></decl> ;</decl_stmt>
        <comment type="line">// less =   (left0, Left_1 [pleft]) &lt; (right0, Right_1 [pright])</comment>
        <expr_stmt><expr><call><name>GB_LT</name> <argument_list>(<argument><expr><name>less</name></expr></argument>, <argument><expr><name>left0</name></expr></argument>, <argument><expr><name><name>Left_1</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr></argument>,    <argument><expr><name>right0</name></expr></argument>, <argument><expr><name><name>Right_1</name> <index>[<expr><name>pright</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>less</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// S [p] = Left [pleft++]</comment>
            <expr_stmt><expr><call><name>GB_COPY</name> <argument_list>(<argument><expr><name>S_0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Left_0</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_1</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Left_1</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pleft</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// S [p] = Right [pright++]</comment>
            <expr_stmt><expr><call><name>GB_COPY</name> <argument_list>(<argument><expr><name>S_0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Right_0</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>S_1</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>Right_1</name> <index>[<expr><name>pright</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pright</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// either input is exhausted; copy the remaining list into S</comment>
    <if_stmt><if>if <condition>(<expr><name>pleft</name> <operator>&lt;</operator> <name>nleft</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nremaining</name> <init>= <expr><operator>(</operator><name>nleft</name> <operator>-</operator> <name>pleft</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>S_0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>Left_0</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <name>GB_SIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_1</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Left_1</name> <operator>+</operator> <name>pleft</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>pright</name> <operator>&lt;</operator> <name>nright</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nremaining</name> <init>= <expr><operator>(</operator><name>nright</name> <operator>-</operator> <name>pright</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>S_0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>Right_0</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <name>GB_SIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>S_1</name> <operator>+</operator> <name>p</name></expr></argument>, <argument><expr><name>Right_1</name> <operator>+</operator> <name>pright</name></expr></argument>, <argument><expr><name>nremaining</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_SORT (vector) parallel mergesort of a single vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name> <name>GB_SORT</name></type> (<name>vector</name>)    <comment type="line">// sort the pair of arrays A_0, A_1</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_0</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_1</name></decl></parameter>,      <comment type="line">// size n array</comment>
    <parameter><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_0</name></decl></parameter>,      <comment type="line">// workspace of size n * GB_SIZE bytes</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name></decl></parameter>,        <comment type="line">// int64_t workspace of size n+6*ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>n</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>kk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>          <comment type="line">// # of threads to use</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    , <parameter><decl><type><name>size_t</name></type> <name>csize</name></decl></parameter>              <comment type="line">// size of GB_TYPE</comment>
    , <parameter><decl><type><name>size_t</name></type> <name>xsize</name></decl></parameter>              <comment type="line">// size of op-&gt;xtype</comment>
    , <parameter><decl><type><name>GxB_binary_function</name></type> <name>flt</name></decl></parameter>   <comment type="line">// function to test for &lt; (ascend), &gt; (descend)</comment>
    , <parameter><decl><type><name>GB_cast_function</name></type> <name>fcast</name></decl></parameter>    <comment type="line">// cast entry to inputs of flt</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// split up workspace </comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&gt;=</operator> <name>GB_BASECASE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>T</name> <init>= <expr><name>W</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_1</name>    <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>n</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>L_len</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_len</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>S_task</name> <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Slice</name>  <init>= <expr><name>T</name></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><name>T</name> <operator>+=</operator> <operator>(</operator><name>ntasks</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>  

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// partition and sort the leaves</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_eslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>leaf</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>leafsize</name> <init>= <expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>leaf</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>tid</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>quicksort</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>leaf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>leaf</name></expr></argument>, <argument><expr><name>leafsize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// merge each level</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>kk</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>k</name> <operator>-=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// merge level k into level k-1, from A into W</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// TODO: skip k and k-1 for each group of 4 sublists of A if they are</comment>
        <comment type="line">// already sorted with respect to each other.</comment>

        <comment type="line">// this could be done in parallel if ntasks was large</comment>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// create 2*nt tasks to merge two A sublists into one W sublist</comment>
            <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>create_merge_tasks</name></expr></argument>)</argument_list></call> <argument_list>(
                <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nt</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,    <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>A_1</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>nt</name></expr>]</index></name></expr></argument>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// merge A [pL...pL+nL-1] and A [pR...pR+nR-1] into W [pS..]</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pL</name> <init>= <expr><name><name>L_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nL</name> <init>= <expr><name><name>L_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name> <init>= <expr><name><name>R_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nR</name> <init>= <expr><name><name>R_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pS</name> <init>= <expr><name><name>S_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call> <argument_list>(
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pS</name></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>pL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>nL</name></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>pR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>nR</name></expr></argument>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nt</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// merge level k-1 into level k-2, from W into A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// this could be done in parallel if ntasks was large</comment>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// create 2*nt tasks to merge two W sublists into one A sublist</comment>
            <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>create_merge_tasks</name></expr></argument>)</argument_list></call> <argument_list>(
                <argument><expr><name>L_task</name></expr></argument>, <argument><expr><name>L_len</name></expr></argument>, <argument><expr><name>R_task</name></expr></argument>, <argument><expr><name>R_len</name></expr></argument>, <argument><expr><name>S_task</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nt</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>W_1</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>,    <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>,
                <argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>W_1</name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><name>nt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>nt</name></expr>]</index></name></expr></argument>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// merge A [pL...pL+nL-1] and A [pR...pR+nR-1] into W [pS..]</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pL</name> <init>= <expr><name><name>L_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nL</name> <init>= <expr><name><name>L_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name> <init>= <expr><name><name>R_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>nR</name> <init>= <expr><name><name>R_len</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pS</name> <init>= <expr><name><name>S_task</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>merge</name></expr></argument>)</argument_list></call> <argument_list>(
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>A_0</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>A_1</name> <operator>+</operator> <name>pS</name></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>pL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pL</name></expr></argument>, <argument><expr><name>nL</name></expr></argument>,
                <argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>pR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>W_1</name> <operator>+</operator> <name>pR</name></expr></argument>, <argument><expr><name>nR</name></expr></argument>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                )</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nt</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>nt</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// sort all vectors in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_WORKSPACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (Werk, int64_t) ;               \
    GB_FREE_WORK (&amp;C_skipped, C_skipped_size) ; \
    GB_FREE_WORK (&amp;W_0, W_0_size) ;             \
    GB_FREE_WORK (&amp;W, W_size) ;                 \
}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>GrB_Info</name> <name>GB_SORT</name></type> (<name>matrix</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// matrix sorted in-place</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,            <comment type="line">// comparator for user-defined types only</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C to sort"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>||</operator> <name>cnz</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get input</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_TYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// workspace</comment>
    <decl_stmt><decl><type><name>GB_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_0</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>W_0_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>W_size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_skipped</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>C_skipped_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Werk</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
    <comment type="line">// get typesize, and function pointers for operators and typecasting</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>flt</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>fcast</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase1: sort all short vectors</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// slice the C matrix into tasks for phase 1</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Werk</name></expr></argument>, <argument><expr><literal type="number">3</literal><operator>*</operator><name>ntasks</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Werk</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_max</name>   <init>= <expr><name>Werk</name></expr></init></decl> ;</decl_stmt>                  <comment type="line">// size ntasks</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_skip</name>  <init>= <expr><name>Werk</name> <operator>+</operator> <name>ntasks</name></expr></init></decl> ;</decl_stmt>         <comment type="line">// size ntasks+1</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_slice</name> <init>= <expr><name>Werk</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>    <comment type="line">// size ntasks+1</comment>

    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>C_slice</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// sort all short vectors in parallel, one thread per vector</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>C_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>C_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_max_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>n_skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// sort the vector C(:,k), unless it is too long</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_end</name>   <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cknz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cknz</name> <operator>&lt;=</operator> <name>GB_BASECASE</name> <operator>||</operator> <name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>seed</name> <init>= <expr><name>k</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>quicksort</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pC_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ci</name> <operator>+</operator> <name>pC_start</name></expr></argument>,
                    <argument><expr><name>cknz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
                    , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    )</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><name>n_skipped</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>task_max_length</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>task_max_length</name></expr></argument>, <argument><expr><name>cknz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>C_max</name>  <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>task_max_length</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C_skip</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>n_skipped</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// find max vector length and return if all vectors are now sorted</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>max_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><name>max_length</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>max_length</name></expr></argument>, <argument><expr><name><name>C_max</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>max_length</name> <operator>&lt;=</operator> <name>GB_BASECASE</name> <operator>||</operator> <name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// all vectors are sorted</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase2: sort all long vectors in parallel</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct a list of vectors that must still be sorted</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>C_skip</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>total_skipped</name> <init>= <expr><name><name>C_skip</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>C_skipped</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>total_skipped</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C_skipped_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_skipped</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>C_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>C_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>n_skipped</name> <init>= <expr><name><name>C_skip</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_end</name>   <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cknz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cknz</name> <operator>&gt;</operator> <name>GB_BASECASE</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C(:,k) was not sorted</comment>
                <expr_stmt><expr><name><name>C_skipped</name> <index>[<expr><name>n_skipped</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of tasks for each vector in phase 2</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// determine the number of levels to create, which must always be an</comment>
    <comment type="line">// even number.  The # of levels is chosen to ensure that the # of leaves</comment>
    <comment type="line">// of the task tree is between 4*nthreads and 16*nthreads.</comment>

    <comment type="line">//  2 to 4 threads:     4 levels, 16 quicksort leaves</comment>
    <comment type="line">//  5 to 16 threads:    6 levels, 64 quicksort leaves</comment>
    <comment type="line">// 17 to 64 threads:    8 levels, 256 quicksort leaves</comment>
    <comment type="line">// 65 to 256 threads:   10 levels, 1024 quicksort leaves</comment>
    <comment type="line">// 256 to 1024 threads: 12 levels, 4096 quicksort leaves</comment>
    <comment type="line">// ...</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>ceil</name> <argument_list>(<argument><expr><call><name>log2</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nthreads</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks2</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>kk</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>W</name>   <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>max_length</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>ntasks2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>W_0</name> <operator>=</operator> <operator>(</operator><name>GB_TYPE</name> <operator>*</operator><operator>)</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>max_length</name> <operator>*</operator> <name>GB_SIZE</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>W_0_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>W_0</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort each long vector using all available threads</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>total_skipped</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>C_skipped</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_end</name>   <init>= <expr><name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cknz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cknz</name> <operator>&gt;</operator> <name>GB_BASECASE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><call><name>GB_SORT</name> <argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><call><name>GB_ADDR</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pC_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ci</name> <operator>+</operator> <name>pC_start</name></expr></argument>,
            <argument><expr><name>W_0</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>cknz</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>ntasks2</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SORT_UDT</name></expr></cpp:if>
            , <argument><expr><name>csize</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>flt</name></expr></argument>, <argument><expr><name>fcast</name></expr></argument>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C sorted by value"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_SORT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_TYPE</name></cpp:undef>

</unit>
