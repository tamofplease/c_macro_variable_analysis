<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_red_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_red_factory.c: switch factory for reduction operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This is a generic body of code for creating hard-coded versions of code for</comment>
<comment type="line">// 61 or 87 combinations of associative operators and built-in types:</comment>

<comment type="line">//  20:  min, max: 10 non-boolean real types</comment>
<comment type="line">//  24:  plus, times:  12 non-boolean types</comment>
<comment type="line">//  4:   lor, land, eq (same as lxnor), lxor for boolean</comment>
<comment type="line">//  13:  any: for all 13 types</comment>
<comment type="line">//  26:  first, second: for all 13 types, if GB_INCLUDE_SECOND_OPERATOR</comment>
<comment type="line">//          is defined, for GB_builder.</comment>

<if_stmt><if>if <condition>(<expr><name>typecode</name> <operator>!=</operator> <name>GB_BOOL_code</name></expr>)</condition>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// non-boolean case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ANY_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// FIRST and SECOND for GB_builder</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_INCLUDE_SECOND_OPERATOR</name></cpp:ifdef>

        <case>case <expr><name>GB_FIRST_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_SECOND_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_int16</argument>,  <argument>int16_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_int32</argument>,  <argument>int32_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_int64</argument>,  <argument>int64_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_fp32</argument>,   <argument>float</argument>   )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_fp64</argument>,   <argument>double</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

</block_content>}</block></if>
<else>else
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// boolean case: rename the opcode as needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The FIRST and SECOND operators are not associative, but are added for</comment>
    <comment type="line">// GB_builder.</comment>

    <switch>switch <condition>(<expr><call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_LOR_binop_code</name></expr>    :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_lor</argument>,    <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <case>case <expr><name>GB_LAND_binop_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_land</argument>,   <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>   :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_lxor</argument>,   <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>     :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_eq</argument>,     <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_any</argument>,    <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_INCLUDE_SECOND_OPERATOR</name></cpp:ifdef>
        <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_first</argument>,  <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <case>case <expr><name>GB_SECOND_binop_code</name></expr> :</case> <macro><name>GB_RED_WORKER</name> <argument_list>(<argument>_second</argument>, <argument>_bool</argument>, <argument>bool</argument>)</argument_list></macro>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block></else></if_stmt>

</unit>
