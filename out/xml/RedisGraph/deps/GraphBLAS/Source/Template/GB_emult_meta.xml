<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_emult_meta.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_emult_meta:  phase1 and phase2 for C=A.*B, C&lt;M&gt;=A.*B, C&lt;!M&gt;=A.*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Computes C=A.*B, C&lt;M&gt;=A.*B, or C&lt;!M&gt;=A.*B. </comment>

<comment type="line">// C is sparse or hypersparse.  M, A, and B can have any sparsity structure.</comment>
<comment type="line">// If both A and B are full, then GB_add is used instead (this is the only case</comment>
<comment type="line">// where C can be full).</comment>

<comment type="line">// phase1: does not compute C itself, but just counts the # of entries in each</comment>
<comment type="line">// vector of C.  Fine tasks compute the # of entries in their slice of a</comment>
<comment type="line">// single vector of C, and the results are cumsum'd.</comment>

<comment type="line">// phase2: computes C, using the counts computed by phase1.</comment>

<block>{<block_content>

    <comment type="line">// iB_first is unused if the operator is FIRST or PAIR</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, M, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse_or_hyper</name> <init>= <expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Mp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mh</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mb</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mx</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>msize</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_2_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>A_iso</name> <operator>&amp;&amp;</operator> <name>B_iso</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// one of A or B can be iso, but not both</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A.*B, C&lt;M&gt;=A.*B, or C&lt;!M&gt;=A.*B: C is sparse or hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>

        <comment type="line">// phase1: symbolic phase</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_template.c"</cpp:file></cpp:include>

    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

        <comment type="line">// phase2: numerical phase</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_template.c"</cpp:file></cpp:include>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

</unit>
