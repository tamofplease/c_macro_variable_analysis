<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_2type_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_2type_factory.c: 2-type switch factory</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This is a generic switch factory for creating 169 workers that operate on</comment>
<comment type="line">// two built-in data types (13 types each), to be #include'd in another file.</comment>
<comment type="line">// GB_WORKER(op,zname,ztype,xname,xtype) is a macro defined in the #including</comment>
<comment type="line">// file, where ztype and xtype are the built-in types corresponding to code1</comment>
<comment type="line">// and code2, respectively or (void *) for a user-defined type.  The last</comment>
<comment type="line">// statement of GB_WORKER should be a break or return since it does not appear</comment>
<comment type="line">// here.</comment>

<comment type="line">// User-defined types are not handled.</comment>

<switch>switch <condition>(<expr><name>code1</name></expr>)</condition>
<block>{<block_content>
    <case>case <expr><name>GB_BOOL_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_bool</argument>, <argument>bool</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_INT8_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int8</argument>, <argument>int8_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_INT16_code</name></expr>  :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int16</argument>, <argument>int16_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_INT32_code</name></expr>  :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int32</argument>, <argument>int32_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_INT64_code</name></expr>  :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_int64</argument>, <argument>int64_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_UINT8_code</name></expr>  :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint8</argument>, <argument>uint8_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_UINT16_code</name></expr> :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_UINT32_code</name></expr> :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_UINT64_code</name></expr> :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_FP32_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp32</argument>, <argument>float</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_FP64_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fp64</argument>, <argument>double</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_FC32_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc32</argument>, <argument>GxB_FC32_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <case>case <expr><name>GB_FC64_code</name></expr>   :</case>

        <switch>switch <condition>(<expr><name>code2</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_bool</argument>,   <argument>bool</argument>      )</argument_list></macro>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_int8</argument>,   <argument>int8_t</argument>    )</argument_list></macro>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_int16</argument>,  <argument>int16_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_int32</argument>,  <argument>int32_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_int64</argument>,  <argument>int64_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_uint8</argument>,  <argument>uint8_t</argument>   )</argument_list></macro>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_uint16</argument>, <argument>uint16_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_uint32</argument>, <argument>uint32_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_uint64</argument>, <argument>uint64_t</argument>  )</argument_list></macro>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_fp32</argument>,   <argument>float</argument>     )</argument_list></macro>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_fp64</argument>,   <argument>double</argument>    )</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA</name></cpp:ifndef>
            <comment type="line">// TODO: does not yet work in CUDA</comment>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_fc32</argument>,   <argument>GxB_FC32_t</argument>)</argument_list></macro>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_EXCLUDE_SAME_TYPES</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>GB_OPNAME</argument>, <argument>_fc64</argument>, <argument>GxB_FC64_t</argument>, <argument>_fc64</argument>,   <argument>GxB_FC64_t</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
        <break>break ;</break>

    <default>default:</default> <empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_OPNAME</name></cpp:undef>

</unit>
