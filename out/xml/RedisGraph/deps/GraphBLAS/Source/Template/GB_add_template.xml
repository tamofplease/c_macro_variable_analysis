<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_add_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_add_template:  phase1 and phase2 for C=A+B, C&lt;M&gt;=A+B, C&lt;!M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Computes C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B.</comment>

<comment type="line">// M can have any sparsity structure:</comment>

<comment type="line">//      If M is not present, bitmap, or full, then A and B are sparse or</comment>
<comment type="line">//      hypersparse.  They are not bitmap or full, since in those cases,</comment>
<comment type="line">//      C will not be sparse/hypersparse, and this method is not used.</comment>

<comment type="line">//      Otherwise, if M is present and sparse/hypersparse, then A and B can</comment>
<comment type="line">//      have any sparsity pattern (hyper, sparse, bitmap, or full).</comment>

<comment type="line">// phase1: does not compute C itself, but just counts the # of entries in each</comment>
<comment type="line">// vector of C.  Fine tasks compute the # of entries in their slice of a</comment>
<comment type="line">// single vector of C, and the results are cumsum'd.</comment>

<comment type="line">// phase2: computes C, using the counts computed by phase1.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_WORKSPACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
<cpp:value>{                                           \
    GB_WERK_POP (B_ek_slicing, int64_t) ;   \
    GB_WERK_POP (A_ek_slicing, int64_t) ;   \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_FREE_WORKSPACE ;             \
    GB_phybix_free (C) ;            \
}</cpp:value></cpp:define>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, M, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_nthreads</name></decl>, <decl><type ref="prev"/><name>A_ntasks</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_nthreads</name></decl>, <decl><type ref="prev"/><name>B_ntasks</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse_or_hyper</name> <init>= <expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>M_nthreads</name></decl>, <decl><type ref="prev"/><name>M_ntasks</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Mp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mh</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mb</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mx</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>msize</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_2_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// unlike GB_emult, both A and B may be iso</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>int8_t</name>   <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// when C is bitmap or full:</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A+B, C&lt;M&gt;=A+B, or C&lt;!M&gt;=A+B: 3 cases for the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>

        <comment type="line">// phase1: symbolic phase</comment>
        <comment type="line">// C is sparse or hypersparse (never bitmap or full)</comment>
        <comment type="line">// Werk allocated: none</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sparse_add_template.c"</cpp:file></cpp:include>

    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

        <comment type="line">// phase2: numerical phase</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_POSITIONAL_OP</name></cpp:ifdef>
            <comment type="line">// op doesn't depend aij, bij, alpha_scalar, or beta_scalar</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LOAD_A</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LOAD_B</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>, <parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LOAD_A</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>, <parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_GETA(aij, Ax,pA,A_iso)</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LOAD_B</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>, <parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB_GETB(bij, Bx,pB,B_iso)</cpp:value></cpp:define>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// eWiseUnion, using alpha and beta scalars</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EWISEUNION</name></cpp:macro></cpp:define>
            <comment type="line">// if A(i,j) is not present: C(i,j) = alpha + B(i,j)</comment>
            <comment type="line">// if B(i,j) is not present: C(i,j) = A(i,j) + beta</comment>

            <if_stmt><if>if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse</comment>
                <comment type="line">// Werk allocated: none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sparse_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is bitmap (phase2 only)</comment>
                <comment type="line">// Werk: slice M and A, M and B, just A, or just B, or none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is full (phase2 only)</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Werk: slice just A, just B, or none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_full_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// eWiseAdd:</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_EWISEUNION</name></cpp:undef>
            <comment type="line">// if A(i,j) is not present: C(i,j) = B(i,j)</comment>
            <comment type="line">// if B(i,j) is not present: C(i,j) = A(i,j)</comment>

            <if_stmt><if>if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>C_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is sparse or hypersparse</comment>
                <comment type="line">// Werk allocated: none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sparse_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is bitmap (phase2 only)</comment>
                <comment type="line">// Werk: slice M and A, M and B, just A, or just B, or none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is full (phase2 only)</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Werk: slice just A, just B, or none</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_full_add_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_ADD</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_LOAD_A</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_LOAD_B</name></cpp:undef>

</unit>
