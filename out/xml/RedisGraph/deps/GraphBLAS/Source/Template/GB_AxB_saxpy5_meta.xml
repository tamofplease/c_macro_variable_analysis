<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy5_meta.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy5_meta.c: C+=A*B when C is full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This method is only used for built-in semirings with no typecasting.</comment>
<comment type="line">// The accumulator matches the semiring monoid.</comment>
<comment type="line">// The ANY monoid is not supported.</comment>

<comment type="line">// C is as-if-full.</comment>
<comment type="line">// A is bitmap or full.</comment>
<comment type="line">// B is sparse or hypersparse.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"saxpy5 not defined for the ANY monoid"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C += A*B, no mask, A bitmap/full, B sparse/hyper</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_PATTERN</name></expr></cpp:if>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is pattern-only</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is bitmap and pattern-only</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy5_iso_or_pattern.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// A is full and pattern-only</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy5_iso_or_pattern.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is valued</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is iso-valued</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap, iso-valued, B is sparse/hyper</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy5_iso_or_pattern.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is full, iso-valued, B is sparse/hyper</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy5_iso_or_pattern.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// general case: A is non-iso and valued</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap, non-iso-valued, B is sparse/hyper</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy5_bitmap.c"</cpp:file></cpp:include>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_A_IS_BITMAP</name></cpp:undef>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is full, non-iso-valued, B is sparse/hyper</comment>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SEMIRING_HAS_AVX_IMPLEMENTATION</name>          \
                    <operator>&amp;&amp;</operator> <name>GB_COMPILER_SUPPORTS_AVX512F</name>             \
                    <operator>&amp;&amp;</operator> <name>GB_V4_512</name></expr></cpp:if>
                <if_stmt><if>if <condition>(<expr><call><name>GB_Global_cpu_features_avx512f</name> <argument_list>( )</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// x86_64 with AVX512f</comment>
                    <expr_stmt><expr><call><name>GB_AxB_saxpy5_unrolled_avx512f</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
                        <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_SEMIRING_HAS_AVX_IMPLEMENTATION</name>          \
                    <operator>&amp;&amp;</operator> <name>GB_COMPILER_SUPPORTS_AVX2</name>                \
                    <operator>&amp;&amp;</operator> <name>GB_V4_256</name></expr></cpp:if>
                <if_stmt><if>if <condition>(<expr><call><name>GB_Global_cpu_features_avx2</name> <argument_list>( )</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// x86_64 with AVX2</comment>
                    <expr_stmt><expr><call><name>GB_AxB_saxpy5_unrolled_avx2</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
                        <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <comment type="line">// any architecture and any built-in semiring</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy5_unrolled_vanilla</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
                    <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_BITMAP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_HYPER</name></cpp:undef>

</unit>
