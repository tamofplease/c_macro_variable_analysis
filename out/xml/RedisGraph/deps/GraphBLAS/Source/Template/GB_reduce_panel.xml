<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_reduce_panel.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_reduce_panel: s=reduce(A), reduce a matrix to a scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reduce a matrix to a scalar using a panel-based method for built-in</comment>
<comment type="line">// operators.  No typecasting is performed.  A must be sparse, hypersparse,</comment>
<comment type="line">// or full (it cannot be bitmap).  A cannot have any zombies.  If A has zombies</comment>
<comment type="line">// or is bitmap, GB_reduce_to_scalar_template is used instead.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>
    <comment type="line">// the ANY monoid can take any entry, and terminate immediately</comment>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>Ax</name> <index>[<expr><name>anz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce A to a scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// load the Panel with the first entries</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GB_ATYPE</name></type> <name><name>Panel</name> <index>[<expr><name>GB_PANEL</name></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>first_panel_size</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>GB_PANEL</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>first_panel_size</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>Panel</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Ax</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
        <decl_stmt><decl><type><name>int</name></type> <name>panel_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// reduce all entries to the Panel</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>GB_PANEL</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>GB_PANEL</name></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>GB_PANEL</name> <operator>&gt;</operator> <name>anz</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// last partial panel</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anz</name><operator>-</operator><name>p</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// Panel [k] = op (Panel [k], Ax [p+k]) ;</comment>
                    <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// whole panel</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GB_PANEL</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// Panel [k] = op (Panel [k], Ax [p+k]) ;</comment>
                    <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
                <expr_stmt><expr><name>panel_count</name><operator>--</operator></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>panel_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// check for early exit only every 256 panels</comment>
                    <expr_stmt><expr><name>panel_count</name> <operator>=</operator> <literal type="number">256</literal></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GB_PANEL</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name><name>Panel</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>GB_TERMINAL_VALUE</name><operator>)</operator></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content> 
                        <break>break ;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// s = reduce (Panel)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>Panel</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>first_panel_size</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// s = op (s, Panel [k]) ;</comment>
            <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// all tasks share a single early_exit flag</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// If this flag gets set, all tasks can terminate early</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
        <decl_stmt><decl><type><name>bool</name></type> <name>early_exit</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// each thread reduces its own slice in parallel</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// determine the work for this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Task tid reduces Ax [pstart:pend-1] to the scalar W [tid]</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GB_ATYPE</name></type> <name>t</name> <init>= <expr><name><name>Ax</name> <index>[<expr><name>pstart</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// skip this task if the terminal value has already been reached</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
            <comment type="line">// check if another task has called for an early exit</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>my_exit</name></decl> ;</decl_stmt>

            <decl_stmt><decl><type><name>GB_ATOMIC_READ</name></type>
            <name>my_exit</name> <init>= <expr><name>early_exit</name></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_exit</name></expr>)</condition>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// do the reductions for this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// load the Panel with the first entries</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>GB_ATYPE</name></type> <name><name>Panel</name> <index>[<expr><name>GB_PANEL</name></expr>]</index></name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>my_anz</name> <init>= <expr><name>pend</name> <operator>-</operator> <name>pstart</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>first_panel_size</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>GB_PANEL</name></expr></argument>, <argument><expr><name>my_anz</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>first_panel_size</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Panel</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Ax</name> <index>[<expr><name>pstart</name> <operator>+</operator> <name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></for>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
                <decl_stmt><decl><type><name>int</name></type> <name>panel_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// reduce all entries to the Panel</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name> <operator>+</operator> <name>GB_PANEL</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name> <operator>+=</operator> <name>GB_PANEL</name></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>+</operator> <name>GB_PANEL</name> <operator>&gt;</operator> <name>pend</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// last partial panel</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>pend</name><operator>-</operator><name>p</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// Panel [k] = op (Panel [k], Ax [p+k]) ;</comment>
                            <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="line">// whole panel</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GB_PANEL</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <comment type="line">// Panel [k] = op (Panel [k], Ax [p+k]) ;</comment>
                            <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
                        <expr_stmt><expr><name>panel_count</name><operator>--</operator></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>panel_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// check for early exit only every 256 panels</comment>
                            <expr_stmt><expr><name>panel_count</name> <operator>=</operator> <literal type="number">256</literal></expr> ;</expr_stmt>
                            <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>GB_PANEL</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name><name>Panel</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>GB_TERMINAL_VALUE</name><operator>)</operator></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                            <block>{<block_content> 
                                <break>break ;</break>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// t = reduce (Panel)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>Panel</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>first_panel_size</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// t = op (t, Panel [k]) ;</comment>
                    <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>Panel</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
                <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>GB_TERMINAL_VALUE</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// tell all other tasks to exit early</comment>
                    <decl_stmt><decl><type><name>GB_ATOMIC_WRITE</name></type>
                    <name>early_exit</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
                </block_content>}</block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// save the results of this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name><name>W</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sum up the results of each slice using a single thread</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>W</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// s = op (s, W [tid]), no typecast</comment>
            <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

</unit>
