<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_nnz_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_nnz_template.c: number of entries in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_nnz (A) for any matrix: includes zombies for hypersparse and sparse,</comment>
<comment type="line">// but excluding entries flagged as not present in a bitmap.  Pending tuples</comment>
<comment type="line">// are ignored; to count them, use GB_wait first.  A may be NULL.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>int64_t</name></type> <name>GB_nnz</name>      <comment type="line">// return nnz(A) or INT64_MAX if integer overflow</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>GB_MAGIC</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is NULL or uninitialized</comment>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is sparse or hypersparse</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is bitmap</comment>
        <return>return <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is full</comment>
        <return>return <expr><operator>(</operator><call><name>GB_nnz_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
