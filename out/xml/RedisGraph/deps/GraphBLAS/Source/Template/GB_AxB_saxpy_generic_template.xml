<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy_generic_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy_generic_template: C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B via saxpy method</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// All 4 matrices have any format: hypersparse, sparse, bitmap, or full.</comment>

<block>{<block_content>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>C_IS_SPARSE_OR_HYPERSPARSE</name></expr></cpp:if>            
    <block>{<block_content>
        <comment type="line">// C is sparse or hypersparse</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C = A*B, no mask</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MASK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_COMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C&lt;M&gt; = A*B</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MASK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_COMP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C&lt;!M&gt; = A*B</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MASK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_COMP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{<block_content>
        <comment type="line">// C is bitmap or full</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_template.c"</cpp:file></cpp:include>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block>

</unit>
