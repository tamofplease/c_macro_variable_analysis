<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap: C&lt;#M&gt;+=A*B, C bitmap, M any format</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is bitmap, A and B are bitmap/full.  M has any format.</comment>

<block>{<block_content>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        
        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task to compute C (I,J)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>I_tid</name> <init>= <expr><name>tid</name> <operator>/</operator> <name>nI_tasks</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>J_tid</name> <init>= <expr><name>tid</name> <operator>%</operator> <name>nI_tasks</name></expr></init></decl> ;</decl_stmt>

        <comment type="line">// I = istart:iend-1</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name> <init>= <expr><name>I_tid</name> <operator>*</operator> <name>GB_TILE_SIZE</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>istart</name> <operator>+</operator> <name>GB_TILE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// J = jstart:jend-1</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name> <init>= <expr><name>J_tid</name> <operator>*</operator> <name>GB_TILE_SIZE</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jend</name>   <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>bvdim</name></expr></argument>, <argument><expr><name>jstart</name> <operator>+</operator> <name>GB_TILE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// check if any entry in the M(I,J) mask permits any change to C(I,J)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_MASK_IS_SPARSE_OR_HYPER</name> <operator>||</operator> <name>GB_MASK_IS_BITMAP_OR_FULL</name></expr></cpp:if>

            <decl_stmt><decl><type><name>bool</name></type> <name>any_update_allowed</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>any_update_allowed</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>any_update_allowed</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// get pointer to C(i,j) and M(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// check M(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_MASK_IS_SPARSE_OR_HYPER</name></expr></cpp:if>

                        <comment type="line">// M is sparse or hypersparse</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><operator>(</operator><name>cb</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_MASK_IS_BITMAP_OR_FULL</name></expr></cpp:elif>

                        <comment type="line">// M is bitmap or full</comment>
                        <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>any_update_allowed</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>any_update_allowed</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C(I,J) cannot be modified at all; skip it</comment>
                <continue>continue ;</continue>
            </block_content>}</block></if></if_stmt>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// declare local storage for this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

<comment type="line">//      GB_ATYPE Ax_cache [GB_TILE_SIZE * GB_KTILE_SIZE] ;</comment>
<comment type="line">//      int8_t Ab_cache [GB_TILE_SIZE * GB_KTILE_SIZE] ;</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name><name>Ab_any_in_row</name> <index>[<expr><name>GB_TILE_SIZE</name></expr>]</index></name></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;#M&gt;(I,J) += A(I,:) * B(:,J)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kstart</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>kstart</name> <operator>+=</operator> <name>GB_KTILE_SIZE</name></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// K = kstart:kend-1</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kend</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>kstart</name> <operator>+</operator> <name>GB_KTILE_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// TODO: load A(I,K) into local storage</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// For built-in semirings, load A(I,K) into local storage of size</comment>
            <comment type="line">// GB_TILE_SIZE * GB_KTILE_SIZE and transpose it.  Load in the</comment>
            <comment type="line">// bitmap Ab if not NULL, and Ax if not NULL.</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
            for (int64_t k = kstart ; k &lt; kend ; k++)
            {
                for (int64_t i = istart ; i &lt; iend ; i++)
                {
                    int64_t pA = i + k * avlen ;
                    int8_t ab = GBB (Ab, pA) ;
                    i_local = i - istart ;
                    k_local = k - kstart ;
                    Ab_cache [i_local * GB_KTILE_SIZE ...
                }
            }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Check for entries in each row of A(I,K)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>GB_TILE_SIZE</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Ab_any_in_row</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kstart</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// get pointer to A(i,k)</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type>  <name>ab</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// Ab_cache [(i-istart) * GB_KTILE_SIZE + (k-kstart)]</comment>
                        <comment type="line">//      = ab ;</comment>
                        <expr_stmt><expr><name><name>Ab_any_in_row</name> <index>[<expr><name>i</name><operator>-</operator><name>istart</name></expr>]</index></name> <operator>|=</operator> <name>ab</name></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;#M&gt;(I,J) += A(I,K) * B(K,J)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// B is bitmap or full: check if any B(K,j) entry exists</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kstart</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>k</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>bvlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// pointer to B(k,j)</comment>
                        <expr_stmt><expr><name>b</name> <operator>+=</operator> <name><name>Bb</name> <index>[<expr><name>pB</name></expr>]</index></name></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// no entry exists in B(K,j)</comment>
                        <continue>continue ;</continue>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C&lt;#M&gt;(I,j) += A(I,K) * B(K,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>GB_GET_T_FOR_SECONDJ</name></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// skip if A(i,K) has no entries</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>Ab_any_in_row</name> <index>[<expr><name>i</name> <operator>-</operator> <name>istart</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <continue>continue ;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// get C(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// check M(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_MASK_IS_SPARSE_OR_HYPER</name></expr></cpp:if>

                        <comment type="line">// M is sparse or hypersparse</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><operator>(</operator><name>cb</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>cb</name> <operator>=</operator> <operator>(</operator><name>cb</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>

                    <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_MASK_IS_BITMAP_OR_FULL</name></expr></cpp:elif>

                        <comment type="line">// M is bitmap or full</comment>
                        <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

                        <comment type="line">// no mask</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C(i,j) += A(i,K) * B(K,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// C(i,j) does not yet exist</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kstart</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// pointer to A(i,k)</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>k</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>bvlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// pointer to B(k,j)</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                            <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>                   <comment type="line">// get B(k,j)</comment>
                            <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>             <comment type="line">// t = A(i,k)*B(k,j)</comment>
                            <if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                            <block>{<block_content> 
                                <comment type="line">// C(i,j) = A(i,k) * B(k,j)</comment>
                                <expr_stmt><expr><call><name>GB_CIJ_WRITE</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>keep</name></expr> ;</expr_stmt>
                                <expr_stmt><expr><name>cb</name> <operator>=</operator> <name>keep</name></expr> ;</expr_stmt>
                                <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <comment type="line">// C(i,j) += A(i,k) * B(k,j)</comment>
                                <expr_stmt><expr><call><name>GB_CIJ_UPDATE</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></for>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// C(i,j) already exists</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></cpp:if>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kstart</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>kend</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>+</operator> <name>k</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// pointer to A(i,k)</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>k</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>bvlen</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// pointer to B(k,j)</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                            <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>                   <comment type="line">// get B(k,j)</comment>
                            <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>             <comment type="line">// t = A(i,k)*B(k,j)</comment>
                            <comment type="line">// C(i,j) += A(i,k) * B(k,j)</comment>
                            <expr_stmt><expr><call><name>GB_CIJ_UPDATE</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
