<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_symbolic_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_symbolic_template: symbolic analysis for GB_AxB_saxpy3</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Symbolic analysis for C=A*B, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B, via GB_AxB_saxpy3.</comment>
<comment type="line">// Coarse tasks compute nnz (C (:,j)) for each of their vectors j.  Fine tasks</comment>
<comment type="line">// just scatter the mask M into the hash table.  This phase does not depend on</comment>
<comment type="line">// the semiring, nor does it depend on the type of C, A, or B.  It does access</comment>
<comment type="line">// the values of M, if the mask matrix M is present and not structural.</comment>

<comment type="line">// If B is hypersparse, C must also be hypersparse.</comment>
<comment type="line">// Otherwise, C must be sparse.</comment>

<comment type="line">// The sparsity of A and B are #defined' constants for this method,</comment>
<comment type="line">// as is the 3 cases of the mask (no M, M, or !M).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_template.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_META16</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_definitions.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>void</name></type> <name>GB_EVAL2</name> <argument_list>(<argument><expr><call><name>GB</name> <argument_list>(<argument><expr><name>AxB_saxpy3_sym</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GB_MASK_A_B_SUFFIX</name></expr></argument>)</argument_list>
<argument_list>(
    <argument><expr><name>GrB_Matrix</name> <name>C</name></expr></argument>,               <comment type="line">// Cp is computed for coarse tasks</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
    <argument><expr><specifier>const</specifier> <name>GrB_Matrix</name> <name>M</name></expr></argument>,         <comment type="line">// mask matrix M</comment>
    <argument><expr><specifier>const</specifier> <name>bool</name> <name>Mask_struct</name></expr></argument>,     <comment type="line">// M structural, or not</comment>
    <argument><expr><specifier>const</specifier> <name>bool</name> <name>M_in_place</name></expr></argument>,
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <argument><expr><specifier>const</specifier> <name>GrB_Matrix</name> <name>A</name></expr></argument>,         <comment type="line">// A matrix; only the pattern is accessed</comment>
    <argument><expr><specifier>const</specifier> <name>GrB_Matrix</name> <name>B</name></expr></argument>,         <comment type="line">// B matrix; only the pattern is accessed</comment>
    <argument><expr><name>GB_saxpy3task_struct</name> <operator>*</operator><name>SaxpyTasks</name></expr></argument>,     <comment type="line">// list of tasks, and workspace</comment>
    <argument><expr><specifier>const</specifier> <name>int</name> <name>ntasks</name></expr></argument>,           <comment type="line">// total number of tasks</comment>
    <argument><expr><specifier>const</specifier> <name>int</name> <name>nfine</name></expr></argument>,            <comment type="line">// number of fine tasks</comment>
    <argument><expr><specifier>const</specifier> <name>int</name> <name>nthreads</name></expr></argument>          <comment type="line">// number of threads</comment>
)</argument_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get M, A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvlen</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_B_IS_SPARSE</name> <operator>==</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_B_IS_HYPER</name>  <operator>==</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_B_IS_BITMAP</name> <operator>==</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_B_IS_FULL</name>   <operator>==</operator> <call><name>GB_IS_FULL</name>   <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_jumbled</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_A_IS_SPARSE</name> <operator>==</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_A_IS_HYPER</name>  <operator>==</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_A_IS_BITMAP</name> <operator>==</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>GB_A_IS_FULL</name>   <operator>==</operator> <call><name>GB_IS_FULL</name>   <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_HYPER</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>msize</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mnvec</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mvlen</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_jumbled</name> <init>= <expr><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <comment type="line">// get the M hyper_hash</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>M_hash_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// mask is present, and hypersparse</comment>
            <expr_stmt><expr><name>M_Yp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_Yi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_Yx</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_hash_bits</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase1: count nnz(C(:,j)) for coarse tasks, scatter M for fine tasks</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// At this point, all of Hf [...] is zero, for all tasks.</comment>
    <comment type="line">// Hi and Hx are not initialized.</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// no work for fine tasks in phase1 if M is not present</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get the task descriptor</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>bjnz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Bp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>bvlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Bp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Bp</name> <index>[<expr><name>kk</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <comment type="line">// no work to do if B(:,j) is empty</comment>
                <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

                <comment type="line">// partition M(:,j)</comment>
                <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>        <comment type="line">// get M(:,j)</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>team_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>team_size</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>leader</name>    <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>leader</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>my_teamid</name> <init>= <expr><name>taskid</name> <operator>-</operator> <name>leader</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>mystart</name></decl>, <decl><type ref="prev"/><name>myend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>mystart</name></expr></argument>, <argument><expr><name>myend</name></expr></argument>, <argument><expr><name>mjnz</name></expr></argument>, <argument><expr><name>my_teamid</name></expr></argument>, <argument><expr><name>team_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>mystart</name> <operator>+=</operator> <name>pM_start</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>myend</name>   <operator>+=</operator> <name>pM_start</name></expr> ;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase1: fine Gustavson task, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// Scatter the values of M(:,j) into Hf.  No atomics needed</comment>
                    <comment type="line">// since all indices i in M(;,j) are unique.  Do not</comment>
                    <comment type="line">// scatter the mask if M(:,j) is a dense vector, since in</comment>
                    <comment type="line">// that case the numeric phase accesses M(:,j) directly,</comment>
                    <comment type="line">// not via Hf.</comment>

                    <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                            <name>Hf</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_SCATTER_M_j</name> <argument_list>(<argument><expr><name>mystart</name></expr></argument>, <argument><expr><name>myend</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><name>M_in_place</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase1: fine hash task, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// If M_in_place is true, this is skipped.  The mask</comment>
                    <comment type="line">// M is dense, and is used in-place.</comment>

                    <comment type="line">// The least significant 2 bits of Hf [hash] is the flag f,</comment>
                    <comment type="line">// and the upper bits contain h, as (h,f).  After this</comment>
                    <comment type="line">// phase1, if M(i,j)=1 then the hash table contains</comment>
                    <comment type="line">// ((i+1),1) in Hf [hash] at some location.</comment>

                    <comment type="line">// Later, the flag values of f = 2 and 3 are also used.</comment>
                    <comment type="line">// Only f=1 is set in this phase.</comment>

                    <comment type="line">// h == 0,   f == 0: unoccupied and unlocked</comment>
                    <comment type="line">// h == i+1, f == 1: occupied with M(i,j)=1</comment>

                    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                        <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>hash_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// scan my M(:,j)</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>mystart</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>myend</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <comment type="line">// get M(i,j)</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>            <comment type="line">// skip if M(i,j)=0</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i_mine</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>  <comment type="line">// ((i+1),1)</comment>
                        <for>for <control>(<init><expr><call><name>GB_HASH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init>)</control>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>hf</name></decl> ;</decl_stmt>
                            <comment type="line">// swap my hash entry into the hash table;</comment>
                            <comment type="line">// does the following using an atomic capture:</comment>
                            <comment type="line">// { hf = Hf [hash] ; Hf [hash] = i_mine ; }</comment>
                            <expr_stmt><expr><call><name>GB_ATOMIC_CAPTURE_INT64</name> <argument_list>(<argument><expr><name>hf</name></expr></argument>, <argument><expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_mine</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><name>hf</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>        <comment type="line">// success</comment>
                            <comment type="line">// i_mine has been inserted, but a prior entry was</comment>
                            <comment type="line">// already there.  It needs to be replaced, so take</comment>
                            <comment type="line">// ownership of this displaced entry, and keep</comment>
                            <comment type="line">// looking until a new empty slot is found for it.</comment>
                            <expr_stmt><expr><name>i_mine</name> <operator>=</operator> <name>hf</name></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// coarse tasks: compute nnz in each vector of A*B(:,kfirst:klast)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>end</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mark</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase1: coarse Gustavson task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content> 
                    <comment type="line">// phase1: coarse Gustavson task, C=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_noM_phase1.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content> 
                    <comment type="line">// phase1: coarse Gustavson task, C&lt;M&gt;=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_M_phase1.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content> 
                    <comment type="line">// phase1: coarse Gustavson task, C&lt;!M&gt;=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_notM_phase1.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase1: coarse hash task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hi</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hi</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>hash_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase1: coarse hash task, C=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_CHECK_MASK_ij</name></cpp:undef>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>

                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase1: coarse hash task, C&lt;M&gt;=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                    <block>{<block_content> 

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// M(:,j) is dense.  M is not scattered into Hf.</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>bool mij =                                  \
                                (M_is_bitmap ? Mjb [i] : 1) &amp;&amp;          \
                                (Mask_struct ? 1 : (Mjx [i] != 0)) ;    \
                            if (!mij) continue ;</cpp:value></cpp:define>

                        <switch>switch <condition>(<expr><name>msize</name></expr>)</condition>
                        <block>{<block_content>
                            <default>default:</default>
                            <case>case <expr><name>GB_1BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_SIZE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_2BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_4BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_8BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_16BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_SIZE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                    \
                                    <cpp:value>bool mij =                              \
                                        (M_is_bitmap ? Mjb [i] : 1) &amp;&amp;      \
                                        (Mask_struct ? 1 :                  \
                                            (Mjx [2*i] != 0) ||             \
                                            (Mjx [2*i+1] != 0)) ;           \
                                    if (!mij) continue ;</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                        </block_content>}</block></switch>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// M is sparse and scattered into Hf</comment>
                        <comment type="line">//------------------------------------------------------</comment>
                        
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_M_phase1.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase1: coarse hash task, C&lt;!M&gt;=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// M(:,j) is dense.  M is not scattered into Hf.</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>bool mij =                                  \
                                (M_is_bitmap ? Mjb [i] : 1) &amp;&amp;          \
                                (Mask_struct ? 1 : (Mjx [i] != 0)) ;    \
                            if (mij) continue ;</cpp:value></cpp:define>

                        <switch>switch <condition>(<expr><name>msize</name></expr>)</condition>
                        <block>{<block_content>
                            <default>default:</default>
                            <case>case <expr><name>GB_1BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint8_t</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_SIZE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_2BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint16_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_4BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint32_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_8BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                            <case>case <expr><name>GB_16BYTE</name></expr> :</case> 
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_TYPE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TYPE</name></cpp:macro> <cpp:value>uint64_t</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>M_SIZE</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SIZE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
                                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                    \
                                    <cpp:value>bool mij =                              \
                                        (M_is_bitmap ? Mjb [i] : 1) &amp;&amp;      \
                                        (Mask_struct ? 1 :                  \
                                            (Mjx [2*i] != 0) ||             \
                                            (Mjx [2*i+1] != 0)) ;           \
                                    if (mij) continue ;</cpp:value></cpp:define>
                                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase1.c"</cpp:file></cpp:include>
                                <break>break ;</break>
                        </block_content>}</block></switch>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// M is sparse and scattered into Hf</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_notM_phase1.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check result for phase1 for fine tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
    <block>{<block_content>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kk</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>kk</name> <operator>&lt;</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>bjnz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Bp</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>bvlen</name></expr> </then><else>: <expr><operator>(</operator><name><name>Bp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>Bp</name> <index>[<expr><name>kk</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <comment type="line">// no work to do if B(:,j) is empty</comment>
            <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>leader</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>leader</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>leader</name> <operator>!=</operator> <name>taskid</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>        <comment type="line">// get M(:,j)</comment>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjcount2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                  <comment type="line">// get M(i,j)</comment>
                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mjcount</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// phase1: fine Gustavson task, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B</comment>
                <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                    <name>Hf</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <comment type="line">// get M(i,j)</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>mij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cvlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mjcount2</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mjcount</name> <operator>==</operator> <name>mjcount2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><name>M_in_place</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// phase1: fine hash task, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B</comment>
                <comment type="line">// h == 0,   f == 0: unoccupied and unlocked</comment>
                <comment type="line">// h == i+1, f == 1: occupied with M(i,j)=1</comment>
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                    <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>hash_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GB_GET_M_ij</name> <argument_list>(<argument><expr><name>pM</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>              <comment type="line">// get M(i,j)</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>            <comment type="line">// skip if M(i,j)=0</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i_mine</name> <init>= <expr><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>  <comment type="line">// ((i+1),1)</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>probe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><expr><call><name>GB_HASH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>hf</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>hf</name> <operator>==</operator> <name>i_mine</name></expr>)</condition> 
                        <block>{<block_content>
                            <expr_stmt><expr><name>mjcount2</name><operator>++</operator></expr> ;</expr_stmt>
                            <break>break ;</break>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>hf</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>probe</name><operator>++</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>probe</name> <operator>&lt;</operator> <name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mjcount</name> <operator>==</operator> <name>mjcount2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>mjcount2</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>hash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>hash_size</name></expr> ;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>hf</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>h</name> <init>= <expr><operator>(</operator><name>hf</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>     <comment type="line">// empty (0), or a 1-based </comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>hf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>      <comment type="line">// 0 if empty or 1 if occupied</comment>
                    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>h</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&lt;=</operator> <name>cvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>hf</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>f</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mjcount2</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mjcount</name> <operator>==</operator> <name>mjcount2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

</unit>
