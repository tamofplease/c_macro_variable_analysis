<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_emult_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_emult_template: C = A.*B, C&lt;M&gt;=A.*B, and C&lt;!M&gt;=A.*B, C bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is bitmap.  A and B are bitmap or full.  M depends on the method</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>A_iso</name> <operator>&amp;&amp;</operator> <name>B_iso</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// one of A or B can be iso, but not both</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A.*B, C&lt;M&gt;=A.*B, or C&lt;!M&gt;=A.*B: C is bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// TODO modify this method so it can modify C in-place, and also use the</comment>
    <comment type="line">// accum operator.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD5</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method5: C is bitmap, M is not present</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       =           A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  .           bitmap          bitmap  (method: 5)</comment>
        <comment type="line">//      bitmap  .           bitmap          full    (method: 5)</comment>
        <comment type="line">//      bitmap  .           full            bitmap  (method: 5)</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                    <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ewise_method</name> <operator>==</operator> <name>GB_EMULT_METHOD6</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method6: C is bitmap, !M is sparse or hyper</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt;=       A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  sparse      bitmap          bitmap  (method: 6)</comment>
        <comment type="line">//      bitmap  sparse      bitmap          full    (method: 6)</comment>
        <comment type="line">//      bitmap  sparse      full            bitmap  (method: 6)</comment>

        <comment type="line">// M is sparse and complemented.  If M is sparse and not</comment>
        <comment type="line">// complemented, then C is constructed as sparse, not bitmap.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C(i,j) = A(i,j) .* B(i,j) can only be computed where M(i,j) is</comment>
        <comment type="line">// not present in the sparse pattern of M, and where it is present</comment>
        <comment type="line">// but equal to zero.</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scatter M into the C bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_bitmap_M_scatter_whole</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_SET_2</name></expr></argument>,
            <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C(i,j) has been marked, in Cb, with the value 2 where M(i,j)=1.</comment>
        <comment type="line">// These positions will not be computed in C(i,j).  C(i,j) can only</comment>
        <comment type="line">// be modified where Cb [p] is zero.</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// M(i,j) is zero, so C(i,j) can be computed</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// M(i,j) == 1, so C(i,j) is not computed</comment>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else <comment type="line">// if (ewise_method == GB_EMULT_METHOD7)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method7: C is bitmap; M is bitmap or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;M&gt; =        A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          bitmap  (method: 7)</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          full    (method: 7)</comment>
        <comment type="line">//      bitmap  bitmap      full            bitmap  (method: 7)</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;M&gt; =        A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  full        bitmap          bitmap  (method: 7)</comment>
        <comment type="line">//      bitmap  full        bitmap          full    (method: 7)</comment>
        <comment type="line">//      bitmap  full        full            bitmap  (method: 7)</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;!M&gt; =       A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          bitmap  (method: 7)</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          full    (method: 7)</comment>
        <comment type="line">//      bitmap  bitmap      full            bitmap  (method: 7)</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;!M&gt; =       A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  full        bitmap          bitmap  (method: 7)</comment>
        <comment type="line">//      bitmap  full        bitmap          full    (method: 7)</comment>
        <comment type="line">//      bitmap  full        full            bitmap  (method: 7)</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_MIJ</name></cpp:undef>     
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_MIJ</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                           \
            <cpp:value>bool mij = GBB (Mb, p) &amp;&amp; GB_mcast (Mx, p, msize) ;         \
            if (Mask_comp) mij = !mij ;</cpp:value></cpp:define> <comment type="block">/* TODO: use ^ */</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// M(i,j) is true, so C(i,j) can be computed</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// M(i,j) == 1, so C(i,j) is not computed</comment>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
