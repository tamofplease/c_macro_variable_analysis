<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_unop_transpose.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_unop_transpose: C=op(cast(A')), transpose, typecast, and apply op</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">// Ax unused for some uses of this template</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = op (cast (A'))</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Workspaces</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A and C are both full or both bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// A is avlen-by-avdim; C is avdim-by-avlen</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><name>avlen</name> <operator>*</operator> <name>avdim</name></expr></init></decl> ;</decl_stmt>   <comment type="line">// ignore integer overflow</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><name>Cb</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>Ab</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// TODO: it would be faster to do this by tiles, not rows/columns, for</comment>
        <comment type="line">// large matrices, but in most of the cases in GraphBLAS, A and C will</comment>
        <comment type="line">// be tall-and-thin or short-and-fat.</comment>

        <if_stmt><if>if <condition>(<expr><name>Ab</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A and C are both full (no work if A and C are iso)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pC_start</name></expr></argument>, <argument><expr><name>pC_end</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// get i and j of the entry C(i,j)</comment>
                    <comment type="line">// i = (pC % avdim) ;</comment>
                    <comment type="line">// j = (pC / avdim) ;</comment>
                    <comment type="line">// find the position of the entry A(j,i) </comment>
                    <comment type="line">// pA = j + i * avlen</comment>
                    <comment type="line">// Cx [pC] = op (Ax [pA])</comment>
                    <expr_stmt><expr><call><name>GB_CAST_OP</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>pC</name><operator>/</operator><name>avdim</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pC</name><operator>%</operator><name>avdim</name><operator>)</operator> <operator>*</operator> <name>avlen</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A and C are both bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pC_start</name></expr></argument>, <argument><expr><name>pC_end</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// get i and j of the entry C(i,j)</comment>
                    <comment type="line">// i = (pC % avdim) ;</comment>
                    <comment type="line">// j = (pC / avdim) ;</comment>
                    <comment type="line">// find the position of the entry A(j,i) </comment>
                    <comment type="line">// pA = j + i * avlen</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pC</name> <operator>/</operator> <name>avdim</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pC</name> <operator>%</operator> <name>avdim</name><operator>)</operator> <operator>*</operator> <name>avlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>cij_exists</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cij_exists</name></expr> ;</expr_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
                    <if_stmt><if>if <condition>(<expr><name>cij_exists</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// Cx [pC] = op (Ax [pA])</comment>
                        <expr_stmt><expr><call><name>GB_CAST_OP</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is sparse or hypersparse; C is sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// sequential method</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// iterate over the entries in A(:,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// C(j,i) = A(i,j)</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
                    <comment type="line">// Cx [pC] = op (Ax [pA])</comment>
                    <expr_stmt><expr><call><name>GB_CAST_OP</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>nworkspaces</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// atomic method</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// iterate over the entries in A(:,j)</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C(j,i) = A(i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// do this atomically:  pC = workspace [i]++</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_ATOMIC_CAPTURE_INC64</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
                        <comment type="line">// Cx [pC] = op (Ax [pA])</comment>
                        <expr_stmt><expr><call><name>GB_CAST_OP</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// non-atomic method</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// iterate over the entries in A(:,j)</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C(j,i) = A(i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:ifndef>
                        <comment type="line">// Cx [pC] = op (Ax [pA])</comment>
                        <expr_stmt><expr><call><name>GB_CAST_OP</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_TRANSPOSE</name></cpp:undef>

</unit>
