<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_reduce_to_scalar_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_reduce_to_scalar_template: s=reduce(A), reduce a matrix to a scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reduce a matrix to a scalar, with typecasting and generic operators.</comment>
<comment type="line">// No panel is used.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>   <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_has_zombies</name> <init>= <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce A to a scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// single thread</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// skip if the entry is a zombie or if not in the bitmap</comment>
            <if_stmt><if>if <condition>(<expr><name>A_has_zombies</name> <operator>&amp;&amp;</operator> <call><name>GB_IS_ZOMBIE</name> <argument_list>(<argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <comment type="line">// s = op (s, (ztype) Ax [p])</comment>
            <expr_stmt><expr><call><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// check for early exit</comment>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
            <if_stmt><if>if <condition>(<expr><call><name>GB_IS_TERMINAL</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// each thread reduces its own slice in parallel</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>early_exit</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// ztype t = identity</comment>
            <expr_stmt><expr><call><name>GB_SCALAR_IDENTITY</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>my_exit</name></decl>, <decl><type ref="prev"/><name>found</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_ATOMIC_READ</name></type>
            <name>my_exit</name> <init>= <expr><name>early_exit</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>my_exit</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// skip if the entry is a zombie or if not in the bitmap</comment>
                    <if_stmt><if>if <condition>(<expr><name>A_has_zombies</name> <operator>&amp;&amp;</operator> <call><name>GB_IS_ZOMBIE</name> <argument_list>(<argument><expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <comment type="line">// t = op (t, (ztype) Ax [p]), with typecast</comment>
                    <expr_stmt><expr><call><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// check for early exit</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_TERMINAL</name></expr></cpp:if>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_TERMINAL</name> <argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// tell the other tasks to exit early</comment>
                        <decl_stmt><decl><type><name>GB_ATOMIC_WRITE</name></type>
                        <name>early_exit</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
                        <break>break ;</break>
                    </block_content>}</block></if></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>F</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>found</name></expr> ;</expr_stmt>
            <comment type="line">// W [tid] = t, no typecast</comment>
            <expr_stmt><expr><call><name>GB_COPY_SCALAR_TO_ARRAY</name> <argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sum up the results of each slice using a single thread</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>F</name> <index>[<expr><name>tid</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// s = op (s, W [tid]), no typecast</comment>
                <expr_stmt><expr><call><name>GB_ADD_ARRAY_TO_SCALAR</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
