<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_emult_02_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_emult_02_template: C = A.*B when A is sparse/hyper and B is bitmap/full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is sparse, with the same sparsity structure as A.  No mask is present, or</comment>
<comment type="line">// M is bitmap/full.  A is sparse/hyper, and B is bitmap/full.  This method</comment>
<comment type="line">// also handles the case when the original input A is bitmap/full and B is</comment>
<comment type="line">// sparse/hyper, by computing B.*A with the operator flipped.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Aslice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>A_iso</name> <operator>&amp;&amp;</operator> <name>B_iso</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// one of A or B can be iso, but not both</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_FLIPPED</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A.*B or C&lt;#M&gt;=A.*B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A.*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method2(a): C=A.*B where A is sparse/hyper and B is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>pC</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA_and_pC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>,
                        <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Cp_kfirst</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Bb</name> <index>[<expr><name>pB</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                        <comment type="line">// C (i,j) = A (i,j) .* B (i,j)</comment>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_FLIPPED</name></expr></cpp:if>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method2(b): C=A.*B where A is sparse/hyper and B is full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>,
                        <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) .* B (i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// Ci [pA] = i ; already defined</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_FLIPPED</name></expr></cpp:if>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method2(c): C&lt;#M&gt;=A.*B, A is sparse/hyper, M and B are bitmap/full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Mask_struct</name><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>msize</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>pC</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_get_pA_and_pC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>,
                    <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Cp_kfirst</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>mij</name> <operator>=</operator> <name>mij</name> <operator>^</operator> <name>Mask_comp</name></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                    <comment type="line">// C (i,j) = A (i,j) .* B (i,j)</comment>
                    <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_EMULT</name></cpp:ifndef>
                    <expr_stmt><expr><call><name>GB_GETA</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     
                    <expr_stmt><expr><call><name>GB_GETB</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_FLIPPED</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
