<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_coarseHash_phase1.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_coarseHash_phase1: symbolic coarse Hash, optional dense mask</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase1: coarse hash task, C=A*B, or C&lt;#M&gt;=A*B if M is dense</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Initially, Hf [...] &lt; mark for all of Hf.</comment>
    <comment type="line">// Let f = Hf [hash] and h = Hi [hash]</comment>

    <comment type="line">// f &lt; mark          : unoccupied.</comment>
    <comment type="line">// h == i, f == mark : occupied with C(i,j)</comment>

    <comment type="line">// The mask M can be optionally checked, if it is bitmap, or as-if-full and</comment>
    <comment type="line">// checked in place.  This method is not used if M is present and sparse.</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>GB_GET_B_j</name></expr> ;</expr_stmt>            <comment type="line">// get B(:,j)</comment>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// special case when B(:,j) is empty</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_B_IS_SPARSE</name> <operator>||</operator> <name>GB_B_IS_HYPER</name> <operator>)</operator></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get M(:,j), or handle the case when B(:,j) has one entry</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CHECK_MASK_ij</name></cpp:ifdef>

            <comment type="line">// The mask M is bitmap or as-if-full.  Get pointers Mjb and Mjx</comment>
            <comment type="line">// into the M(:,j) vector.</comment>
            <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>M_TYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mjx</name> <init>= <expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>:
                <expr><operator>(</operator><operator>(</operator><name>M_TYPE</name> <operator>*</operator><operator>)</operator> <name>Mx</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>M_SIZE</name> <operator>*</operator> <name>pM_start</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mjb</name> <init>= <expr><ternary><condition><expr><name>M_is_bitmap</name></expr> ?</condition><then> <expr><operator>(</operator><name>Mb</name><operator>+</operator><name>pM_start</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

            <comment type="line">// M is not present</comment>
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_A_IS_SPARSE</name> <operator>||</operator> <name>GB_A_IS_HYPER</name> <operator>)</operator></expr></cpp:if>
            <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>     <comment type="line">// get index k of B(k,j)</comment>
                <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>            <comment type="line">// get A(:,k)</comment>
                <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>aknz</name></expr> ;</expr_stmt>
                <continue>continue ;</continue>
            </block_content>}</block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>mark</name><operator>++</operator></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// count nnz in C(:,j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
        <block>{<block_content>
            <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index k of B(k,j)</comment>
            <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
            <comment type="line">// scan A(:,k)</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>     <comment type="line">// get index i of A(i,k)</comment>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CHECK_MASK_ij</name></cpp:ifdef>
                <comment type="line">// check mask condition and skip if C(i,j) is protected by</comment>
                <comment type="line">// the mask</comment>
                <expr_stmt><expr><name>GB_CHECK_MASK_ij</name></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>hash</name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>marked</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><expr><name>hash</name> <operator>=</operator> <call><name>GB_HASHF</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash_bits</name></expr></argument>)</argument_list></call></expr> ;</init> <condition>;</condition>
                    <incr><expr><call><name>GB_REHASH</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>hash_bits</name></expr></argument>)</argument_list></call></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// if the hash entry is marked then it is occuppied with</comment>
                    <comment type="line">// some row index in the current C(:,j).</comment>
                    <expr_stmt><expr><name>marked</name> <operator>=</operator> <operator>(</operator><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>==</operator> <name>mark</name><operator>)</operator></expr> ;</expr_stmt>
                    <comment type="line">// if found, then the hash entry holds the row index i.</comment>
                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>marked</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Hi</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// if the hash entry is unmarked, then it is empty, and i</comment>
                    <comment type="line">// is not in the hash table.  In this case, C(i,j) is a new</comment>
                    <comment type="line">// entry.  The search terminates if either i is found, or</comment>
                    <comment type="line">// if an empty (unmarked) slot is found.</comment>
                    <if_stmt><if>if <condition>(<expr><name>found</name> <operator>||</operator> <operator>!</operator><name>marked</name></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
                </block_content>}</block></for>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>marked</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// empty slot found, insert C(i,j)</comment>
                    <expr_stmt><expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>mark</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Hi</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>cjnz</name><operator>++</operator></expr> ;</expr_stmt>            <comment type="line">// C(i,j) is a new entry</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>                <comment type="line">// count the entries in C(:,j)</comment>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
