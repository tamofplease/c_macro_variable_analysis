<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_Matrix_extractElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Matrix_extractElement: x = A(row,col)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extract the value of single scalar, x = A(row,col), typecasting from the</comment>
<comment type="line">// type of A to the type of x, as needed.</comment>

<comment type="line">// Returns GrB_SUCCESS if A(row,col) is present, and sets x to its value.</comment>
<comment type="line">// Returns GrB_NO_VALUE if A(row,col) is not present, and x is unmodified.</comment>

<comment type="line">// This template constructs GrB_Matrix_extractElement_[TYPE] for each of the</comment>
<comment type="line">// 13 built-in types, and the _UDT method for all user-defined types.</comment>
<comment type="line">// It also constructs GxB_Matrix_isStoredElement.</comment>

<comment type="line">// FUTURE: tolerate zombies</comment>

<function><type><name>GrB_Info</name></type> <name>GB_EXTRACT_ELEMENT</name>     <comment type="line">// extract a single entry, x = A(row,col)</comment>
<parameter_list>(
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_XTYPE</name></cpp:ifdef>
    <parameter><decl><type><name>GB_XTYPE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,                <comment type="line">// scalar to extract, not modified if not found</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// matrix to extract a scalar from</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>row</name></decl></parameter>,              <comment type="line">// row index</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>col</name></decl></parameter>               <comment type="line">// column index</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_XTYPE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// TODO: do not wait unless jumbled.  First try to find the element.</comment>
    <comment type="line">// If found (live or zombie), no need to wait.  If not found and pending</comment>
    <comment type="line">// tuples exist, wait and then extractElement again.</comment>

    <comment type="line">// delete any lingering zombies, assemble any pending tuples, and unjumble</comment>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><name>GB_WHERE_STRING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_extractElement"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// look for index i in vector j</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <name>vlen</name> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>GrB_INVALID_INDEX</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>vlen</name> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>GrB_INVALID_INDEX</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the entry A(i,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is sparse or hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ah</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hypersparse: look for j in hyperlist A-&gt;h [0 ... A-&gt;nvec-1]</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hypersparse but does not yet have a hyper_hash</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>GB_lookup</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,
                    <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is hypersparse, with a hyper_hash that is already built</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,
                    <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// vector j is empty</comment>
                <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is sparse: look in the jth vector</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name>pA_start</name> <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pA_end</name>   <operator>=</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// vector j has been found, now look for index i</comment>
        <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>pA_start</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <comment type="line">// Time taken for this step is at most O(log(nnz(A(:,j))).</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is bitmap or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name>vlen</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ab</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is bitmap</comment>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name><name>Ab</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// A is full</comment>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the element</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// entry found</comment>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_XTYPE</name></cpp:ifdef>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_UDT_EXTRACT</name></expr></argument> )</argument_list></call></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name>GB_XCODE</name> <operator>==</operator> <name>acode</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// copy Ax [pleft] into x, no typecasting, for built-in types only.</comment>
            <decl_stmt><decl><type><name>GB_XTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><operator>(</operator><name>GB_XTYPE</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>=</operator> <name><name>Ax</name> <index>[<expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><name>pleft</name></expr></else></ternary></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content> 
            <comment type="line">// typecast the value from Ax [pleft] into x</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>GB_XCODE</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// x (GB_XCODE) and A (acode) must be compatible</comment>
                <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ax</name> <init>= <expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>pleft</name><operator>*</operator><name>asize</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>GB_XCODE</name></expr></argument>, <argument><expr><name>ax</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// TODO: do not flush if extracting to GrB_Scalar</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// entry not found</comment>
        <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_UDT_EXTRACT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_EXTRACT_ELEMENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_XTYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_XCODE</name></cpp:undef>

</unit>
