<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_coarseHash_notM_phase5.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_coarseHash_notM_phase5: C&lt;!M&gt;=A*B, coarse Hash, phase 5</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase5: coarse hash task, C&lt;!M&gt;=A*B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// M is sparse and scattered into Hf</comment>

    <comment type="line">// Initially, Hf [...] &lt; mark for all of Hf.</comment>
    <comment type="line">// Let h = Hi [hash] and f = Hf [hash].</comment>

    <comment type="line">// f &lt; mark: unoccupied, M(i,j)=0, and C(i,j) not yet seen.</comment>
    <comment type="line">// h == i, f == mark   : M(i,j)=1. C(i,j) ignored.</comment>
    <comment type="line">// h == i, f == mark+1 : M(i,j)=0, and C(i,j) has been seen.</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>pC</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>   <comment type="line">// nothing to do</comment>
        <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>                <comment type="line">// get M(:,j)</comment>
        <expr_stmt><expr><name>mark</name> <operator>+=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>mark1</name> <init>= <expr><name>mark</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>GB_HASH_M_j</name></expr> ;</expr_stmt>               <comment type="line">// hash M(:,j)</comment>
        <expr_stmt><expr><name>GB_GET_B_j</name></expr> ;</expr_stmt>                <comment type="line">// get B(:,j)</comment>
        <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
        <block>{<block_content>
            <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index k of B(k,j)</comment>
            <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
            <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>               <comment type="line">// bkj = B(k,j)</comment>
            <comment type="line">// scan A(:,k)</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>     <comment type="line">// get index i of A(i,k)</comment>
                <for>for <control>(<init><expr><call><name>GB_HASH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init>)</control>       <comment type="line">// find i in hash</comment>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>f</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>&lt;</operator> <name>mark</name></expr>)</condition>   <comment type="line">// if true, i is new</comment>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) is new</comment>
                        <expr_stmt><expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>mark1</name></expr> ;</expr_stmt>             <comment type="line">// mark C(i,j) seen</comment>
                        <expr_stmt><expr><name><name>Hi</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>             <comment type="line">// t = A(i,k)*B(k,j)</comment>
                        <expr_stmt><expr><call><name>GB_HX_WRITE</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <comment type="line">// Hx [hash] = t</comment>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        <break>break ;</break>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>Hi</name> <index>[<expr><name>hash</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>mark1</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C(i,j) has been seen; update it.</comment>
                            <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>         <comment type="line">//t = A(i,k)*B(k,j)</comment>
                            <expr_stmt><expr><call><name>GB_HX_UPDATE</name> <argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Hx [hash] += t</comment>
                        </block_content>}</block></if></if_stmt>
                        <break>break ;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>GB_SORT_AND_GATHER_HASHED_C_j</name> <argument_list>(<argument><expr><name>mark1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
