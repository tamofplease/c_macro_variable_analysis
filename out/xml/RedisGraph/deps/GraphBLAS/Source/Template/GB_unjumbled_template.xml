<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_unjumbled_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_unjumble_template: unjumble the vectors of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task description</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sort vectors kfirst to klast</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// check if the vector needs sorting</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ilast</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>jumbled</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <break>break ;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// sort the vector</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>jumbled</name></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aknz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>GB_QSORT</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_QSORT</name></cpp:undef>

</unit>
