<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_template: C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B via saxpy3 method</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_AxB_saxpy3_template.c computes C=A*B for any semiring and matrix types,</comment>
<comment type="line">// where C is sparse or hypersparse.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// template code for C=A*B via the saxpy3 method</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <decl_stmt><decl><type><name>double</name></type> <name>ttt</name> <init>= <expr><call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the chunk size</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get M, A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// const int64_t *restrict Ch = C-&gt;h ;</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bh</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvlen</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse_or_hyper</name> <init>= <expr><name>B_is_sparse</name> <operator>||</operator> <name>B_is_hyper</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_jumbled</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_ok_for_binary_search</name> <init>= 
        <expr><operator>(</operator><operator>(</operator><name>A_is_sparse</name> <operator>||</operator> <name>A_is_hyper</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>A_jumbled</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_Yx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>A_hash_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>, <argument><expr><literal type="string">"A-&gt;Y hyper_hash"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_Yp</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_Yi</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_Yx</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_hash_bits</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_jumbled</name> <init>= <expr><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mnvec</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mvlen</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// get the M hyper_hash</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>M_Yx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>M_hash_bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <block>{<block_content> 
        <if_stmt><if>if <condition>(<expr><name>M_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// mask is present, and hypersparse</comment>
            <expr_stmt><expr><name>M_Yp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_Yi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_Yx</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M_hash_bits</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_A_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_B_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase2: numeric work for fine tasks</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// Coarse tasks: nothing to do in phase2.</comment>
    <comment type="line">// Fine tasks: compute nnz (C(:,j)), and values in Hx via atomics.</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>team_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>team_size</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name>     <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><name>GB_GET_T_FOR_SECONDJ</name></expr> ;</expr_stmt>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></cpp:if>
        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hx</name></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_PLUS_FC32_MONOID</name></expr></cpp:if>
        <decl_stmt><decl><type><name>float</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx_real</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>Hx</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>float</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx_imag</name> <init>= <expr><name>Hx_real</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC64_MONOID</name></expr></cpp:elif>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx_real</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>Hx</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx_imag</name> <init>= <expr><name>Hx_real</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// phase2: fine Gustavson task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Hf [i] == 0: unlocked, i has not been seen in C(:,j).</comment>
            <comment type="line">//      Hx [i] is not initialized.</comment>
            <comment type="line">//      M(i,j) is 0, or M is not present.</comment>
            <comment type="line">//      if M: Hf [i] stays equal to 0 (or 3 if locked)</comment>
            <comment type="line">//      if !M, or no M: C(i,j) is a new entry seen for 1st time</comment>

            <comment type="line">// Hf [i] == 1: unlocked, i has not been seen in C(:,j).</comment>
            <comment type="line">//      Hx [i] is not initialized.  M is present.</comment>
            <comment type="line">//      M(i,j) is 1. (either M or !M case)</comment>
            <comment type="line">//      if M: C(i,j) is a new entry seen for the first time.</comment>
            <comment type="line">//      if !M: Hf [i] stays equal to 1 (or 3 if locked)</comment>

            <comment type="line">// Hf [i] == 2: unlocked, i has been seen in C(:,j).</comment>
            <comment type="line">//      Hx [i] is initialized.  This case is independent of M.</comment>

            <comment type="line">// Hf [i] == 3: locked.  Hx [i] cannot be accessed.</comment>

            <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                <name>Hf</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
            <block>{<block_content>
                <comment type="line">// phase2: fine Gustavson task, C(:,j)=A*B(:,j)</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineGus_phase2.c"</cpp:file></cpp:include>
            </block_content>}</block>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
            <block>{<block_content>
                <comment type="line">// phase2: fine Gustavson task, C(:,j)&lt;M(:,j)&gt;=A*B(:,j)</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineGus_M_phase2.c"</cpp:file></cpp:include>
            </block_content>}</block>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <block>{<block_content>
                <comment type="line">// phase2: fine Gustavson task, C(:,j)&lt;!M(:,j)&gt;=A*B(:,j)</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineGus_notM_phase2.c"</cpp:file></cpp:include>
            </block_content>}</block>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// phase2: fine hash task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Each hash entry Hf [hash] splits into two parts, (h,f).  f</comment>
            <comment type="line">// is in the 2 least significant bits.  h is 62 bits, and is</comment>
            <comment type="line">// the 1-based index i of the C(i,j) entry stored at that</comment>
            <comment type="line">// location in the hash table.</comment>

            <comment type="line">// If M is present (M or !M), and M(i,j)=1, then (i+1,1)</comment>
            <comment type="line">// has been inserted into the hash table, in phase0.</comment>

            <comment type="line">// Given Hf [hash] split into (h,f)</comment>

            <comment type="line">// h == 0, f == 0: unlocked and unoccupied.</comment>
            <comment type="line">//                  note that if f=0, h must be zero too.</comment>

            <comment type="line">// h == i+1, f == 1: unlocked, occupied by M(i,j)=1.</comment>
            <comment type="line">//                  C(i,j) has not been seen, or is ignored.</comment>
            <comment type="line">//                  Hx is not initialized.  M is present.</comment>
            <comment type="line">//                  if !M: this entry will be ignored in C.</comment>

            <comment type="line">// h == i+1, f == 2: unlocked, occupied by C(i,j).</comment>
            <comment type="line">//                  Hx is initialized.  M is no longer</comment>
            <comment type="line">//                  relevant.</comment>

            <comment type="line">// h == (anything), f == 3: locked.</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>hash_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase2: fine hash task, C(:,j)=A*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// no mask present, or mask ignored</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_CHECK_MASK_ij</name></cpp:undef>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_phase2.c"</cpp:file></cpp:include>

            </block_content>}</block>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase2: fine hash task, C(:,j)&lt;M(:,j)&gt;=A*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>                <comment type="line">// get M(:,j)</comment>
                <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// M is bitmap/as-if-full, thus not scattered into Hf</comment>
                    <if_stmt><if>if <condition>(<expr><name>M_is_bitmap</name> <operator>&amp;&amp;</operator> <name>Mask_struct</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// M is bitmap and structural</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mjb</name> <init>= <expr><name>Mb</name> <operator>+</operator> <name>pM_start</name></expr></init></decl> ;</decl_stmt>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>if (!Mjb [i]) continue ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_phase2.c"</cpp:file></cpp:include>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M is bitmap/dense</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>const int64_t pM = pM_start + i ;           \
                            GB_GET_M_ij (pM) ;                          \
                            if (!mij) continue ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_phase2.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// M(:,j) is sparse and scattered into Hf</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_M_phase2.c"</cpp:file></cpp:include>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase2: fine hash task, C(:,j)&lt;!M(:,j)&gt;=A*B(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>                <comment type="line">// get M(:,j)</comment>
                <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// M is bitmap/as-if-full, thus not scattered into Hf</comment>
                    <if_stmt><if>if <condition>(<expr><name>M_is_bitmap</name> <operator>&amp;&amp;</operator> <name>Mask_struct</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// M is bitmap and structural</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mjb</name> <init>= <expr><name>Mb</name> <operator>+</operator> <name>pM_start</name></expr></init></decl> ;</decl_stmt>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>if (Mjb [i]) continue ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_phase2.c"</cpp:file></cpp:include>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M is bitmap/dense</comment>
                        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                            <cpp:value>const int64_t pM = pM_start + i ;           \
                            GB_GET_M_ij (pM) ;                          \
                            if (mij) continue ;</cpp:value></cpp:define>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_phase2.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// M(:,j) is sparse/hyper and scattered into Hf</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_fineHash_notM_phase2.c"</cpp:file></cpp:include>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase3/phase4: count nnz(C(:,j)) for fine tasks, cumsum of Cp</comment>
    <comment type="line">//==========================================================================</comment>

    <expr_stmt><expr><call><name>GB_AxB_saxpy3_cumsum</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase5: numeric phase for coarse tasks, gather for fine tasks</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// C is iso for the ANY_PAIR semiring, and non-iso otherwise</comment>
    <comment type="line">// allocate Ci and Cx</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>cnvec</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// set C-&gt;iso = GB_IS_ANY_PAIR_SEMIRING     OK</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_bix_alloc</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name> <operator>)</operator></expr></cpp:if>
    <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_jumbled</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>||:C_jumbled</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></cpp:if>
        <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hx</name></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>hsize</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_Gustavson</name> <init>= <expr><operator>(</operator><name>hash_size</name> <operator>==</operator> <name>cvlen</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>task_C_jumbled</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>taskid</name> <operator>&lt;</operator> <name>nfine</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// fine task: gather pattern and values</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>vector</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>team_size</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>team_size</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>leader</name>    <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>leader</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>my_teamid</name> <init>= <expr><name>taskid</name> <operator>-</operator> <name>leader</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase5: fine Gustavson task, C=A*B, C&lt;M&gt;=A*B, or C&lt;!M&gt;=A*B</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// Hf [i] == 2 if C(i,j) is an entry in C(:,j)</comment>
                <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                    <name>Hf</name> <init>= <expr><operator>(</operator><name>int8_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>kk</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>pC</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>my_teamid</name></expr></argument>, <argument><expr><name>team_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <name>cvlen</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// C(:,j) is dense</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                    <comment type="line">// copy Hx [istart:iend-1] into Cx [pC+istart:pC+iend-1]</comment>
                    <expr_stmt><expr><call><name>GB_CIJ_MEMCPY</name> <argument_list>(<argument><expr><name>pC</name> <operator>+</operator> <name>istart</name></expr></argument>, <argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name> <operator>-</operator> <name>istart</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <comment type="line">// C(:,j) is sparse</comment>
                    <expr_stmt><expr><name>pC</name> <operator>+=</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><call><name>GB_CIJ_GATHER</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// Cx [pC] = Hx [i]</comment>
                            <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase5: fine hash task, C=A*B, C&lt;M&gt;=A*B, C&lt;!M&gt;=A*B</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// (Hf [hash] &amp; 3) == 2 if C(i,j) is an entry in C(:,j),</comment>
                <comment type="line">// and the index i of the entry is (Hf [hash] &gt;&gt; 2) - 1.</comment>

                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                    <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>mystart</name></decl>, <decl><type ref="prev"/><name>myend</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>mystart</name></expr></argument>, <argument><expr><name>myend</name></expr></argument>, <argument><expr><name>hash_size</name></expr></argument>, <argument><expr><name>my_teamid</name></expr></argument>, <argument><expr><name>team_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pC</name> <operator>+=</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>my_cjnz</name></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>hash</name> <init>= <expr><name>mystart</name></expr></init></decl> ;</init> <condition><expr><name>hash</name> <operator>&lt;</operator> <name>myend</name></expr> ;</condition> <incr><expr><name>hash</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>hf</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>hash</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>hf</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt> <comment type="line">// found C(i,j) in hash</comment>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_CIJ_GATHER</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// Cx [pC] = Hx [hash]</comment>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>task_C_jumbled</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// numeric coarse task: compute C(:,kfirst:klast)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type>
                <name>Hf</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><specifier>restrict</specifier><operator>)</operator> <name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hf</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>start</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>end</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>nk</name> <init>= <expr><name>klast</name> <operator>-</operator> <name>kfirst</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>mark</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>nk</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>use_Gustavson</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase5: coarse Gustavson task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content>
                    <comment type="line">// phase5: coarse Gustavson task, C=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_noM_phase5.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>
                    <comment type="line">// phase5: coarse Gustavson task, C&lt;M&gt;=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_M_phase5.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content>
                    <comment type="line">// phase5: coarse Gustavson task, C&lt;!M&gt;=A*B</comment>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseGus_notM_phase5.c"</cpp:file></cpp:include>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// phase5: coarse hash task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Hi</name> <init>= <expr><name><name>SaxpyTasks</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>Hi</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>hash_size</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_NO_MASK</name> <operator>)</operator></expr></cpp:if>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase5: coarse hash task, C=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// no mask present, or mask ignored (see below)</comment>
                    <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_CHECK_MASK_ij</name></cpp:undef>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase5.c"</cpp:file></cpp:include>

                </block_content>}</block>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_MASK_COMP</name> <operator>)</operator></expr></cpp:elif>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase5: coarse hash task, C&lt;M&gt;=A*B</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// M is bitmap/as-if-full, thus not scattered into Hf</comment>
                        <if_stmt><if>if <condition>(<expr><name>M_is_bitmap</name> <operator>&amp;&amp;</operator> <name>Mask_struct</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// M is bitmap and structural</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_AND_STRUCTURAL</name></cpp:macro></cpp:define>
                            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                                <cpp:value>if (!Mjb [i]) continue ;</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase5.c"</cpp:file></cpp:include>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// M is bitmap/dense</comment>
                            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                                <cpp:value>const int64_t pM = pM_start + i ;           \
                                GB_GET_M_ij (pM) ;                          \
                                if (!mij) continue ;</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase5.c"</cpp:file></cpp:include>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M is sparse and scattered into Hf</comment>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_M_phase5.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// phase5: coarse hash task, C&lt;!M&gt;=A*B</comment>
                    <comment type="line">//---------------------------------------------------------- </comment>

                    <if_stmt><if>if <condition>(<expr><name>M_in_place</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// M is bitmap/as-if-full, thus not scattered into Hf</comment>
                        <if_stmt><if>if <condition>(<expr><name>M_is_bitmap</name> <operator>&amp;&amp;</operator> <name>Mask_struct</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// M is bitmap and structural</comment>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_AND_STRUCTURAL</name></cpp:macro></cpp:define>
                            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                                <cpp:value>if (Mjb [i]) continue ;</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase5.c"</cpp:file></cpp:include>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// M is bitmap/dense</comment>
                            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CHECK_MASK_ij</name></cpp:undef>
                            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CHECK_MASK_ij</name></cpp:macro>                        \
                                <cpp:value>const int64_t pM = pM_start + i ;           \
                                GB_GET_M_ij (pM) ;                          \
                                if (mij) continue ;</cpp:value></cpp:define>
                            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_phase5.c"</cpp:file></cpp:include>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M is sparse and scattered into Hf</comment>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3_coarseHash_notM_phase5.c"</cpp:file></cpp:include>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>C_jumbled</name> <operator>=</operator> <name>C_jumbled</name> <operator>||</operator> <name>task_C_jumbled</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// log the state of C-&gt;jumbled</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>C_jumbled</name></expr> ;</expr_stmt>    <comment type="line">// C is jumbled if any task left it jumbled</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_MASK</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_COMP</name></cpp:undef>

</unit>
