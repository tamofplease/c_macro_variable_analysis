<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_select_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_select_phase2: C=select(A,thunk)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// if A is iso and the op is user-defined, Ax [0] is passed to the user</comment>
    <comment type="line">// selectop</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// if A is bitmap, the bitmap selector is always used instead</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_DIAG_SELECTOR</name></cpp:ifndef>
    <comment type="line">// if A is full, all opcodes except DIAG use the bitmap selector instead</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Aslice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = select (A)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// if kfirst &gt; klast then task tid does no work at all</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// selection from vectors kfirst to klast</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// find the part of A(:,k) to be operated on by this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>pC</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_get_pA_and_pC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>,
                <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Cp_kfirst</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// compact Ai and Ax [pA_start ... pA_end-1] into Ci and Cx</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ENTRY_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// A is never full; that case is now handled by the</comment>
                    <comment type="line">// bitmap selector instead.</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_TEST_VALUE_OF_ENTRY</name> <argument_list>(<argument><expr><name>keep</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>&lt;</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                        <comment type="line">// Cx [pC] = Ax [pA] ;</comment>
                        <expr_stmt><expr><call><name>GB_SELECT_ENTRY</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pC</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIL_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                  <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// keep Zp [k] to pA_end-1</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>mynz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>p</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mynz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A and C are both sparse or hypersparse</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>+</operator> <name>mynz</name> <operator>&lt;=</operator> <name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>+</operator> <name>mynz</name> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ci</name> <operator>+</operator><name>pC</name></expr></argument>, <argument><expr><name>Ai</name> <operator>+</operator><name>p</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_ISO_SELECT</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><name>pC</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><name>p</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if></if_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIU_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                  <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// keep pA_start to Zp[k]-1</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>mynz</name> <init>= <expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mynz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A and C are both sparse or hypersparse</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>+</operator> <name>mynz</name> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ci</name> <operator>+</operator><name>pC</name></expr></argument>, <argument><expr><name>Ai</name> <operator>+</operator><name>pA_start</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_ISO_SELECT</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><name>pC</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><name>pA_start</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if></if_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// task that owns the diagonal entry does this work</comment>
                <comment type="line">// A can be sparse or full, but not bitmap</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>pA_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_ISO_SELECT</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><name>pC</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><name>p</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if></if_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_OFFDIAG_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                  <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// keep pA_start to Zp[k]-1</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>mynz</name> <init>= <expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>mynz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A and C are both sparse or hypersparse</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>+</operator> <name>mynz</name> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ci</name> <operator>+</operator><name>pC</name></expr></argument>, <argument><expr><name>Ai</name> <operator>+</operator><name>pA_start</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_ISO_SELECT</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><name>pC</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><name>pA_start</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name>pC</name> <operator>+=</operator> <name>mynz</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// keep Zp[k]+1 to pA_end-1</comment>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>mynz</name> <operator>=</operator> <name>pA_end</name> <operator>-</operator> <name>p</name></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>mynz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A and C are both sparse or hypersparse</comment>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC</name> <operator>&gt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>+</operator> <name>mynz</name> <operator>&lt;=</operator> <name><name>Cp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ci</name> <operator>+</operator><name>pC</name></expr></argument>, <argument><expr><name>Ai</name> <operator>+</operator><name>p</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_ISO_SELECT</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><name>pC</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><name>p</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>mynz</name><operator>*</operator><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if></if_stmt>

            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
