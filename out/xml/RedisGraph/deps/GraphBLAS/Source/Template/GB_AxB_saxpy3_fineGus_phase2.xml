<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_fineGus_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_fineGus_phase2: C=A*B, saxpy3 method, fine Gustavson, phase2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: fine Gustavson task, C(:,j)=A*B(:,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Hf [i] is initially 0.</comment>
    <comment type="line">// 0 -&gt; 3 : to lock, if i seen for first time</comment>
    <comment type="line">// 2 -&gt; 3 : to lock, if i seen already</comment>
    <comment type="line">// 3 -&gt; 2 : to unlock; now i has been seen</comment>

    <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index k of B(k,j)</comment>
        <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
        <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>               <comment type="line">// bkj = B(k,j)</comment>
        <comment type="line">// scan A(:,k)</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>     <comment type="line">// get index i of A(i,k)</comment>
            <expr_stmt><expr><name>GB_MULT_A_ik_B_kj</name></expr> ;</expr_stmt>     <comment type="line">// t = A(i,k) * B(k,j)</comment>
            <decl_stmt><decl><type><name>int8_t</name></type> <name>f</name></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(i,j) += t ; with the ANY monoid</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>GB_ATOMIC_READ</name></type>
                <name>f</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>            <comment type="line">// grab the entry</comment>
                <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>  <comment type="line">// check if already updated</comment>
                <expr_stmt><expr><call><name>GB_ATOMIC_WRITE_HX</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Hx [i] = t</comment>

            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C(i,j) += t ; with all other monoids</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_HAS_ATOMIC</name></expr></cpp:if>

                    <comment type="line">// if C(i,j) is already present (f==2), and the monoid can</comment>
                    <comment type="line">// be done atomically, then do the atomic update.  No need</comment>
                    <comment type="line">// to modify Hf [i].</comment>
                    <decl_stmt><decl><type><name>GB_ATOMIC_READ</name></type>
                    <name>f</name> <init>= <expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>        <comment type="line">// grab the entry</comment>
                    <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>         <comment type="line">// if true, update C(i,j)</comment>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>GB_ATOMIC_UPDATE_HX</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// Hx [i] += t</comment>
                        <continue>continue ;</continue>      <comment type="line">// C(i,j) has been updated</comment>
                    </block_content>}</block></if></if_stmt>

                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <do>do  <comment type="line">// lock the entry</comment>
                <block>{<block_content> 
                    <comment type="line">// do this atomically:</comment>
                    <comment type="line">// { f = Hf [i] ; Hf [i] = 3 ; }</comment>
                    <expr_stmt><expr><call><name>GB_ATOMIC_CAPTURE_INT8</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block> while <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> ;</do> <comment type="line">// lock owner gets f=0 or 2</comment>
                <if_stmt><if>if <condition>(<expr><name>f</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C(i,j) is a new entry</comment>
                    <expr_stmt><expr><call><name>GB_ATOMIC_WRITE_HX</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Hx [i] = t</comment>
                </block_content>}</block></if>
                <else>else <comment type="line">// f == 2</comment>
                <block>{<block_content> 
                    <comment type="line">// C(i,j) already appears in C(:,j)</comment>
                    <expr_stmt><expr><call><name>GB_ATOMIC_UPDATE_HX</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// Hx [i] += t</comment>
                </block_content>}</block></else></if_stmt>

            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <decl_stmt><decl><type><name>GB_ATOMIC_WRITE</name></type>
            <name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</decl_stmt>            <comment type="line">// flag/unlock the entry</comment>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
