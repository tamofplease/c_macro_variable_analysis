<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_dense_subassign_25_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_subassign_25_template: C&lt;M&gt; = A where C is empty and A is dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = A where C starts as empty, M is structural, and A is dense.  The</comment>
<comment type="line">// pattern of C is an exact copy of M.  A is full, dense, or bitmap.</comment>
<comment type="line">// M is sparse or hypersparse, and C is constructed with the same pattern as M.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, M, and A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mvlen</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>   <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Mslice</name> <init>= <expr><name>M_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Mslice</name>  <init>= <expr><name>M_ek_slicing</name> <operator>+</operator> <name>M_ntasks</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Mslice</name> <init>= <expr><name>M_ek_slicing</name> <operator>+</operator> <name>M_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is bitmap, so zombies can be created in C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>M_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:nzombies</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>M_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">// if kfirst &gt; klast then task tid does no work at all</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Mslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Mslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>task_nzombies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;M(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// find the part of M(:,k) to be operated on by this task</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pM_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                    <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Mslice</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C&lt;M(:,j)&gt; = A(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// M is hypersparse or sparse.  C is the same as M.</comment>
                <comment type="line">// pA points to the start of A(:,j) since A is dense</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(i,j)</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) becomes a zombie</comment>
                        <expr_stmt><expr><name>task_nzombies</name><operator>++</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pM</name></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><name>nzombies</name> <operator>+=</operator> <name>task_nzombies</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <name>nzombies</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is full, so no zombies will appear in C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
        <block>{<block_content>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>M_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>M_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">// if kfirst &gt; klast then task tid does no work at all</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Mslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Mslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C&lt;M(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// find the part of M(:,k) to be operated on by this task</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pM_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                        <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Mslice</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C&lt;M(:,j)&gt; = A(:,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// M is hypersparse or sparse.  C is the same as M.</comment>
                    <comment type="line">// pA points to the start of A(:,j) since A is dense</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
                    <macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></macro>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name> <operator>+</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>mvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:undef>

</unit>
