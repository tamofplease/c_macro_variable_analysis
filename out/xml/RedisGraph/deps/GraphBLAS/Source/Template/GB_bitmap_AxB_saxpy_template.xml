<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_AxB_saxpy_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_AxB_saxpy_template.c: C&lt;#M&gt;+=A*B when C is bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_AxB_saxpy_sparsity determines the sparsity structure for C&lt;M or !M&gt;=A*B</comment>
<comment type="line">// or C=A*B, and this template is used when C is bitmap.  C can be modified</comment>
<comment type="line">// in-place if the accum operator is the same as the monoid.</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_FREE_WORK (&amp;Wf, Wf_size) ;           \
    GB_FREE_WORK (&amp;Wcx, Wcx_size) ;         \
    GB_WERK_POP (H_slice, int64_t) ;        \
    GB_WERK_POP (A_slice, int64_t) ;        \
    GB_WERK_POP (B_slice, int64_t) ;        \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_BITMAP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// declare workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wf</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Wf_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wcx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Wcx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>H_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>B_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine max # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C, M, A, and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                 <comment type="line">// C is always bitmap</comment>
    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvlen</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bvdim</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_jumbled</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse_or_hyper</name> <init>= <expr><name>A_is_sparse</name> <operator>||</operator> <name>A_is_hyper</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mh</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>msize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mnvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>mvlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_hyper</name>  <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_sparse_or_hyper</name> <init>= <expr><name>M_is_hyper</name> <operator>||</operator> <name>M_is_sparse</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_full</name>   <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>M_nthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>M_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mp</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mh</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mb</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mi</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Mx</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>msize</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>mnvec</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>mvlen</name> <operator>=</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// if M is sparse or hypersparse, scatter it into the C bitmap</comment>
        <if_stmt><if>if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Cb [pC] += 2 for each entry M(i,j) in the mask</comment>
            <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>GB_ASSIGN</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_PLUS_2</name></expr></argument>,
                <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// the bitmap of C now contains:</comment>
            <comment type="line">//  Cb (i,j) = 0:   cij not present, mij zero</comment>
            <comment type="line">//  Cb (i,j) = 1:   cij present, mij zero</comment>
            <comment type="line">//  Cb (i,j) = 2:   cij not present, mij 1</comment>
            <comment type="line">//  Cb (i,j) = 3:   cij present, mij 1</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_A_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_B_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></cpp:if>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the method</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C                =               A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           .               hyper       bitmap</comment>
        <comment type="line">// bitmap           .               sparse      bitmap</comment>
        <comment type="line">// bitmap           .               hyper       full </comment>
        <comment type="line">// bitmap           .               sparse      full</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;M&gt;=             A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           any             hyper       bitmap</comment>
        <comment type="line">// bitmap           any             sparse      bitmap</comment>
        <comment type="line">// bitmap           bitmap/full     hyper       full</comment>
        <comment type="line">// bitmap           bitmap/full     sparse      full</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;!M&gt;=            A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           any             hyper       bitmap</comment>
        <comment type="line">// bitmap           any             sparse      bitmap</comment>
        <comment type="line">// bitmap           any             hyper       full </comment>
        <comment type="line">// bitmap           any             sparse      full</comment>

        <comment type="line">// construct the tasks</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl>, <decl><type ref="prev"/><name>ntasks</name></decl>, <decl><type ref="prev"/><name>nfine_tasks_per_vector</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_coarse_tasks</name></decl>, <decl><type ref="prev"/><name>use_atomics</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_AxB_saxpy4_tasks</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nfine_tasks_per_vector</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>use_coarse_tasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>use_atomics</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>bnz</name></expr></argument>, <argument><expr><name>bvdim</name></expr></argument>, <argument><expr><name>cvlen</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>use_coarse_tasks</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// slice the matrix A for each team of fine tasks</comment>
            <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>nfine_tasks_per_vector</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>A_slice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>nfine_tasks_per_vector</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = A*B, no mask, A sparse/hyper, B bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MASK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keep</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is bitmap, no mask</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is full, no mask</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_MASK</name></cpp:undef>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;M&gt; or &lt;!M&gt; = A*B, M and A are sparse/hyper, B bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MASK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name>keep</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is bitmap, M is sparse/hyper</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is full, M is sparse/hyper</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;M&gt; or &lt;!M&gt; = A*B, M bitmap, A sparse, B bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keep</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is bitmap, M is bitmap/full</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse/hyper, B is full, M is bitmap/full</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_B_IS_BITMAP</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_sparse_B_bitmap_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_MASK</name></cpp:undef>
        </block_content>}</block></else></if_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_BITMAP</name></cpp:undef>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C                =               A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           .               bitmap      bitmap</comment>
        <comment type="line">// bitmap           .               full        bitmap</comment>
        <comment type="line">// bitmap           .               bitmap      full</comment>
        <comment type="line">// full             .               full        full</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;M&gt;=             A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           any             bitmap      bitmap</comment>
        <comment type="line">// bitmap           any             full        bitmap</comment>
        <comment type="line">// bitmap           bitmap/full     bitmap      full</comment>
        <comment type="line">// bitmap           bitmap/full     full        full</comment>

        <comment type="line">//-----------------------------------------------------</comment>
        <comment type="line">// C               &lt;!M&gt;=            A     *     B</comment>
        <comment type="line">//-----------------------------------------------------</comment>

        <comment type="line">// bitmap           any             bitmap      bitmap</comment>
        <comment type="line">// bitmap           any             full        bitmap</comment>
        <comment type="line">// bitmap           any             bitmap      full</comment>
        <comment type="line">// bitmap           any             full        full</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TILE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_KTILE_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

        <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>avlen</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bvlen</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bvdim</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nI_tasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bvdim</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>bvdim</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>GB_TILE_SIZE</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nJ_tasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>avlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>avlen</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>GB_TILE_SIZE</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ntasks</name> <init>= <expr><name>nI_tasks</name> <operator>*</operator> <name>nJ_tasks</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = A*B, no mask, A and B bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keep</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap_template.c"</cpp:file></cpp:include>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;M&gt; or &lt;!M&gt; = A*B, M sparse/hyper, A and B bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name></type> <name>keep</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>Mask_comp</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap_template.c"</cpp:file></cpp:include>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;M&gt; or &lt;!M&gt; = A*B, all matrices bitmap/full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>keep</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>keep</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_AxB_saxpy_A_bitmap_B_bitmap_template.c"</cpp:file></cpp:include>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_SPARSE_OR_HYPER</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_BITMAP_OR_FULL</name></cpp:undef>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// if M is sparse, clear it from the C bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Cb [pC] -= 2 for each entry M(i,j) in the mask</comment>
        <expr_stmt><expr><call><name>GB_bitmap_M_scatter</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GB_ALL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>GB_ASSIGN</name></expr></argument>, <argument><expr><name>GB_BITMAP_M_SCATTER_MINUS_2</name></expr></argument>,
            <argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>M_ntasks</name></expr></argument>, <argument><expr><name>M_nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_FREE_ALL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_C_IS_BITMAP</name></cpp:undef>

</unit>
