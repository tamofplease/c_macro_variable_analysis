<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot4_cij.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot4_cij.c: C(i,j) = A(:,i)'*B(:,j) for dot4 method</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A is sparse or hypersparse, B is full or bitmap, and C is full</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C(i,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pC_start</name></expr></init></decl> ;</decl_stmt>   <comment type="line">// C(i,j) is at Cx [pC]</comment>
    <function_decl><type><name>GB_CTYPE</name></type> <name>GB_GET4C</name> <parameter_list>(<parameter><decl><type><name>cij</name></type></decl></parameter>, <parameter><decl><type><name>pC</name></type></decl></parameter>)</parameter_list> ;</function_decl>       <comment type="line">// cij = Cx [pC]</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C(i,j) += A (:,i)*B(:,j): a single dot product</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_B_IS_FULL</name> <operator>)</operator></expr></cpp:if>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is sparse/hyper and B is full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_PAIR_MULTIPLIER</name></expr></cpp:if>
        <block>{<block_content> 
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_EQ_MONOID</name></expr></cpp:if>
            <comment type="line">// EQ_PAIR semiring</comment>
            <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>cij</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><name>GB_CTYPE_BITS</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></cpp:elif>
            <comment type="line">// PLUS, XOR monoids: A(:,i)'*B(:,j) is nnz(A(:,i)),</comment>
            <comment type="line">// for bool, 8-bit, 16-bit, or 32-bit integer</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>cij</name><operator>)</operator> <operator>+</operator> <name>ainz</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>cij</name> <operator>=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <operator>(</operator><name>t</name> <operator>&amp;</operator> <name>GB_CTYPE_BITS</name><operator>)</operator></expr> ;</expr_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC32_MONOID</name></expr></cpp:elif>
            <comment type="line">// PLUS monoid for float complex</comment>
            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLXF</name> <argument_list>(<argument><expr><call><name>crealf</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>ainz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_PLUS_FC64_MONOID</name></expr></cpp:elif>
            <comment type="line">// PLUS monoid for double complex</comment>
            <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><call><name>creal</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>ainz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="line">// PLUS monoid for float, double, or 64-bit integers </comment>
            <expr_stmt><expr><name>cij</name> <operator>+=</operator> <operator>(</operator><name>GB_CTYPE</name><operator>)</operator> <name>ainz</name></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:elif>
        <block>{<block_content>
            <comment type="line">// MIN_FIRSTJ semiring: take the 1st entry in A(:,i)</comment>
            <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name> <operator>+</operator> <name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
        <block>{<block_content>
            <comment type="line">// MAX_FIRSTJ semiring: take last entry in A(:,i)</comment>
            <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>GB_OFFSET</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <block>{<block_content>
            <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// cij += A(k,i)*B(k,j)</comment>
            </block_content>}</block></for>
        </block_content>}</block>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is sparse/hyper and B is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_MIN_FIRSTJ_SEMIRING</name></expr></cpp:if>
        <block>{<block_content>
            <comment type="line">// MIN_FIRSTJ semiring: take the first entry</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <break>break ;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_IS_MAX_FIRSTJ_SEMIRING</name></expr></cpp:elif>
        <block>{<block_content>
            <comment type="line">// MAX_FIRSTJ semiring: take the last entry</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>pA</name></expr> ;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>cij</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>GB_OFFSET</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <break>break ;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <block>{<block_content>
            <macro><name>GB_PRAGMA_SIMD_DOT</name> <argument_list>(<argument>cij</argument>)</argument_list></macro>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>pB</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>GB_DOT</name> <argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pB</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cij+=A(k,i)*B(k,j)</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// save C(i,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cij</name></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
