<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_qsort_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_qsort_template: quicksort of a K-by-n array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This file is #include'd in GB_qsort*.c to create specific versions for</comment>
<comment type="line">// different kinds of sort keys and auxiliary arrays.  Requires an inline or</comment>
<comment type="line">// macro definition of the GB_lt function.  The GB_lt function has the form</comment>
<comment type="line">// GB_lt (A,i,B,j) and returns true if A[i] &lt; B[j].</comment>

<comment type="line">// All of these functions are static; there will be versions of them in each</comment>
<comment type="line">// variant of GB_qsort*, and given unique names via #define's in the</comment>
<comment type="line">// #include'ing file.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_partition: use a pivot to partition an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C.A.R Hoare partition method, partitions an array in-place via a pivot.</comment>
<comment type="line">// k = partition (A, n) partitions A [0:n-1] such that all entries in</comment>
<comment type="line">// A [0:k] are &lt;= all entries in A [k+1:n-1].</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>GB_partition</name>
<argument_list>(
    <argument><expr><call><name>GB_args</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,            <comment type="line">// array(s) to partition</comment>
    <argument><expr><specifier>const</specifier> <name>int64_t</name> <name>n</name></expr></argument>,        <comment type="line">// size of the array(s) to partition</comment>
    <argument><expr><name>uint64_t</name> <operator>*</operator><name>seed</name></expr></argument>          <comment type="line">// random number seed, modified on output</comment>
)</argument_list>
<block>{<block_content>

    <comment type="line">// select a pivot at random</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pivot</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>n</name> <operator>&lt;</operator> <name>GB_RAND_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_rand15</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_rand</name> <argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// get the Pivot</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Pivot_0</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt> <expr_stmt><expr><name><name>Pivot_0</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A_0</name> <index>[<expr><name>pivot</name></expr>]</index></name></expr> ;</expr_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_K</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Pivot_1</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt> <expr_stmt><expr><name><name>Pivot_1</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A_1</name> <index>[<expr><name>pivot</name></expr>]</index></name></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_K</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Pivot_2</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt> <expr_stmt><expr><name><name>Pivot_2</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>A_2</name> <index>[<expr><name>pivot</name></expr>]</index></name></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// At the top of the while loop, A [left+1...right-1] is considered, and</comment>
    <comment type="line">// entries outside this range are in their proper place and not touched.</comment>
    <comment type="line">// Since the input specification of this function is to partition A</comment>
    <comment type="line">// [0..n-1], left must start at -1 and right must start at n.</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>right</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// keep partitioning until the left and right sides meet</comment>
    <while>while <condition>(<expr><name>true</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// loop invariant:  A [0..left] &lt; pivot and A [right..n-1] &gt; pivot,</comment>
        <comment type="line">// so the region to be considered is A [left+1 ... right-1].</comment>

        <comment type="line">// increment left until finding an entry A [left] &gt;= pivot</comment>
        <do>do <block>{<block_content> <expr_stmt><expr><name>left</name><operator>++</operator></expr> ;</expr_stmt> </block_content>}</block> while <condition>(<expr><call><name>GB_lt</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>Pivot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> ;</do>

        <comment type="line">// decrement right until finding an entry A [right] &lt;= pivot</comment>
        <do>do <block>{<block_content> <expr_stmt><expr><name>right</name><operator>--</operator></expr> ;</expr_stmt> </block_content>}</block> while <condition>(<expr><call><name>GB_lt</name> <argument_list>(<argument><expr><name>Pivot</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr>)</condition> ;</do>

        <comment type="line">// now A [0..left-1] &lt; pivot and A [right+1..n-1] &gt; pivot, but</comment>
        <comment type="line">// A [left] &gt; pivot and A [right] &lt; pivot, so these two entries</comment>
        <comment type="line">// are out of place and must be swapped.</comment>

        <comment type="line">// However, if the two sides have met, the partition is finished.</comment>
        <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>right</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A has been partitioned into A [0:right] and A [right+1:n-1].</comment>
            <comment type="line">// k = right+1, so A is split into A [0:k-1] and A [k:n-1].</comment>
            <return>return <expr><operator>(</operator><name>right</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// since A [left] &gt; pivot and A [right] &lt; pivot, swap them</comment>
        <expr_stmt><expr><call><name>GB_swap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// after the swap this condition holds:</comment>
        <comment type="line">// A [0..left] &lt; pivot and A [right..n-1] &gt; pivot</comment>
    </block_content>}</block></while>
</block_content>}</block></decl></decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_quicksort: recursive single-threaded quicksort</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>GB_quicksort</name>    <comment type="line">// sort A [0:n-1]</comment>
<argument_list>(
    <argument><expr><call><name>GB_args</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,            <comment type="line">// array(s) to sort</comment>
    <argument><expr><specifier>const</specifier> <name>int64_t</name> <name>n</name></expr></argument>,        <comment type="line">// size of the array(s) to sort</comment>
    <argument><expr><name>uint64_t</name> <operator>*</operator><name>seed</name></expr></argument>          <comment type="line">// random number seed</comment>
)</argument_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// in-place insertion sort on A [0:n-1], where n is small</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>k</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GB_lt</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// swap A [j-1] and A [j]</comment>
                <expr_stmt><expr><call><name>GB_swap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// partition A [0:n-1] into A [0:k-1] and A [k:n-1]</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><call><name>GB_partition</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// sort each partition</comment>
        <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>                <comment type="line">// sort A [0:k-1]</comment>
        <expr_stmt><expr><call><name>GB_quicksort</name> <argument_list>(<argument><expr><call><name>GB_arg_offset</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>k</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// sort A [k+1:n-1]</comment>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

</unit>
