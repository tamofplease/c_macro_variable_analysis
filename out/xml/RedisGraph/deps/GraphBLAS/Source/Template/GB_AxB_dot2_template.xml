<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot2_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot2_template:  C=A'B, C&lt;!M&gt;=A'*B, or C&lt;M&gt;=A'*B via dot products</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A and B are sparse, bitmap, or full; never hypersparse.  If the input</comment>
<comment type="line">// matrices A and/or B are hypersparse, they are converted into hyper_shallow</comment>
<comment type="line">// sparse matrices, and C is converted from bitmap to sparse/hypersparse when</comment>
<comment type="line">// done.</comment>

<comment type="line">// If A_NOT_TRANSPOSED is #defined, the C=A*B or C&lt;#M&gt;=A*B is computed.</comment>
<comment type="line">// In this case A is bitmap or full, and B is sparse.</comment>

<comment type="line">// GB_DOT_ALWAYS_SAVE_CIJ: C(i,j) = cij</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_DOT_ALWAYS_SAVE_CIJ</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_C_IS_FULL</name></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOT_ALWAYS_SAVE_CIJ</name></cpp:macro>      \
    <cpp:value>{                                   \
        GB_PUTC (cij, pC) ;             \
    }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOT_ALWAYS_SAVE_CIJ</name></cpp:macro>      \
    <cpp:value>{                                   \
        GB_PUTC (cij, pC) ;             \
        Cb [pC] = 1 ;                   \
        task_cnvals++ ;                 \
    }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// GB_DOT_SAVE_CIJ: C(i,j) = cij, unless already done by GB_DOT</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_DOT_SAVE_CIJ</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_IS_ANY_MONOID</name></expr></cpp:if>
    <comment type="line">// for the ANY monoid, GB_DOT saves C(i,j) as soon as a value is found</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOT_SAVE_CIJ</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">// all other monoids: C(i,j) = cij if it exists</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOT_SAVE_CIJ</name></cpp:macro>             \
    <cpp:value>{                                   \
        if (GB_CIJ_EXISTS)              \
        {                               \
            GB_DOT_ALWAYS_SAVE_CIJ ;    \
        }                               \
    }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator><name>GB_A_IS_HYPER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>GB_B_IS_HYPER</name> <operator>)</operator></expr></cpp:if>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A'*B, C&lt;M&gt;=A'*B, or C&lt;!M&gt;=A'*B where C is bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_C_IS_FULL</name></expr></cpp:if>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a_tid</name> <init>= <expr><name>tid</name> <operator>/</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_tid</name> <init>= <expr><name>tid</name> <operator>%</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_start</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kA_end</name>   <init>= <expr><name><name>A_slice</name> <index>[<expr><name>a_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_start</name> <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>kB_end</name>   <init>= <expr><name><name>B_slice</name> <index>[<expr><name>b_tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>GB_C_IS_FULL</name><operator>)</operator></expr></cpp:if>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C=A'*B, C&lt;M&gt;=A'*B, or C&lt;!M&gt;=A'*B via dot products</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>kB_start</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>kB_end</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get B(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_B_IS_SPARSE</name></expr></cpp:if>
                <comment type="line">// B is sparse (never hypersparse)</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name> <init>= <expr><name><name>Bp</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bjnz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// no work to do if B(:,j) is empty, except to clear Cb</comment>
                    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>Cb</name> <index>[<expr><name>pC_start</name> <operator>+</operator> <name>kA_start</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>kA_end</name> <operator>-</operator> <name>kA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <continue>continue ;</continue>
                </block_content>}</block></if></if_stmt>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_SPARSE</name></expr></cpp:if>
                    <comment type="line">// Both A and B are sparse; get first and last in B(:,j)</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ib_first</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB_start</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ib_last</name>  <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <comment type="line">// B is bitmap or full</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C(:,j)&lt;#M(:,j)&gt; = A'*B(:,j), or C(:,j) = A'*B(:,j) if no mask</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>kA_start</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kA_end</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// get C(i,j), M(i,j), and clear the C(i,j) bitmap</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>     <comment type="line">// C is bitmap</comment>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ANY_SPECIALIZED</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <comment type="line">// M is bitmap and structural; Mask_comp true</comment>
                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>Mb</name> <index>[<expr><name>pC</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_MASK_IS_PRESENT</name></expr></argument> )</argument_list></call></expr></cpp:elif>
                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name></decl> ;</decl_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>M_is_bitmap</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// M is bitmap</comment>
                    <expr_stmt><expr><name>mij</name> <operator>=</operator> <name><name>Mb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pC</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>M_is_full</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// M is full</comment>
                    <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pC</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else <comment type="line">// M is sparse or hyper</comment>
                <block>{<block_content> 
                    <comment type="line">// M has been scattered into the C bitmap</comment>
                    <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>mij</name> <operator>^</operator> <name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content>
                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GB_C_IS_FULL</name></expr></cpp:elif>
                <comment type="line">// C is full; nothing to do</comment>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <comment type="line">// M is not present</comment>
                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// the mask allows C(i,j) to be computed</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_A_IS_SPARSE</name></expr></cpp:if>
                        <comment type="line">// A is sparse</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ainz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA</name></expr></init></decl> ;</decl_stmt>
                        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>GB_C_IS_FULL</name><operator>)</operator></expr></cpp:if>
                        <if_stmt><if>if <condition>(<expr><name>ainz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>       <comment type="line">// skip this test if C is full</comment>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <comment type="line">// A is bitmap or full</comment>
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_A_NOT_TRANSPOSED</name></cpp:ifdef>
                        <comment type="line">// A(i,:) starts at position i</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name></expr></init></decl> ;</decl_stmt></block_content></block></if></if_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <comment type="line">// A(:,i) starts at position i * vlen</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA</name> <init>= <expr><name>i</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) = A(:,i)'*B(:,j) or A(i,:)*B(:,j)</comment>
                        <decl_stmt><decl><type><name>bool</name></type> <name>cij_exists</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_CIJ_DECLARE</name> <argument_list>(<argument><expr><name>cij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot_cij.c"</cpp:file></cpp:include>
                    </block_content>}</block>
                </block_content>}</block>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><name>GB_C_IS_FULL</name><operator>)</operator></expr></cpp:if>
        <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></for>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_SPARSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_HYPER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_BITMAP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_IS_FULL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_SPARSE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_HYPER</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_BITMAP</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_B_IS_FULL</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_DOT_ALWAYS_SAVE_CIJ</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_DOT_SAVE_CIJ</name></cpp:undef>

</unit>
