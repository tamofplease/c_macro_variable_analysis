<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_select_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_select_template: C=select(A,thunk) if A is bitmap or full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Ab and Cb can be aliased, if A is bitmap and the selection is done in-place.</comment>
<comment type="line">// Ax and Cx are not aliased.</comment>

<comment type="line">// TODO: If done in-place, Cx can be passed as NULL.  Then if A is not bitmap,</comment>
<comment type="line">// C-&gt;b needs to be allocated, but not C-&gt;x.</comment>

<comment type="line">// TODO: use a single GB_memcpy for the values, regardless of selectop,</comment>
<comment type="line">// if no typecasting is being done.</comment>

<block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><name>avlen</name> <operator>*</operator> <name>avdim</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>pA</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>pA</name> <operator>%</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>pA</name> <operator>/</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ENTRY_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <comment type="line">// test the existence and value of A(i,j) </comment>
            <expr_stmt><expr><call><name>GB_TEST_VALUE_OF_ENTRY</name> <argument_list>(<argument><expr><name>keep</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ENTRY_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <name>keep</name></expr></init></decl> ;</decl_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIL_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name><operator>-</operator><name>i</name> <operator>&lt;=</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIU_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name><operator>-</operator><name>i</name> <operator>&gt;=</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name><operator>-</operator><name>i</name> <operator>==</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_OFFDIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name><operator>-</operator><name>i</name> <operator>!=</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>i</name><operator>+</operator><name>ithunk</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COLINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name><operator>+</operator><name>ithunk</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COLLE_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name> <operator>&lt;=</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COLGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>j</name> <operator>&gt;</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>i</name> <operator>&lt;=</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <expr_stmt><expr><operator>(</operator><name>i</name> <operator>&gt;</operator> <name>ithunk</name><operator>)</operator></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>pA</name></expr>]</index></name> <operator>=</operator> <name>cb</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>cb</name></expr> ;</expr_stmt>
        <block>{<block_content> 
            <comment type="line">// Cx [pA] = Ax [pA]</comment>
            <expr_stmt><expr><call><name>GB_SELECT_ENTRY</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>cnvals_handle</name><operator>)</operator> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
