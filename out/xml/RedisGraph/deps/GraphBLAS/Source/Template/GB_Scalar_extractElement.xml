<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_Scalar_extractElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Scalar_extractElement_template: x = S</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extract the value of single scalar, x = S, typecasting from the</comment>
<comment type="line">// type of S to the type of x, as needed.</comment>

<comment type="line">// Returns GrB_SUCCESS if the GrB_Scalar entry is present, and sets x to its</comment>
<comment type="line">// value.  Returns GrB_NO_VALUE if the GrB_Scalar is not present, and x is</comment>
<comment type="line">// unmodified.</comment>

<comment type="line">// This template constructs GrB_Scalar_extractElement_[TYPE] for each of the</comment>
<comment type="line">// 13 built-in types, and the _UDT method for all user-defined types.</comment>

<function><type><name>GrB_Info</name></type> <name>GB_EXTRACT_ELEMENT</name>     <comment type="line">// extract a single entry from S</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_XTYPE</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,                <comment type="line">// scalar to extract, not modified if not found</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>S</name></decl></parameter>          <comment type="line">// GrB_Scalar to extract a scalar from</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// delete any lingering zombies, assemble any pending tuples, and unjumble</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// extract scalar with pending tuples or zombies.  It cannot be</comment>
        <comment type="line">// actually jumbled, but S-&gt;jumbled might true anyway.</comment>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><name>GB_WHERE_STRING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_Scalar_extractElement"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>S</name></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// GB_XCODE and S must be compatible</comment>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>GB_XCODE</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>S</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>            <comment type="line">// empty</comment>
        <operator>||</operator> <operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>S</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator>      <comment type="line">// sparse/hyper with no entry</comment>
        <operator>||</operator> <operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>S</name><operator>-&gt;</operator><name>b</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>     <comment type="line">// bitmap with no entry</comment>
    <block>{<block_content> 
        <comment type="line">// quick return</comment>
        <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>GB_UDT_EXTRACT</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>GB_XCODE</name> <operator>==</operator> <name>scode</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// copy S into x, no typecasting, for built-in types only.</comment>
        <decl_stmt><decl><type><name>GB_XTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>GB_XTYPE</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>=</operator> <name><name>Sx</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content> 
        <comment type="line">// typecast S into x</comment>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>GB_XCODE</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_UDT_EXTRACT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_EXTRACT_ELEMENT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_XTYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_XCODE</name></cpp:undef>

</unit>
