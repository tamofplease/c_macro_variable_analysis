<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_meta16_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_meta16_factory: 16 cases of a method for A and B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// All 16 cases are handled: A and B are sparse, hyper, bitmap, or full.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_META16</name></cpp:macro></cpp:define>

<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>A_is_sparse</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// both A and B are sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is sparse and B is hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is sparse and B is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is sparse and B is full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hyper and B is sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// both A and B are hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hyper and B is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hyper and B is full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is bitmap and B is sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is bitmap and B is hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// both A and B are bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is bitmap and B is full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is full and B is sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is full and B is hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is full and B is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// both A and B are full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_methods.c"</cpp:file></cpp:include>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// redefine macros for any sparity of A and B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_META16</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_definitions.h"</cpp:file></cpp:include>

</unit>
