<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_concat_sparse_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_concat_sparse_template: concatenate a tile into a sparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The tile A is hypersparse, sparse, or full, not bitmap.  If C is iso, then</comment>
<comment type="line">// so is A, and the values are not copied here.</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C and the tile A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_CONCAT</name></cpp:ifndef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy the tile A into C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name><name>W</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// find the part of the kth vector A(:,j) for this task</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <comment type="line">// as done by GB_get_pA, but also get p0 = Ap [k]</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p0</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p1</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>kfirst</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// First vector for task tid; may only be partially owned.</comment>
                <expr_stmt><expr><name>pA_start</name> <operator>=</operator> <name><name>pstart_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pA_end</name>   <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>pstart_Aslice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>klast</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// Last vector for task tid; may only be partially owned.</comment>
                <expr_stmt><expr><name>pA_start</name> <operator>=</operator> <name>p0</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pA_end</name>   <operator>=</operator> <name><name>pstart_Aslice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// task tid entirely owns this vector A(:,k).</comment>
                <expr_stmt><expr><name>pA_start</name> <operator>=</operator> <name>p0</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pA_end</name>   <operator>=</operator> <name>p1</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// append A(:,j) onto C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <macro><name>GB_PRAGMA_SIMD</name></macro>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>       <comment type="line">// i = Ai [pA]</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>pA</name> <operator>-</operator> <name>p0</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>cistart</name> <operator>+</operator> <name>i</name></expr> ;</expr_stmt>
                <comment type="line">// Cx [pC] = Ax [pA] ;</comment>
                <expr_stmt><expr><call><name>GB_COPY</name> <argument_list>(<argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_CTYPE</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_CONCAT</name></cpp:undef>

</unit>
