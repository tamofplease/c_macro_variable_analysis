<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_Pending_n_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Pending_n: return the # of pending tuples in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>int64_t</name></type> <name>GB_Pending_n</name>        <comment type="line">// return # of pending tuples in A</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// only sparse and hypersparse matries can have pending tuples</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>n</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>n</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
