<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_full_add_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_full_add_template:  phase2 for C=A+B, C&lt;M&gt;=A+B, C&lt;!M&gt;=A+B, C is full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is full.  The mask M is not present (otherwise, C would be sparse,</comment>
<comment type="line">// hypersparse, or bitmap).  All of these methods are asymptotically optimal.</comment>

    <comment type="line">//      ------------------------------------------</comment>
    <comment type="line">//      C       =           A       +       B</comment>
    <comment type="line">//      ------------------------------------------</comment>
    <comment type="line">//      full    .           sparse          full  </comment>
    <comment type="line">//      full    .           bitmap          full  </comment>
    <comment type="line">//      full    .           full            sparse</comment>
    <comment type="line">//      full    .           full            bitmap</comment>
    <comment type="line">//      full    .           full            full  </comment>

<comment type="line">// If C is iso and full, this phase has nothing to do.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
<block>{<block_content>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_full</name> <operator>||</operator> <name>B_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method30: C, A, B are all full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_full</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C and A are full; B is hypersparse, sparse, or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method31: C and A are full; B is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                    <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                        <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                            <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j)</comment>
                        <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method32: C and A are full; B is sparse or hypersparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                    <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                        <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = A (i,j)</comment>
                    <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>B_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Bslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Bslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of B(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Bslice</name></expr></argument>, <argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over B(:,j), the kth vector of B</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C and B are full; A is hypersparse, sparse, or bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method33: C and B are full; A is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                    <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                        <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>,
                            <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = B (i,j)</comment>
                        <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method34: C and B are full; A is hypersparse or sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                    <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                        <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <block>{<block_content> 
                    <comment type="line">// C (i,j) = B (i,j)</comment>
                    <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of A(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over A(:,j), the kth vector of A</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
