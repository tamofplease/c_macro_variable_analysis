<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_coarseGus_notM_phase1.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_coarseGus_notM_phase1: symbolic coarse Gustavson, with !M</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <comment type="line">// Initially, Hf [...] &lt; mark for all of Hf.</comment>

    <comment type="line">// Hf [i] &lt; mark    : M(i,j)=0, C(i,j) is not yet seen.</comment>
    <comment type="line">// Hf [i] == mark   : M(i,j)=1, so C(i,j) is ignored.</comment>
    <comment type="line">// Hf [i] == mark+1 : M(i,j)=0, and C(i,j) has been seen.</comment>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>GB_GET_B_j</name></expr> ;</expr_stmt>            <comment type="line">// get B(:,j)</comment>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// special case when B(:,j) is empty</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_B_IS_SPARSE</name> <operator>||</operator> <name>GB_B_IS_HYPER</name> <operator>)</operator></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name>bjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get M(:,j) and scatter it into the Hf workspace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>GB_GET_M_j</name></expr> ;</expr_stmt>                                <comment type="line">// get M(:,j)</comment>
        <expr_stmt><expr><name>mark</name> <operator>+=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>f0</name> <init>= <expr><name>mark</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>f1</name> <init>= <expr><name>mark</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_SCATTER_M_j</name> <argument_list>(<argument><expr><name>pM_start</name></expr></argument>, <argument><expr><name>pM_end</name></expr></argument>, <argument><expr><name>f0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// scatter M(:,j)</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// count nnz in C(:,j)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
        <block>{<block_content>
            <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get k of B(k,j)</comment>
            <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
            <comment type="line">// scan A(:,k)</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name>GB_GET_A_ik_INDEX</name></expr> ;</expr_stmt>     <comment type="line">// get index i of A(i,k)</comment>
                <if_stmt><if>if <condition>(<expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>f0</name></expr>)</condition>        <comment type="line">// if true, M(i,j) is 0</comment>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>Hf</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>f1</name></expr> ;</expr_stmt>       <comment type="line">// flag C(i,j) as seen</comment>
                    <expr_stmt><expr><name>cjnz</name><operator>++</operator></expr> ;</expr_stmt>            <comment type="line">// C(i,j) is a new entry</comment>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>                <comment type="line">// count the entries in C(:,j)</comment>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
