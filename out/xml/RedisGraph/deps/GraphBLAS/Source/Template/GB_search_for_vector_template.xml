<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_search_for_vector_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_search_for_vector_template: find the vector k that contains p</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Given an index p, find k so that Ap [k] &lt;= p &amp;&amp; p &lt; Ap [k+1].  The search is</comment>
<comment type="line">// limited to k in the range Ap [kleft ... anvec].</comment>

<comment type="line">// A-&gt;p can come from any matrix: hypersparse, sparse, bitmap, or full.</comment>
<comment type="line">// For the latter two cases, A-&gt;p is NULL.</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_SEARCH_FOR_VECTOR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SEARCH_FOR_VECTOR_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name> <name>GB_search_for_vector_device</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<specifier>static</specifier> <specifier>inline</specifier> <name>int64_t</name></type> <name>GB_search_for_vector</name> <comment type="line">// return vector k that contains p</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>p</name></decl></parameter>,                <comment type="line">// search for vector k that contains p</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,  <comment type="line">// vector pointers to search</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>kleft</name></decl></parameter>,                  <comment type="line">// left-most k to search</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>anvec</name></decl></parameter>,                  <comment type="line">// Ap is of size anvec+1</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>avlen</name></decl></parameter>                   <comment type="line">// A-&gt;vlen</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is full or bitmap</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>avlen</name> <operator>*</operator> <name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>avlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>p</name> <operator>/</operator> <name>avlen</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// A is sparse</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>anvec</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// search for k</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kleft</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>kright</name> <init>= <expr><name>anvec</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Ap [k] == p has been found, but if k is an empty vector, then the</comment>
        <comment type="line">// next vector will also contain the entry p.  In that case, k needs to</comment>
        <comment type="line">// be incremented until finding the first non-empty vector for which</comment>
        <comment type="line">// Ap [k] == p.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <while>while <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>anvec</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// p has not been found in Ap, so it appears in the middle of Ap [k-1]</comment>
        <comment type="line">// ... Ap [k], as computed by the binary search.  This is the range of</comment>
        <comment type="line">// entries for the vector k-1, so k must be decremented.</comment>
        <expr_stmt><expr><name>k</name><operator>--</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The entry p must reside in a non-empty vector.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>k</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
