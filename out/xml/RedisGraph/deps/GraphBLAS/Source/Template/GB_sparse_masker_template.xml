<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_sparse_masker_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sparse_masker_template:  R = masker (C, M, Z) where R is sparse/hyper</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Computes C&lt;M&gt;=Z or C&lt;!M&gt;=Z, returning the result in R, which is sparse or</comment>
<comment type="line">// hypersparse.  The input matrix C is not modified.  Effectively, this</comment>
<comment type="line">// computes R=C and then R&lt;M&gt;=Z or R&lt;!M&gt;=Z.  If the C_replace descriptor is</comment>
<comment type="line">// enabled, then C has already been cleared, and is an empty (but non-NULL)</comment>
<comment type="line">// matrix.</comment>

<comment type="line">// phase1: does not compute R itself, but just counts the # of entries in each</comment>
<comment type="line">// vector of R.  Fine tasks compute the # of entries in their slice of a</comment>
<comment type="line">// single vector of R, and the results are cumsum'd.</comment>

<comment type="line">// phase2: computes R, using the counts computed by phase1.</comment>

<comment type="line">// C is sparse or hypersparse.  M and Z can have any sparsity structure.</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      sparse          sparse</comment>
        <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
        <comment type="line">//      sparse  full        sparse          sparse</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      sparse          sparse</comment>
        <comment type="line">//      sparse  sparse      bitmap          sparse</comment>
        <comment type="line">//      sparse  sparse      full            sparse</comment>
        <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
        <comment type="line">//      sparse  full        sparse          sparse</comment>

<comment type="line">// FUTURE:: add special cases for C==Z, C==M, and Z==M aliases</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// R(i,j) = Z(i,j) when Z is sparse or hypersparse</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_COPY_Z</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        rjnz++ ;                                                \
    }</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ISO_MASKER</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        Ri [pR] = i ;                                           \
        pR++ ;                                                  \
    }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        Ri [pR] = i ;                                           \
        memcpy (Rx +(pR)*rsize, Zx +(Z_iso ? 0:(pZ)*rsize), rsize) ;        \
        pR++ ;                                                  \
    }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// R(i,j) = Z(i,j) when Z is bitmap or full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_COPY_Z_BITMAP_OR_FULL</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z_BITMAP_OR_FULL</name></cpp:macro>                            \
    <cpp:value>{                                                           \
        rjnz += GBB (Zb, pZ_start + i - iZ_first) ;             \
    }</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ISO_MASKER</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z_BITMAP_OR_FULL</name></cpp:macro>                            \
    <cpp:value>{                                                           \
        int64_t pZ = pZ_start + i - iZ_first ;                  \
        if (GBB (Zb, pZ))                                       \
        {                                                       \
            Ri [pR] = i ;                                       \
            pR++ ;                                              \
        }                                                       \
    }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_Z_BITMAP_OR_FULL</name></cpp:macro>                            \
    <cpp:value>{                                                           \
        int64_t pZ = pZ_start + i - iZ_first ;                  \
        if (GBB (Zb, pZ))                                       \
        {                                                       \
            Ri [pR] = i ;                                       \
            memcpy (Rx +(pR)*rsize, Zx +(Z_iso ? 0:(pZ)*rsize), rsize) ;    \
            pR++ ;                                              \
        }                                                       \
    }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// R(i,j) = C(i,j)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_COPY_C</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_C</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        rjnz++ ;                                                \
    }</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ISO_MASKER</name></expr></argument> )</argument_list></call></expr></cpp:elif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_C</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        Ri [pR] = i ;                                           \
        pR++ ;                                                  \
    }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_C</name></cpp:macro>                                           \
    <cpp:value>{                                                           \
        Ri [pR] = i ;                                           \
        memcpy (Rx +(pR)*rsize, Cx +(C_iso ? 0:(pC)*rsize), rsize) ;        \
        pR++ ;                                                  \
    }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// template for R = masker (C, M, Z) when R is sparse or hypersparse</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase1: count entries in each C(:,j)</comment>
    <comment type="line">// phase2: compute C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_is_sparse</name> <operator>||</operator> <name>C_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>R_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>R_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get the task descriptor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>kfirst</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>klast</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>fine_task</name> <init>= <expr><operator>(</operator><name>klast</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>len</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// a fine task operates on a slice of a single vector</comment>
            <expr_stmt><expr><name>klast</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>len</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// a coarse task operates on one or more whole vectors</comment>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>vlen</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in this task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get j, the kth vector of R</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Rh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>rjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name></decl>, <decl><type ref="prev"/><name>pR_end</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A fine task computes a slice of R(:,j)</comment>
                <expr_stmt><expr><name>pR</name>     <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>  ]</index></name><operator>.</operator><name>pC</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pR_end</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pC</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Rp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;=</operator> <name>pR</name> <operator>&amp;&amp;</operator> <name>pR</name> <operator>&lt;=</operator> <name>pR_end</name> <operator>&amp;&amp;</operator> <name>pR_end</name> <operator>&lt;=</operator> <name><name>Rp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// The vectors of R are never sliced for a coarse task.</comment>
                <expr_stmt><expr><name>pR</name>     <operator>=</operator> <name><name>Rp</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pR_end</name> <operator>=</operator> <name><name>Rp</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>rjnz</name> <init>= <expr><name>pR_end</name> <operator>-</operator> <name>pR</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>rjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <continue>continue ;</continue>
            </block_content>}</block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get C(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>pC_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A fine task operates on Ci,Cx [pC...pC_end-1], which is</comment>
                <comment type="line">// a subset of the vector C(:,j)</comment>
                <expr_stmt><expr><name>pC</name>     <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pA</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pC_end</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pA_end</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// A coarse task operates on the entire vector C(:,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kC</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>R_to_C</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name><name>R_to_C</name> <index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>kC</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>pC</name>     <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>kC</name></expr>]</index></name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>pC_end</name> <operator>=</operator> <name><name>Cp</name> <index>[<expr><name>kC</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <name>pC</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// nnz in C(:,j) for this slice</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>cdense</name> <init>= <expr><operator>(</operator><name>cjnz</name> <operator>==</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>cjnz</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_2_OF_2</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>( <argument><expr><name>GB_DEBUG</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <comment type="line">// get the first index in C(:,j) for this vector</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iC_first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iC_first</name> <operator>=</operator> <name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iC_last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iC_last</name>  <operator>=</operator> <name><name>Ci</name> <index>[<expr><name>pC_end</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get Z(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pZ</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>pZ_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A fine task operates on Zi,Zx [pZ...pZ_end-1], which is</comment>
                <comment type="line">// a subset of the vector Z(:,j)</comment>
                <expr_stmt><expr><name>pZ</name>     <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pB</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pZ_end</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pB_end</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// A coarse task operates on the entire vector Z(:,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kZ</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>R_to_Z</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name><name>R_to_Z</name> <index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>kZ</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>pZ</name>     <operator>=</operator> <call><name>GBP</name> <argument_list>(<argument><expr><name>Zp</name></expr></argument>, <argument><expr><name>kZ</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>pZ_end</name> <operator>=</operator> <call><name>GBP</name> <argument_list>(<argument><expr><name>Zp</name></expr></argument>, <argument><expr><name>kZ</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>zjnz</name> <init>= <expr><name>pZ_end</name> <operator>-</operator> <name>pZ</name></expr></init></decl> ;</decl_stmt>        <comment type="line">// nnz in Z(:,j) for this slice</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pZ_start</name> <init>= <expr><name>pZ</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>zdense</name> <init>= <expr><operator>(</operator><name>zjnz</name> <operator>==</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>zjnz</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>iZ_first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>iZ_last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>zjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>iZ_first</name> <operator>=</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Zi</name></expr></argument>, <argument><expr><name>pZ</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>iZ_last</name>  <operator>=</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Zi</name></expr></argument>, <argument><expr><name>pZ_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// get M(:,j)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>pM_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A fine task operates on Mi,Mx [pM...pM_end-1], which is</comment>
                <comment type="line">// a subset of the vector M(:,j)</comment>
                <expr_stmt><expr><name>pM</name>     <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pM</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>pM_end</name> <operator>=</operator> <name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pM_end</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// A coarse task operates on the entire vector M (:,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kM</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>R_to_M</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name><name>R_to_M</name> <index>[<expr><name>k</name></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>kM</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>pM</name>     <operator>=</operator> <call><name>GBP</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>kM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>pM_end</name> <operator>=</operator> <call><name>GBP</name> <argument_list>(<argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>kM</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>mjnz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM</name></expr></init></decl> ;</decl_stmt>    <comment type="line">// nnz (M (:,j))</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>mdense</name> <init>= <expr><operator>(</operator><name>mjnz</name> <operator>==</operator> <name>len</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>mjnz</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

            <comment type="line">// get the first index in M(:,j) for this vector</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iM_first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_first</name> <init>= <expr><name>pM</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iM_first</name> <operator>=</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM_first</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// R(:,j) = masker (C (:,j), M (:,j), Z (:,j))</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>Z_is_bitmap</name> <operator>||</operator> <name>Z_is_full</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Method01: Z is bitmap or full; M is sparse or hypersparse</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      bitmap          sparse</comment>
                <comment type="line">//      sparse  sparse      full            sparse</comment>

                <comment type="line">// M is sparse or hypersparse, and not complemented.</comment>
                <comment type="line">// Otherwise, R is bitmap and not computed here, but in</comment>
                <comment type="line">// GB_bitmap_masker_template instead.</comment>

                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>Mask_comp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// 2-way merge of C(:,j) and M(:,j) and direct lookup of Z</comment>

                <while>while <condition>(<expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr>)</condition>
                <block>{<block_content>
                    
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>iC</name> <operator>&lt;</operator> <name>iM</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) is present but M(i,j) is not</comment>
                        <comment type="line">// R(i,j) = C(i,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>iC</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iC</name> <operator>&gt;</operator> <name>iM</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// M(i,j) is present but C(i,j) is not</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>iM</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// R(i,j) = Z(i,j)</comment>
                            <expr_stmt><expr><name>GB_COPY_Z_BITMAP_OR_FULL</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="line">// both C(i,j) and M(i,j) are present</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>iM</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// R(i,j) = Z(i,j)</comment>
                            <expr_stmt><expr><name>GB_COPY_Z_BITMAP_OR_FULL</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <comment type="line">// R(i,j) = C(i,j)</comment>
                            <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>

                <comment type="line">// if M(:,j) is exhausted ; continue scanning all of C(:,j)</comment>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><name>rjnz</name> <operator>+=</operator> <operator>(</operator><name>pC_end</name> <operator>-</operator> <name>pC</name><operator>)</operator></expr> ;</expr_stmt>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <for>for <control>( <init>;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// C(i,j) is present but M(i,j) is not</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <comment type="line">// if C(:,j) is exhausted ; continue scanning all of M(:,j)</comment>
                <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// M(i,j) is present but C(i,j) is not</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = Z(i,j)</comment>
                        <expr_stmt><expr><name>GB_COPY_Z_BITMAP_OR_FULL</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>mjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Z is sparse or hypersparse, M(:,j) is empty</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>

                <comment type="line">// Z must be sparse or hypersparse</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_is_sparse</name> <operator>||</operator> <name>Z_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// Method02: M(:,j) is empty and not complemented</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// R(:,j) = C(:,j), regardless of Z(:,j)</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
                    <expr_stmt><expr><name>rjnz</name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>rjnz</name> <operator>==</operator> <name>cjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ri</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>)</operator></expr></argument>,       <argument><expr><name>Ci</name> <operator>+</operator><operator>(</operator><name>pC</name><operator>)</operator></expr></argument>, <argument><expr><name>cjnz</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cjnz</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>+</operator><name>k</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><name>pC</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>cjnz</name><operator>*</operator><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// Method03: M(:,j) is empty and complemented</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <comment type="line">// R(:,j) = Z(:,j), regardless of C(:,j)</comment>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
                    <expr_stmt><expr><name>rjnz</name> <operator>=</operator> <name>zjnz</name></expr> ;</expr_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>rjnz</name> <operator>==</operator> <name>zjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ri</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>)</operator></expr></argument>, <argument><expr><name>Zi</name> <operator>+</operator><operator>(</operator><name>pZ</name><operator>)</operator></expr></argument>, <argument><expr><name>zjnz</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                    <if_stmt><if>if <condition>(<expr><name>Z_iso</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>zjnz</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>+</operator><name>k</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><name>pZ</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>zjnz</name><operator>*</operator><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>cdense</name> <operator>&amp;&amp;</operator> <name>zdense</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Method03: C(:,j) and Z(:,j) dense: thus R(:,j) dense</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>
                <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
                <comment type="line">//      sparse  full        sparse          sparse</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>
                <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
                <comment type="line">//      sparse  full        sparse          sparse</comment>

                <comment type="line">// Both C(:,j) and Z(:,j) are dense (that is, all entries</comment>
                <comment type="line">// present), but both C and Z are stored in a sparse or</comment>
                <comment type="line">// hypersparse sparsity structure.  M has any sparsity.</comment>

                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_is_sparse</name> <operator>||</operator> <name>Z_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cjnz</name> <operator>==</operator> <name>zjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iC_first</name> <operator>==</operator> <name>iZ_first</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iC_last</name>  <operator>==</operator> <name>iZ_last</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><name>rjnz</name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>
                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>rjnz</name> <operator>==</operator> <name>cjnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cjnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>p</name> <operator>+</operator> <name>iC_first</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Ri</name> <index>[<expr><name>pR</name> <operator>+</operator> <name>p</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pM</name> <operator>&lt;</operator> <name>pM_end</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>INT64_MAX</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>iM</name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = Z (i,j)</comment>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>+</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>Z_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>pZ</name><operator>+</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>,
                            <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = C (i,j)</comment>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>pR</name><operator>+</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>C_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>pC</name><operator>+</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>,
                            <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Method04: 2-way merge of C(:,j) and Z(:,j)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// Z is sparse or hypersparse; M has any sparsity structure</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_is_sparse</name> <operator>||</operator> <name>Z_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Z is sparse or hypersparse, M has any sparsity</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>
                <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
                <comment type="line">//      sparse  full        sparse          sparse</comment>

                <comment type="line">//      ------------------------------------------</comment>
                <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
                <comment type="line">//      ------------------------------------------</comment>

                <comment type="line">//      sparse  sparse      sparse          sparse</comment>
                <comment type="line">//      sparse  bitmap      sparse          sparse</comment>
                <comment type="line">//      sparse  full        sparse          sparse</comment>

                <while>while <condition>(<expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name> <operator>&amp;&amp;</operator> <name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// get the next i for R(:,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>iZ</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>iC</name></expr></argument>, <argument><expr><name>iZ</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// get M(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>mdense</name></expr>)</condition>
                    <block>{<block_content> 

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// Method04a: M(:,j) is dense</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <comment type="line">// mask is dense, lookup M(i,j)</comment>
                        <comment type="line">// iM_first == Mi [pM_first]</comment>
                        <comment type="line">// iM_first + delta == Mi [pM_first + delta]</comment>
                        <comment type="line">// let i = iM_first + delta</comment>
                        <comment type="line">// let pM = pM_first + delta</comment>
                        <comment type="line">// then delta = i - iM_first</comment>
                        <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_first</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>iM_first</name><operator>)</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// increment pM for the wrapup phase below</comment>
                        <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// Method04b: M(:,j) is sparse</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <comment type="line">// Use GB_SPLIT_BINARY_SEARCH so that pM can be used in</comment>
                        <comment type="line">// the for loop with index pM in the wrapup phase.</comment>
                        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// increment pM for the wrapup phase below</comment>
                            <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// R(i,j) = C(i,j) or Z(i,j)</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>iC</name> <operator>&lt;</operator> <name>iZ</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C(i,j) is present but Z(i,j) is not</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>iC</name> <operator>&gt;</operator> <name>iZ</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// Z(i,j) is present but C(i,j) is not</comment>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name>pZ</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <comment type="line">// both C(i,j) and Z(i,j) are present</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>iC</name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                        <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>pZ</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></while>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Method04: wrapup: C or Z are exhausted, or initially empty</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>pC_end</name> <operator>-</operator> <name>pC</name></expr> ;</expr_stmt>    <comment type="line">// nnz (C(:,j)) remaining</comment>
                <expr_stmt><expr><name>zjnz</name> <operator>=</operator> <name>pZ_end</name> <operator>-</operator> <name>pZ</name></expr> ;</expr_stmt>    <comment type="line">// nnz (Z(:,j)) remaining</comment>
                <expr_stmt><expr><name>mjnz</name> <operator>=</operator> <name>pM_end</name> <operator>-</operator> <name>pM</name></expr> ;</expr_stmt>    <comment type="line">// nnz (M(:,j)) remaining</comment>

                <if_stmt><if>if <condition>(<expr><name>cjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// C(:,j) is empty</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// mask is not complemented</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <if_stmt><if>if <condition>(<expr><name>mdense</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04c: M(:,j) is dense</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <for>for <control>( <init>;</init> <condition><expr><name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr> ;</condition> <incr><expr><name>pZ</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// mask is dense, lookup M(i,j)</comment>
                                <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_first</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>iM_first</name><operator>)</operator></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                           <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>zjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>mjnz</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04d: Z(:,j) is much denser than M(:,j)</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <comment type="line">// This loop requires pM to start at the first</comment>
                            <comment type="line">// entry in M(:,j) that has not yet been handled.</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content> 
                                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pZ_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                    <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Zi</name></expr></argument>, <argument><expr><name>pZ</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>zjnz</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04e: M(:,j) is much denser than Z(:,j)</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr> ;</condition> <incr><expr><name>pZ</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>,<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04f: M(:,j) and Z(:,j) about same # entries</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <while>while <condition>(<expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name> <operator>&amp;&amp;</operator> <name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr>)</condition>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>iM</name> <operator>&lt;</operator> <name>i</name></expr>)</condition>
                                <block>{<block_content> 
                                    <comment type="line">// M(i,j) exists but not Z(i,j)</comment>
                                    <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></if>
                                <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>iM</name></expr>)</condition>
                                <block>{<block_content> 
                                    <comment type="line">// Z(i,j) exists but not M(i,j)</comment>
                                    <expr_stmt><expr><name>pZ</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content> 
                                    <comment type="line">// both M(i,j) and Z(i,j) exist</comment>
                                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                    <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                                    <expr_stmt><expr><name>pZ</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></while>
                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// complemented mask, and C(:,j) empty</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <if_stmt><if>if <condition>(<expr><name>mdense</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04g: M(:,j) is dense</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <for>for <control>( <init>;</init> <condition><expr><name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr> ;</condition> <incr><expr><name>pZ</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// mask is dense, lookup M(i,j)</comment>
                                <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_first</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>iM_first</name><operator>)</operator></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                           <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>   <comment type="line">// mask is complemented</comment>
                            </block_content>}</block></for>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04h: M(:,j) is sparse</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pZ</name> <operator>&lt;</operator> <name>pZ_end</name></expr> ;</condition> <incr><expr><name>pZ</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Zi</name> <index>[<expr><name>pZ</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_Z</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>   <comment type="line">// mask is complemented</comment>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>zjnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>

                    <comment type="line">//----------------------------------------------------------</comment>
                    <comment type="line">// Z(:,j) is empty</comment>
                    <comment type="line">//----------------------------------------------------------</comment>

                    <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition>
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// mask is complemented</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <if_stmt><if>if <condition>(<expr><name>mdense</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04i: M(:,j) is dense</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <for>for <control>( <init>;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// mask is dense, lookup M(i,j)</comment>
                                <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_first</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>iM_first</name><operator>)</operator></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                           <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>cjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>mjnz</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04j: C(:,j) is much denser than M(:,j)</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition>
                                <block>{<block_content> 
                                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                    <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                    <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>pC</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>mjnz</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name>cjnz</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04k: M(:,j) is much denser than C(:,j)</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>

                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04l: M(:,j) and C(:,j) about same # entries</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <while>while <condition>(<expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name> <operator>&amp;&amp;</operator> <name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr>)</condition>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>iM</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><name>iM</name> <operator>&lt;</operator> <name>i</name></expr>)</condition>
                                <block>{<block_content> 
                                    <comment type="line">// M(i,j) exists but not C(i,j)</comment>
                                    <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></if>
                                <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>iM</name></expr>)</condition>
                                <block>{<block_content> 
                                    <comment type="line">// C(i,j) exists but not M(i,j)</comment>
                                    <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content> 
                                    <comment type="line">// both M(i,j) and C(i,j) exist</comment>
                                    <if_stmt><if>if <condition>(<expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                    <expr_stmt><expr><name>pM</name><operator>++</operator></expr> ;</expr_stmt>
                                    <expr_stmt><expr><name>pC</name><operator>++</operator></expr> ;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></while>
                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>

                        <comment type="line">//------------------------------------------------------</comment>
                        <comment type="line">// non-complemented mask, and Z(:,j) empty</comment>
                        <comment type="line">//------------------------------------------------------</comment>

                        <if_stmt><if>if <condition>(<expr><name>mdense</name></expr>)</condition>
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04m: M(:,j) is dense</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <for>for <control>( <init>;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// mask is dense, lookup M(i,j)</comment>
                                <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_first</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>iM_first</name><operator>)</operator></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                           <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>

                            <comment type="line">//--------------------------------------------------</comment>
                            <comment type="line">// Method04n: M(:,j) is sparse</comment>
                            <comment type="line">//--------------------------------------------------</comment>

                            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <for>for <control>( <init>;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// M(i,j) false if not present</comment>
                                <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl> ;</decl_stmt>
                                <expr_stmt><expr><call><name>GB_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>mij</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>GB_COPY_C</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>

                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_2_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pR</name> <operator>==</operator> <name>pR_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// final count of nnz (R(:,j))</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_PHASE_1_OF_2</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <if_stmt><if>if <condition>(<expr><name>fine_task</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>taskid</name></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <name>rjnz</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Rp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>rjnz</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></for>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
