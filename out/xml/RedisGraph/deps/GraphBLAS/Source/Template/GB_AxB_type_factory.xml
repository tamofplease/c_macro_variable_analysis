<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_type_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_type_factory.c: switch factory for C=A*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A template file #include'd in GB_AxB_factory.c, which calls up to 61</comment>
<comment type="line">// semirings.  Not all multiplicative operators and types are used with every</comment>
<comment type="line">// monoid.  The 2 complex types appear only in the times, plus, and any</comment>
<comment type="line">// monoids, for a subset of the multiply operators.</comment>

<comment type="line">//  min monoid:     10 real, non-boolean types</comment>
<comment type="line">//  max monoid:     10 real, non-boolean types</comment>
<comment type="line">//  times monoid:   10 real, non-boolean types (+2 if complex)</comment>
<comment type="line">//  plus monoid:    10 real, non-boolean types (+2 if complex)</comment>
<comment type="line">//  any monoid:     10 real, non-boolean types (+2 if complex)</comment>
<comment type="line">//  boolean:        5 monoids: lor, land, eq, lxor, any</comment>

<comment type="line">// GB_NO_BOOLEAN is defined for multiply operators in the #include'ing file</comment>
<comment type="line">// (min, max, plus, minus, rminus, times, div, rdiv, is*) since those multiply</comment>
<comment type="line">// operators are redundant and have been renamed.  For these, the boolean</comment>
<comment type="line">// monoids are not needed.</comment>

<comment type="line">// GB_NO_MIN_MAX_ANY_TIMES_MONOIDS is defined for the PAIR, LOR, LAND, LXOR</comment>
<comment type="line">// multiply operators; these are valid semirings, but not useful.  The</comment>
<comment type="line">// corresponding semirings (such as GxB_TIMES_LOR_FP32) still exist, but are</comment>
<comment type="line">// done using the generic methods, not via fast methods controlled by this case</comment>
<comment type="line">// statement.  For the PAIR operator, these semirings are all done by the</comment>
<comment type="line">// single ANY_PAIR iso semiring, since C is always iso in that case.</comment>

<comment type="line">// the additive operator is a monoid, where all types of x,y,z are the same</comment>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>zcode</name> <operator>==</operator> <name>xcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>zcode</name> <operator>==</operator> <name>ycode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mult_binop_code</name> <operator>!=</operator> <name>GB_ANY_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>!=</operator> <name>GB_BOOL_code</name></expr>)</condition>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// disable the MIN, MAX, ANY, and TIMES monoids for some multops</comment>
        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:ifndef>

        <case>case <expr><name>GB_MIN_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types, plus 2 complex</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COMPLEX</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>GB_NO_NONATOMIC_MONOID</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <comment type="line">// the TIMES monoid is non-atomic for complex types</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_fc32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_fc64</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ANY_MONOID</name></cpp:ifndef>
        <case>case <expr><name>GB_ANY_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types, plus 2 complex</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COMPLEX</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>GB_NO_NONATOMIC_MONOID</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <comment type="line">// the ANY monoid is non-atomic for complex types</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fc32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>, <argument>GB_MNAME</argument>, <argument>_fc64</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 real, non-boolean types, plus 2 complex</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_int8</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_int16</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument> )</argument_list></macro>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_fp32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_fp64</argument>  )</argument_list></macro>
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_COMPLEX</name></expr></argument> )</argument_list></call></expr></cpp:if>
                <comment type="line">// only the PLUS monoid is atomic for complex types</comment>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_fc32</argument>  )</argument_list></macro>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>, <argument>GB_MNAME</argument>, <argument>_fc64</argument>  )</argument_list></macro>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:ifndef>
<else>else
<block>{<block_content>
        <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// 5 boolean monoids</comment>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_MULT_IS_PAIR_OPERATOR</name></cpp:ifndef>
            <comment type="line">// all these semirings are replaced with the ANY_PAIR iso semiring</comment>
            <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lor</argument> , <argument>GB_MNAME</argument>, <argument>_bool</argument>)</argument_list></macro>
            <case>case <expr><name>GB_LAND_binop_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_land</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>)</argument_list></macro>
            <case>case <expr><name>GB_EQ_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_eq</argument>  , <argument>GB_MNAME</argument>, <argument>_bool</argument>)</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ANY_MONOID</name></cpp:ifndef>
            <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument> , <argument>GB_MNAME</argument>, <argument>_bool</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <case>case <expr><name>GB_LXOR_binop_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_lxor</argument>, <argument>GB_MNAME</argument>, <argument>_bool</argument>)</argument_list></macro>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_BOOLEAN</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_COMPLEX</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MULT_IS_PAIR_OPERATOR</name></cpp:undef>

</unit>
