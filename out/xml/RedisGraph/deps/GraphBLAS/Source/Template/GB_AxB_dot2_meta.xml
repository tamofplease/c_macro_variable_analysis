<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_dot2_meta.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot2_meta: C=A'*B, C&lt;M&gt;=A'*B or C&lt;!M&gt;=A'*B via dot products</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DOT2</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot_cij.h"</cpp:file></cpp:include>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A, B, and C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A and B are never hypersparse.  If they are hypersparse on input, they</comment>
    <comment type="line">// are converted to hyper_shallow form first, and the C matrix has smaller</comment>
    <comment type="line">// dimensions.  The C bitmap/full matrix is converted back into a sparse or</comment>
    <comment type="line">// hypersparse matrix when done.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_full</name> <init>= <expr><operator>(</operator><name>Cb</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bp</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_full</name>   <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_iso</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_is_hyper</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_full</name>   <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A_is_hyper</name></cpp:macro> <cpp:value>false</cpp:value></cpp:define>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_A_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_B_IS_PATTERN</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_BTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bx</name> <init>= <expr><operator>(</operator><name>GB_BTYPE</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>GB_IS_ANY_PAIR_SEMIRING</name></expr></cpp:if>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name> <init>= <expr><name>naslice</name> <operator>*</operator> <name>nbslice</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C=A'*B, C&lt;M&gt;=A'*B, or C&lt;!M&gt;=A'*B via dot products</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A'*B or C=A*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_PRESENT</name></cpp:undef>

        <if_stmt><if>if <condition>(<expr><name>A_not_transposed</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C=A*B where A is bitmap or full, and B is sparse</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_NOT_TRANSPOSED</name></cpp:macro></cpp:define>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_bitmap</name> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_sparse</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>C_is_full</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C=A*B via dot products, where A is full and B is sparse,</comment>
                <comment type="line">// and C is full</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_FULL</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C=A*B via dot products, where A is bitmap and B is sparse,</comment>
                <comment type="line">// and C is bitmap</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_FULL</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C=A*B via dot products, where A is full and B is sparse,</comment>
                <comment type="line">// and C is bitmap</comment>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_FULL</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt> 
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_NOT_TRANSPOSED</name></cpp:undef>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_is_full</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C = A'*B, via dot2 method, where A is implicitly transposed,</comment>
            <comment type="line">// C is full.  3 cases:</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_FULL</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
            <if_stmt><if>if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// A full, B full</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A full, B sparse</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_sparse</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A sparse, B full</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_sparse</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_C_IS_FULL</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_C_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C = A'*B, via dot2 method, where A is implicitly transposed,</comment>
            <comment type="line">// C is bitmap</comment>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_factory.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;M&gt;=A'*B or C&lt;!M&gt;=A'*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// 12 possible cases of the mask are handled:</comment>

        <comment type="line">// if M is not complemented (Mask_comp is false): 4 cases</comment>
        <comment type="line">// M can be bitmap or full, not sparse or hyper (dot3 handles that)</comment>
        <comment type="line">// M can be structural or valued</comment>

        <comment type="line">// if M is complemented (Mask_comp is true): 8 cases</comment>
        <comment type="line">// M can be sparse, hyper, bitmap, or full</comment>
        <comment type="line">// M can be structural or valued</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mb</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <name>GB_IS_ANY_MONOID</name> <operator>)</operator></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name>B_is_bitmap</name> <operator>&amp;&amp;</operator> <name>A_is_sparse</name> <operator>&amp;&amp;</operator> <name>M_is_bitmap</name> <operator>&amp;&amp;</operator> <name>Mask_struct</name>
            <operator>&amp;&amp;</operator> <name>Mask_comp</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;#M,struct&gt; = A'*B, special case</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// GB_ANY_SPECIALIZED is defined if the following conditions hold:</comment>
            <comment type="line">// semirings: all built-in semirings with the ANY monoid</comment>
            <comment type="line">// A: sparse</comment>
            <comment type="line">// B: bitmap</comment>
            <comment type="line">// M: bitmap</comment>
            <comment type="line">// Mask_comp: true</comment>
            <comment type="line">// Mask_struct: true</comment>

            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(specialized) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ANY_SPECIALIZED</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_PRESENT</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ANY_SPECIALIZED</name></cpp:undef>
            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_PRESENT</name></cpp:undef>

        </block_content>}</block></if>
        <else>else
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C&lt;#M&gt;=A'*B or C&lt;#!M&gt;=A*B</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator>
                <operator>(</operator><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>msize</name> <init>= <expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_IS_PRESENT</name></cpp:macro></cpp:define>

            <if_stmt><if>if <condition>(<expr><name>A_not_transposed</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C&lt;#M&gt;=A*B where A is bitmap or full, and B is sparse</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_NOT_TRANSPOSED</name></cpp:macro></cpp:define>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_bitmap</name> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_sparse</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C&lt;#M&gt;=A*B via dot products, A is bitmap and B is sparse</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// C&lt;#M&gt;=A*B via dot products, A is full and B is sparse</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_SPARSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_FULL</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_SPARSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_HYPER</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_BITMAP</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_FULL</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_dot2_template.c"</cpp:file></cpp:include>
                </block_content>}</block></else></if_stmt> 
                <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_A_NOT_TRANSPOSED</name></cpp:undef>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// C&lt;#&gt;M = A'*B, via dot2 method, A is implicitly transposed</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_meta16_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></else></if_stmt>

            <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MASK_IS_PRESENT</name></cpp:undef>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>A_is_hyper</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>B_is_hyper</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_DOT2</name></cpp:undef>

</unit>
