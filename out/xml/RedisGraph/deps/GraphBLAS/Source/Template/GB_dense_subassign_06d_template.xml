<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_dense_subassign_06d_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_subassign_06d_template: C&lt;A&gt; = A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C and A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_dense</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// since A is the mask, if A-&gt;iso is true, Mask_struct has been set true</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>A_iso</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifdef>
    <comment type="line">// C is iso, and A is either iso or effectively iso (with a single entry</comment>
    <comment type="line">// and not in bitmap form)</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_iso</name> <operator>||</operator> <operator>(</operator><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>A_is_bitmap</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask_struct</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>GB_CTYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>GB_CTYPE</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;A&gt; = A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name></expr></init></decl> ;</decl_stmt>     <comment type="line">// for C bitmap</comment>

    <if_stmt><if>if <condition>(<expr><name>Mask_struct</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;A,struct&gt; = A where A can be iso or non-iso; mask is structural</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_dense</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is dense: all entries present</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// Cx [p] = Ax [p]</comment>
                    <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>Cb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>A_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>cnvals</name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is bitmap, A is bitmap</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pA_start</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>A_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// Cx [p] = Ax [p]</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is hypersparse, sparse, or full, with all entries present</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
                <block>{<block_content>
                    <comment type="line">// this method is used by LAGraph_bfs_parent when q is</comment>
                    <comment type="line">// a bitmap and pi is full.</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// Cx [p] = Ax [p]</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hypersparse or sparse; C is dense or a bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Aslice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is bitmap, mask is structural</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// if kfirst &gt; klast then taskid does no work at all</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C&lt;A(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get A(:,j), the kth vector of A</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                            <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// pC is the start of C(:,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// C&lt;A(:,j),struct&gt;=A(:,j) with C bitmap, A sparse</comment>
                        <macro><name>GB_PRAGMA_SIMD_REDUCTION</name> <argument_list>(<argument>+</argument>,<argument>task_cnvals</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// Cx [p] = Ax [pA]</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is full, mask is structural</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
                <block>{<block_content>
                    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                        <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// if kfirst &gt; klast then taskid does no work at all</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// C&lt;A(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <comment type="line">// get A(:,j), the kth vector of A</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                            <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                                <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <comment type="line">// pC is the start of C(:,j)</comment>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                            <comment type="line">// C&lt;A(:,j),struct&gt;=A(:,j) with C full, A sparse</comment>
                            <macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></macro>
                            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// Cx [p] = Ax [pA]</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:ifndef>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;A&gt; = A where A must be non-iso, and the mask is valued</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_dense</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is dense: all entries present</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is bitmap, A is dense</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pA_start</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>A_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// Cx [p] = Ax [p]</comment>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is hypersparse, sparse, or full, with all entries present</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// Cx [p] = Ax [p]</comment>
                        <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//-------------------------------------------------------------</comment>
                <comment type="line">// C is bitmap, A is bitmap</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pA_start</name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>A_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// Cx [p] = Ax [p]</comment>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is hypersparse, sparse, or full, with all entries present</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// Cx [p] = Ax [p]</comment>
                        <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A is hypersparse or sparse; C is dense or a bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Aslice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is bitmap</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// if kfirst &gt; klast then taskid does no work at all</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C&lt;A(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get A(:,j), the kth vector of A</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                            <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// pC is the start of C(:,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// C&lt;A(:,j),struct&gt;=A(:,j) with C bitmap, A sparse</comment>
                        <macro><name>GB_PRAGMA_SIMD_REDUCTION</name> <argument_list>(<argument>+</argument>,<argument>task_cnvals</argument>)</argument_list></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// Cx [p] = Ax [pA]</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <operator>(</operator><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C is full</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// if kfirst &gt; klast then taskid does no work at all</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// C&lt;A(:,kfirst:klast)&gt; = A(:,kfirst:klast)</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// get A(:,j), the kth vector of A</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                            <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <comment type="line">// pC is the start of C(:,j)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>j</name> <operator>*</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// C&lt;A(:,j),struct&gt;=A(:,j) with C dense, A sparse</comment>
                        <macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></macro>
                        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><call><name>GB_AX_MASK</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr>)</condition>
                            <block>{<block_content> 
                                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC</name> <operator>+</operator> <name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                                <comment type="line">// Cx [p] = Ax [pA]</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>


    </block_content>}</block></else></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// log the number of entries in the C bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_ASSIGN</name></cpp:undef>

</unit>
