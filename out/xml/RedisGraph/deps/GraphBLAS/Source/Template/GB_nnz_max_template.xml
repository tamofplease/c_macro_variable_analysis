<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_nnz_max_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_nnz_max_template.c: max number of entries that can be held in a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_nnz_max(A) is the maximum number of entries that can be held in the data</comment>
<comment type="line">// structure, including zombies and all entries in a bitmap, but not including</comment>
<comment type="line">// pending tuples.  For iso full matrices, GB_nnz_max (A) can be less than</comment>
<comment type="line">// GB_nnz_full (A), and is typically 1.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_CUDA_KERNEL</name></cpp:ifdef>
<function><type><name>__device__</name> <specifier>static</specifier> <specifier>inline</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>int64_t</name></type> <name>GB_nnz_max</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is empty</comment>
        <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nnz_max</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>xmax</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>/</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is sparse (p,i,x) or hypersparse (p,h,i,x):</comment>
        <expr_stmt><expr><name>nnz_max</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>i_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>nnz_max</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nnz_max</name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is bitmap (b,x):</comment>
        <expr_stmt><expr><name>nnz_max</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>nnz_max</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nnz_max</name></expr></argument>, <argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is full (x only):</comment>
        <expr_stmt><expr><name>nnz_max</name> <operator>=</operator> <name>xmax</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>nnz_max</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
