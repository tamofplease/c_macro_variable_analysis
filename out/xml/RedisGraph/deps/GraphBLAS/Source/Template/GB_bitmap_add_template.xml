<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_add_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_add_template: C = A+B, C&lt;M&gt;=A+B, and C&lt;!M&gt;=A+B, C bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C is bitmap.  The mask M can have any sparsity structure, and is efficient</comment>
<comment type="line">// to apply (all methods are asymptotically optimal).  All cases (no M, M, !M)</comment>
<comment type="line">// are handled.  The values of A, B, and C are not accessed if C is iso,</comment>
<comment type="line">// in which case GB_ISO_ADD is #defined' by the #including file.</comment>

<block>{<block_content>

    <comment type="line">// TODO: the input C can be modified in-place, if it is also bitmap</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// M is not present</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       =           A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  .           sparse          bitmap</comment>
        <comment type="line">//      bitmap  .           bitmap          sparse</comment>
        <comment type="line">//      bitmap  .           bitmap          bitmap</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_bitmap</name> <operator>||</operator> <name>B_is_bitmap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>A_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>B_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>A_is_bitmap</name> <operator>&amp;&amp;</operator> <name>B_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method21: C, A, and B are all bitmap</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>||</operator> <name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                        <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = B (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method22: C and A are bitmap; B is sparse or hypersparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Cb</name></expr></argument>, <argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>a</name> <init>= <expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition>
                    <block>{<block_content> 
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>cnvals</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvals</name></name></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>B_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Bslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Bslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of B(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Bslice</name></expr></argument>, <argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over B(:,j), the kth vector of B</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method23: C and B are bitmap; A is sparse or hypersparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Cb</name></expr></argument>, <argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                    <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name> <init>= <expr><name><name>Bb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition>
                    <block>{<block_content>
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = B (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr> ;</expr_stmt>
                </block_content>}</block></for>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <expr_stmt><expr><name>cnvals</name> <operator>=</operator> <name><name>B</name><operator>-&gt;</operator><name>nvals</name></name></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of A(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over A(:,j), the kth vector of A</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content> 
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is bitmap, M is sparse or hyper and complemented</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  sparse      sparse          bitmap</comment>
        <comment type="line">//      bitmap  sparse      sparse          full  </comment>
        <comment type="line">//      bitmap  sparse      bitmap          sparse</comment>
        <comment type="line">//      bitmap  sparse      bitmap          bitmap</comment>
        <comment type="line">//      bitmap  sparse      bitmap          full  </comment>
        <comment type="line">//      bitmap  sparse      full            sparse</comment>
        <comment type="line">//      bitmap  sparse      full            bitmap</comment>
        <comment type="line">//      bitmap  sparse      full            full  </comment>

        <comment type="line">// M is sparse and complemented.  If M is sparse and not</comment>
        <comment type="line">// complemented, then C is constructed as sparse, not bitmap.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C(i,j) = A(i,j) + B(i,j) can only be computed where M(i,j) is</comment>
        <comment type="line">// not present in the sparse pattern of M, and where it is present</comment>
        <comment type="line">// but equal to zero.</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scatter M into the C bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>M_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>M_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Mslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Mslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// find the part of M(:,k) for this task</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pM_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                    <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Mslice</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                <comment type="line">// traverse over M(:,j), the kth vector of M</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// mark C(i,j) if M(i,j) is true</comment>
                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// C(i,j) has been marked, in Cb, with the value 2 where M(i,j)=1.</comment>
        <comment type="line">// These positions will not be computed in C(i,j).  C(i,j) can only</comment>
        <comment type="line">// be modified where Cb [p] is zero.</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute C&lt;!M&gt;=A+B using the mask scattered in C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>M_cleared</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>A_is_bitmap</name> <operator>||</operator> <name>A_is_full</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>B_is_bitmap</name> <operator>||</operator> <name>B_is_full</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method24(!M,sparse): C is bitmap, both A and B are bitmap or full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// M(i,j) is zero, so C(i,j) can be computed</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>a</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>||</operator> <name>b</name></expr> ;</expr_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>b</name></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>a</name></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M(i,j) == 1, so C(i,j) is not computed</comment>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>M_cleared</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>      <comment type="line">// M has also been cleared from C</comment>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name> <operator>||</operator> <name>A_is_full</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method25(!M,sparse): C bitmap, A bitmap or full, B sparse/hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>a</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                        <if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition>
                        <block>{<block_content>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>a</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>B_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Bslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Bslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of B(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Bslice</name></expr></argument>, <argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over B(:,j), the kth vector of B</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content>
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method26: C bitmap, A sparse or hypersparse, B bitmap or full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                        <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition>
                        <block>{<block_content>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content>
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>b</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of A(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over A(:,j), the kth vector of A</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//---------------------------------------------------------------------</comment>
        <comment type="line">// clear M from C</comment>
        <comment type="line">//---------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>M_cleared</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// This step is required if either A or B are sparse/hyper (if</comment>
            <comment type="line">// one is sparse/hyper, the other must be bitmap).  It requires</comment>
            <comment type="line">// an extra pass over the mask M, so this might be slower than</comment>
            <comment type="line">// postponing the application of the mask, and doing it later.</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>M_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>M_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Mslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Mslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of M(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pM_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Mslice</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over M(:,j), the kth vector of M</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// mark C(i,j) if M(i,j) is true</comment>
                        <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content> 
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                            <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is bitmap; M is bitmap or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  bitmap      sparse          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      sparse          full  </comment>
        <comment type="line">//      bitmap  bitmap      bitmap          sparse</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          full  </comment>
        <comment type="line">//      bitmap  bitmap      full            sparse</comment>
        <comment type="line">//      bitmap  bitmap      full            bitmap</comment>
        <comment type="line">//      bitmap  bitmap      full            full  </comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C      &lt;M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  full        sparse          bitmap</comment>
        <comment type="line">//      bitmap  full        sparse          full  </comment>
        <comment type="line">//      bitmap  full        bitmap          sparse</comment>
        <comment type="line">//      bitmap  full        bitmap          bitmap</comment>
        <comment type="line">//      bitmap  full        bitmap          full  </comment>
        <comment type="line">//      bitmap  full        full            sparse</comment>
        <comment type="line">//      bitmap  full        full            bitmap</comment>
        <comment type="line">//      bitmap  full        full            full  </comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  bitmap      sparse          sparse</comment>
        <comment type="line">//      bitmap  bitmap      sparse          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      sparse          full  </comment>
        <comment type="line">//      bitmap  bitmap      bitmap          sparse</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      bitmap  bitmap      bitmap          full  </comment>
        <comment type="line">//      bitmap  bitmap      full            sparse</comment>
        <comment type="line">//      bitmap  bitmap      full            bitmap</comment>
        <comment type="line">//      bitmap  bitmap      full            full  </comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C     &lt;!M&gt; =        A       +       B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      bitmap  full        sparse          sparse</comment>
        <comment type="line">//      bitmap  full        sparse          bitmap</comment>
        <comment type="line">//      bitmap  full        sparse          full  </comment>
        <comment type="line">//      bitmap  full        bitmap          sparse</comment>
        <comment type="line">//      bitmap  full        bitmap          bitmap</comment>
        <comment type="line">//      bitmap  full        bitmap          full  </comment>
        <comment type="line">//      bitmap  full        full            sparse</comment>
        <comment type="line">//      bitmap  full        full            bitmap</comment>
        <comment type="line">//      bitmap  full        full            full  </comment>


        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>M_is_bitmap</name> <operator>||</operator> <name>M_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_is_bitmap</name> <operator>||</operator> <name>A_is_full</name> <operator>||</operator> <name>B_is_bitmap</name> <operator>||</operator> <name>B_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_GET_MIJ</name></cpp:undef>     
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GET_MIJ</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                           \
            <cpp:value>bool mij = GBB (Mb, p) &amp;&amp; GB_mcast (Mx, p, msize) ;         \
            if (Mask_comp) mij = !mij ;</cpp:value></cpp:define>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>A_is_bitmap</name> <operator>||</operator> <name>A_is_full</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>B_is_bitmap</name> <operator>||</operator> <name>B_is_full</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method27: C is bitmap; M, A, and B are bitmap or full</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// M(i,j) is true, so C(i,j) can be computed</comment>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>a</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifdef>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>||</operator> <name>b</name></expr></init></decl> ;</decl_stmt>
                        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                        <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                            <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>b</name></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content>
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><name>a</name></expr>)</condition>
                        <block>{<block_content> 
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// M(i,j) == 1, so C(i,j) is not computed</comment>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name> <operator>||</operator> <name>A_is_full</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method28: C bitmap; M and A bitmap or full; B sparse or hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>a</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                        <if_stmt><if>if <condition>(<expr><name>a</name></expr>)</condition>
                        <block>{<block_content>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>a</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>B_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>B_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Bslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Bslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of B(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Bh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB_start</name></decl>, <decl><type ref="prev"/><name>pB_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pB_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pB_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Bslice</name></expr></argument>, <argument><expr><name>Bp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over B(:,j), the kth vector of B</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><name>pB_start</name></expr></init></decl> ;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Bi</name> <index>[<expr><name>pB</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                                <block>{<block_content>
                                    <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                    <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                        <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                </block_content>}</block>
                                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                                <block>{<block_content> 
                                    <comment type="line">// C (i,j) = B (i,j)</comment>
                                    <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                </block_content>}</block>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                                <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Method29: C bitmap; M and B bitmap or full; A sparse or hyper</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>C_nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pstart</name></decl>, <decl><type ref="prev"/><name>pend</name></decl>, <decl><type ref="prev"/><name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>pstart</name></expr></argument>, <argument><expr><name>pend</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>C_nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pstart</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                        <if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition>
                        <block>{<block_content>
                            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                            <block>{<block_content>
                                <comment type="line">// C (i,j) = alpha + B(i,j)</comment>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>alpha_scalar</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>,
                                    <argument><expr><name>p</name> <operator>%</operator> <name>vlen</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = B (i,j)</comment>
                                <expr_stmt><expr><call><name>GB_COPY_B_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                            </block_content>}</block>
                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        </block_content>}</block></if></if_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>task_cnvals</name> <operator>+=</operator> <name>b</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
                <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:cnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>task_cnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// find the part of A(:,k) for this task</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                        <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// traverse over A(:,j), the kth vector of A</comment>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pC_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><call><name>GB_GET_MIJ</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>int8_t</name></type> <name>c</name> <init>= <expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
                            <block>{<block_content> 
                                <comment type="line">// C (i,j) = A (i,j) + B (i,j)</comment>
                                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                                <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_LOAD_B</name> <argument_list>(<argument><expr><name>bij</name></expr></argument>, <argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument> , <argument><expr><name>B_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>bij</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content> 
                                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_ADD</name></cpp:ifndef>
                                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_EWISEUNION</name></cpp:ifdef>
                                <block>{<block_content> 
                                    <comment type="line">// C (i,j) = A(i,j) + beta</comment>
                                    <expr_stmt><expr><call><name>GB_LOAD_A</name> <argument_list>(<argument><expr><name>aij</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                    <expr_stmt><expr><call><name>GB_BINOP</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aij</name></expr></argument>, <argument><expr><name>beta_scalar</name></expr></argument>,
                                        <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                </block_content>}</block>
                                <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                                <block>{<block_content> 
                                    <comment type="line">// C (i,j) = A (i,j)</comment>
                                    <expr_stmt><expr><call><name>GB_COPY_A_TO_C</name> <argument_list>(<argument><expr><call><name>GB_CX</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                                </block_content>}</block>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                <expr_stmt><expr><name><name>Cb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                                <expr_stmt><expr><name>task_cnvals</name><operator>++</operator></expr> ;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
                <expr_stmt><expr><name>cnvals</name> <operator>+=</operator> <name>task_cnvals</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnvals</name></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
