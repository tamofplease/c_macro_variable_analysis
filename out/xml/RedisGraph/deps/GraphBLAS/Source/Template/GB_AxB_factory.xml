<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_factory: switch factory for C=A*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This is used by GB_AxB_saxpy3.c and GB_AxB_dot[234].c to create the built-in</comment>
<comment type="line">// versions of sparse matrix-matrix multiplication.  The #include'ing file</comment>
<comment type="line">// defines the GB_AxB_WORKER macro, and mult_binop_code, add_binop_code, xcode,</comment>
<comment type="line">// ycode, and zcode.</comment>

<comment type="line">// Three 2nd level switch factories are used:</comment>

<comment type="line">//      GB_AxB_type_factory: handles all semirings where the multiply operator</comment>
<comment type="line">//          is TxT-&gt;T (as is the monoid).</comment>

<comment type="line">//      GB_AxB_compare_factory: handles all semirings where the multiply</comment>
<comment type="line">//          operator is TxT -&gt; bool (for the comparators, LT, GT,</comment>
<comment type="line">//          etc), and where the monoid is bool x bool -&gt; bool.</comment>

<comment type="line">//      GB_AxB_bitwise_factory: handles all semirings for bitwise operators.</comment>

<comment type="line">//      GxB_AxB_positional_factory: handles all semirings for positional</comment>
<comment type="line">//          multiply operators.  Those operators are of the for XxX -&gt; int64,</comment>
<comment type="line">//          where "X" denotes any type.  No typecasting is needed from the</comment>
<comment type="line">//          types of A and B.</comment>

<comment type="line">// If the multiplicative operator is ANY, then it has already been renamed to</comment>
<comment type="line">// SECOND, prior to using this factory, since that is faster for the</comment>
<comment type="line">// saxpy-based methods (y is the value of B(k,j), which is loaded less</comment>
<comment type="line">// frequently from memory than A(i,k)).</comment>

<comment type="line">// This switch factory is not used to call the ANY_PAIR iso semiring.</comment>

<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mult_binop_code</name> <operator>!=</operator> <name>GB_ANY_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<block>{<block_content>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// launch the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_FIRST_binop_code</name></expr>   :</case>    <comment type="line">// z = x</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 61 semirings with FIRST:</comment>
            <comment type="line">// 50: (min,max,plus,times,any) for 10 non-boolean real</comment>
            <comment type="line">// 5: (or,and,xor,eq,any) for boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_first</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_SECOND_binop_code</name></expr>  :</case>    <comment type="line">// z = y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 61 semirings with SECOND:</comment>
            <comment type="line">// 50: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 5: (or,and,xor,eq,any) for boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_second</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_MIN_binop_code</name></expr>     :</case>    <comment type="line">// z = min(x,y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// MIN == TIMES == AND for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_min</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_MAX_binop_code</name></expr>     :</case>    <comment type="line">// z = max(x,y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// MAX == PLUS == OR for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_max</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_PLUS_binop_code</name></expr>    :</case>    <comment type="line">// z = x + y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <comment type="line">// MAX == PLUS == OR for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_plus</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_MINUS_binop_code</name></expr>   :</case>    <comment type="line">// z = x - y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <comment type="line">// MINUS == RMINUS == NE == ISNE == XOR for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_minus</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_RMINUS_binop_code</name></expr>   :</case>    <comment type="line">// z = y - x (reverse minus)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_rminus</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_TIMES_binop_code</name></expr>   :</case>    <comment type="line">// z = x * y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_times</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_DIV_binop_code</name></expr>   :</case>      <comment type="line">// z = x / y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <comment type="line">// FIRST == DIV for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_div</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_RDIV_binop_code</name></expr>   :</case>     <comment type="line">// z = y / x (reverse division)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 56 semirings:</comment>
            <comment type="line">// 50 semirings: (min,max,plus,times,any) for 10 real non-boolean</comment>
            <comment type="line">// 6: (plus,times,any) for 2 complex types</comment>
            <comment type="line">// SECOND == RDIV for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_rdiv</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>      :</case>    <comment type="line">// z = (x == y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 55 semirings: (and,or,xor,eq,any) * 11 types (all but complex)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_eq</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_NE_binop_code</name></expr>      :</case>    <comment type="line">// z = (x != y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 50 semirings: (and,or,xor,eq,any) * (10 real non-boolean types)</comment>
            <comment type="line">// MINUS == RMINUS == NE == ISNE == XOR for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_BOOLEAN</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_ne</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_GT_binop_code</name></expr>      :</case>    <comment type="line">// z = (x &gt;  y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 55 semirings: (and,or,xor,eq,any) * 11 types (all but complex)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_gt</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LT_binop_code</name></expr>      :</case>    <comment type="line">// z = (x &lt;  y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 55 semirings: (and,or,xor,eq,any) * 11 types (all but complex)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_lt</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_GE_binop_code</name></expr>      :</case>    <comment type="line">// z = (x &gt;= y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 55 semirings: (and,or,xor,eq,any) * 11 types (all but complex)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_ge</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LE_binop_code</name></expr>      :</case>    <comment type="line">// z = (x &lt;= y)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 55 semirings: (and,or,xor,eq,any) * 11 types (all but complex)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_le</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_compare_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_PAIR_binop_code</name></expr>   :</case>    <comment type="line">// z = 1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 13 semirings with PAIR: (not including ANY_PAIR)</comment>
            <comment type="line">// 12: (plus) for 10 real non-boolean and 2 complex</comment>
            <comment type="line">// 1: (xor) for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MULT_IS_PAIR_OPERATOR</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_pair</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COMPLEX</name></cpp:macro></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LOR_binop_code</name></expr>     :</case>    <comment type="line">// z = x || y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 15 semirings:</comment>
            <comment type="line">// 10 semirings: plus_lor for 10 real non-boolean types</comment>
            <comment type="line">// 5 semirings: (lor,land,eq,lxor,any) for boolean</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_lor</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LAND_binop_code</name></expr>    :</case>    <comment type="line">// z = x &amp;&amp; y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 15 semirings: same as LOR</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_land</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>    :</case>    <comment type="line">// z = x != y</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 15 semirings: same as LOR</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_MIN_MAX_ANY_TIMES_MONOIDS</name></cpp:macro></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_lxor</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_type_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BOR_binop_code</name></expr> :</case>     <comment type="line">// z = (x | y), bitwise or</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 16 semirings: (bor,band,bxor,bxnor) * (uint8,16,32,64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_bor</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_bitwise_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BAND_binop_code</name></expr> :</case>    <comment type="line">// z = (x &amp; y), bitwise and</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 16 semirings: (bor,band,bxor,bxnor) * (uint8,16,32,64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_band</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_bitwise_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x ^ y), bitwise xor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 16 semirings: (bor,band,bxor,bxnor) * (uint8,16,32,64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_bxor</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_bitwise_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXNOR_binop_code</name></expr> :</case>   <comment type="line">// z = ~(x ^ y), bitwise xnor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 16 semirings: (bor,band,bxor,bxnor) * (uint8,16,32,64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_bxnor</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_bitwise_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case>   <comment type="line">// z = first_i(A(i,k),y) == i</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_firsti</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_i1(A(i,k),y) == i+1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_firsti1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case>   <comment type="line">// z = first_j(A(i,k),y) == k</comment>
        <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case>   <comment type="line">// z = second_i(x,B(k,j)) == k</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <comment type="line">// FIRSTJ and SECONDI are identical when used in a semiring</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_firstj</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_j1(A(i,k),y) == k+1</comment>
        <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case>   <comment type="line">// z = second_i1(x,B(k,j)) == k+1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <comment type="line">// FIRSTJ1 and SECONDI1 are identical when used in a semiring</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_firstj1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case>   <comment type="line">// z = second_j(x,B(i,j)) == j</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_secondj</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case>   <comment type="line">// z = second_j1(x,B(i,j)) == j+1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <comment type="line">// 10 semirings: (min,max,times,plus,any) * (int32,int64)</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MNAME</name></cpp:macro> <cpp:value>_secondj1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_positional_factory.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block>

</unit>
