<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_reduce_build_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_reduce_build_template.c: Tx=build(Sx), and assemble any duplicate tuples</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This template is used in GB_builder and the Generated2/GB_red__* workers.</comment>
<comment type="line">// This is the same for both vectors and matrices, since this step is agnostic</comment>
<comment type="line">// about which vectors the entries appear.</comment>

<comment type="line">// Sx and Tx are either both iso or both non-iso.  For the iso case,</comment>
<comment type="line">// GB_ISO_BUILD is defined, and K_work is NULL.  The iso case is not handled by</comment>
<comment type="line">// the Generated2/ GB_red__* workers, since it doesn't access the values at all.</comment>

<block>{<block_content>

    <comment type="line">// k unused for some uses of this template</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

    <if_stmt><if>if <condition>(<expr><name>ndupl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// no duplicates, just permute Sx into Tx</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// If no duplicates are present, then GB_builder has already</comment>
        <comment type="line">// transplanted I_work into T-&gt;i, so this step does not need to</comment>
        <comment type="line">// construct T-&gt;i.  The tuple values, in Sx, are copied or permuted</comment>
        <comment type="line">// into T-&gt;x.  This step is skipped if T and Sx are iso.</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_BUILD</name></cpp:ifndef>

            <if_stmt><if>if <condition>(<expr><name>K_work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>tstart</name> <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>tend</name>   <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>tstart</name></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>tend</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// Tx [t] = (ttype) Sx [t] ; with typecast</comment>
                        <expr_stmt><expr><call><name>GB_CAST_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>Sx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>tstart</name> <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>tend</name>   <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>tstart</name></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>tend</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content> 
                        <comment type="line">// Tx [t] = (ttype) Sx [K_work [t]] ; with typecast</comment>
                        <expr_stmt><expr><call><name>GB_CAST_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>Sx</name></expr></argument>, <argument><expr><name><name>K_work</name> <index>[<expr><name>t</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// assemble duplicates</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// If T and Sx as non-iso, entries in Sx must be copied into T-&gt;x, with</comment>
        <comment type="line">// any duplicates summed via the operator.  T-&gt;i must also be</comment>
        <comment type="line">// constructed.  T-&gt;x and Sx are not modified if they are iso.</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>my_tnz</name> <init>= <expr><name><name>tnz_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>tstart</name> <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>tend</name>   <init>= <expr><name><name>tstart_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// find the first unique tuple owned by this slice</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl> ;</decl_stmt>
            <for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>tstart</name></expr> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>tend</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// get the tuple and break if it is not a duplicate</comment>
                <if_stmt><if>if <condition>(<expr><name><name>I_work</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break ;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// scan all tuples and assemble any duplicates</comment>
            <for>for <control>( <init>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>tend</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// get the t-th tuple, a unique tuple</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>I_work</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_BUILD</name></cpp:ifndef>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>K_work</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><name><name>K_work</name> <index>[<expr><name>t</name></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                <comment type="line">// Tx [my_tnz] = Sx [k] ; with typecast</comment>
                <expr_stmt><expr><call><name>GB_CAST_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>my_tnz</name></expr></argument>, <argument><expr><name>Sx</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name><name>Ti</name> <index>[<expr><name>my_tnz</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>

                <comment type="line">// assemble all duplicates that follow it.  This may assemble</comment>
                <comment type="line">// the first duplicates in the next slice(s) (up to but not</comment>
                <comment type="line">// including the first unique tuple in the subsequent slice(s)).</comment>
                <for>for <control>( <init>;</init> <condition><expr><name>t</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <name>nvals</name> <operator>&amp;&amp;</operator> <name><name>I_work</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// assemble the duplicate tuple</comment>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_BUILD</name></cpp:ifndef>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>K_work</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>t</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name><name>K_work</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// Tx [my_tnz] += Sx [k] with typecast</comment>
                    <expr_stmt><expr><call><name>GB_ADD_CAST_ARRAY_TO_ARRAY</name> <argument_list>(<argument><expr><name>Tx</name></expr></argument>, <argument><expr><name>my_tnz</name></expr></argument>, <argument><expr><name>Sx</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></for>
                <expr_stmt><expr><name>my_tnz</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_ISO_BUILD</name></cpp:undef>

</unit>
