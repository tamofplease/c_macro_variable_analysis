<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_saxpy3_fineHash_M_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_fineHash_M_phase2: C&lt;M&gt;=A*B, fine Hash, phase2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<block>{<block_content>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: fine hash task, C(:,j)&lt;M(:,j)&gt;=A*B(:,j)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// M is sparse and scattered into Hf</comment>

    <comment type="line">// Given Hf [hash] split into (h,f)</comment>

    <comment type="line">// h == 0  , f == 0 : unlocked, unoccupied. C(i,j) ignored</comment>
    <comment type="line">// h == i+1, f == 1 : unlocked, occupied by M(i,j)=1.</comment>
    <comment type="line">//                    C(i,j) has not been seen.</comment>
    <comment type="line">//                    Hx is not initialized.</comment>
    <comment type="line">// h == i+1, f == 2 : unlocked, occupied by C(i,j), M(i,j)=1</comment>
    <comment type="line">//                    Hx is initialized.</comment>
    <comment type="line">// h == ..., f == 3 : locked.</comment>

    <comment type="line">// 0 -&gt; 0 : to ignore, if M(i,j)=0</comment>
    <comment type="line">// 1 -&gt; 3 : to lock, if i seen for first time</comment>
    <comment type="line">// 2 -&gt; 3 : to lock, if i seen already</comment>
    <comment type="line">// 3 -&gt; 2 : to unlock; now i has been seen</comment>

    <expr_stmt><expr><call><name>GB_GET_M_j_RANGE</name> <argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// get first and last in M(:,j)</comment>
    <for>for <control>( <init>;</init> <condition><expr><name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr> ;</condition> <incr><expr><name>pB</name><operator>++</operator></expr></incr>)</control>     <comment type="line">// scan B(:,j)</comment>
    <block>{<block_content> 
        <expr_stmt><expr><name>GB_GET_B_kj_INDEX</name></expr> ;</expr_stmt>         <comment type="line">// get index k of B(k,j)</comment>
        <expr_stmt><expr><name>GB_GET_A_k</name></expr> ;</expr_stmt>                <comment type="line">// get A(:,k)</comment>
        <if_stmt><if>if <condition>(<expr><name>aknz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>GB_GET_B_kj</name></expr> ;</expr_stmt>               <comment type="line">// bkj = B(k,j)</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IKJ</name></cpp:macro>                                                        \
        <cpp:value>{                                                                     \
            GB_MULT_A_ik_B_kj ;      <comment type="block">/* t = A(i,k) * B(k,j) */</comment>                \
            int64_t i1 = i + 1 ;     <comment type="block">/* i1 = one-based index */</comment>               \
            int64_t i_unlocked = (i1 &lt;&lt; 2) + 2 ;  <comment type="block">/* (i+1,2) */</comment>               \
            for (GB_HASH (i))        <comment type="block">/* find i in hash table */</comment>               \
            {                                                                 \
                int64_t hf ;                                                  \
                GB_ATOMIC_READ                                                \
                hf = Hf [hash] ;        <comment type="block">/* grab the entry */</comment>                  \
                if (GB_HAS_ATOMIC &amp;&amp; (hf == i_unlocked))                      \
                {                                                             \
                    <comment type="block">/* Hx [hash] += t */</comment>                                      \
                    GB_ATOMIC_UPDATE_HX (hash, t) ;                           \
                    break ;     <comment type="block">/* C(i,j) has been updated */</comment>                 \
                }                                                             \
                if (hf == 0) break ; <comment type="block">/* M(i,j)=0; ignore Cij */</comment>               \
                if ((hf &gt;&gt; 2) == i1) <comment type="block">/* if true, i found */</comment>                   \
                {                                                             \
                    do <comment type="block">/* lock the entry */</comment>                                   \
                    {                                                         \
                        <comment type="block">/* do this atomically: */</comment>                             \
                        <comment type="block">/* { hf = Hf [hash] ; Hf [hash] |= 3 ; }*/</comment>            \
                        GB_ATOMIC_CAPTURE_INT64_OR (hf, Hf [hash], 3) ;       \
                    } while ((hf &amp; 3) == 3) ; <comment type="block">/* own: f=1,2 */</comment>                \
                    if ((hf &amp; 3) == 1) <comment type="block">/* f == 1 */</comment>                           \
                    {                                                         \
                        <comment type="block">/* C(i,j) is a new entry in C(:,j) */</comment>                 \
                        GB_ATOMIC_WRITE_HX (hash, t) ; <comment type="block">/* Hx [hash] = t */</comment>    \
                    }                                                         \
                    else <comment type="block">/* f == 2 */</comment>                                         \
                    {                                                         \
                        <comment type="block">/* C(i,j) already appears in C(:,j) */</comment>                \
                        GB_ATOMIC_UPDATE_HX (hash, t) ; <comment type="block">/* Hx [hash] += t */</comment>  \
                    }                                                         \
                    GB_ATOMIC_WRITE                                           \
                    Hf [hash] = i_unlocked ; <comment type="block">/* unlock entry */</comment>               \
                    break ;                                                   \
                }                                                             \
            }                                                                 \
        }</cpp:value></cpp:define>
        <expr_stmt><expr><call><name>GB_SCAN_M_j_OR_A_k</name> <argument_list>(<argument><expr><name>A_ok_for_binary_search</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_IKJ</name></cpp:undef>
    </block_content>}</block></for>
</block_content>}</block>

</unit>
