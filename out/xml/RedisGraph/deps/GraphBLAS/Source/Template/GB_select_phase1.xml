<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_select_phase1.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_select_phase1: count entries in each vector for C=select(A,thunk)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A and its slicing</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_Aslice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_Aslice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_Aslice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>A_ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ENTRY_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// entry selector</comment>
    <comment type="line">//==========================================================================</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The count of live entries kth vector A(:,k) is reduced to the kth scalar</comment>
    <comment type="line">// Cp(k).  Each thread computes the reductions on roughly the same number</comment>
    <comment type="line">// of entries, which means that a vector A(:,k) may be reduced by more than</comment>
    <comment type="line">// one thread.  The first vector A(:,kfirst) reduced by thread tid may be</comment>
    <comment type="line">// partial, where the prior thread tid-1 (and other prior threads) may also</comment>
    <comment type="line">// do some of the reductions for this same vector A(:,kfirst).  The thread</comment>
    <comment type="line">// tid reduces all vectors A(:,k) for k in the range kfirst+1 to klast-1.</comment>
    <comment type="line">// The last vector A(:,klast) reduced by thread tid may also be partial.</comment>
    <comment type="line">// Thread tid+1, and following threads, may also do some of the reduces for</comment>
    <comment type="line">// A(:,klast).</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_ATYPE</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_ATYPE</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type>  <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce each slice</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// each thread reduces its own part in parallel</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// if kfirst &gt; klast then thread tid does no work at all</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Wlast</name>  <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// reduce vectors kfirst to klast</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// find the part of A(:,k) to be reduced by this thread</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name></decl>, <decl><type ref="prev"/><name>pA_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pA</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pA_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Aslice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// count entries in Ax [pA ... pA_end-1]</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>( <init>;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_TEST_VALUE_OF_ENTRY</name> <argument_list>(<argument><expr><name>keep</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>keep</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>cjnz</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>kfirst</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>k</name> <operator>==</operator> <name>klast</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt> 
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce the first and last vector of each slice using a single thread</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_ek_slice_merge1</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>Wfirst</name></expr></argument>, <argument><expr><name>Wlast</name></expr></argument>, <argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>A_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// positional selector (tril, triu, diag, offdiag, resize, row*)</comment>
    <comment type="line">//==========================================================================</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// tril, triu, diag, offdiag, resize: binary search in each vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>A_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>guided</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// get A(:,k)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>cjnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>ajnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// search for the entry A(i,k)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>ifirst</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name>  <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA_end</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><operator>-</operator><name>ithunk</name></expr></init></decl> ;</decl_stmt>
            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>ithunk</name></expr></init></decl> ;</decl_stmt>
            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="line">// TRIL, TRIU, DIAG, OFFDIAG</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ah</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>j</name><operator>-</operator><name>ithunk</name></expr></init></decl> ;</decl_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ifirst</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// all entries in A(:,k) come after i</comment>
                <empty_stmt>;</empty_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>ilast</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// all entries in A(:,k) come before i</comment>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pA_end</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ajnz</name> <operator>==</operator> <name>avlen</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A(:,k) is dense</comment>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// binary search for A (i,k)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIL_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>

                <comment type="line">// keep p to pA_end-1</comment>
                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>pA_end</name> <operator>-</operator> <name>p</name></expr> ;</expr_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument>  )</argument_list></call></expr></cpp:elif>

                <comment type="line">// if found, keep p+1 to pA_end-1</comment>
                <comment type="line">// else keep p to pA_end-1</comment>
                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>p</name><operator>++</operator></expr> ;</expr_stmt>
                    <comment type="line">// now in both cases, keep p to pA_end-1</comment>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// keep p to pA_end-1</comment>
                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>pA_end</name> <operator>-</operator> <name>p</name></expr> ;</expr_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIU_SELECTOR</name></expr></argument>   )</argument_list></call> \
               <operator>||</operator> <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument>  )</argument_list></call></expr></cpp:elif>

                <comment type="line">// if found, keep pA_start to p</comment>
                <comment type="line">// else keep pA_start to p-1</comment>
                <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>p</name><operator>++</operator></expr> ;</expr_stmt>
                    <comment type="line">// now in both cases, keep pA_start to p-1</comment>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// keep pA_start to p-1</comment>
                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name>pA_start</name></expr> ;</expr_stmt>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// if found, keep p</comment>
                <comment type="line">// else keep nothing</comment>
                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>found</name></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                <comment type="line">// if (cjnz &gt;= 0) keep p, else keep nothing</comment>

            <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_OFFDIAG_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                  <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                <comment type="line">// if found, keep pA_start to p-1 and p+1 to pA_end-1</comment>
                <comment type="line">// else keep pA_start to pA_end</comment>
                <expr_stmt><expr><name>cjnz</name> <operator>=</operator> <name>ajnz</name> <operator>-</operator> <name>found</name></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pA_end</name></expr> ;</expr_stmt>
                    <comment type="line">// now just keep pA_start to p-1; p+1 to pA_end is </comment>
                    <comment type="line">// now empty</comment>
                </block_content>}</block></if></if_stmt>
                <comment type="line">// in both cases, keep pA_start to p-1 and</comment>
                <comment type="line">// p+1 to pA_end-1.  If the entry is not found, then</comment>
                <comment type="line">// p == pA_end, and all entries are kept.</comment>

            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// log the result for the kth vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>Zp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>cjnz</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute Wfirst and Wlast for each task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Wfirst [0..A_ntasks-1] and Wlast [0..A_ntasks-1] are required for</comment>
    <comment type="line">// constructing C_start_slice [0..A_ntasks-1] in GB_selector.</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>A_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">// if kfirst &gt; klast then task tid does no work at all</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Aslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Wlast</name>  <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>kfirst</name> <operator>&lt;=</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>pstart_Aslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kfirst</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>pA_end</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>pA_end</name></expr></argument>, <argument><expr><name><name>pstart_Aslice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pA_start</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
            <block>{<block_content> 
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIL_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                    <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>

                    <comment type="line">// keep Zp [kfirst] to pA_end-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>kfirst</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pA_end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIU_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                      <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// keep pA_start to Zp [kfirst]-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>kfirst</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// task that owns the diagonal entry does this work</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Zp</name> <index>[<expr><name>kfirst</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pA_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_OFFDIAG_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                      <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// keep pA_start to Zp [kfirst]-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>kfirst</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <comment type="line">// keep Zp [kfirst]+1 to pA_end-1</comment>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>kfirst</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Wfirst</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>+=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pA_end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>kfirst</name> <operator>&lt;</operator> <name>klast</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name>   <init>= <expr><name><name>pstart_Aslice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>pA_start</name> <operator>&lt;</operator> <name>pA_end</name></expr>)</condition>
            <block>{<block_content> 
                <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIL_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                    <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWGT_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:if>

                    <comment type="line">// keep Zp [klast] to pA_end-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>klast</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pA_end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_TRIU_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                      <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWLE_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// keep pA_start to Zp [klast]-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>klast</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_DIAG_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// task that owns the diagonal entry does this work</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Zp</name> <index>[<expr><name>klast</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pA_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>

                <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GB_OFFDIAG_SELECTOR</name></expr></argument>  )</argument_list></call> <operator>||</operator> \
                      <call><name>defined</name> <argument_list>( <argument><expr><name>GB_ROWINDEX_SELECTOR</name></expr></argument> )</argument_list></call></expr></cpp:elif>

                    <comment type="line">// keep pA_start to Zp [klast]-1</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>klast</name></expr>]</index></name></expr></argument>, <argument><expr><name>pA_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                    <comment type="line">// keep Zp [klast]+1 to pA_end-1</comment>
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name><name>Zp</name> <index>[<expr><name>klast</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pA_start</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Wlast</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>+=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pA_end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
