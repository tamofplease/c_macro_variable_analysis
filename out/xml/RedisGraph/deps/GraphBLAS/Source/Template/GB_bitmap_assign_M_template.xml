<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_assign_M_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_assign_M_template: traverse over M for bitmap assignment into C</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This template traverses over all the entries of the mask matrix M, and</comment>
<comment type="line">// operates on C(i,j) if the mask M(i,j) == 1, via the GB_MASK_WORK macro,</comment>
<comment type="line">// where C(i,j) is at Cx [pC] and Cb [pC].  M is hypersparse or sparse.</comment>

<comment type="line">// GB_SLICE_MATRIX (M,...) has alreadly sliced M for parallel work.  The tasks</comment>
<comment type="line">// are held in pstart_Mslice, kfirst_Mslice, klast_Mslice, M_ntasks, and the</comment>
<comment type="line">// work is done by M_nthreads threads.</comment>

<comment type="line">// The work done by this kernel is independent of Mask_comp; both M and !M</comment>
<comment type="line">// do the same work by scattering their entries into the C bitmap.</comment>

<comment type="line">// C is bitmap/full.  M is sparse/hyper, and can be jumbled.</comment>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<switch>switch <condition>(<expr><name>assign_kind</name></expr>)</condition>
<block>{<block_content>
    <case>case <expr><name>GB_ROW_ASSIGN</name></expr> :</case> 
        <comment type="line">// row assignment: C&lt;M&gt;(iC,J), where M is a row vector</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_M_row_template.c"</cpp:file></cpp:include>
        <break>break ;</break>
    <case>case <expr><name>GB_COL_ASSIGN</name></expr> :</case> 
        <comment type="line">// column assignment: C&lt;M&gt;(I,jC), where M is a column vector</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_M_col_template.c"</cpp:file></cpp:include>
        <break>break ;</break>
    <case>case <expr><name>GB_ASSIGN</name></expr> :</case> 
        <comment type="line">// GrB_assign: C&lt;M&gt;(I,J), where M is the same size as C</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_M_all_template.c"</cpp:file></cpp:include>
        <break>break ;</break>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_SUBASSIGN_CASE</name></cpp:ifndef>
    <case>case <expr><name>GB_SUBASSIGN</name></expr> :</case> 
        <comment type="line">// GxB_subassign: C(I,J)&lt;M&gt;, where M is the same size as C(I,J) and A</comment>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_M_sub_template.c"</cpp:file></cpp:include>
        <break>break ;</break>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <default>default:</default> <empty_stmt>;</empty_stmt>
</block_content>}</block></switch>

</unit>
