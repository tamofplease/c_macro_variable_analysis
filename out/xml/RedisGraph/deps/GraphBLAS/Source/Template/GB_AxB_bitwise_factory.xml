<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_bitwise_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_bitwise_factory.c: switch factory for C=A*B (bitwise monoids)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A template file #include'd in GB_AxB_factory.c, which calls up to 16</comment>
<comment type="line">// bitwise semirings.  The multiply operators are bor, band, bxor, or bxnor,</comment>
<comment type="line">// as defined by GB_MNAME.</comment>

<block>{<block_content>
    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BOR_binop_code</name></expr> :</case>     <comment type="line">// z = (x | y), bitwise or</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bor</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bor</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bor</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bor</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BAND_binop_code</name></expr> :</case>    <comment type="line">// z = (x &amp; y), bitwise and</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_band</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_band</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_band</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_band</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x ^ y), bitwise xor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxor</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><name>GB_BXNOR_binop_code</name></expr> :</case>   <comment type="line">// z = ~(x ^ y), bitwise xnor</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxnor</argument>, <argument>GB_MNAME</argument>, <argument>_uint8</argument> )</argument_list></macro>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxnor</argument>, <argument>GB_MNAME</argument>, <argument>_uint16</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxnor</argument>, <argument>GB_MNAME</argument>, <argument>_uint32</argument>)</argument_list></macro>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_bxnor</argument>, <argument>GB_MNAME</argument>, <argument>_uint64</argument>)</argument_list></macro>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MNAME</name></cpp:undef>

</unit>
