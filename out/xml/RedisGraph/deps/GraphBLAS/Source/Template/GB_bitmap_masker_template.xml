<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_bitmap_masker_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_masker_template:  phase2 for R = masker (C, M, Z), R is bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Computes C&lt;M&gt;=Z or C&lt;!M&gt;=Z, returning the result in R, which is bitmap.</comment>
<comment type="line">// The input matrix C is not modified.  Effectively, this computes R=C and then</comment>
<comment type="line">// R&lt;M&gt;=Z or R&lt;!M&gt;=Z.  If the C_replace descriptor is enabled, then C has</comment>
<comment type="line">// already been cleared, and is an empty (but non-NULL) matrix.</comment>

<comment type="line">// phase2: computes R in a single pass</comment>

<comment type="line">// C is sparse or hypersparse.  Z is bitmap or full.  R is bitmap.</comment>
<comment type="line">// M has any sparsity structure.</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      bitmap          bitmap</comment>
        <comment type="line">//      sparse  sparse      full            bitmap</comment>

        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

<comment type="line">// FUTURE:: add special cases for C==Z, C==M, and Z==M aliases</comment>

<block>{<block_content>
    
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>rnvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>R_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_is_sparse</name> <operator>||</operator> <name>C_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Z_is_bitmap</name> <operator>||</operator> <name>Z_is_full</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter C into the R bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input to R_bitmap_masker"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>C_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:rnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>C_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Cslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Cslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// find the part of C(:,k) for this task</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Cslice</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pR_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
            <comment type="line">// traverse over C(:,j), the kth vector of C</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pC</name> <init>= <expr><name>pC_start</name></expr></init></decl> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>pC_end</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// R(i,j) = C(i,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pR</name> <init>= <expr><name>pR_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>pR</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name>rnvals</name><operator>++</operator></expr> ;</expr_stmt>
                <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator> <operator>(</operator><name>pR</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Cx</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>C_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>pC</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>rnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"R with C scattered"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// R&lt;M&gt;=Z or R&lt;!M&gt;=Z</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M_is_sparse</name> <operator>||</operator> <name>M_is_hyper</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method05: M is sparse or hypersparse, Z bitmap/full, R bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  sparse      bitmap          bitmap</comment>
        <comment type="line">//      sparse  sparse      full            bitmap</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mask_comp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scatter M into the R bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>M_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>M_ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Mslice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Mslice</name>  <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// find the part of M(:,k) for this task</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Mh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pM_start</name></decl>, <decl><type ref="prev"/><name>pM_end</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pM_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pM_end</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>,
                    <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Mslice</name></expr></argument>, <argument><expr><name>Mp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pR_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>vlen</name></expr></init></decl> ;</decl_stmt>
                <comment type="line">// traverse over M(:,j), the kth vector of M</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><name>pM_start</name></expr></init></decl> ;</init> <condition><expr><name>pM</name> <operator>&lt;</operator> <name>pM_end</name></expr> ;</condition> <incr><expr><name>pM</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// mark R(i,j) if M(i,j) is true</comment>
                    <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
                    <block>{<block_content> 
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Mi</name> <index>[<expr><name>pM</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pR_start</name> <operator>+</operator> <name>i</name></expr></init></decl> ;</decl_stmt>
                        <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// R&lt;!M&gt;=Z, using M scattered into R</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Rb is marked as follows:</comment>
        <comment type="line">//  0:  R(i,j) is not present, and M(i,j) is false</comment>
        <comment type="line">//  1:  R(i,j) is present, and M(i,j) is false</comment>
        <comment type="line">//  2:  R(i,j) is not present, and M(i,j) is true</comment>
        <comment type="line">//  3:  R(i,j) is present, and M(i,j) is true</comment>

        <comment type="line">// M is complemented, but shown uncomplemented in the table below since</comment>
        <comment type="line">// that is how it is scattered into R.</comment>

        <comment type="line">// Rb   R(i,j)  M(i,j)  Z(i,j)      modification to R(i,j)</comment>
        <comment type="line">// 0    -       0       zij         R(i,j) = Z(i,j), new value, rnvals++</comment>
        <comment type="line">// 0    -       0       -           do nothing</comment>
        <comment type="line">// 1    rij     0       zij         R(i,j) = Z(i,j), overwrite</comment>
        <comment type="line">// 1    rij     0       -           delete R(i,j), rnvals--</comment>
        <comment type="line">// 2    -       1       zij         do nothing, set Rb to 0</comment>
        <comment type="line">// 2    -       1       -           do nothing, set Rb to 0</comment>
        <comment type="line">// 3    rij     1       zij         keep R(i,j), set Rb to 1</comment>
        <comment type="line">// 3    rij     1       -           keep R(i,j), set Rb to 1</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>R_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:rnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>rnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int8_t</name></type> <name>r</name> <init>= <expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int8_t</name></type> <name>z</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Zb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>r</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// R(i,j) not present, M(i,j) false</comment>
                    <if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = Z(i,j), insert new value</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>Z_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                        <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>rnvals</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <break>break ;</break>

                <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// R(i,j) present, M(i,j) false</comment>
                    <if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = Z(i,j), update prior value</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>Z_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// delete R(i,j)</comment>
                        <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>rnvals</name><operator>--</operator></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <break>break ;</break>

                <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// R(i,j) not present, M(i,j) true</comment>
                    <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                    <break>break ;</break>

                <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// R(i,j) present, M(i,j) true</comment>
                    <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    <break>break ;</break>

                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Method06: M and Z are bitmap or full, R is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;!M&gt; =       Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       &lt;M&gt; =        Z              R</comment>
        <comment type="line">//      ------------------------------------------</comment>

        <comment type="line">//      sparse  bitmap      bitmap          bitmap</comment>
        <comment type="line">//      sparse  bitmap      full            bitmap</comment>

        <comment type="line">//      sparse  full        bitmap          bitmap</comment>
        <comment type="line">//      sparse  full        full            bitmap</comment>

        <comment type="line">// Rb   R(i,j)  M(i,j)  Z(i,j)      modification to R(i,j)</comment>

        <comment type="line">// 0    -       0       zij         do nothing</comment>
        <comment type="line">// 0    -       0       -           do nothing</comment>
        <comment type="line">// 1    rij     0       zij         do nothing</comment>
        <comment type="line">// 1    rij     0       -           do nothing</comment>

        <comment type="line">// 0    -       1       zij         R(i,j) = Z(i,j), rnvals++</comment>
        <comment type="line">// 0    -       1       -           do nothing</comment>
        <comment type="line">// 1    rij     1       zij         R(i,j) = Z(i,j), no change to rnvals</comment>
        <comment type="line">// 1    rij     1       -           delete, rnvals--</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>R_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>+:rnvals</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>rnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>bool</name></type> <name>mij</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Mb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_mcast</name> <argument_list>(<argument><expr><name>Mx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>msize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>Mask_comp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>mij</name> <operator>=</operator> <operator>!</operator><name>mij</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mij</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int8_t</name></type> <name>z</name> <init>= <expr><call><name>GBB</name> <argument_list>(<argument><expr><name>Zb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int8_t</name></type> <name>r</name> <init>= <expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>z</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// R(i,j) = Z(i,j), update, no change to rnvals</comment>
                        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>Z_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content> 
                        <comment type="line">// delete R(i,j)</comment>
                        <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                        <expr_stmt><expr><name>rnvals</name><operator>--</operator></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>z</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// R(i,j) = Z(i,j), new entry</comment>
                    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_ISO_MASKER</name></cpp:ifndef>
                    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Rx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></argument>, <argument><expr><name>Zx</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>Z_iso</name></expr>?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>rsize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>rsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <expr_stmt><expr><name><name>Rb</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>rnvals</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>rnvals</name></expr> ;</expr_stmt>
</block_content>}</block>

</unit>
