<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_AxB_positional_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_positional_factory.c: switch factory for C=A*B for positional ops</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// the additive operator is a monoid, where all types of x,y,z are int64_t or</comment>
<comment type="line">// int32_t</comment>

<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>xcode</name> <operator>==</operator> <name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ycode</name> <operator>==</operator> <name>zcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>mult_binop_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT32_code</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>,   <argument>GB_MNAME</argument>, <argument>_int32</argument>)</argument_list></macro>
            <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>,   <argument>GB_MNAME</argument>, <argument>_int32</argument>)</argument_list></macro>
            <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int32</argument>)</argument_list></macro>
            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>,  <argument>GB_MNAME</argument>, <argument>_int32</argument>)</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ANY_MONOID</name></cpp:ifndef>
            <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>,   <argument>GB_MNAME</argument>, <argument>_int32</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <else>else <comment type="line">// zcode == GB_INT64_code</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_min</argument>,   <argument>GB_MNAME</argument>, <argument>_int64</argument>)</argument_list></macro>
            <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_max</argument>,   <argument>GB_MNAME</argument>, <argument>_int64</argument>)</argument_list></macro>
            <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_times</argument>, <argument>GB_MNAME</argument>, <argument>_int64</argument>)</argument_list></macro>
            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_plus</argument>,  <argument>GB_MNAME</argument>, <argument>_int64</argument>)</argument_list></macro>
            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_NO_ANY_MONOID</name></cpp:ifndef>
            <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <macro><name>GB_AxB_WORKER</name> <argument_list>(<argument>_any</argument>,   <argument>GB_MNAME</argument>, <argument>_int64</argument>)</argument_list></macro>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <default>default:</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_MNAME</name></cpp:undef>

</unit>
