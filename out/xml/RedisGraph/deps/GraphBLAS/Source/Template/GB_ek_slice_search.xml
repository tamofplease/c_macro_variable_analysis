<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Template/GB_ek_slice_search.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ek_slice_search: find the first and last vectors in a slice</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GB_EK_SLICE_SEARCH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EK_SLICE_SEARCH_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_search_for_vector_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>GB_ek_slice_search</name>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>int</name></type> <name>taskid</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>ntasks</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_slice</name></decl></parameter>,    <comment type="line">// size ntasks+1</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,              <comment type="line">// size anvec</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>anvec</name></decl></parameter>,                              <comment type="line">// # of vectors in A</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>avlen</name></decl></parameter>,                              <comment type="line">// vector length of A</comment>
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_slice</name></decl></parameter>,          <comment type="line">// size ntasks</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_slice</name></decl></parameter>            <comment type="line">// size ntasks</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pfirst</name> <init>= <expr><name><name>pstart_slice</name> <index>[<expr><name>taskid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>plast</name>  <init>= <expr><name><name>pstart_slice</name> <index>[<expr><name>taskid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// find the first vector of the slice for task taskid: the</comment>
    <comment type="line">// vector that owns the entry Ai [pfirst] and Ax [pfirst].</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>taskid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>kfirst</name> <operator>=</operator> <call><name>GB_search_for_vector</name> <argument_list>(<argument><expr><name>pfirst</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// find the last vector of the slice for task taskid: the</comment>
    <comment type="line">// vector that owns the entry Ai [plast] and Ax [plast].</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>taskid</name> <operator>==</operator> <name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>klast</name> <operator>=</operator> <name>anvec</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>pfirst</name> <operator>&gt;</operator> <name>plast</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// this task does no work</comment>
        <expr_stmt><expr><name>klast</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>klast</name> <operator>=</operator> <call><name>GB_search_for_vector</name> <argument_list>(<argument><expr><name>plast</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>kfirst_slice</name> <index>[<expr><name>taskid</name></expr>]</index></name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>klast_slice</name>  <index>[<expr><name>taskid</name></expr>]</index></name> <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
