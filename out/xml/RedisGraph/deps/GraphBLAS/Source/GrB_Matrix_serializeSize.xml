<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_serializeSize.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_serializeSize: return an upper bound on the blob size</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GrB_Matrix_serialize and GxB_Matrix_serialize both serialize a GrB_Matrix</comment>
<comment type="line">// into a blob of bytes.  This function provides an estimate of the # of bytes</comment>
<comment type="line">// the blob would have, assuming the default method and default # of threads,</comment>
<comment type="line">// using the dryrun option in GB_serialize.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Matrix_serializeSize</name>   <comment type="line">// estimate the size of a blob</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>blob_size_handle</name></decl></parameter>,    <comment type="line">// upper bound on the required size of the</comment>
                                    <comment type="line">// blob on output.</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>                    <comment type="line">// matrix to serialize</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_serializeSize (&amp;blob_size, A)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GrB_Matrix_serialize"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>blob_size_handle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// no descriptor, so assume the default method</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// Context will hold the default # of threads, which can be controlled</comment>
    <comment type="line">// by GxB_Global_Option_set.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// serialize the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>blob_size</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_serialize</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blob_size</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>blob_size_handle</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>blob_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
