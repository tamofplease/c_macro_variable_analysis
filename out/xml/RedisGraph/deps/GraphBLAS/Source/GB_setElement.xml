<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_setElement.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_setElement: C(row,col) = scalar or += scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Sets the value of single scalar, C(row,col) = scalar, or C(row,col)+=scalar,</comment>
<comment type="line">// typecasting from the type of scalar to the type of C, as needed.  Not</comment>
<comment type="line">// user-callable; does the work for all GrB_*_setElement* functions, and for</comment>
<comment type="line">// GrB_*assign when a single entry is modified.</comment>

<comment type="line">// If C(row,col) is already present in the matrix, its value is overwritten</comment>
<comment type="line">// with the scalar.  Otherwise, if the mode determined by GrB_init is</comment>
<comment type="line">// non-blocking, the tuple (i,j,scalar) is appended to a list of pending tuples</comment>
<comment type="line">// to C.  GB_wait assembles these pending tuples.</comment>

<comment type="line">// GB_setElement when accum is NULL is used by GrB_*_setElement.  It is the</comment>
<comment type="line">// same as GrB_*assign with an implied SECOND accum operator whose ztype,</comment>
<comment type="line">// xtype, and ytype are the same as C, with I=i, J=j, a 1-by-1 dense matrix A</comment>
<comment type="line">// (where nnz (A) == 1), no mask, mask not complemented, C_replace effectively</comment>
<comment type="line">// false (its value is ignored), and A transpose effectively false (since</comment>
<comment type="line">// transposing a scalar has no effect).</comment>

<comment type="line">// GB_setElement when accum is not NULL uses the accum operator instead of the</comment>
<comment type="line">// implied SECOND operator.  It is used by GrB_*_assign, as a special case.</comment>

<comment type="line">// Compare this function with GrB_*_extractElement_*</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Pending.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_setElement</name>              <comment type="line">// set a single entry, C(row,col) = scalar</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// matrix to modify</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// if NULL: C(row,col) = scalar</comment>
                                    <comment type="line">// else: C(row,col) += scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scalar</name></decl></parameter>,             <comment type="line">// scalar to set</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>row</name></decl></parameter>,            <comment type="line">// row index</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>col</name></decl></parameter>,            <comment type="line">// column index</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>scalar_code</name></decl></parameter>, <comment type="line">// type of the scalar</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&gt;=</operator> <call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>,
            <argument><expr><literal type="string">"Row index "</literal> <name>GBu</name> <literal type="string">" out of range; must be &lt; "</literal> <name>GBd</name></expr></argument>,
            <argument><expr><name>row</name></expr></argument>, <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_INVALID_INDEX</name></expr></argument>,
            <argument><expr><literal type="string">"Column index "</literal> <name>GBu</name> <literal type="string">" out of range; must be &lt; "</literal> <name>GBd</name></expr></argument>,
            <argument><expr><name>col</name></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>scalar_code</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// scalar_code and C must be compatible</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Input scalar of type [%s]\n"</literal>
            <literal type="string">"cannot be typecast to entry of type [%s]"</literal></expr></argument>,
            <argument><expr><call><name>GB_code_string</name> <argument_list>(<argument><expr><name>scalar_code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C and scalar must be compatible with the accum operator</comment>
        <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY_OR_POSITIONAL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_compatible</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>,
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// pending tuples and zombies are expected, and C might be jumbled too</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort C if needed; do not assemble pending tuples or kill zombies yet</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C (setElement:jumbled)"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// zombies and pending tuples are still OK, but C is no longer jumbled</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if C needs to convert to non-iso, or if C is a new iso matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// stype is the type of this scalar</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>stype</name> <init>= <expr><call><name>GB_code_type</name> <argument_list>(<argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// typecast the scalar and compare with the iso value of C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>convert_to_non_iso</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C(i,j) += scalar always converts C to non-iso</comment>
            <expr_stmt><expr><name>convert_to_non_iso</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>!=</operator> <name>stype</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// s = (ctype) scalar</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>s</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// compare s with the iso value of C</comment>
            <expr_stmt><expr><name>convert_to_non_iso</name> <operator>=</operator> <operator>(</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// compare the scalar with the iso value of C</comment>
            <expr_stmt><expr><name>convert_to_non_iso</name> <operator>=</operator> <operator>(</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>convert_to_non_iso</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// The new entry differs from the iso value of C.  Assemble all</comment>
            <comment type="line">// pending tuples and convert C to non-iso.  Zombies are OK.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C (setElement:to non-iso)"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_non_iso</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>C_is_full</name> <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>Pending</name></name> <operator>==</operator> <name>NULL</name>
        <operator>&amp;&amp;</operator> <name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is empty: this is the first setElement, convert C to iso</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>!=</operator> <name>stype</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// s = (ctype) scalar</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>s</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_iso</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_iso</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the CSR/CSC format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// set entry with index i in vector j</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// set entry with index j in vector i</comment>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>col</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>row</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pleft</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_zombie</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>C_is_full</name> <operator>=</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_is_full</name> <operator>||</operator> <name>C_is_bitmap</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is bitmap or full</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>*</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>is_zombie</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is sparse or hypersparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C is empty</comment>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>Ch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C is hypersparse, with at least one entry</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Y</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C is hypersparse but does not yet have a hyper_hash</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <call><name>GB_lookup</name> <argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>Ch</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,
                    <argument><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C is hypersparse, with a hyper_hash that is already built</comment>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>GB_hyper_hash_lookup</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,
                    <argument><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name><operator>-&gt;</operator><name>vdim</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>found</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>j</name> <operator>==</operator> <name><name>Ch</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C is sparse</comment>
            <expr_stmt><expr><name>pC_start</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pC_end</name>   <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// binary search in kth vector for index i</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// vector j has been found; now look for index i</comment>
            <expr_stmt><expr><name>pleft</name> <operator>=</operator> <name>pC_start</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pright</name> <init>= <expr><name>pC_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

            <comment type="line">// Time taken for this step is at most O(log(nnz(C(:,j))).</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_BINARY_SEARCH_ZOMBIE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>found</name></expr></argument>,
                <argument><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name></expr></argument>, <argument><expr><name>is_zombie</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set the element</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C (i,j) found</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// if not zombie:</comment>
        <comment type="line">//      no accum:   action: ( =A ): copy A into C</comment>
        <comment type="line">//      with accum: action: ( C+=A ): accumulate A into C</comment>
        <comment type="line">// else             action: ( undelete ): bring a zombie back to life</comment>

        <decl_stmt><decl><type><name>int8_t</name></type> <name>cb</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>C_is_bitmap</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>C</name><operator>-&gt;</operator><name>b</name> <index>[<expr><name>pleft</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>pleft</name><operator>*</operator><name>csize</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>is_zombie</name> <operator>||</operator> <operator>(</operator><name>C_is_bitmap</name> <operator>&amp;&amp;</operator> <name>cb</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C(i,j) = (ctype) scalar</comment>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C(i,j) += scalar</comment>
                <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>faccum</name> <init>= <expr><name><name>accum</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>

                <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_C_to_X</name></decl>, <decl><type ref="prev"/><name>cast_Z_to_Y</name></decl>, <decl><type ref="prev"/><name>cast_Z_to_C</name></decl> ;</decl_stmt>
                <expr_stmt><expr><name>cast_C_to_X</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cast_Z_to_Y</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cast_Z_to_C</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// scalar workspace</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>xaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>yaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>zaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>

                <comment type="line">// xaccum = (accum-&gt;xtype) cx</comment>
                <expr_stmt><expr><call><name>cast_C_to_X</name> <argument_list>(<argument><expr><name>xaccum</name></expr></argument>, <argument><expr><name>cx</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// yaccum = (accum-&gt;ytype) scalar</comment>
                <expr_stmt><expr><call><name>cast_Z_to_Y</name> <argument_list>(<argument><expr><name>yaccum</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// zaccum = xaccum "+" yaccum</comment>
                <expr_stmt><expr><call><name>faccum</name> <argument_list>(<argument><expr><name>zaccum</name></expr></argument>, <argument><expr><name>xaccum</name></expr></argument>, <argument><expr><name>yaccum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// cx = (ctype) zaccum</comment>
                <expr_stmt><expr><call><name>cast_Z_to_C</name> <argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>zaccum</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>is_zombie</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// bring the zombie back to life</comment>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// set the entry in the C bitmap</comment>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>+=</operator> <operator>(</operator><name>cb</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>b</name> <index>[<expr><name>pleft</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C (i,j) not found: add a pending tuple</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// action: ( insert )</comment>

        <comment type="line">// No typecasting can be done.  The new pending tuple must either be</comment>
        <comment type="line">// the first pending tuple, or its type must match the prior pending</comment>
        <comment type="line">// tuples.  See GB_subassign_methods.h for a complete description.</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// check for wait</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>wait</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the new pending tuple is the first one, so it will define</comment>
            <comment type="line">// C-&gt;type-pending = stype.  No need to wait.</comment>
            <expr_stmt><expr><name>wait</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>stype</name> <operator>!=</operator> <name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the scalar type (stype) must match the type of the</comment>
                <comment type="line">// prior pending tuples.  If the type is different, prior</comment>
                <comment type="line">// pending tuples must be assembled first.</comment>
                <expr_stmt><expr><name>wait</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if
            <condition>(
                <comment type="line">// the types match, now check the pending operator</comment>
                <expr><operator>!</operator> <operator>(</operator>
                    <comment type="line">// the operators are the same</comment>
                    <operator>(</operator><name>accum</name> <operator>==</operator> <name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>op</name></name><operator>)</operator>
                    <comment type="line">// or both operators are SECOND_Ctype, implicit or explicit</comment>
                    <operator>||</operator> <operator>(</operator><call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                        <call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call><operator>)</operator>
                  <operator>)</operator></expr>
            )</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>wait</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// incompatible pending tuples: wait is required</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// Pending tuples exist.  Either the pending operator is not</comment>
            <comment type="line">// SECOND_ctype (implicit or explicit), or the type of prior</comment>
            <comment type="line">// pending tuples is not the same as the type of the scalar.  This</comment>
            <comment type="line">// new tuple requires both conditions to hold.  All prior tuples</comment>
            <comment type="line">// must be assembled before this new one can be added.</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C (setElement:incompatible pending tuples)"</literal></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// repeat the search since the C(i,j) entry may have been in</comment>
            <comment type="line">// the list of pending tuples.  There are no longer any pending</comment>
            <comment type="line">// tuples, so this recursion will only happen once.  The</comment>
            <comment type="line">// pending operator will become the implicit SECOND_ctype, or</comment>
            <comment type="line">// accum, and the type of the pending tuples will become stype.</comment>
            <return>return <expr><operator>(</operator><call><name>GB_setElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>scalar_code</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// the new tuple is now compatible with prior tuples, if any</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// C (i,j) must be added to the list of pending tuples.</comment>
            <comment type="line">// If this is the first pending tuple, then the type of pending</comment>
            <comment type="line">// tuples becomes the type of this scalar, and the pending operator</comment>
            <comment type="line">// becomes NULL, which is the implicit SECOND_ctype operator,</comment>
            <comment type="line">// or non-NULL if accum is present.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Pending_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>Pending</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>scalar</name></expr></argument>,
                <argument><expr><name>stype</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// if this was the first tuple, then the pending operator and</comment>
            <comment type="line">// pending type have been defined</comment>
            <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_op_is_second</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>stype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>stype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// one more pending tuple; block if too many of them</comment>
            <return>return <expr><operator>(</operator><call><name>GB_block</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
