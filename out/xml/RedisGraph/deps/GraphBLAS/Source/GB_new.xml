<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_new: create a new GraphBLAS matrix, but do not allocate A-&gt;{b,i,x}</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Creates a new matrix but does not allocate space for A-&gt;b, A-&gt;i, and A-&gt;x.</comment>
<comment type="line">// See GB_new_bix instead.</comment>

<comment type="line">// If the Ap_option is GB_Ap_calloc, the A-&gt;p and A-&gt;h are allocated and</comment>
<comment type="line">// initialized, and A-&gt;magic is set to GB_MAGIC to denote a valid matrix.</comment>
<comment type="line">// Otherwise, the matrix has not yet been completely initialized, and A-&gt;magic</comment>
<comment type="line">// is set to GB_MAGIC2 to denote this.  This case only occurs internally in</comment>
<comment type="line">// GraphBLAS.  The internal function that calls GB_new must then allocate or</comment>
<comment type="line">// initialize A-&gt;p itself, and then set A-&gt;magic = GB_MAGIC when it does so.</comment>

<comment type="line">// To allocate a full or bitmap matrix, the sparsity parameter</comment>
<comment type="line">// is GxB_FULL or GxB_BITMAP.  The Ap_option is ignored.  For a full or</comment>
<comment type="line">// bitmap matrix, only the header is allocated, if NULL on input.</comment>

<comment type="line">// The GrB_Matrix object holds both a sparse vector and a sparse matrix.  A</comment>
<comment type="line">// vector is represented as an vlen-by-1 matrix, but it is sometimes treated</comment>
<comment type="line">// differently in various methods.  Vectors are never transposed via a</comment>
<comment type="line">// descriptor, for example.</comment>

<comment type="line">// The matrix may be created in an existing header, which case *Ahandle is</comment>
<comment type="line">// non-NULL on input.  If an out-of-memory condition occurs, (*Ahandle) is</comment>
<comment type="line">// returned as NULL, and the existing header is freed as well, if non-NULL on</comment>
<comment type="line">// input.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_new</name>                 <comment type="line">// create matrix, except for indices &amp; values</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Ahandle</name></decl></parameter>,        <comment type="line">// handle of matrix to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>,        <comment type="line">// matrix type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name></decl></parameter>,         <comment type="line">// length of each vector</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vdim</name></decl></parameter>,         <comment type="line">// number of vectors</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Ap_code</name></type> <name>Ap_option</name></decl></parameter>, <comment type="line">// allocate A-&gt;p and A-&gt;h, or leave NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_csc</name></decl></parameter>,          <comment type="line">// true if CSC, false if CSR</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sparsity</name></decl></parameter>,         <comment type="line">// hyper, sparse, bitmap, full, or auto</comment>
    <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>hyper_switch</name></decl></parameter>,   <comment type="line">// A-&gt;hyper_switch</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>plen</name></decl></parameter>,         <comment type="line">// size of A-&gt;p and A-&gt;h, if A hypersparse.</comment>
                                <comment type="line">// Ignored if A is not hypersparse.</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ahandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type for GB_new"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <macro><name>ASSERT</name> <argument_list>(<argument>vlen &gt;= <literal type="number">0</literal> &amp;&amp; vlen &lt;= GB_NMAX</argument>)</argument_list></macro>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>vdim</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vdim</name> <operator>&lt;=</operator> <name>GB_NMAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the matrix header, if not already allocated on input</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>allocated_header</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_Matrix_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>Ahandle</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>allocated_header</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator><operator>-&gt;</operator><name>static_header</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>  <comment type="line">// header of A has been malloc'd</comment>
        <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//  else</comment>
<comment type="line">//  { </comment>
<comment type="line">//      // the header of A has been provided on input.  It may already be</comment>
<comment type="line">//      // malloc'd, or it might be statically allocated in the caller. </comment>
<comment type="line">//      // (*Ahandle)-&gt;static_header is not modified.</comment>
<comment type="line">//  }</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><operator>*</operator><name>Ahandle</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize the matrix header</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// basic information</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC2</name></expr> ;</expr_stmt>                 <comment type="line">// object is not yet valid</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>          <comment type="line">// no error logged yet</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>logger_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">// CSR/CSC format</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>is_csc</name></expr> ;</expr_stmt>

    <comment type="line">// initial sparsity format</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_full_or_bitmap</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>hyper_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <call><name>GB_Global_bitmap_switch_matrix_get</name> <argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>A_is_hyper</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>             <comment type="line">// force A to be hypersparse</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>A_is_hyper</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>            <comment type="line">// force A to be sparse</comment>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>sparsity</name> <operator>==</operator> <name>GxB_FULL</name> <operator>||</operator> <name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>A_is_full_or_bitmap</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>    <comment type="line">// force A to be full or bitmap</comment>
        <expr_stmt><expr><name>A_is_hyper</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// auto: sparse or hypersparse</comment>
    <block>{<block_content> 
        <comment type="line">// auto selection:  sparse if one vector or less or</comment>
        <comment type="line">// if the global hyper_switch is negative; hypersparse otherwise.</comment>
        <comment type="line">// Never select A to be full or bitmap for this case.</comment>
        <expr_stmt><expr><name>A_is_hyper</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>vdim</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <literal type="number">0</literal> <operator>&gt;</operator> <name>hyper_switch</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// matrix dimensions</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <name>vlen</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name>vdim</name></expr> ;</expr_stmt>

    <comment type="line">// content that is freed or reset in GB_phy_free</comment>
    <if_stmt><if>if <condition>(<expr><name>A_is_full_or_bitmap</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is full or bitmap</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>vdim</name></expr> ;</expr_stmt>
        <comment type="line">// all vectors present, unless matrix has a zero dimension </comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vlen</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>vdim</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is hypersparse</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vdim</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>plen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>                   <comment type="line">// no vectors present</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is sparse</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>vdim</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>vdim</name></expr> ;</expr_stmt>                <comment type="line">// all vectors present</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// no content yet</comment>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>            <comment type="line">// OK: if iso, burble in the caller</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Allocate A-&gt;p and A-&gt;h if requested</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_is_full_or_bitmap</name> <operator>||</operator> <name>Ap_option</name> <operator>==</operator> <name>GB_Ap_null</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A is not initialized yet; A-&gt;p and A-&gt;h are both NULL.</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC2</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>Ap_option</name> <operator>==</operator> <name>GB_Ap_calloc</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Sets the vector pointers to zero, which defines all vectors as empty</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// since nvec is zero, there is never any need to initialize A-&gt;h</comment>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// Ap_option == GB_Ap_malloc</comment>
    <block>{<block_content>
        <comment type="line">// This is faster but can only be used internally by GraphBLAS since</comment>
        <comment type="line">// the matrix is allocated but not yet completely initialized.  The</comment>
        <comment type="line">// caller must set A-&gt;p [0..plen] and then set A-&gt;magic to GB_MAGIC,</comment>
        <comment type="line">// before returning the matrix to the user application.</comment>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC2</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// out of memory</comment>
        <if_stmt><if>if <condition>(<expr><name>allocated_header</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// free all of A, including the header</comment>
            <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><name>Ahandle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// the header was not allocated here; only free the content of A</comment>
            <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The vector pointers A-&gt;p are initialized only if Ap_calloc is true</comment>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>==</operator> <name>GB_MAGIC</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"new matrix from GB_new"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
