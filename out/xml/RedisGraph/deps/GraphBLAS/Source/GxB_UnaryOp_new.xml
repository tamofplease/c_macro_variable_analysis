<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_UnaryOp_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_UnaryOp_new: create a new named unary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// a unary operator: z = f (x).  The unary function signature must be</comment>
<comment type="line">// void f (void *z, const void *x), and then it must recast its input and</comment>
<comment type="line">// output arguments internally as needed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_UnaryOp_new</name>            <comment type="line">// create a new user-defined unary operator</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_UnaryOp</name> <modifier>*</modifier></type><name>unaryop</name></decl></parameter>,           <comment type="line">// handle for the new unary operator</comment>
    <parameter><decl><type><name>GxB_unary_function</name></type> <name>function</name></decl></parameter>,    <comment type="line">// pointer to the unary function</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ztype</name></decl></parameter>,                 <comment type="line">// type of output z</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,                 <comment type="line">// type of input x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unop_name</name></decl></parameter>,          <comment type="line">// name of the user function</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unop_defn</name></decl></parameter>           <comment type="line">// definition of the user function</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_UnaryOp_new (unaryop, function, ztype, xtype, name, defn)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>unaryop</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>unaryop</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>function</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>ztype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the unary op</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate the unary operator</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>unaryop</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_UnaryOp_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>unaryop</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// initialize the unary operator</comment>
    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>op</name> <init>= <expr><operator>*</operator><name>unaryop</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>xtype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>ztype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>=</operator> <name>function</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>idxunop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>selop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>GB_USER_unop_code</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the unary op name and defn</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_op_name_and_defn</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>defn</name></name><operator>)</operator></expr></argument>,
        <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>defn_size</name></name><operator>)</operator></expr></argument>, <argument><expr><name>unop_name</name></expr></argument>, <argument><expr><name>unop_defn</name></expr></argument>, <argument><expr><literal type="string">"GxB_unary_function"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>unaryop</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"new user-defined unary op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_UnaryOp_new: create a new user-defined unary operator (historical)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This method was only accessible via the GrB_UnaryOp_new macro in v5.1.x</comment>
<comment type="line">// and earlier.  The GrB_UnaryOp_new macro in v5.2.x and later calls</comment>
<comment type="line">// GxB_UnaryOp_new instead.</comment>

<function><type><name>GrB_Info</name></type> <name>GB_UnaryOp_new</name>             <comment type="line">// create a new user-defined unary operator</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_UnaryOp</name> <modifier>*</modifier></type><name>unaryop</name></decl></parameter>,           <comment type="line">// handle for the new unary operator</comment>
    <parameter><decl><type><name>GxB_unary_function</name></type> <name>function</name></decl></parameter>,    <comment type="line">// pointer to the unary function</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ztype</name></decl></parameter>,                 <comment type="line">// type of output z</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,                 <comment type="line">// type of input x</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>                <comment type="line">// name of the user function</comment>
)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GxB_UnaryOp_new</name> <argument_list>(<argument><expr><name>unaryop</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
