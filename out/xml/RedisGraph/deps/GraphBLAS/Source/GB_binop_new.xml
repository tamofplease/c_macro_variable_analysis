<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_binop_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop_new: create a new operator (user-defined or internal)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Create a new a binary operator: z = f (x,y).  The function pointer may</comment>
<comment type="line">// be NULL, for implied functions (FIRST and SECOND).  It may not be NULL</comment>
<comment type="line">// otherwise.</comment>

<comment type="line">// The binary op header is allocated by the caller, and passed in</comment>
<comment type="line">// uninitialized.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_binop_new</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,                <comment type="line">// new binary operator</comment>
    <parameter><decl><type><name>GxB_binary_function</name></type> <name>function</name></decl></parameter>,   <comment type="line">// binary function (may be NULL)</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ztype</name></decl></parameter>,                 <comment type="line">// type of output z</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,                 <comment type="line">// type of input x</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ytype</name></decl></parameter>,                 <comment type="line">// type of input y</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>binop_name</name></decl></parameter>,         <comment type="line">// name of the user function</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>binop_defn</name></decl></parameter>,         <comment type="line">// definition of the user function</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>          <comment type="line">// opcode for the function</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ztype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>xtype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ytype</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize the binary operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>=</operator> <name>ztype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>=</operator> <name>xtype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name> <operator>=</operator> <name>ytype</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>idxunop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name> <operator>=</operator> <name>function</name></expr> ;</expr_stmt>       <comment type="line">// may be NULL</comment>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>selop_function</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name> <operator>=</operator> <name>opcode</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the binary op name and defn</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>GB_op_name_and_defn</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>defn</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>defn_size</name></name><operator>)</operator></expr></argument>,
        <argument><expr><name>binop_name</name></expr></argument>, <argument><expr><name>binop_defn</name></expr></argument>, <argument><expr><literal type="string">"GxB_binary_function"</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
