<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Vector_export_Full.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Vector_export_Full: export a full vector</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_export.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GxB_Vector_export_Full</name>   <comment type="line">// export and free a full vector</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Vector</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,      <comment type="line">// handle of vector to export and free</comment>
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,     <comment type="line">// type of vector exported</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>n</name></decl></parameter>,       <comment type="line">// length of the vector</comment>

    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>vx</name></decl></parameter>,          <comment type="line">// values</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>vx_size</name></decl></parameter>, <comment type="line">// size of vx in bytes</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>iso</name></decl></parameter>,          <comment type="line">// if true, v is iso</comment>

    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Vector_export_Full (&amp;v, &amp;type, &amp;n, "</literal>
        <literal type="string">"&amp;vx, &amp;vx_size, &amp;iso, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_Vector_export_Full"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx4</name></expr></argument>, <argument><expr><name>xx5</name></expr></argument>, <argument><expr><name>xx6</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_is_dense</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <operator>(</operator><operator>*</operator><name>v</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// v must be dense or full</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// ensure the vector is full CSC</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>v</name><operator>)</operator><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>vdim</name></decl> ;</decl_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_export</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name> <operator>*</operator><operator>)</operator> <name>v</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdim</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,     <comment type="line">// Ap</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,     <comment type="line">// Ah</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,     <comment type="line">// Ab</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,     <comment type="line">// Ai</comment>
        <argument><expr><name>vx</name></expr></argument>,   <argument><expr><name>vx_size</name></expr></argument>,  <comment type="line">// Ax</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_csc</name></expr></argument>,                 <comment type="line">// full by col</comment>
        <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>is_csc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>vdim</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
