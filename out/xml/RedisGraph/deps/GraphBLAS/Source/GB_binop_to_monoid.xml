<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_binop_to_monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop_to_monoid: convert a binary op into its corresponding monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>GrB_Monoid</name></type> <name>GB_binop_to_monoid</name>       <comment type="line">// return the corresponding monoid, or NULL</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>op_in</name></decl></parameter>        <comment type="line">// binary op to convert</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op_in</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the binary op_in to its corresponding monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op_in</name></expr></argument>, <argument><expr><literal type="string">"binary op to convert to monoid"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name> <init>= <expr><call><name>GB_boolean_rename_op</name> <argument_list>(<argument><expr><name>op_in</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GB_MIN_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 MIN monoids: for 10 real types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_INT8</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_INT16</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_INT32</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_INT64</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_UINT8</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_UINT16</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_UINT32</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_UINT64</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_FP32</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MONOID_FP64</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 10 MAX monoids: for 10 real types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_INT8</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_INT16</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_INT32</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_INT64</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_UINT8</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_UINT16</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_UINT32</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_UINT64</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_FP32</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MONOID_FP64</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 12 TIMES monoids: 10 real types, and 2 complex types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_INT8</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_INT16</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_INT32</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_INT64</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_UINT8</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_UINT16</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_UINT32</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_UINT64</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_FP32</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_TIMES_MONOID_FP64</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 12 PLUS monoids: 10 real types, and 2 complex types</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_INT8</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_INT16</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_INT32</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_INT64</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_UINT8</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_UINT16</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_UINT32</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_UINT64</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_FP32</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MONOID_FP64</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ANY_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 13 ANY monoids: bool, 10 real types, and 2 complex types</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_BOOL_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT8_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT16_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT32_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_INT64_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT8_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT16_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FP32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FP64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FC32_MONOID</name>    <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FC64_MONOID</name>    <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <comment type="line">// 4 boolean monoids: (see also GxB_ANY_BOOL_MONOID above)</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name><parameter_list>(<parameter><type><name>monoid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return ((zcode == GB_BOOL_code) ? monoid : NULL) ;</cpp:value></cpp:define>
        <case>case <expr><name>GB_LOR_binop_code</name></expr>   :</case> <expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>GrB_LOR_MONOID_BOOL</name></expr></argument>)</argument_list></call></expr>   ;</expr_stmt>
        <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case> <expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>GrB_LAND_MONOID_BOOL</name></expr></argument>)</argument_list></call></expr>  ;</expr_stmt>
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case> <expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>GrB_LXOR_MONOID_BOOL</name></expr></argument>)</argument_list></call></expr>  ;</expr_stmt>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>    :</case> <expr_stmt><expr><call><name>B</name> <argument_list>(<argument><expr><name>GrB_LXNOR_MONOID_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <case>case <expr><name>GB_BOR_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 4 BOR monoids</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT8_MONOID</name>   <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT16_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT32_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_UINT64_MONOID</name>  <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BAND_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 4 BAND monoids</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT8_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT16_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT32_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_UINT64_MONOID</name> <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BXOR_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 4 BXOR monoids</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT8_MONOID</name>  <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT16_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT32_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_UINT64_MONOID</name> <operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BXNOR_binop_code</name></expr>:</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// 4 BXNOR monoids</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT8_MONOID</name> <operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT16_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT32_MONOID</name><operator>)</operator></expr> ;</return>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_UINT64_MONOID</name><operator>)</operator></expr> ;</return>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <default>default :</default> <empty_stmt>;</empty_stmt>
            <comment type="line">// user-defined binary operatory, or other built-in binary op</comment>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// op_in binary operator does not correspond to a known monoid</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
