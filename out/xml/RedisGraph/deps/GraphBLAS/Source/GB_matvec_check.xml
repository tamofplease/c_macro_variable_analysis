<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_matvec_check.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_matvec_check: print a GraphBLAS matrix and check if it is valid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// for code development only:</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GBCUDA</name></cpp:ifdef>
<comment type="line">// CUDA kernels enabled: turn on developer flag</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DEVELOPER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="line">// in production: turn off developer flag</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DEVELOPER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Pending.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_hash.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GB_matvec_check</name>    <comment type="line">// check a GraphBLAS matrix or vector</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// GraphBLAS matrix to print and check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,       <comment type="line">// name of the matrix, optional</comment>
    <parameter><decl><type><name>int</name></type> <name>pr</name></decl></parameter>,                 <comment type="line">// print level; if negative, ignore nzombie</comment>
                            <comment type="line">// conditions and use GB_FLIP(pr) for diagnostics</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,                <comment type="line">// file for output (or stdout if f is NULL)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>        <comment type="line">// "matrix" or "vector" (only for printing diag.)</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// decide what to print</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_full</name> <init>= <expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ignore_zombies</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pr</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ignore_zombies</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pr</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>GxB_COMPLETE_VERBOSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>phantom</name> <init>= <expr><operator>(</operator><name>is_full</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>iso</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>phantom</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// the matrix is a phantom: iso full, or full with no A-&gt;x;</comment>
        <comment type="line">// convert GxB_COMPLETE* to GxB_SHORT* for a phantom matrix</comment>
        <if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <name>GxB_COMPLETE_VERBOSE</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pr</name> <operator>=</operator> <name>GxB_SHORT_VERBOSE</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>pr</name> <operator>==</operator> <name>GxB_COMPLETE</name></expr>        )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pr</name> <operator>=</operator> <name>GxB_SHORT</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//  bool pr_silent   = (pr == GxB_SILENT) ;</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>pr_complete</name> <init>= <expr><operator>(</operator><name>pr</name> <operator>==</operator> <name>GxB_COMPLETE</name> <operator>||</operator> <name>pr</name> <operator>==</operator> <name>GxB_COMPLETE_VERBOSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pr_short</name>    <init>= <expr><operator>(</operator><name>pr</name> <operator>==</operator> <name>GxB_SHORT</name>    <operator>||</operator> <name>pr</name> <operator>==</operator> <name>GxB_SHORT_VERBOSE</name>   <operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>one_based</name> <init>= <expr><call><name>GB_Global_print_one_based_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>pr_mem_shallow</name> <init>= <expr><call><name>GB_Global_print_mem_shallow_get</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>one_based</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>pr_developer</name> <init>= <expr><name>pr</name></expr></init></decl> ;</decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int</name></type> <name>pr_developer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n  "</literal> <name>GBd</name> <literal type="string">"x"</literal> <name>GBd</name> <literal type="string">" GraphBLAS "</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>A</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>(</operator><name>A</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"float complex"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>phantom</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" (phantom)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check if null, freed, or uninitialized</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" NULL\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_CHECK_MAGIC</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print the header</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_full</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A-&gt;p, A-&gt;h, A-&gt;i, and A-&gt;b all null</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", full"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_bitmap</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A-&gt;b not null</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", bitmap"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_sparse</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A-&gt;h null, A-&gt;p not null</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// A-&gt;h not null</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", hypersparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is not hyper, sparse, bitmap, or full</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" invalid structure\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" (jumbled)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><literal type="string">"by col"</literal></expr> </then><else>: <expr><literal type="string">"by row"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  max # entries: "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>GB_nnz_max</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  vlen: "</literal> <name>GBd</name></expr></argument> , <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" nvec_nonempty: "</literal> <name>GBd</name></expr></argument> , <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" nvec: "</literal> <name>GBd</name> <literal type="string">" plen: "</literal> <name>GBd</name> <literal type="string">" vdim: "</literal> <name>GBd</name> <literal type="string">"\n  hyper_switch %g "</literal>
        <literal type="string">"bitmap_switch %g\n"</literal></expr></argument>,
        <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// 1</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse only\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 2</comment>
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: sparse only\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 3</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: sparse/hypersparse\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 4</comment>
        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: bitmap only\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 5</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse/bitmap\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 6</comment>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: sparse/bitmap\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 7</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse/sparse/bitmap\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 8</comment>
        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 9</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 10</comment>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: sparse/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 11</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse/sparse/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 12</comment>
        <case>case <expr><name>GxB_FULL</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: bitmap/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 13</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hypersparse/bitmap/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 14</comment>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: sparse/bitmap/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">// 15</comment>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> 
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: hyper/sparse/bitmap/full\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <break>break ;</break>

        <default>default :</default> 
            <comment type="line">// invalid sparsity control</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  sparsity control: %d invalid\n"</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            <break>break ;</break>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the dimensions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>&gt;</operator> <name>GB_NMAX</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&gt;</operator> <name>GB_NMAX</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid %s dimensions\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check vector structure</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_full</name></expr>)</condition> 
    <block>{<block_content>
        <comment type="line">// A is full</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid full %s structure\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_bitmap</name></expr>)</condition> 
    <block>{<block_content>
        <comment type="line">// A is bitmap</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
               <name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid bitmap %s structure\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>is_sparse</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is sparse</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid sparse %s structure\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// A is hypersparse</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>&lt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>&lt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid hypersparse %s structure\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count the allocated blocks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nallocs</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>mem_deep</name></decl>, <decl><type ref="prev"/><name>mem_shallow</name></decl>, <decl><type ref="prev"/><name>memsize</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_memoryUsage</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nallocs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_deep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_shallow</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>memsize</name> <operator>=</operator> <name>mem_deep</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>pr_mem_shallow</name></expr> ?</condition><then> <expr><name>mem_shallow</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>pr_short</name> <operator>||</operator> <name>pr_complete</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>static_header</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  static header,"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  header %p"</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">" number of memory blocks: "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>nallocs</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  deep: "</literal> <name>GBu</name> <literal type="string">" shallow: "</literal> <name>GBu</name> <literal type="string">" total: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>mem_deep</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>mem_shallow</name></expr></argument>,
            <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <operator>(</operator><name>mem_deep</name> <operator>+</operator> <name>mem_shallow</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Type_check</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>pr_developer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  %s has an invalid type\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// report shallow structure</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>pr_short</name> <operator>||</operator> <name>pr_complete</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;h: %p shallow: %d size: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;p: %p shallow: %d size: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;i: %p shallow: %d size: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;b: %p shallow: %d size: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;x: %p shallow: %d size: "</literal> <name>GBu</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;Y: %p shallow: %d\n"</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  A-&gt;p is too small!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>plen</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  A-&gt;h is too small!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check p</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_hyper</name> <operator>||</operator> <name>is_sparse</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;p is NULL, invalid %s\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;p [0] = "</literal> <name>GBd</name> <literal type="string">" invalid\n"</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nzmax</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i_size</name></name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name>nzmax</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;p ["</literal> <name>GBd</name> <literal type="string">"] = "</literal> <name>GBd</name> <literal type="string">" invalid\n"</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>nzmax</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;i is NULL, invalid %s\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the content of h</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_hyper</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jlast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>jlast</name> <operator>&gt;=</operator> <name>j</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  -&gt;h ["</literal> <name>GBd</name> <literal type="string">"] = "</literal> <name>GBd</name> <literal type="string">" invalid\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>jlast</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// report name and number of entries</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name> <argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>name</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// # of entries cannot be computed until all the tests above are OK</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"no entries"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"1 entry"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>anz</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GB_nnz (A) resulted in integer overflow, so use double instead</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"%g entries"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><name>GBd</name> <literal type="string">" entries"</literal></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print the memory size</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K</name></cpp:macro> <cpp:value>(1024L)</cpp:value></cpp:define>
    <if_stmt><if>if <condition>(<expr><name>memsize</name> <operator>&lt;</operator> <name>K</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", memory: "</literal> <name>GBd</name> <literal type="string">" bytes\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>memsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>memsize</name> <operator>&lt;</operator> <name>K</name><operator>*</operator><name>K</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>memsize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>K</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", memory: %.1f KB\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>memsize</name> <operator>&lt;</operator> <name>K</name><operator>*</operator><name>K</name><operator>*</operator><name>K</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>memsize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>K</name><operator>*</operator><name>K</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", memory: %.1f MB\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>memsize</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>K</name><operator>*</operator><name>K</name><operator>*</operator><name>K</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">", memory: %.1f GB\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print the iso value</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid iso matrix\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  iso value: "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_entry_check</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// report the number of pending tuples and zombies</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>Pending</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  pending tuples: "</literal> <name>GBd</name> <literal type="string">" max pending: "</literal> <name>GBd</name> 
            <literal type="string">" zombies: "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><call><name>GB_Pending_n</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><operator>(</operator><name>Pending</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name><operator>)</operator></expr></else></ternary></expr></argument>,
            <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_full</name> <operator>||</operator> <name>is_bitmap</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// full/bitmap cannot have zombies</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  %s %s cannot have zombies\n"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>is_full</name></expr> ?</condition><then> <expr><literal type="string">"full"</literal></expr> </then><else>: <expr><literal type="string">"bitmap"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// full/bitmap cannot have pending tuples</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  %s %s cannot have pending tuples\n"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>is_full</name></expr> ?</condition><then> <expr><literal type="string">"full"</literal></expr> </then><else>: <expr><literal type="string">"bitmap"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// full/bitmap jumbled</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  %s %s cannot be jumbled\n"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>is_full</name></expr> ?</condition><then> <expr><literal type="string">"full"</literal></expr> </then><else>: <expr><literal type="string">"bitmap"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_zombies</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>&gt;</operator> <name>anz</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid number of zombies: "</literal> <name>GBd</name> <literal type="string">" "</literal>
            <literal type="string">"must be &gt;= 0 and &lt;= # entries ("</literal> <name>GBd</name> <literal type="string">")\n"</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check and print the row indices and numerical values</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NBRIEF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NZBRIEF</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nzombies</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>icount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>truncated</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz_actual</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// for each vector of A</comment>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pend</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// count the entries in A(:,j)</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><name>pend</name> <operator>-</operator> <name>p</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_bitmap</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ajnz</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p2</name> <init>= <expr><name>p</name></expr></init></decl> ;</init> <condition><expr><name>p2</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int8_t</name></type> <name>ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name> <index>[<expr><name>p2</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>ab</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>ab</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// bitmap with value other than 0, 1</comment>
                    <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    invalid bitmap %d\n"</literal></expr></argument>, <argument><expr><name>ab</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>ajnz</name> <operator>+=</operator> <operator>(</operator><name>ab</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>  ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>prcol</name> <init>= <expr><operator>(</operator><operator>(</operator><name>pr_short</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>truncated</name><operator>)</operator> <operator>||</operator> <name>pr_complete</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <comment type="line">// print the header for vector j</comment>
        <if_stmt><if>if <condition>(<expr><name>prcol</name></expr>)</condition>
        <block>{<block_content> 
            <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  %s: "</literal> <name>GBd</name> <literal type="string">" : "</literal> <name>GBd</name> <literal type="string">" entries ["</literal> <name>GBd</name> <literal type="string">":"</literal> <name>GBd</name> <literal type="string">"]\n"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><literal type="string">"column"</literal></expr> </then><else>: <expr><literal type="string">"row"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>ajnz</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pend</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>pr_short</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>==</operator> <name>GB_NBRIEF</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>truncated</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// for each entry in A(:,j), the kth vector of A</comment>
        <for>for <control>( <init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pend</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>anz_actual</name><operator>++</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>icount</name><operator>++</operator></expr> ;</expr_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>is_zombie</name> <init>= <expr><call><name>GB_IS_ZOMBIE</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>GB_UNFLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>is_zombie</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nzombies</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>print_value</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>prcol</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pr_short</name> <operator>&amp;&amp;</operator> <name>icount</name> <operator>&lt;</operator> <name>GB_NZBRIEF</name><operator>)</operator> <operator>||</operator> <name>pr_complete</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>print_value</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
                    <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"    %s "</literal> <name>GBd</name> <literal type="string">": "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><literal type="string">"row"</literal></expr></then><else>:<expr><literal type="string">"column"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"    ("</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">") "</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"    ("</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">") "</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name>pr_short</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ilast</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>icount</name> <operator>==</operator> <name>GB_NZBRIEF</name><operator>)</operator></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>truncated</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>row</name> <init>= <expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>col</name> <init>= <expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  index ("</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">") out of range\n"</literal></expr></argument>,
                    <argument><expr><name>row</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>col</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// print the value</comment>
            <if_stmt><if>if <condition>(<expr><name>print_value</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>is_zombie</name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"zombie"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content> 
                    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_entry_check</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                        <argument><expr><name>Ax</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>p</name> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// If the matrix is known to be jumbled, then out-of-order</comment>
            <comment type="line">// indices are OK (but duplicates are not OK).  If the matrix is</comment>
            <comment type="line">// unjumbled, then all indices must appear in ascending order.</comment>
            <if_stmt><if>if <condition>(<expr><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>i</name> <operator>==</operator> <name>ilast</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>i</name> <operator>&lt;=</operator> <name>ilast</name><operator>)</operator></expr></else></ternary></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// indices unsorted, or duplicates present</comment>
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">" index ("</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">") invalid\n"</literal></expr></argument>,
                    <argument><expr><name>row</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><name>col</name><operator>+</operator><name>offset</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INDEX_OUT_OF_BOUNDS</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>print_value</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>phantom</name> <operator>&amp;&amp;</operator> <name>anz_actual</name> <operator>&gt;=</operator> <name>GB_NZBRIEF</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>truncated</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                <break>break ;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>phantom</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>truncated</name> <operator>||</operator> <name>k</name> <operator>&gt;=</operator> <name>GB_NBRIEF</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>truncated</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <break>break ;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>pr_short</name> <operator>&amp;&amp;</operator> <name>truncated</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"    ...\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the entry count in the bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>is_bitmap</name> <operator>&amp;&amp;</operator> <name>anz</name> <operator>!=</operator> <name>anz_actual</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// bitmap with invalid nvals</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid bitmap count: "</literal> <name>GBd</name> <literal type="string">" exist but"</literal>
            <literal type="string">" A-&gt;nvals = "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>anz_actual</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>is_sparse</name> <operator>||</operator> <name>is_hyper</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>anz</name> <operator>!=</operator> <name>anz_actual</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// sparse/hypersparse with invalid nvals</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid sparse/hypersparse entry count: "</literal> <name>GBd</name> <literal type="string">" exist but"</literal>
            <literal type="string">" A-&gt;nvals = "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>anz_actual</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the zombie count</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ignore_zombies</name> <operator>&amp;&amp;</operator> <name>nzombies</name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid zombie count: "</literal> <name>GBd</name> <literal type="string">" exist but"</literal>
            <literal type="string">" A-&gt;nzombies = "</literal> <name>GBd</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>nzombies</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check and print the pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pr_short</name> <operator>||</operator> <name>pr_complete</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>is_sparse</name> <operator>||</operator> <name>is_hyper</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  Pending %p\n"</literal></expr></argument>, <argument><expr><name>Pending</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>Pending</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//---------------------------------------------------------------------</comment>
        <comment type="line">// A has pending tuples</comment>
        <comment type="line">//---------------------------------------------------------------------</comment>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DEVELOPER</name></expr></cpp:if>
        <if_stmt><if>if <condition>(<expr><name>pr_short</name> <operator>||</operator> <name>pr_complete</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  Pending-&gt;i %p\n"</literal></expr></argument>, <argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  Pending-&gt;j %p\n"</literal></expr></argument>, <argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>j</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"  Pending-&gt;x %p\n"</literal></expr></argument>, <argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>n</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Pending</name><operator>-&gt;</operator><name>n</name></name> <operator>&gt;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name> <operator>||</operator>
            <name><name>Pending</name><operator>-&gt;</operator><name>nmax</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid pending count\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// matrix has tuples, arrays and type must not be NULL</comment>
        <comment type="line">// Pending-&gt;x must be NULL if and only if A is iso</comment>
        <comment type="line">// Pending-&gt;x must be non-NULL if and only if A is non-iso</comment>
        <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>j</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid pending tuples\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  pending tuples:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Type_check</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name> <operator>||</operator> <operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// invalid Pending-&gt;type</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  %s has an invalid Pending-&gt;type\n"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jlast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>sorted</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>Pending</name><operator>-&gt;</operator><name>n</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Pending</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name><name>Pending</name><operator>-&gt;</operator><name>j</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>row</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>col</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>i</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>offset</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// print the tuple</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pr_short</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>GB_NZBRIEF</name><operator>)</operator> <operator>||</operator> <name>pr_complete</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"    row: "</literal> <name>GBd</name> <literal type="string">" col: "</literal> <name>GBd</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_entry_check</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>type</name></name></expr></argument>,
                        <argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator><operator>(</operator><name>k</name> <operator>*</operator> <name><name>Pending</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>j</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"    tuple ("</literal> <name>GBd</name> <literal type="string">","</literal> <name>GBd</name> <literal type="string">") out of range\n"</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>sorted</name> <operator>=</operator> <name>sorted</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>jlast</name> <operator>&lt;</operator> <name>j</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>jlast</name> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <name>ilast</name> <operator>&lt;=</operator> <name>i</name><operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>jlast</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>sorted</name> <operator>!=</operator> <name><name>Pending</name><operator>-&gt;</operator><name>sorted</name></name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid pending tuples: invalid sort\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>Pending</name><operator>-&gt;</operator><name>op</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  pending operator: implicit 2nd\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_BinaryOp_check</name> <argument_list>(<argument><expr><name><name>Pending</name><operator>-&gt;</operator><name>op</name></name></expr></argument>, <argument><expr><literal type="string">"pending operator:"</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid pending operator\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pr_complete</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBPR</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check nvec_nonempty</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A-&gt;nvec_nonempty == -1 denotes that the value has not been computed.</comment>
    <comment type="line">// This is valid, and can occur for imported matrices and in other cases</comment>
    <comment type="line">// when its computation is postponed or not needed.  If not -1, however,</comment>
    <comment type="line">// the value must be correct.</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>actual_nvec_nonempty</name> <init>= <expr><call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>==</operator> <name>actual_nvec_nonempty</name><operator>)</operator> <operator>||</operator>
           <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// invalid nvec_nonempty</comment>
        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  invalid count of non-empty vectors\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check A-&gt;Y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Y</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Y</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A-&gt;Y is optional, but A must be hypersparse for A-&gt;Y to exist</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  hyper_hash invalid\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_matvec_check</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="string">"Y hyper_hash"</literal></expr></argument>, <argument><expr><name>pr_developer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"matrix"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A-&gt;Y fails the tests in GB_matvec_check</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  hyper_hash invalid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Y</name><operator>-&gt;</operator><name>vlen</name></name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name> <operator>||</operator> <operator>!</operator><call><name>GB_IS_POWER_OF_TWO</name> <argument_list>(<argument><expr><name><name>Y</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
            <name><name>Y</name><operator>-&gt;</operator><name>nvals</name></name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>||</operator> <operator>!</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>Y</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GrB_UINT64</name> <operator>||</operator>
            <operator>!</operator><name><name>Y</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>||</operator> <call><name>GB_ANY_PENDING_WORK</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Y must be sparse, uint64, held by column, with A-&gt;nvec values,</comment>
            <comment type="line">// vector length the same as A-&gt;vdim, and with a Y-&gt;vdim that is a</comment>
            <comment type="line">// power of 2. It cannot have any pending work.</comment>
            <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  hyper_hash invalid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// ensure that Y is the inverse of A-&gt;h</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><name><name>Y</name><operator>-&gt;</operator><name>vdim</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Yx</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name><name>Y</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// look for j in the hyper_hash; it must be at position k</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jhash</name> <init>= <expr><call><name>GB_HASHF2</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hash_bits</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Y</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>jhash</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Y</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>jhash</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>Y</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>k</name> <operator>!=</operator> <name><name>Yx</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// j is found but not with the right value of k</comment>
                        <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  hyper_hash invalid\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <break>break ;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// j must appear in the hyper_hash</comment>
                <expr_stmt><expr><call><name>GBPR0</name> <argument_list>(<argument><expr><literal type="string">"  hyper_hash invalid\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
