<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose: C=A' or C=op(A'), with typecasting</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// CALLS:     GB_builder</comment>

<comment type="line">// Transpose a matrix, C=A', and optionally apply a unary operator and/or</comment>
<comment type="line">// typecast the values.  The transpose may be done in-place, in which case C or</comment>
<comment type="line">// A are modified in-place.</comment>

<comment type="line">// There are two ways to use this method:</comment>
<comment type="line">//  C = A'      C and A are different</comment>
<comment type="line">//  C = C'      C is transposed in-place, (C==A aliased)</comment>

<comment type="line">// In both cases, the header for C and A must already be allocated (either</comment>
<comment type="line">// static or dynamic).   A is never modified, unless C==A.  C and A cannot be</comment>
<comment type="line">// NULL on input.  If in place (C == A) then C and A is a valid matrix on input</comment>
<comment type="line">// (the input matrix A).  If C != A, the contents of C are not defined on input,</comment>
<comment type="line">// and any prior content is freed.  Either header may be static or dynamic.</comment>

<comment type="line">// The input matrix A may have shallow components (even if in-place), and the</comment>
<comment type="line">// output C may also have shallow components (even if the input matrix is not</comment>
<comment type="line">// shallow).</comment>

<comment type="line">// This function is CSR/CSC agnostic; it sets the output matrix format from</comment>
<comment type="line">// C_is_csc but otherwise ignores the CSR/CSC type of A and C.</comment>

<comment type="line">// The bucket sort is parallel, but not highly scalable.  If e=nnz(A) and A is</comment>
<comment type="line">// m-by-n, then at most O(e/n) threads are used.  The GB_builder method is more</comment>
<comment type="line">// scalable, but not as fast with a modest number of threads.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>               \
<cpp:value>{                                       \
    GB_FREE (&amp;iwork, iwork_size) ;      \
    GB_FREE (&amp;jwork, jwork_size) ;      \
    GB_FREE (&amp;Swork, Swork_size) ;      \
    GB_WERK_POP (Count, int64_t) ;      \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE_WORKSPACE ;                 \
    GB_Matrix_free (&amp;T) ;               \
    <comment type="block">/* freeing C also frees A if transpose is done in-place */</comment> \
    GB_phybix_free (C) ;                \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_apply.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_transpose</name>           <comment type="line">// C=A', C=(ctype)A' or C=op(A')</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix C, possibly modified in-place</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,             <comment type="line">// desired type of C; if NULL use A-&gt;type.</comment>
                                <comment type="line">// ignored if op is present (cast to op-&gt;ztype)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// desired CSR/CSC format of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix; C == A if done in place</comment>
        <comment type="line">// no operator is applied if op is NULL</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op_in</name></decl></parameter>,    <comment type="line">// unary/idxunop/binop to apply</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,    <comment type="line">// scalar to bind to binary operator</comment>
        <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>,         <comment type="line">// if true, binop(x,A) else binop(A,y)</comment>
        <parameter><decl><type><name>bool</name></type> <name>flipij</name></decl></parameter>,                <comment type="line">// if true, flip i,j for user idxunop</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs and determine if transpose is done in-place</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>in_place</name> <init>= <expr><operator>(</operator><name>A</name> <operator>==</operator> <name>C</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>iwork</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>iwork_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>jwork</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>jwork_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Swork</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Swork_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK_OR_NULL</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"ctype for GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_OP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>op_in</name></expr></argument>, <argument><expr><literal type="string">"unop/binop for GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_SCALAR_OK_OR_NULL</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar for GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(in-place transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the current sparsity control of A</comment>
    <decl_stmt><decl><type><name>float</name></type> <name>A_hyper_switch</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>A_bitmap_switch</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity_control</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// wait if A has pending tuples or zombies; leave jumbled unless avdim == 1</comment>
    <if_stmt><if>if <condition>(<expr><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>avdim</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>avdim</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name>  <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz_held</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvals</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvals</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the max number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the type of C and get the unary, idxunop, binary operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If a unary, idxunop, or binary operator is present, C is always returned</comment>
    <comment type="line">// as the ztype of the operator.  The input ctype is ignored.</comment>

    <decl_stmt><decl><type><name>GB_Operator</name></type> <name>op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name>GB_NOP_code</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op_in</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// no operator</comment>
        <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// no typecasting if ctype is NULL</comment>
            <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>op_in</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// get the unary operator</comment>
            <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name><name>op_in</name><operator>-&gt;</operator><name>xtype</name></name> <operator>&amp;&amp;</operator> <name>opcode</name> <operator>==</operator> <name>GB_IDENTITY_unop_code</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// op is a built-in unary identity operator, with the same type</comment>
                <comment type="line">// as A, so do not apply the operator and do not typecast.  op</comment>
                <comment type="line">// is NULL.</comment>
                <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// apply the operator, z=unop(x)</comment>
                <expr_stmt><expr><name>op</name> <operator>=</operator> <name>op_in</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// binary or idxunop</comment>
        <block>{<block_content> 
            <comment type="line">// get the binary or idxunop operator: only GB_apply calls</comment>
            <comment type="line">// GB_transpose with op_in, and it ensures this condition holds:</comment>
            <comment type="line">// first(A,y), second(x,A) have been renamed to identity(A), and</comment>
            <comment type="line">// PAIR has been renamed one(A), so these cases do not occur here.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name><operator>)</operator> <operator>||</operator>
                      <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name>  <operator>&amp;&amp;</operator> <operator>!</operator><name>binop_bind1st</name><operator>)</operator> <operator>||</operator>
                      <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>&amp;&amp;</operator>  <name>binop_bind1st</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// apply the operator, z=binop(A,y), binop(x,A), or idxunop(A,y)</comment>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>op_in</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>user_idxunop</name> <init>= <expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_USER_idxunop_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for positional operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Operator</name></type> <name>save_op</name> <init>= <expr><name>op</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// do not apply the positional op until after the transpose;</comment>
        <comment type="line">// replace op with the ONE operator, as a placeholder.  C will be</comment>
        <comment type="line">// constructed as iso, and needs to be expanded to non-iso when done.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ctype</name> <operator>==</operator> <name>GrB_INT64</name> <operator>||</operator> <name>ctype</name> <operator>==</operator> <name>GrB_INT32</name> <operator>||</operator> <name>ctype</name> <operator>==</operator> <name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <call><name>GB_unop_one</name> <argument_list>(<argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>user_idxunop</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// do not apply the user op until after the transpose; replace with</comment>
        <comment type="line">// no operator at all, with no typecast</comment>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the iso status of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>avlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>avdim</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_iso_code</name></type> <name>C_code_iso</name> <init>= <expr><call><name>GB_iso_unop_code</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><operator>(</operator><name>C_code_iso</name> <operator>!=</operator> <name>GB_NON_ISO</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// T = A', T = (ctype) A', or T = op (A')</comment>
    <comment type="line">//==========================================================================</comment>

    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is empty</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// create a new empty matrix T, with the new type and dimensions.</comment>
        <comment type="line">// set T-&gt;iso = false   OK</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// hyper, existing header</comment>
            <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name> <operator>||</operator> <call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose a bitmap/as-if-full matrix or vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// A is either bitmap or as-is-full (full, or sparse or hypersparse</comment>
        <comment type="line">// with all entries present, no zombies, no pending tuples, and not</comment>
        <comment type="line">// jumbled).  T = A' is either bitmap or full.</comment>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(bitmap/full transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>T_sparsity</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_is_bitmap</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_BITMAP</name></expr> </then><else>: <expr><name>GxB_FULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>T_cheap</name> <init>=                  <comment type="line">// T can be done quickly if:</comment>
            <expr><operator>(</operator><name>avlen</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>avdim</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator>      <comment type="line">// A is a row or column vector,</comment>
            <operator>&amp;&amp;</operator> <name>op</name> <operator>==</operator> <name>NULL</name>                   <comment type="line">// no operator to apply,</comment>
            <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>ctype</name></expr></init></decl> ;</decl_stmt>             <comment type="line">// and no typecasting</comment>

        <comment type="line">// allocate T</comment>
        <if_stmt><if>if <condition>(<expr><name>T_cheap</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// just initialize the static header of T, not T-&gt;b or T-&gt;x</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(cheap transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// bitmap or full, existing header</comment>
                <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
                <argument><expr><name>T_sparsity</name></expr></argument>, <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// allocate all of T, including T-&gt;b and T-&gt;x</comment>
            <comment type="line">// set T-&gt;iso = C_iso   OK</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// bitmap or full, existing header</comment>
                <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>T_sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>anz_held</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>T_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anvals</name></expr> ;</expr_stmt>     <comment type="line">// for bitmap case only</comment>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// T = A'</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz_held</name> <operator>+</operator> <name>anvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>T_cheap</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// no work to do.  Transposing does not change A-&gt;b or A-&gt;x</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>b_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_size</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// transplant A-&gt;b and A-&gt;x into T</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>b_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// T is a purely shallow copy of A </comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>b_shallow</name></name> <operator>=</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>b</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>   <comment type="line">// OK</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// do not apply an operator; optional typecast to T-&gt;type</comment>
            <expr_stmt><expr><call><name>GB_transpose_ix</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// apply an operator, T has type op-&gt;ztype</comment>
            <expr_stmt><expr><call><name>GB_transpose_op</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T dense/bitmap"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>avdim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose a "column" vector into a "row"</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// transpose a vector (avlen-by-1) into a "row" matrix (1-by-avlen).</comment>
        <comment type="line">// A must be sorted first.</comment>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(sparse vector transpose (a)) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"the vector A must already be sorted"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate T</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Initialized the header of T, with no content, and initialize the</comment>
        <comment type="line">// type and dimension of T.  T is hypersparse.</comment>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// hyper; existing header</comment>
            <argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
            <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>, <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// allocate T-&gt;p, T-&gt;i, and optionally T-&gt;x, but not T-&gt;h</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>tplen</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>tplen</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>    , <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>allocate_Tx</name> <init>= <expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>C_iso</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ctype</name> <operator>!=</operator> <name>atype</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>allocate_Tx</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// allocate new space for the new typecasted numerical values of T</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>allocate_Tx</name> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// numerical values of T: apply the op, typecast, or make shallow copy</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// numerical values: apply the operator, typecast, or make shallow copy</comment>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>C_iso</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T-&gt;x = unop (A), binop (A,scalar), or binop (scalar,A), or</comment>
            <comment type="line">// compute the iso value of T = 1, A, or scalar, without any op</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply_op</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
                <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>!=</operator> <name>atype</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// copy the values from A into T and cast from atype to ctype</comment>
            <expr_stmt><expr><call><name>GB_cast_matrix</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// no type change; numerical values of T are a shallow copy of A.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>allocate_Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// transplant A-&gt;x as T-&gt;x</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// T-&gt;x is a shallow copy of A-&gt;x</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// each entry in A becomes a non-empty vector in T;</comment>
        <comment type="line">// T is a hypersparse 1-by-avlen matrix</comment>

        <comment type="line">// transplant or shallow-copy A-&gt;i as the new T-&gt;h</comment>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// transplant A-&gt;i as T-&gt;h</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// T-&gt;h is a shallow copy of A-&gt;i</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// T-&gt;p = 0:anz and T-&gt;i = zeros (1,anz), newly allocated</comment>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>tplen</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>

        <comment type="line">// fill the vector pointers T-&gt;p</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>anz</name></expr>]</index></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>C_iso</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>avlen</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose a "row" into a "column" vector</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// transpose a "row" matrix (1-by-avdim) into a vector (avdim-by-1).</comment>
        <comment type="line">// if A-&gt;vlen is 1, all vectors of A are implicitly sorted</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(sparse vector transpose (b)) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"1-by-n input A already sorted"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate workspace, if needed</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nth</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// ntasks and Count are not needed if nth == 1</comment>
            <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>nth</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>Count</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Allocate the header of T, with no content</comment>
        <comment type="line">// and initialize the type and dimension of T.</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// sparse; existing header</comment>
            <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
            <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>C_iso</name></expr> ;</expr_stmt>    <comment type="line">// OK</comment>

        <comment type="line">// allocate new space for the values and pattern</comment>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>p_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is sparse, so new space is needed for T-&gt;i</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>allocate_Tx</name> <init>= <expr><operator>(</operator><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>C_iso</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ctype</name> <operator>!=</operator> <name>atype</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>allocate_Tx</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// allocate new space for the new typecasted numerical values of T</comment>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>csize</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>A_is_hyper</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>allocate_Tx</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// numerical values of T: apply the op, typecast, or make shallow copy</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// numerical values: apply the operator, typecast, or make shallow copy</comment>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>C_iso</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T-&gt;x = unop (A), binop (A,scalar), or binop (scalar,A), or</comment>
            <comment type="line">// compute the iso value of T = 1, A, or scalar, without any op</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply_op</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
                <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>ctype</name> <operator>!=</operator> <name>atype</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// copy the values from A into T and cast from atype to ctype</comment>
            <expr_stmt><expr><call><name>GB_cast_matrix</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// no type change; numerical values of T are a shallow copy of A.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>allocate_Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// transplant A-&gt;x as T-&gt;x</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>x_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// T-&gt;x is a shallow copy of A-&gt;x</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute T-&gt;i</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// each non-empty vector in A becomes an entry in T</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// transplant A-&gt;h as T-&gt;i</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// T-&gt;i is a shallow copy of A-&gt;h</comment>
                <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// find the non-empty vectors of A, which become entries in T</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>nth</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// construct T-&gt;i with a single thread</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>==</operator> <name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// construct T-&gt;i in parallel</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                    <expr_stmt><expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Count</name> <index>[<expr><name>ntasks</name></expr>]</index></name> <operator>==</operator> <name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                        <block>{<block_content> 
                            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>k</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>

            <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>i</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>==</operator> <name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//---------------------------------------------------------------------</comment>
        <comment type="line">// vector pointers of T</comment>
        <comment type="line">//---------------------------------------------------------------------</comment>

        <comment type="line">// T-&gt;p = [0 anz]</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>anz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose a general sparse or hypersparse matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// T=A' with optional typecasting, or T=op(A')</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// select the method</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>nworkspaces_bucket</name></decl>, <decl><type ref="prev"/><name>nthreads_bucket</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>use_builder</name> <init>= <expr><call><name>GB_transpose_method</name> <argument_list>(<argument><expr><name>A</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>nworkspaces_bucket</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads_bucket</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose the matrix with the selected method</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>use_builder</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// transpose via GB_builder</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(builder transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// allocate and create iwork</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// allocate iwork of size anz</comment>
            <expr_stmt><expr><name>iwork</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iwork_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>iwork</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Construct the "row" indices of C, which are "column" indices of</comment>
            <comment type="line">// A.  This array becomes the permanent T-&gt;i on output.</comment>

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_extract_vector_list</name> <argument_list>(<argument><expr><name>iwork</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// allocate the output matrix and additional space (jwork and Swork)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// initialize the header of T, with no content,</comment>
            <comment type="line">// and initialize the type and dimension of T.</comment>

            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <comment type="line">// hyper, existing header</comment>
                <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
                <argument><expr><name>GxB_HYPERSPARSE</name></expr></argument>, <argument><expr><name>A_hyper_switch</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// if in_place, the prior A-&gt;p and A-&gt;h can now be freed</comment>
            <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
            <block>{<block_content> 
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>S_input</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

            <comment type="line">// for the GB_builder method, if the transpose is done in-place and</comment>
            <comment type="line">// A-&gt;i is not shallow, A-&gt;i can be used and then freed.</comment>
            <comment type="line">// Otherwise, A-&gt;i is not modified at all.</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>recycle_Ai</name> <init>= <expr><operator>(</operator><name>in_place</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>i_shallow</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>recycle_Ai</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// allocate jwork of size anz</comment>
                <expr_stmt><expr><name>jwork</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jwork_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>jwork</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>C_iso</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>Swork</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <call><name>GB_XALLOC</name> <argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>,   <comment type="line">// x:OK</comment>
                    <argument><expr><name>csize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Swork_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>Swork</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// construct jwork and Swork</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// "row" indices of A become "column" indices of C</comment>
            <if_stmt><if>if <condition>(<expr><name>recycle_Ai</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A-&gt;i is used as workspace for the "column" indices of C.</comment>
                <comment type="line">// jwork is A-&gt;i, and is freed by GB_builder.</comment>
                <expr_stmt><expr><name>jwork</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>jwork_size</name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>in_place</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// copy A-&gt;i into jwork, making a deep copy.  jwork is freed by</comment>
                <comment type="line">// GB_builder.  A-&gt;i is not modified, even if out of memory.</comment>
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>jwork</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>anz</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// numerical values: apply the op, typecast, or make shallow copy</comment>
            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>stype</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>sscalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>csize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// apply the op to the iso scalar</comment>
                <expr_stmt><expr><call><name>GB_iso_unop</name> <argument_list>(<argument><expr><name>sscalar</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>S_input</name> <operator>=</operator> <name>sscalar</name></expr> ;</expr_stmt>     <comment type="line">// S_input is used instead of Swork</comment>
                <expr_stmt><expr><name>Swork</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>stype</name> <operator>=</operator> <name>ctype</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// Swork = op (A)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_apply_op</name> <argument_list>(<argument><expr><name>Swork</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>,
                    <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// GB_builder will not need to typecast Swork to T-&gt;x, and it</comment>
                <comment type="line">// may choose to transplant it into T-&gt;x</comment>
                <expr_stmt><expr><name>S_input</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>        <comment type="line">// Swork is used instead of S_input</comment>
                <expr_stmt><expr><name>stype</name> <operator>=</operator> <name>ctype</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// GB_builder will typecast S_input from atype to ctype if</comment>
                <comment type="line">// needed.  S_input is a shallow copy of Ax, and must not be</comment>
                <comment type="line">// modified.</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>C_iso</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>S_input</name> <operator>=</operator> <operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <comment type="line">// S_input is used instead of Swork</comment>
                <expr_stmt><expr><name>Swork</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>stype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// build the matrix: T = (ctype) A' or op ((xtype) A')</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// internally, jwork is freed and then T-&gt;x is allocated, so the</comment>
            <comment type="line">// total memory usage is anz * max (csize, sizeof(int64_t)).  T is</comment>
            <comment type="line">// always hypersparse.  Either T, Swork, and S_input are all iso,</comment>
            <comment type="line">// or all non-iso, depending on C_iso.</comment>

            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_builder</name> <argument_list>(
                <argument><expr><name>T</name></expr></argument>,          <comment type="line">// create T using a static header</comment>
                <argument><expr><name>ctype</name></expr></argument>,      <comment type="line">// T is of type ctype</comment>
                <argument><expr><name>avdim</name></expr></argument>,      <comment type="line">// T-&gt;vlen = A-&gt;vdim, always &gt; 1</comment>
                <argument><expr><name>avlen</name></expr></argument>,      <comment type="line">// T-&gt;vdim = A-&gt;vlen, always &gt; 1</comment>
                <argument><expr><name>C_is_csc</name></expr></argument>,   <comment type="line">// T has the same CSR/CSC format as C</comment>
                <argument><expr><operator>&amp;</operator><name>iwork</name></expr></argument>,     <comment type="line">// iwork_handle, becomes T-&gt;i on output</comment>
                <argument><expr><operator>&amp;</operator><name>iwork_size</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>jwork</name></expr></argument>,     <comment type="line">// jwork_handle, freed on output</comment>
                <argument><expr><operator>&amp;</operator><name>jwork_size</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Swork</name></expr></argument>,     <comment type="line">// Swork_handle, freed on output</comment>
                <argument><expr><operator>&amp;</operator><name>Swork_size</name></expr></argument>,
                <argument><expr><name>false</name></expr></argument>,      <comment type="line">// tuples are not sorted on input</comment>
                <argument><expr><name>true</name></expr></argument>,       <comment type="line">// tuples have no duplicates</comment>
                <argument><expr><name>anz</name></expr></argument>,        <comment type="line">// size of iwork, jwork, and Swork</comment>
                <argument><expr><name>true</name></expr></argument>,       <comment type="line">// is_matrix: unused</comment>
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <comment type="line">// original I,J indices: not used here</comment>
                <argument><expr><name>S_input</name></expr></argument>,    <comment type="line">// array of values of type stype, not modified</comment>
                <argument><expr><name>C_iso</name></expr></argument>,      <comment type="line">// iso property of T is the same as C-&gt;iso</comment>
                <argument><expr><name>anz</name></expr></argument>,        <comment type="line">// number of tuples</comment>
                <argument><expr><name>NULL</name></expr></argument>,       <comment type="line">// no dup operator needed (input has no duplicates)</comment>
                <argument><expr><name>stype</name></expr></argument>,      <comment type="line">// type of S_input or Swork</comment>
                <argument><expr><name>false</name></expr></argument>,      <comment type="line">// no burble (already burbled above)</comment>
                <argument><expr><name>Context</name></expr></argument>
            )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// GB_builder always frees jwork, and either frees iwork or</comment>
            <comment type="line">// transplants it in to T-&gt;i and sets iwork to NULL.  So iwork and</comment>
            <comment type="line">// jwork are always NULL on output.  GB_builder does not modify</comment>
            <comment type="line">// S_input.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iwork</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>jwork</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Swork</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// transpose via bucket sort</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// T = A' and typecast to ctype</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_bucket</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
                <argument><expr><name>op</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>,
                <argument><expr><name>nworkspaces_bucket</name></expr></argument>, <argument><expr><name>nthreads_bucket</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T from bucket"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// free workspace, apply positional op, and transplant/conform T into C</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// free prior space of A, if transpose is done in-place</comment>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transplant T into the result C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// transplant the control settings from A to C</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>A_hyper_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>A_bitmap_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>A_sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transplant</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C transplanted in GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"C type in GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply a positional operator or user idxunop after transposing the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>op</name> <operator>=</operator> <name>save_op</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// If C was constructed as iso; it needs to be expanded first,</comment>
            <comment type="line">// but do not initialize the values.  These are computed by</comment>
            <comment type="line">// GB_apply_op below.</comment>
            <comment type="line">// set C-&gt;iso = false    OK: no need to burble</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_non_iso</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// the positional unary op is applied in-place: C-&gt;x = op (C)</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_apply_op</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>GB_NON_ISO</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
            <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>user_idxunop</name></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// If C was constructed as iso; it needs to be expanded and</comment>
            <comment type="line">// initialized first.</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_non_iso</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the user-defined index unary op is applied in-place: C-&gt;x = op</comment>
            <comment type="line">// (C) where the type of C does not change</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_apply_op</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>GB_NON_ISO</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
                <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// op is a user-defined index unary operator</comment>
        <block>{<block_content> 
            <comment type="line">// apply the operator to the transposed matrix:</comment>
            <comment type="line">// C = op (C), but not in-place since the type of C is changing</comment>
            <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>csize</name> <operator>=</operator> <name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>Cx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// calloc the space so the new C-&gt;x has no uninitialized space</comment>
                <expr_stmt><expr><name>Cx_new</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>anz_held</name><operator>*</operator><name>csize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// malloc is fine; all C-&gt;x will be written</comment>
                <expr_stmt><expr><name>Cx_new</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anz_held</name><operator>*</operator><name>csize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// x:OK</comment>
            </block_content>}</block></else></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>Cx_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Cx_new = op (C)</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_apply_op</name> <argument_list>(<argument><expr><name>Cx_new</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>GB_NON_ISO</name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
                <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>flipij</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// transplant Cx_new as C-&gt;x and finalize the type of C</comment>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Cx_new</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Cx_size</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ctype</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// conform the result to the desired sparsity structure of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C to conform in GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output of GB_transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
