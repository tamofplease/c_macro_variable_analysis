<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Monoid_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Monoid_new:  create a new monoid</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Create a new monoid with binary operator, z=op(x.y).  The three types of x,</comment>
<comment type="line">// y, and z must all be the same, and the identity value must also have the</comment>
<comment type="line">// same type.  No typecasting is done for the identity value.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Monoid_new.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MONOID_NEW</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>)</parameter_list></cpp:macro>                                        \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Monoid_new_, T) <comment type="block">/* create a new monoid */</comment>       \
(                                                                           \
    GrB_Monoid *monoid,             <comment type="block">/* handle of monoid to create    */</comment>     \
    GrB_BinaryOp op,                <comment type="block">/* binary operator of the monoid */</comment>     \
    type identity                   <comment type="block">/* identity value of the monoid  */</comment>     \
)                                                                           \
{                                                                           \
    GB_WHERE1 ("GrB_Monoid_new_" GB_STR(T) " (&amp;monoid, op, identity)") ;    \
    type id = identity ;                                                    \
    return (GB_Monoid_new (monoid, op, &amp;id, NULL, GB_ ## T ## _code,        \
        Context)) ;                                                         \
}</cpp:value></cpp:define>

<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument> )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument> )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument>  )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument> )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>   )</argument_list></macro>
<macro><name>GB_MONOID_NEW</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>   )</argument_list></macro>

<function><type><name>GrB_Info</name></type> <name>GrB_Monoid_new_UDT</name>         <comment type="line">// create a monoid with a user-defined type</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Monoid</name> <modifier>*</modifier></type><name>monoid</name></decl></parameter>,             <comment type="line">// handle of monoid to create</comment>
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>,                <comment type="line">// binary operator of the monoid</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>identity</name></decl></parameter>                  <comment type="line">// identity value of monoid</comment>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Monoid_new_UDT (&amp;monoid, op, identity)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_Monoid_new</name> <argument_list>(<argument><expr><name>monoid</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>identity</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GB_UDT_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
