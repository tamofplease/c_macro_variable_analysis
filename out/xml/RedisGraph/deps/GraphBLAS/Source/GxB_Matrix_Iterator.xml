<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_Iterator.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator: seek to a specific entry for a matrix iterator </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_search_for_vector_template.c"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_attach: attach an entry iterator to a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the iterator must already exist, having been created by</comment>
<comment type="line">// GxB_Iterator_new.</comment>

<comment type="line">// GxB_Matrix_Iterator_attach attaches an entry iterator to a matrix.  If the</comment>
<comment type="line">// iterator is already attached to a matrix, it is detached and then attached</comment>
<comment type="line">// to the given matrix A.</comment>

<comment type="line">// The following error conditions are returned:</comment>
<comment type="line">// GrB_NULL_POINTER:    if the iterator or A are NULL.</comment>
<comment type="line">// GrB_INVALID_OBJECT:  if the matrix A is invalid.</comment>
<comment type="line">// GrB_OUT_OF_MEMORY:   if the method runs out of memory.</comment>

<comment type="line">// If successful, the entry iterator is attached to the matrix, but not to any</comment>
<comment type="line">// specific entry.  Use GxB_Matrix_Iterator_*seek* to move the iterator to a</comment>
<comment type="line">// particular entry.</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_Iterator_attach</name>
<parameter_list>(
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><call><name>GB_Iterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_NO_FORMAT</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_getpmax: return the range of the iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the entry iterator must be already attached to a matrix via</comment>
<comment type="line">// GxB_Matrix_Iterator_attach; results are undefined if this condition is not</comment>
<comment type="line">// met.</comment>

<comment type="line">// Entries in a matrix are given an index p, ranging from 0 to pmax-1, where</comment>
<comment type="line">// pmax &gt;= nvals(A).  For sparse, hypersparse, and full matrices, pmax is equal</comment>
<comment type="line">// to nvals(A).  For an m-by-n bitmap matrix, pmax=m*n, or pmax=0 if the</comment>
<comment type="line">// matrix has no entries.</comment>

<function><type><name>GrB_Index</name></type> <name>GxB_Matrix_Iterator_getpmax</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_full_position: find the vector containing p for a full/bitmap matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_full_position</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>/</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>*</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_check_for_end_of_vector: move to next vector if current vector is done</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>GrB_Info</name></type> <name>GB_check_for_end_of_vector</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// move to the next vector if p has reached the end of the current vector </comment>
    <switch>switch <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>A_sparsity</name></name></expr>)</condition>
    <block>{<block_content>
        <default>default:</default> 
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// the kth vector is done; move to the next non-empty vector</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr> ;</expr_stmt>
                <while>while <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// iterator-&gt;k is an empty vector; move to the next one</comment>
                    <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></while>
                <comment type="line">// iterator-&gt;k is now the next non-empty vector</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
        <block>{<block_content>
            <for>for <control>( <init>;</init> <condition><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr> ;</condition> <incr><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>Ab</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// found the next entry; check if it is past the kth vector</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// find the vector of this entry</comment>
                        <return>return <expr><operator>(</operator><call><name>GB_full_position</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
                    </block_content>}</block></if></if_stmt>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// kth vector is done; move to the next vector</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>+=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>+=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <break>break ;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_next: move an entry iterator to the next entry</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_Iterator_next</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// move to the next entry</comment>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// the iterator is exhausted</comment>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// move to next vector if iterator has reached the end of a vector</comment>
        <return>return <expr><operator>(</operator><call><name>GB_check_for_end_of_vector</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_seek: seek an entry iterator to any entry</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_Iterator_seek</name>
<parameter_list>(
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>p</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// the iterator is exhausted</comment>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// seek to the first entry of the first vector A(:,0)</comment>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>Ap</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then>
            <expr><name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <comment type="line">// move to the next non-empty vector if A(:,0) is empty</comment>
        <return>return <expr><operator>(</operator><call><name>GB_check_for_end_of_vector</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// seek to an arbitrary position in the matrix</comment>
        <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>p</name></expr> ;</expr_stmt>
        <switch>switch <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>A_sparsity</name></name></expr>)</condition>
        <block>{<block_content>
            <default>default:</default> 
            <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
            <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
            <block>{<block_content> 
                <comment type="line">// find the vector k that contains position p</comment>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>GB_search_for_vector</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>Ap</name></name></expr></argument>,
                    <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>anvec</name></name></expr></argument>, <argument><expr><name><name>iterator</name><operator>-&gt;</operator><name>avlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>iterator</name><operator>-&gt;</operator><name>pend</name></name> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ap</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block>
            <break>break ;</break>
            <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
            <block>{<block_content>
                <for>for <control>( <init>;</init> <condition><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>&lt;</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pmax</name></name></expr> ;</condition> <incr><expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>Ab</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// found next entry; find the vector that contains it</comment>
                        <return>return <expr><operator>(</operator><call><name>GB_full_position</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
                <return>return <expr><operator>(</operator><name>GxB_EXHAUSTED</name><operator>)</operator></expr> ;</return>
            </block_content>}</block>
            <break>break ;</break>
            <case>case <expr><name>GxB_FULL</name></expr> :</case> 
            <block>{<block_content> 
                <comment type="line">// find the vector k that contains position p</comment>
                <return>return <expr><operator>(</operator><call><name>GB_full_position</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block>
            <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_getp: get the current position of a matrix iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the entry iterator must be already attached to a matrix via</comment>
<comment type="line">// GxB_Matrix_Iterator_attach, and the position of the iterator must also have</comment>
<comment type="line">// been defined by a prior call to GxB_Matrix_Iterator_seek or</comment>
<comment type="line">// GxB_Matrix_Iterator_next.  Results are undefined if these conditions are not</comment>
<comment type="line">// met.</comment>

<function><type><name>GrB_Index</name></type> <name>GxB_Matrix_Iterator_getp</name> <parameter_list>(<parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <return>return <expr><operator>(</operator><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_Iterator_getIndex: get the row and column index of a matrix entry</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the entry iterator must be already attached to a matrix via</comment>
<comment type="line">// GxB_Matrix_Iterator_attach, and the position of the iterator must also have</comment>
<comment type="line">// been defined by a prior call to GxB_Matrix_Iterator_seek or</comment>
<comment type="line">// GxB_Matrix_Iterator_next, with a return value of GrB_SUCCESS.  Results are</comment>
<comment type="line">// undefined if these conditions are not met.</comment>

<function><type><name>void</name></type> <name>GxB_Matrix_Iterator_getIndex</name>
<parameter_list>(
    <parameter><decl><type><name>GxB_Iterator</name></type> <name>iterator</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>row</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>col</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <comment type="line">// get row and column index of current entry, for matrix iterator</comment>
    <switch>switch <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>A_sparsity</name></name></expr>)</condition>
    <block>{<block_content>
        <default>default:</default>  
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>by_col</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ai</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ai</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>by_col</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ai</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ah</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ah</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>Ai</name> <index>[<expr><name><name>iterator</name><operator>-&gt;</operator><name>p</name></name></expr>]</index></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case> 
        <case>case <expr><name>GxB_FULL</name></expr> :</case> 
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>iterator</name><operator>-&gt;</operator><name>by_col</name></name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>row</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>k</name></name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>col</name><operator>)</operator> <operator>=</operator> <name><name>iterator</name><operator>-&gt;</operator><name>p</name></name> <operator>-</operator> <name><name>iterator</name><operator>-&gt;</operator><name>pstart</name></name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        <break>break ;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
