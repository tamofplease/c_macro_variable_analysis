<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_to_nonfull.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_to_nonfull: ensure a matrix is not full (hyper, sparse, or bitmap)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The matrix A must be converted from full to any other sparsity structure.</comment>
<comment type="line">// The full sparsity structure cannot tolerate the deletion of any entry but</comment>
<comment type="line">// the other three can.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_convert_to_nonfull</name>      <comment type="line">// ensure a matrix is not full</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert to bitmap, sparse, or hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_control</name> <init>= <expr><call><name>GB_sparsity_control</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sparsity_control</name> <operator>&amp;</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C can become bitmap</comment>
        <return>return <expr><operator>(</operator><call><name>GB_convert_full_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>sparsity_control</name> <operator>&amp;</operator> <name>GxB_SPARSE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C can become sparse</comment>
        <return>return <expr><operator>(</operator><call><name>GB_convert_full_to_sparse</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>sparsity_control</name> <operator>&amp;</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C can become hypersparse</comment>
        <return>return <expr><operator>(</operator><call><name>GB_convert_any_to_hyper</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// none of the above conditions hold so make A bitmap</comment>
        <return>return <expr><operator>(</operator><call><name>GB_convert_full_to_bitmap</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
