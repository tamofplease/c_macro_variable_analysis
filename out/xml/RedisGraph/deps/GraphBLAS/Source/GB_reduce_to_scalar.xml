<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_reduce_to_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_reduce_to_scalar: reduce a matrix to a scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// c = accum (c, reduce_to_scalar(A)), reduce entries in a matrix to a scalar.</comment>
<comment type="line">// Does the work for GrB_*_reduce_TYPE, both matrix and vector.</comment>

<comment type="line">// This function does not need to know if A is hypersparse or not, and its</comment>
<comment type="line">// result is the same if A is in CSR or CSC format.</comment>

<comment type="line">// This function is the only place in all of GraphBLAS where the identity value</comment>
<comment type="line">// of a monoid is required, but only in one special case: it is required to be</comment>
<comment type="line">// the return value of c when A has no entries.  The identity value is also</comment>
<comment type="line">// used internally, in the parallel methods below, to initialize a scalar value</comment>
<comment type="line">// in each task.  The methods could be rewritten to avoid the use of the</comment>
<comment type="line">// identity value.  Since this function requires it anyway, for the special</comment>
<comment type="line">// case when nvals(A) is zero, the existence of the identity value makes the</comment>
<comment type="line">// code a little simpler.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_red__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_WERK_POP (F, bool) ;         \
    GB_WERK_POP (W, GB_void) ;      \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_reduce_to_scalar</name>    <comment type="line">// s = reduce_to_scalar (A)</comment>
<parameter_list>(
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,                    <comment type="line">// result scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,       <comment type="line">// the type of scalar, c</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// for c = accum(c,s)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Monoid</name></type> <name>reduce</name></decl></parameter>,    <comment type="line">// monoid to do the reduction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// matrix to reduce</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>reduce</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY_OR_POSITIONAL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"type of scalar c"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>reduce</name></expr></argument>, <argument><expr><literal type="string">"reduce for reduce_to_scalar"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for reduce_to_scalar"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for reduce_to_scalar"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check domains and dimensions for c = accum (c,s)</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ztype</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// s = reduce (s,A) must be compatible</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>ztype</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// assemble any pending tuples; zombies are OK</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_DENSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(A %s) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>zsize</name> <init>= <expr><name><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>&gt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// s = identity</comment>
    <decl_stmt><decl><type><name>GB_void</name></type> <name><name>s</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>reduce</name><operator>-&gt;</operator><name>identity</name></name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// required, if nnz(A) is zero</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUGIFY_DEFN</name></cpp:ifdef>
    <expr_stmt><expr><call><name>GB_debugify_reduce</name> <argument_list>(<argument><expr><name>reduce</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// s = reduce_to_scalar (A) on the GPU(s) or CPU</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GBCUDA</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><call><name>GB_reduce_to_scalar_cuda_branch</name> <argument_list>(<argument><expr><name>reduce</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use the GPU(s)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_reduce_to_scalar_cuda</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reduce</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use OpenMP on the CPU threads</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate workspace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>W</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>*</operator> <name>zsize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>F</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// s = reduce_to_scalar (A)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// get terminal value, if any</comment>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>terminal</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>reduce</name><operator>-&gt;</operator><name>terminal</name></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// no live entries in A; nothing to do</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <empty_stmt>;</empty_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// reduce an iso matrix to scalar</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// this takes at most O(log(nvals(A))) time, for any monoid</comment>
            <expr_stmt><expr><call><name>GB_iso_reduce_to_scalar</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>reduce</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>ztype</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// reduce to scalar via built-in operator</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// define the worker for the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_red</name><parameter_list>(<parameter><type><name>opname</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>)</parameter_list></cpp:macro> \
                    <cpp:value>GB (_red_scalar_ ## opname ## aname)</cpp:value></cpp:define>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_RED_WORKER</name><parameter_list>(<parameter><type><name>opname</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>,<parameter><type><name>atype</name></type></parameter>)</parameter_list></cpp:macro>                   \
                <cpp:value>{                                                           \
                    info = GB_red (opname, aname) ((atype *) s, A, W, F,    \
                        ntasks, nthreads) ;                                 \
                    done = (info != GrB_NO_VALUE) ;                         \
                }                                                           \
                break ;</cpp:value></cpp:define>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// launch the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// controlled by opcode and typecode</comment>
                <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>typecode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>typecode</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_red_factory.c"</cpp:file></cpp:include>

            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// generic worker: sum up the entries, no typecasting</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic reduce to scalar: %s) "</literal></expr></argument>,
                    <argument><expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <comment type="line">// the switch factory didn't handle this case</comment>
                <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>freduce</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>

                <comment type="line">// no panel used</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PANEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_PANEL_CASE</name></cpp:macro></cpp:define>

                <comment type="line">// ztype t = identity</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SCALAR_IDENTITY</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>                           \
                    <cpp:value>GB_void t [GB_VLA(zsize)] ;                         \
                    memcpy (t, reduce-&gt;identity, zsize) ;</cpp:value></cpp:define>

                <comment type="line">// W [tid] = t, no typecast</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_SCALAR_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>, <parameter><type><name>tid</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>              \
                    <cpp:value>memcpy (W +(tid*zsize), t, zsize)</cpp:value></cpp:define>

                <comment type="line">// s += W [k], no typecast</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>                   \
                    <cpp:value>freduce (s, s, W +((k)*zsize))</cpp:value></cpp:define>

                <comment type="line">// break if terminal value reached</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_HAS_TERMINAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_TERMINAL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
                    <cpp:value>(terminal != NULL &amp;&amp; memcmp (s, terminal, zsize) == 0)</cpp:value></cpp:define>

                <comment type="line">// t += (ztype) Ax [p], but no typecasting needed</comment>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>             \
                    <cpp:value>freduce (t, t, Ax +((p)*zsize))</cpp:value></cpp:define>

                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_to_scalar_template.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// generic worker: sum up the entries, with typecasting</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic reduce to scalar, with typecast:"</literal>
                <literal type="string">" %s) "</literal></expr></argument>, <argument><expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>freduce</name> <init>= <expr><name><name>reduce</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_cast_function</name></type>
                <name>cast_A_to_Z</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">// t += (ztype) Ax [p], with typecast</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ADD_CAST_ARRAY_TO_SCALAR</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>             \
                <cpp:value>GB_void awork [GB_VLA(zsize)] ;                     \
                cast_A_to_Z (awork, Ax +((p)*asize), asize) ;       \
                freduce (t, t, awork)</cpp:value></cpp:define>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_to_scalar_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// c = s or c = accum (c,s)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// This operation does not use GB_accum_mask, since c and s are</comment>
    <comment type="line">// scalars, not matrices.  There is no scalar mask.</comment>

    <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// c = (ctype) s</comment>
        <decl_stmt><decl><type><name>GB_cast_function</name></type>
            <name>cast_Z_to_C</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>cast_Z_to_C</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>faccum</name> <init>= <expr><name><name>accum</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_C_to_xaccum</name></decl>, <decl><type ref="prev"/><name>cast_Z_to_yaccum</name></decl>, <decl><type ref="prev"/><name>cast_zaccum_to_C</name></decl> ;</decl_stmt>
        <expr_stmt><expr><name>cast_C_to_xaccum</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_Z_to_yaccum</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cast_zaccum_to_C</name> <operator>=</operator> <call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// scalar workspace</comment>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>xaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>yaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>zaccum</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name><name>accum</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>

        <comment type="line">// xaccum = (accum-&gt;xtype) c</comment>
        <expr_stmt><expr><call><name>cast_C_to_xaccum</name> <argument_list>(<argument><expr><name>xaccum</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// yaccum = (accum-&gt;ytype) s</comment>
        <expr_stmt><expr><call><name>cast_Z_to_yaccum</name> <argument_list>(<argument><expr><name>yaccum</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>zsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// zaccum = xaccum "+" yaccum</comment>
        <expr_stmt><expr><call><name>faccum</name> <argument_list>(<argument><expr><name>zaccum</name></expr></argument>, <argument><expr><name>xaccum</name></expr></argument>, <argument><expr><name>yaccum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// c = (ctype) zaccum</comment>
        <expr_stmt><expr><call><name>cast_zaccum_to_C</name> <argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>zaccum</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
