<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_serialize_method.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_serialize_method: parse the compression method</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_serialize_method</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>algo</name></decl></parameter>,                  <comment type="line">// algorithm to use</comment>
    <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>level</name></decl></parameter>,                 <comment type="line">// compression level</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>method</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>method</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no compression if method is negative</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>algo</name><operator>)</operator> <operator>=</operator> <name>GxB_COMPRESSION_NONE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Determine the algorithm and level.  Lower levels give faster compression</comment>
    <comment type="line">// time but not as good of compression.  Higher levels give more compact</comment>
    <comment type="line">// compressions, at the cost of higher run times.  For all methods: a level</comment>
    <comment type="line">// of zero, or a level setting outside the range permitted for a method,</comment>
    <comment type="line">// means that default level for that method is used.</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>algo</name><operator>)</operator> <operator>=</operator> <literal type="number">1000</literal> <operator>*</operator> <operator>(</operator><name>method</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <name>method</name> <operator>%</operator> <literal type="number">1000</literal></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><operator>*</operator><name>algo</name></expr>)</condition>
    <block>{<block_content>

        <default>default :</default> 
            <comment type="line">// The default method has changed to ZSTD, level 1, as of</comment>
            <comment type="line">// SuiteSparse:GraphBLAS v7.2.0.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>algo</name><operator>)</operator> <operator>=</operator> <name>GxB_COMPRESSION_ZSTD</name></expr> ;</expr_stmt> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>              <comment type="line">// fast with good compression</comment>
            <break>break ;</break>

        <case>case <expr><name>GxB_COMPRESSION_LZ4</name></expr> :</case> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>              <comment type="line">// level is ignored</comment>
            <break>break ;</break>

        <case>case <expr><name>GxB_COMPRESSION_LZ4HC</name></expr> :</case>    <comment type="line">// LZ4HC: level 1 to 9; default 9.</comment>
            <comment type="line">// Note that LZ4HC supports levels 10, 11, and 12, but these are</comment>
            <comment type="line">// very slow and do not provide much benefit over level 9.  Level</comment>
            <comment type="line">// 10 often results in a larger blob than level 9.  Level 12 is</comment>
            <comment type="line">// typically just a tiny bit more compact than level 9, but can be</comment>
            <comment type="line">// 10x slower, or worse, as compared to level 9.</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <literal type="number">9</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_COMPRESSION_ZSTD</name></expr> :</case>     <comment type="line">// ZSTD: level 1 to 19; default 1.</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>level</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <break>break ;</break>

<comment type="line">//      These cases will be uncommented when the methods are implemented:</comment>

<comment type="line">//      case GxB_COMPRESSION_ZLIB:</comment>
<comment type="line">//          // level 1 to 9, with a default of 6</comment>
<comment type="line">//          if ((*level) &lt;= 0 || (*level) &gt; 9) (*level) = 6 ;</comment>
<comment type="line">//          break ;</comment>

<comment type="line">//      case GxB_COMPRESSION_LZO:</comment>
<comment type="line">//          // level 1 (X1ST) to 2 (XST), with a default of 2</comment>
<comment type="line">//          if ((*level) &lt;= 0 || (*level) &gt; 2) (*level) = 2 ;</comment>
<comment type="line">//          break ;</comment>

<comment type="line">//      case GxB_COMPRESSION_BZIP2:</comment>
<comment type="line">//          // level 1 to 9, with a default of 9</comment>
<comment type="line">//          if ((*level) &lt;= 0 || (*level) &gt; 9) (*level) = 9 ;</comment>
<comment type="line">//          break ;</comment>

<comment type="line">//      case GxB_COMPRESSION_LZSS:</comment>
<comment type="line">//          (*level) = 0 ;              // level is ignored</comment>
<comment type="line">//          break ;</comment>

    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
