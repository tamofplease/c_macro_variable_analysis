<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_serialize_array.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_serialize_array: serialize an array, with optional compression</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Parallel compression method for an array.  The array is compressed into</comment>
<comment type="line">// a sequence of independently allocated blocks, or returned as-is if not</comment>
<comment type="line">// compressed.  Currently, only LZ4, LZ4HC, and ZSTD are supported.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_serialize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_lz4.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_zstd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                                                     \
<cpp:value>{                                                                       \
    GB_FREE (&amp;Sblocks, Sblocks_size) ;                                  \
    GB_serialize_free_blocks (&amp;Blocks, Blocks_size, nblocks, Context) ; \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_serialize_array</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_blocks</name> <modifier>*</modifier><modifier>*</modifier></type><name>Blocks_handle</name></decl></parameter>,          <comment type="line">// Blocks: array of size nblocks+1</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Blocks_size_handle</name></decl></parameter>,         <comment type="line">// size of Blocks</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Sblocks_handle</name></decl></parameter>,           <comment type="line">// Sblocks: array of size nblocks+1</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>Sblocks_size_handle</name></decl></parameter>,        <comment type="line">// size of Sblocks</comment>
    <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>nblocks_handle</name></decl></parameter>,            <comment type="line">// # of blocks</comment>
    <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>method_used</name></decl></parameter>,               <comment type="line">// method used</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>compressed_size</name></decl></parameter>,            <comment type="line">// size of compressed block, or upper</comment>
                                        <comment type="line">// bound if dryrun is true</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>bool</name></type> <name>dryrun</name></decl></parameter>,                        <comment type="line">// if true, just esimate the size</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,                         <comment type="line">// input array of size len</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>,                        <comment type="line">// size of X, in bytes</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>method</name></decl></parameter>,                     <comment type="line">// compression method requested</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>algo</name></decl></parameter>,                       <comment type="line">// compression algorithm</comment>
    <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>,                      <comment type="line">// compression level</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Blocks_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Blocks_size_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Sblocks_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Sblocks_size_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nblocks_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>method_used</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>compressed_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_blocks</name> <modifier>*</modifier></type><name>Blocks</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Blocks_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Sblocks_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nblocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Sblocks</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_size_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_size_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nblocks_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>method_used</name><operator>)</operator> <operator>=</operator> <name>GxB_COMPRESSION_NONE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>compressed_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// input array is empty</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for no compression</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>method</name> <operator>&lt;=</operator> <name>GxB_COMPRESSION_NONE</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// no compression, return result as a single block (plus the sentinel)</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>Blocks</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>GB_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Blocks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Sblocks</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Sblocks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>Blocks</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Sblocks</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>X</name></expr> ;</expr_stmt>          <comment type="line">// first block is all of the array X</comment>
            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_size_allocated</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>   <comment type="line">// p is shallow</comment>
            <expr_stmt><expr><name><name>Sblocks</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>           <comment type="line">// start of first block</comment>

            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>       <comment type="line">// 2nd block is the final sentinel</comment>
            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_size_allocated</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>   <comment type="line">// p is shallow</comment>
            <expr_stmt><expr><name><name>Sblocks</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr> ;</expr_stmt>         <comment type="line">// first block ends at len-1</comment>

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_handle</name><operator>)</operator> <operator>=</operator> <name>Blocks</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_size_handle</name><operator>)</operator> <operator>=</operator> <name>Blocks_size</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_handle</name><operator>)</operator> <operator>=</operator> <name>Sblocks</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_size_handle</name><operator>)</operator> <operator>=</operator> <name>Sblocks_size</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>compressed_size</name><operator>)</operator> <operator>=</operator> <name>len</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nblocks_handle</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>method_used</name><operator>)</operator> <operator>=</operator> <name>method</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of blocks and allocate them</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// divide the array into blocks, 4 per thread, or a single block if 1 thread</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>blocksize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>len</name></expr> </then><else>: <expr><call><name>GB_ICEIL</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">// ensure the blocksize does not exceed the LZ4 maximum</comment>
    <comment type="line">// ... this is also fine for ZSTD</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>LZ4_MAX_INPUT_SIZE</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>blocksize</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>blocksize</name></expr></argument>, <argument><expr><name>LZ4_MAX_INPUT_SIZE</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ensure the blocksize is not too small</comment>
    <expr_stmt><expr><name>blocksize</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>blocksize</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// determine the final # of blocks</comment>
    <expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>GB_ICEIL</name> <argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>blocksize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nblocks_handle</name><operator>)</operator> <operator>=</operator> <name>nblocks</name></expr> ;</expr_stmt>

    <comment type="line">// allocate the output Blocks: one per block plus the sentinel block</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dryrun</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>Blocks</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>nblocks</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_blocks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Blocks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Sblocks</name> <operator>=</operator> <call><name>GB_CALLOC</name> <argument_list>(<argument><expr><name>nblocks</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Sblocks_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Blocks</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Sblocks</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// allocate the blocks, one at a time</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>blockid</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><expr><name>blockid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>blockid</name> <operator>&lt;</operator> <name>nblocks</name> <operator>&amp;&amp;</operator> <name>ok</name></expr> ;</condition> <incr><expr><name>blockid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <comment type="line">// allocate a single block for the compression of X [kstart:kend-1]</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kstart</name></decl>, <decl><type ref="prev"/><name>kend</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kstart</name></expr></argument>, <argument><expr><name>kend</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>blockid</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>uncompressed</name> <init>= <expr><name>kend</name> <operator>-</operator> <name>kstart</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>uncompressed</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>uncompressed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl> ;</decl_stmt>
        <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GxB_COMPRESSION_LZ4</name></expr> :</case> 
            <case>case <expr><name>GxB_COMPRESSION_LZ4HC</name></expr> :</case> 
                <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <call><name>LZ4_compressBound</name> <argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>uncompressed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>
            <default>default :</default>
            <case>case <expr><name>GxB_COMPRESSION_ZSTD</name></expr> :</case> 
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ZSTD_compressBound</name> <argument_list>(<argument><expr><name>uncompressed</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>s</name> <operator>&lt;</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>dryrun</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// do not allocate the block; just sum up the upper bound sizes</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>compressed_size</name><operator>)</operator> <operator>+=</operator> <name>s</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// allocate the block</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>size_allocated</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size_allocated</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>p</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p_size_allocated</name> <operator>=</operator> <name>size_allocated</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>dryrun</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GrB_Matrix_serializeSize: no more work to do.  (*compressed_size) is</comment>
        <comment type="line">// an upper bound of the blob_size required when the matrix is</comment>
        <comment type="line">// compressed, and (*nblocks_handle) is the number of blocks to be used.</comment>
        <comment type="line">// No space has been allocated.</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compress the blocks in parallel</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
        <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:ok</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>blockid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>blockid</name> <operator>&lt;</operator> <name>nblocks</name></expr> ;</condition> <incr><expr><name>blockid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// compress X [kstart:kend-1] into Blocks [blockid].p</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>kstart</name></decl>, <decl><type ref="prev"/><name>kend</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>kstart</name></expr></argument>, <argument><expr><name>kend</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>blockid</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>X</name> <operator>+</operator> <name>kstart</name><operator>)</operator></expr></init></decl> ;</decl_stmt>     <comment type="line">// source</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl> ;</decl_stmt>           <comment type="line">// destination</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>srcSize</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name>kend</name> <operator>-</operator> <name>kstart</name><operator>)</operator></expr></init></decl> ;</decl_stmt>               <comment type="line">// size of source</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>dsize</name> <init>= <expr><name><name>Blocks</name> <index>[<expr><name>blockid</name></expr>]</index></name><operator>.</operator><name>p_size_allocated</name></expr></init></decl> ;</decl_stmt>  <comment type="line">// size of dest</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>dstCapacity</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>s64</name></decl> ;</decl_stmt>
        <switch>switch <condition>(<expr><name>algo</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GxB_COMPRESSION_LZ4</name></expr> :</case> 
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>LZ4_compress_default</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                <comment type="line">// compressed block is now in dst [0:s-1], of size s</comment>
                <expr_stmt><expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>s</name></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>GxB_COMPRESSION_LZ4HC</name></expr> :</case> 
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>LZ4_compress_HC</name> <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
                <comment type="line">// compressed block is now in dst [0:s-1], of size s</comment>
                <expr_stmt><expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>s</name></expr> ;</expr_stmt>
                <break>break ;</break>

            <default>default :</default>
            <case>case <expr><name>GxB_COMPRESSION_ZSTD</name></expr> :</case> 
                <expr_stmt><expr><name>s64</name> <operator>=</operator> <call><name>ZSTD_compress</name> <argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s64</name> <operator>&lt;=</operator> <name>dstCapacity</name><operator>)</operator></expr> ;</expr_stmt>
                <comment type="line">// compressed block is now in dst [0:s64-1], of size s64</comment>
                <expr_stmt><expr><name><name>Sblocks</name> <index>[<expr><name>blockid</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>s64</name></expr> ;</expr_stmt>
                <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// compression failure: this can "never" occur</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_OBJECT</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute cumulative sum of the compressed blocks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Sblocks</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_handle</name><operator>)</operator> <operator>=</operator> <name>Blocks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Blocks_size_handle</name><operator>)</operator> <operator>=</operator> <name>Blocks_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_handle</name><operator>)</operator> <operator>=</operator> <name>Sblocks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Sblocks_size_handle</name><operator>)</operator> <operator>=</operator> <name>Sblocks_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>compressed_size</name><operator>)</operator> <operator>=</operator> <name><name>Sblocks</name> <index>[<expr><name>nblocks</name></expr>]</index></name></expr> ;</expr_stmt>    <comment type="line">// actual size of the blob</comment>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
