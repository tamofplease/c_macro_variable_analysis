<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_extractTuples.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_extractTuples: extract all the tuples from a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Extracts all tuples from a matrix, like [I,J,X] = find (A).  If any</comment>
<comment type="line">// parameter I, J and/or X is NULL, then that component is not extracted.  The</comment>
<comment type="line">// size of the I, J, and X arrays (those that are not NULL) is given by nvals,</comment>
<comment type="line">// which must be at least as large as GrB_nvals (&amp;nvals, A).  The values in the</comment>
<comment type="line">// matrix are typecasted to the type of X, as needed.</comment>

<comment type="line">// This function does the work for the user-callable GrB_*_extractTuples</comment>
<comment type="line">// functions, and helps build the tuples for GB_concat_hyper.</comment>

<comment type="line">// Tf A is iso and X is not NULL, the iso scalar Ax [0] is expanded into X.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORK (&amp;Ap, Ap_size) ;               \
    GB_FREE_WORK (&amp;X_bitmap, X_bitmap_size) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_extractTuples</name>       <comment type="line">// extract all tuples from a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I_out</name></decl></parameter>,           <comment type="line">// array for returning row indices of tuples</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J_out</name></decl></parameter>,           <comment type="line">// array for returning col indices of tuples</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,                    <comment type="line">// array for returning values of tuples</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>p_nvals</name></decl></parameter>,         <comment type="line">// I,J,X size on input; # tuples on output</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>xcode</name></decl></parameter>,   <comment type="line">// type of array X</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// matrix to extract tuples from</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_bitmap</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>X_bitmap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name>       <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to extract"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nvals</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// delete any lingering zombies and assemble any pending tuples;</comment>
    <comment type="line">// allow A to remain jumbled</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING_OR_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_BURBLE_DENSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(A %s) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>xcode</name> <operator>&lt;=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// xcode and A must be compatible</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GrB_DOMAIN_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no work to do</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nvals</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvals</name> <init>= <expr><operator>*</operator><name>p_nvals</name></expr></init></decl> ;</decl_stmt>          <comment type="line">// size of I,J,X on input</comment>
    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>&lt;</operator> <name>anz</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>I_out</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>J_out</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>X</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// output arrays are not big enough</comment>
        <return>return <expr><operator>(</operator><name>GrB_INSUFFICIENT_SPACE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//-------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//-------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//-------------------------------------------------------------------------</comment>
    <comment type="line">// handle the CSR/CSC format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>I</name> <operator>=</operator> <name>I_out</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>J</name> <operator>=</operator> <name>J_out</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>I</name> <operator>=</operator> <name>J_out</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>J</name> <operator>=</operator> <name>I_out</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// bitmap case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate workspace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>need_typecast</name> <init>= <expr><operator>(</operator><name>X</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xcode</name> <operator>!=</operator> <name>acode</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>need_typecast</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// X must be typecasted</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>anzmax</name> <init>= <expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>X_bitmap</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>anzmax</name><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>GB_void</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X_bitmap_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>Ap</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ap</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>need_typecast</name> <operator>&amp;&amp;</operator> <name>X_bitmap</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// extract the tuples</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// TODO: pass xcode to GB_convert_bitmap_worker and let it do the</comment>
        <comment type="line">// typecasting.  This works for now, however.</comment>

        <comment type="line">// if A is iso, GB_convert_bitmap_worker expands the iso scalar</comment>
        <comment type="line">// into its result, X or X_bitmap</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_bitmap_worker</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>J</name></expr></argument>,
            <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>need_typecast</name></expr> ?</condition><then> <expr><name>X_bitmap</name></expr> </then><else>: <expr><name>X</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// typecast X if needed</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>need_typecast</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast the values from X_bitmap into X</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>X</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>xcode</name> <operator>!=</operator> <name>acode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_cast_array</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>X_bitmap</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>,
                <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sparse, hypersparse, or full case</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// extract the row indices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>I</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// A is full; construct the row indices</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
                <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
                <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <expr_stmt><expr><name><name>I</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>%</operator> <name>avlen</name><operator>)</operator></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>anz</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// extract the column indices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>J</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_extract_vector_list</name> <argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>J</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// extract the values</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>X</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// typecast the scalar and expand it into X</comment>
                <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><call><name>GB_code_size</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>scalar</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_iso_expand</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>xsize</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>xcode</name> <operator>==</operator> <name>acode</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// copy the values from A into X, no typecast</comment>
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>anz</name> <operator>*</operator> <name>asize</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// typecast the values from A into X</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>X</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cast_array</name> <argument_list>(<argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name>X</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result </comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>*</operator><name>p_nvals</name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>            <comment type="line">// number of tuples extracted</comment>
    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
