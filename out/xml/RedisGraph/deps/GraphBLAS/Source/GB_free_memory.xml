<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_free_memory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_free_memory: wrapper for free</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A wrapper for free.  If p is NULL on input, it is not freed.</comment>

<comment type="line">// The memory is freed using the free() function pointer passed in to GrB_init,</comment>
<comment type="line">// which is typically the ANSI C free function.  The free_pool is bypassed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_free_memory</name>         <comment type="line">// free memory, bypassing the free_pool</comment>
<parameter_list>(
    <comment type="line">// input/output</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>,               <comment type="line">// pointer to allocated block of memory to free</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>size_t</name></type> <name>size_allocated</name></decl></parameter>   <comment type="line">// # of bytes actually allocated</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>size_allocated</name> <operator>==</operator> <call><name>GB_Global_memtable_size</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nhard free %p %ld\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>size_allocated</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>GB_Global_free_function</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
        <expr_stmt><expr><call><name>GB_Global_free_pool_dump</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_Global_memtable_dump</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
