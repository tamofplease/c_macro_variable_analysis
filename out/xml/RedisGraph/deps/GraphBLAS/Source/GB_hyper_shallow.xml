<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_hyper_shallow.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_hyper_shallow: create a sparse shallow version of a hypersparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input C must exist but the content of the C header is uninitialized</comment>
<comment type="line">// except for C-&gt;static_header and C-&gt;header_size.  No memory is allocated to</comment>
<comment type="line">// construct C as the hyper_shallow version of A.  C is purely shallow.  If A</comment>
<comment type="line">// is iso then so is C.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_convert.h"</cpp:file></cpp:include>

<function><type><name>GrB_Matrix</name></type> <name>GB_hyper_shallow</name>         <comment type="line">// return C</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// output sparse matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>              <comment type="line">// input hypersparse matrix, not modified.</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"hyper_shallow input"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the hyper_shallow version</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// save the C header status</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_static_header</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_header_size</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>header_size</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// copy the header</comment>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>struct <name>GB_Matrix_opaque</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// restore the C header status</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>=</operator> <name>C_static_header</name></expr>  ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>C_header_size</name></expr> ;</expr_stmt>

    <comment type="line">// remove the hyperlist and the hyper_hash</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <comment type="line">// flag all content of C as shallow</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

    <comment type="line">// C reduces in dimension to the # of vectors in A</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"hyper_shallow output"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>C</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
