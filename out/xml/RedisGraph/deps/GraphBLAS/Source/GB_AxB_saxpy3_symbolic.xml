<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy3_symbolic.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy3_symbolic: symbolic analysis for GB_AxB_saxpy3</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Symbolic analysis for C=A*B, C&lt;M&gt;=A*B or C&lt;!M&gt;=A*B, via GB_AxB_saxpy3.</comment>
<comment type="line">// Coarse tasks compute nnz (C (:,j)) for each of their vectors j.  Fine tasks</comment>
<comment type="line">// just scatter the mask M into the hash table.  This phase does not depend on</comment>
<comment type="line">// the semiring, nor does it depend on the type of C, A, or B.  It does access</comment>
<comment type="line">// the values of M, if the mask matrix M is present and not structural.</comment>

<comment type="line">// If B is hypersparse, C must also be hypersparse.</comment>
<comment type="line">// Otherwise, C must be sparse.</comment>

<comment type="line">// If both A and B are bitmap/full for C=A*B or C&lt;!M&gt;=A*B, then saxpy3 is</comment>
<comment type="line">// not used.  C is selected as bitmap instead.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy3.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_AxB_saxpy3_symbolic</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// Cp is computed for coarse tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask matrix M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,       <comment type="line">// M complemented, or not</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// M structural, or not</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>M_in_place</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// A matrix; only the pattern is accessed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,         <comment type="line">// B matrix; only the pattern is accessed</comment>
    <parameter><decl><type><name>GB_saxpy3task_struct</name> <modifier>*</modifier></type><name>SaxpyTasks</name></decl></parameter>,     <comment type="line">// list of tasks, and workspace</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ntasks</name></decl></parameter>,           <comment type="line">// total number of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nfine</name></decl></parameter>,            <comment type="line">// number of fine tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>          <comment type="line">// number of threads</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_hyper</name>  <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_sparse</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_hyper</name>  <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_is_bitmap</name> <init>= <expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase1: count nnz(C(:,j)) for coarse tasks, scatter M for fine tasks</comment>
    <comment type="line">//==========================================================================</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_ss</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_sh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_sb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_sf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_hs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_hh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_hb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_hf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C=A*B where A is bitmap; B must be sparse/hyper</comment>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_bs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is hyper</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_bh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C=A*B where A is full; B must be sparse/hyper</comment>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_fs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is full and B is hyper</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_fh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;M&gt; = A*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mss</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_msh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_msb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_msf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mhs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mhh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mhb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mhf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mbs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mbh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mbb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mbf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mfs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full and B is hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mfh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mfb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// both A and B are full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_mff</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;!M&gt; = A*B</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nss</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nsh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nsb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is sparse and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nsf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nhs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// both A and B are hyper</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nhh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_bitmap</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is bitmap</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nhb</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is hyper and B is full</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nhf</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_bitmap</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C&lt;!M&gt;=A*B where A is bitmap; B must be sparse/hyper</comment>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nbs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is bitmap and B is hyper</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nbh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C&lt;!M&gt;=A*B where A is full; B must be sparse/hyper</comment>
            <if_stmt><if>if <condition>(<expr><name>B_is_sparse</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// A is full and B is sparse</comment>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nfs</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// A is full and B is hyper</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>B_is_hyper</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_AxB_saxpy3_sym_nfh</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>M_in_place</name></expr></argument>,
                    <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>SaxpyTasks</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nfine</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
