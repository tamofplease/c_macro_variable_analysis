<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Mask_compatible.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Mask_compatible: check input and operators for type compatibility</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// check the type and dimensions of the mask</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Mask_compatible</name>     <comment type="line">// check type and dimensions of mask</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// mask to check</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,         <comment type="line">// C&lt;M&gt;= ...</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,      <comment type="line">// size of output if C is NULL (see GB*assign)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the mask M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Mask_struct</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// M is typecast to boolean</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name><name>M</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
                    <argument><expr><literal type="string">"M of type [%s] cannot be typecast to boolean"</literal></expr></argument>,
                    <argument><expr><name><name>M</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// if M is iso and can be typecasted to bool, Mask_struct has been</comment>
            <comment type="line">// set true by GB_get_mask</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>M</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// check the mask dimensions</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cnrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>C</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>nrows</name></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cncols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>C</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>ncols</name></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cnrows</name> <operator>||</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cncols</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
                <argument><expr><literal type="string">"M is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"; "</literal>
                <literal type="string">"does not match output dimensions ("</literal> <name>GBu</name> <literal type="string">"-by-"</literal> <name>GBu</name> <literal type="string">")"</literal></expr></argument>,
                <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
