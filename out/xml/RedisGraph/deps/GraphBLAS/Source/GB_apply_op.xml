<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_apply_op.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_apply_op: typecast and apply a unary/binary/idxunop operator to an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Cx = op (A)</comment>

<comment type="line">// Cx and A-&gt;x may be aliased.</comment>

<comment type="line">// This function is CSR/CSC agnostic.  For positional ops, A is treated as if</comment>
<comment type="line">// it is in CSC format.  The caller has already modified the op if A is in CSR</comment>
<comment type="line">// format.</comment>

<comment type="line">// Template/GB_positional_op_ijp can return GrB_OUT_OF_MEMORY.</comment>
<comment type="line">// Otherwise, this function only returns GrB_SUCCESS.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_apply.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop__include.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_WERK_POP (A_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_apply_op</name>        <comment type="line">// apply a unary op, idxunop, or binop, Cx = op (A)</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx</name></decl></parameter>,                    <comment type="line">// output array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,           <comment type="line">// type of C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_iso_code</name></type> <name>C_code_iso</name></decl></parameter>,   <comment type="line">// C non-iso, or code to compute C iso value</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,       <comment type="line">// unary/index-unary/binop to apply</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,    <comment type="line">// scalar to bind to binary operator</comment>
        <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>,         <comment type="line">// if true, C=binop(s,A), else C=binop(A,s)</comment>
        <parameter><decl><type><name>bool</name></type> <name>flipij</name></decl></parameter>,                <comment type="line">// if true, flip i,j for user idxunop</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// A can be jumbled</comment>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>ctype</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_SCALAR_OK_OR_NULL</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar for GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A-&gt;x is not const since the operator might be applied in-place, if</comment>
    <comment type="line">// C is aliased to C.</comment>

    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>        <comment type="line">// A-&gt;x has type A-&gt;type</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>               <comment type="line">// only if A is bitmap</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>Atype</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>        <comment type="line">// type of A-&gt;x</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>   <comment type="line">// size of A-&gt;x and Cx</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the maximum number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_unop</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_binop</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>opcode</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_is_unop</name> <operator>=</operator> <call><name>GB_IS_UNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_is_binop</name> <operator>=</operator> <call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// C is iso, with no operator to apply; just call GB_iso_unop below.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_1</name> <operator>||</operator>   <comment type="line">// C iso value is 1</comment>
                <name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_S</name> <operator>||</operator>   <comment type="line">// C iso value is the scalar</comment>
                <name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// C iso value is the iso value of A</comment>
        <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_NOP_code</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// built-in positional unary, index_unary, or binary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>is64</name> <init>= <expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT64</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is32</name> <init>= <expr><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_INT32</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT_OP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"positional unop/idxunop/binop: GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// get A and C</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// determine number of threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name>anvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Cx = positional_op (A)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>thunk</name> <init>= <expr><call><name>GB_positional_offset</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// GB_positional_op_ijp allocates a set of tasks, which can possibly</comment>
        <comment type="line">// fail if out of memory.</comment>

        <if_stmt><if>if <condition>(<expr><name>is64</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// int64 Cx = positional_op (A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cz</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Cx</name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_POSITIONI_unop_code</name></expr>  :</case> <comment type="line">// z = position_i(A(i,j)) == i</comment>
                <case>case <expr><name>GB_POSITIONI1_unop_code</name></expr> :</case> <comment type="line">// z = position_i1(A(i,j)) == i+1</comment>
                <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>    :</case> <comment type="line">// z = first_i(A(i,j),y) == i</comment>
                <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>   :</case> <comment type="line">// z = first_i1(A(i,j),y) == i+1</comment>
                <case>case <expr><name>GB_SECONDI_binop_code</name></expr>   :</case> <comment type="line">// z = second_i(x,A(i,j)) == i</comment>
                <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>  :</case> <comment type="line">// z = second_i1(x,A(i,j)) == i+1</comment>
                <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = i+thunk</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (i + thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ip.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_POSITIONJ_unop_code</name></expr>  :</case> <comment type="line">// z = position_j(A(i,j)) == j</comment>
                <case>case <expr><name>GB_POSITIONJ1_unop_code</name></expr> :</case> <comment type="line">// z = position_j1(A(i,j)) == j+1</comment>
                <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>    :</case> <comment type="line">// z = first_j(A(i,j),y) == j</comment>
                <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>   :</case> <comment type="line">// z = first_j1(A(i,j),y) == j+1</comment>
                <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>   :</case> <comment type="line">// z = second_j(x,A(i,j)) == j</comment>
                <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>  :</case> <comment type="line">// z = second_j1(x,A(i,j)) == j+1</comment>
                <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = j+thunk</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (j + thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = (j-(i+thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (j - (i+thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_FLIPDIAGINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = (i-(j+thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (i - (j+thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>is32</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// int32 Cx = positional_op (A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cz</name> <init>= <expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>Cx</name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_POSITIONI_unop_code</name></expr>  :</case> <comment type="line">// z = position_i(A(i,j)) == i</comment>
                <case>case <expr><name>GB_POSITIONI1_unop_code</name></expr> :</case> <comment type="line">// z = position_i1(A(i,j)) == i+1</comment>
                <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>    :</case> <comment type="line">// z = first_i(A(i,j),y) == i</comment>
                <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>   :</case> <comment type="line">// z = first_i1(A(i,j),y) == i+1</comment>
                <case>case <expr><name>GB_SECONDI_binop_code</name></expr>   :</case> <comment type="line">// z = second_i(x,A(i,j)) == i</comment>
                <case>case <expr><name>GB_SECONDI1_binop_code</name></expr>  :</case> <comment type="line">// z = second_i1(x,A(i,j)) == i+1</comment>
                <case>case <expr><name>GB_ROWINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = i+thunk</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (int32_t) (i + thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ip.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_POSITIONJ_unop_code</name></expr>  :</case> <comment type="line">// z = position_j(A(i,j)) == j</comment>
                <case>case <expr><name>GB_POSITIONJ1_unop_code</name></expr> :</case> <comment type="line">// z = position_j1(A(i,j)) == j+1</comment>
                <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>    :</case> <comment type="line">// z = first_j(A(i,j),y) == j</comment>
                <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>   :</case> <comment type="line">// z = first_j1(A(i,j),y) == j+1</comment>
                <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>   :</case> <comment type="line">// z = second_j(x,A(i,j)) == j</comment>
                <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr>  :</case> <comment type="line">// z = second_j1(x,A(i,j)) == j+1</comment>
                <case>case <expr><name>GB_COLINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = j+thunk</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (int32_t) (j + thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_DIAGINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = (j-(i+thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (int32_t) (j - (i+thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_FLIPDIAGINDEX_idxunop_code</name></expr> :</case> <comment type="line">// z = (i-(j+thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (int32_t) (i - (j+thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// bool Cx = positional_op (A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name></name> <operator>==</operator> <name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cz</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>Cx</name></expr></init></decl> ;</decl_stmt>
            <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
            <block>{<block_content>

                <case>case <expr><name>GB_TRIL_idxunop_code</name></expr> :</case> <comment type="line">// z = (j &lt;= (i+thunk))</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (j &lt;= (i + thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_TRIU_idxunop_code</name></expr> :</case> <comment type="line">// z = (j &gt;= (i+thunk))</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (j &gt;= (i + thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_DIAG_idxunop_code</name></expr> :</case> <comment type="line">// z = (j == (i+thunk))</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (j == (i + thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_OFFDIAG_idxunop_code</name></expr> :</case> <comment type="line">// z = (j != (i+thunk))</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>int64_t i = GBI (Ai, p, avlen) ;    \
                        Cz [p] = (j != (i + thunk)) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_COLLE_idxunop_code</name></expr> :</case> <comment type="line">// z = (j &lt;= thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (j &lt;= thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_COLGT_idxunop_code</name></expr> :</case> <comment type="line">// z = (j &gt; thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (j &gt; thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_ROWLE_idxunop_code</name></expr> :</case> <comment type="line">// z = (i &lt;= thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (i &lt;= thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ip.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <case>case <expr><name>GB_ROWGT_idxunop_code</name></expr> :</case> <comment type="line">// z = (i &gt; thunk)</comment>
                    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                     \
                        <cpp:value>Cz [p] = (i &gt; thunk) ;</cpp:value></cpp:define>
                    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ip.c"</cpp:file></cpp:include>
                    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>

                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>C_code_iso</name> <operator>!=</operator> <name>GB_NON_ISO</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply the unary or binary operator to the iso value</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// if C is iso, this function takes O(1) time</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso apply) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A passing to GB_iso_unop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Cx [0] = unop (A), binop (scalar,A), or binop (A,scalar)</comment>
            <expr_stmt><expr><call><name>GB_iso_unop</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>op_is_unop</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply the unary operator to all entries</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"unop for GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// determine number of threads to use</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>Atype</name> <operator>==</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name></name> <operator>||</operator> <name>opcode</name> <operator>==</operator> <name>GB_IDENTITY_unop_code</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">// The switch factory is used if the op is IDENTITY, or if no</comment>
            <comment type="line">// typecasting is being done.  IDENTITY operator can do arbitrary</comment>
            <comment type="line">// typecasting (it is not used if no typecasting is done).</comment>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// define the worker for the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_unop_apply</name><parameter_list>(<parameter><type><name>unop</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>)</parameter_list></cpp:macro> \
                <cpp:value>GB (_unop_apply_ ## unop ## zname ## aname)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>unop</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>,<parameter><type><name>atype</name></type></parameter>)</parameter_list></cpp:macro>             \
            <cpp:value>{                                                           \
                if (GB_unop_apply (unop,zname,aname) ((ztype *) Cx,     \
                    (const atype *) Ax, Ab, anz, nthreads)              \
                    == GrB_SUCCESS) return (GrB_SUCCESS) ;              \
            }                                                           \
            break ;</cpp:value></cpp:define>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// launch the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_factory.c"</cpp:file></cpp:include>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic worker: typecast and apply a unary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_N</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="string">"(generic apply: %s) "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GxB_unary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
            <comment type="line">// xwork = (xtype) Ax [p]</comment>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>xwork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>cast_A_to_X</name> <argument_list>(<argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// Cx [p] = fop (xwork)</comment>
            <expr_stmt><expr><call><name>fop</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>*</operator><name>zsize</name><operator>)</operator></expr></argument>, <argument><expr><name>xwork</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>op_is_binop</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply a binary operator (bound to a scalar)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"standard binop for GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_SCALAR_OK</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar for GB_apply_op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name></decl>, <decl><type ref="prev"/><name>ycode</name></decl>, <decl><type ref="prev"/><name>zcode</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_FIRST_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_SECOND_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_PAIR_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>!=</operator> <name>GB_ANY_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ssize</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>xcode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ycode</name> <operator>=</operator> <name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr> ;</expr_stmt>

        <comment type="line">// typecast the scalar to the operator input</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ssize_cast</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode_cast</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>ssize_cast</name> <operator>=</operator> <name>xsize</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scode_cast</name> <operator>=</operator> <name>xcode</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>ssize_cast</name> <operator>=</operator> <name>ysize</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scode_cast</name> <operator>=</operator> <name>ycode</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>swork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ssize_cast</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>scalarx</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>scode_cast</name> <operator>!=</operator> <name>scode</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast the scalar to the operator input, in swork</comment>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_s</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>scode_cast</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>cast_s</name> <argument_list>(<argument><expr><name>swork</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scalarx</name> <operator>=</operator> <name>swork</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// determine number of threads to use</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// z = binop (scalar,Ax)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Atype</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_BinaryOp</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// define the worker for the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_bind1st</name><parameter_list>(<parameter><type><name>binop</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_bind1st_ ## binop ## xname)</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_WORKER</name><parameter_list>(<parameter><type><name>binop</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                    \
                <cpp:value>{                                                       \
                    if (GB_bind1st (binop, xname) (Cx, scalarx, Ax,     \
                        Ab, anz, nthreads) == GrB_SUCCESS)              \
                        return (GrB_SUCCESS) ;                          \
                }                                                       \
                break ;</cpp:value></cpp:define>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// launch the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_FIRST</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_SECOND</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_PAIR</name></cpp:macro></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// z = binop (Ax,scalar)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><call><name>GB_binop_builtin</name> <argument_list>(<argument><expr><name>Atype</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><operator>(</operator><name>GrB_BinaryOp</name><operator>)</operator> <name>op</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xcode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ycode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zcode</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// define the worker for the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_bind2nd</name><parameter_list>(<parameter><type><name>binop</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_bind2nd_ ## binop ## xname)</cpp:value></cpp:define>
                <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_BINOP_WORKER</name></cpp:undef>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_WORKER</name><parameter_list>(<parameter><type><name>binop</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                    \
                <cpp:value>{                                                       \
                    if (GB_bind2nd (binop, xname) (Cx, Ax, scalarx,     \
                        Ab, anz, nthreads) == GrB_SUCCESS)              \
                        return (GrB_SUCCESS) ;                          \
                }                                                       \
                break ;</cpp:value></cpp:define>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// launch the switch factory</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_FIRST</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_SECOND</name></cpp:macro></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_NO_PAIR</name></cpp:macro></cpp:define>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop_factory.c"</cpp:file></cpp:include>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic worker: typecast and apply a binary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_N</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="string">"(generic apply: %s) "</literal></expr></argument>, <argument><expr><name><name>op</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Cx = binop (scalar,Ax)</comment>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_Y</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                <comment type="line">// ywork = (ytype) Ax [p]</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>ywork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>cast_A_to_Y</name> <argument_list>(<argument><expr><name>ywork</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Cx [p] = fop (scalarx, ywork)</comment>
                <expr_stmt><expr><call><name>fop</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>zsize</name><operator>)</operator></expr></argument>, <argument><expr><name>scalarx</name></expr></argument>, <argument><expr><name>ywork</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Cx = binop (Ax,scalar)</comment>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
                <comment type="line">// xwork = (xtype) Ax [p]</comment>
                <decl_stmt><decl><type><name>GB_void</name></type> <name><name>xwork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>cast_A_to_X</name> <argument_list>(<argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Cx [p] = fop (xwork, scalarx)</comment>
                <expr_stmt><expr><call><name>fop</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>*</operator><name>zsize</name><operator>)</operator></expr></argument>, <argument><expr><name>xwork</name></expr></argument>, <argument><expr><name>scalarx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// apply a user-defined index_unary op</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// All valued GrB_IndexUnaryOps (GrB_VALUE*) have already been renamed</comment>
        <comment type="line">// to their corresponding binary op (GrB_VALUEEQ_FP32 became</comment>
        <comment type="line">// GrB_EQ_FP32, for example).  The only remaining index unary ops are</comment>
        <comment type="line">// positional, and user-defined.  Positional ops have been handled</comment>
        <comment type="line">// above, so only user-defined index unary ops are left.</comment>

        <comment type="line">// get A and C</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>opcode</name> <operator>==</operator> <name>GB_USER_idxunop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>GxB_index_unary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>idxunop_function</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ssize</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>zsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>scode</name> <init>= <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>Atype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>GB_void</name></type> <name><name>ywork</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>ythunk</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ycode</name> <operator>!=</operator> <name>scode</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast the scalar to the operator input, in ywork</comment>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_s</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ycode</name></expr></argument>, <argument><expr><name>scode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>cast_s</name> <argument_list>(<argument><expr><name>ywork</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ythunk</name> <operator>=</operator> <name>ywork</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_APPLY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                                 \
            <cpp:value>if (!GBB (Ab, p)) continue ;                                    \
            int64_t i = GBI (Ai, p, avlen) ;                                \
            GB_void xwork [GB_VLA(xsize)] ;                                 \
            cast_A_to_X (xwork, Ax +(p)*asize, asize) ;                     \
            fop (Cx +(p*zsize), xwork,                                      \
                flipij ? j : i, flipij ? i : j, ythunk) ;</cpp:value></cpp:define>

        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_positional_op_ijp.c"</cpp:file></cpp:include>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
