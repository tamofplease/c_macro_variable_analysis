<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_dup.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dup: make a deep copy of a sparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = A, making a deep copy.  Not user-callable; this function does the work</comment>
<comment type="line">// for user-callable functions GrB_*_dup.</comment>

<comment type="line">// if numeric is false, C-&gt;x is allocated but not initialized.</comment>

<comment type="line">// There is little use for the following feature, but (*Chandle) and A might be</comment>
<comment type="line">// identical, with GrB_dup (&amp;A, A).  The input matrix A will be lost, and will</comment>
<comment type="line">// result in a memory leak, unless the user application does the following</comment>
<comment type="line">// (which is valid and memory-leak free):</comment>

<comment type="line">//  B = A ;</comment>

<comment type="line">//  GrB_dup (&amp;A, A) ;</comment>

<comment type="line">//  GrB_free (&amp;A) ;</comment>

<comment type="line">//  GrB_free (&amp;B) ;</comment>

<comment type="line">// A is the new copy and B is the old copy.  Each should be freed when done.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_dup</name>             <comment type="line">// make an exact copy of a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,    <comment type="line">// handle of output matrix to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input matrix to copy</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Chandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to duplicate"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// set C-&gt;iso = A-&gt;iso      OK</comment>
    <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(iso dup) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><name>Chandle</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
