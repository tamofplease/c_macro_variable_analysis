<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_symbolic.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_symbolic: S = C(I,J)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GB_phybix_free (S) ;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_symbolic</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>S</name></decl></parameter>,               <comment type="line">// S = symbolic(C(I,J)), static header</comment>
    <comment type="line">// inputs, not modified:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,         <comment type="line">// matrix to extract the pattern of</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// index list for S = C(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,           <comment type="line">// length of I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,         <comment type="line">// index list for S = C(I,J), or GrB_ALL, etc.</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nj</name></decl></parameter>,           <comment type="line">// length of J, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>S_must_not_be_jumbled</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// the caller cannot tolerate C bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>S</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>S</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the pattern: S = C(I,J) for S_Extraction method, and quick mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// S is a sparse int64_t matrix.  Its "values" are not numerical, but</comment>
    <comment type="line">// indices into C.  For example, suppose 100 = I [5] and 200 = J [7].  Then</comment>
    <comment type="line">// S(5,7) is the entry C(I(5),J(7)), and the value of S(5,7) is the</comment>
    <comment type="line">// position in C that holds that particular entry C(100,200):</comment>
    <comment type="line">// pC = S-&gt;x [...] gives the location of the value C-&gt;x [pC] and row index</comment>
    <comment type="line">// 100 = C-&gt;i [pC], and pC will be between C-&gt;p [200] ... C-&gt;p [200+1]-1</comment>
    <comment type="line">// if C is non-hypersparse.  If C is hyperparse then pC will be still</comment>
    <comment type="line">// reside inside the vector jC, in the range C-&gt;p [k] ... C-&gt;p [k+1]-1,</comment>
    <comment type="line">// if jC is the kth non-empty vector in the hyperlist of C.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract symbolic structure S=C(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE::: if whole_C_matrix is true, then C(:,:) = ... and S == C,</comment>
    <comment type="line">// except that S is zombie-free, read-only; and C collects zombies.</comment>

    <comment type="line">// FUTURE:: the properties of I and J are already known, and thus do</comment>
    <comment type="line">// not need to be recomputed by GB_subref.</comment>

    <comment type="line">// S and C have the same CSR/CSC format.  S can be jumbled.  It is in</comment>
    <comment type="line">// in the same hypersparse form as C (unless S is empty, in which case</comment>
    <comment type="line">// it is always returned as hypersparse). This also checks I and J.</comment>
    <comment type="line">// S is not iso, even if C is iso.</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_subref</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// GB_subref can return S as unsorted</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort S and compute S-&gt;Y if requested</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>S_must_not_be_jumbled</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_JUMBLED</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// but the caller requires S sorted</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hyper_hash_build</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// construct S-&gt;Y</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the result of S=C(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for subref extraction"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><literal type="string">"S for subref extraction"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// since C is not bitmap, neither is S</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// GB_subref sorts its input matrix, so C is no longer jumbled</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// this body of code explains what S contains.</comment>
    <comment type="line">// S is nI-by-nJ where nI = length (I) and nJ = length (J)</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nI</name></decl>, <decl><type ref="prev"/><name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>nJ</name></decl>, <decl><type ref="prev"/><name><name>Jcolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Ikind</name></decl>, <decl><type ref="prev"/><name>Jkind</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nJ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get S</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sp</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sh</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Si</name> <init>= <expr><name><name>S</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sx</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name><name>S</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// for each vector of S</comment>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>S</name><operator>-&gt;</operator><name>nvec</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// prepare to iterate over the entries of vector S(:,jnew)</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jnew</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Sh</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pS_start</name> <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Sp</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>pS_end</name>   <init>= <expr><call><name>GBP</name> <argument_list>(<argument><expr><name>Sp</name></expr></argument>, <argument><expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <comment type="line">// S (inew,jnew) corresponds to C (iC, jC) ;</comment>
        <comment type="line">// jC = J [j] ; or J is a colon expression</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>jC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>jnew</name></expr></argument>, <argument><expr><name>Jkind</name></expr></argument>, <argument><expr><name>Jcolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pS</name> <init>= <expr><name>pS_start</name></expr></init></decl> ;</init> <condition><expr><name>pS</name> <operator>&lt;</operator> <name>pS_end</name></expr> ;</condition> <incr><expr><name>pS</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// S (inew,jnew) is a pointer back into C (I(inew), J(jnew))</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>inew</name> <init>= <expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>pS</name></expr></argument>, <argument><expr><name><name>S</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>inew</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inew</name> <operator>&lt;</operator> <name>nI</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// iC = I [iA] ; or I is a colon expression</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>iC</name> <init>= <expr><call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>inew</name></expr></argument>, <argument><expr><name>Ikind</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Sx</name> <index>[<expr><name>pS</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pC_start</name></decl>, <decl><type ref="prev"/><name>pC_end</name></decl>, <decl><type ref="prev"/><name>pleft</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pright</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>GB_lookup</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <comment type="line">// for debug only</comment>
                <argument><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pleft</name></expr></argument>, <argument><expr><name>pright</name></expr></argument>, <argument><expr><name>jC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pC_end</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// If iC == I [inew] and jC == J [jnew], (or the equivaleent</comment>
            <comment type="line">// for GB_ALL, GB_RANGE, GB_STRIDE) then A(inew,jnew) will be</comment>
            <comment type="line">// assigned to C(iC,jC), and p = S(inew,jnew) gives the pointer</comment>
            <comment type="line">// into C to where the entry (C(iC,jC) appears in C:</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pC_start</name> <operator>&lt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>pC_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iC</name> <operator>==</operator> <call><name>GB_UNFLIP</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
