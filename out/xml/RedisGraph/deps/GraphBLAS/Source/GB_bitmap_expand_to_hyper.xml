<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_bitmap_expand_to_hyper.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_bitmap_expand_to_hyper:  expand a compact bitmap C to hypersparse</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_phybix_free (C) ;            \
    GB_FREE (&amp;Cp, Cp_size) ;        \
    GB_FREE (&amp;Ch, Ch_size) ;        \
    GB_FREE (&amp;Ci, Ci_size) ;        \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_bitmap_expand_to_hyper</name>
<parameter_list>(
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>cvlen_final</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>cvdim_final</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>B</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(expand bitmap/full to hyper) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C to expand from bitmap/full to hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for expand C from bitmap/full to hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for expand C from bitmap/full to hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cvdim</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name>cvlen</name> <operator>*</operator> <name>cvdim</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_hyper</name> <init>= <expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// C is currently a subset of its final dimension, in bitmap or full form.</comment>
    <comment type="line">// It is converted back into sparse/hypersparse form, with zombies if</comment>
    <comment type="line">// bitmap, and expanded in size to be cvlen_final by cvdim_final (A-&gt;vdim</comment>
    <comment type="line">// by B-&gt;vdim for C=A'*B, or A-&gt;vlen by B-&gt;vdim for C=A*B).</comment>

    <comment type="line">//----------------------------------------------------------------------</comment>
    <comment type="line">// allocate the sparse/hypersparse structure of the final C</comment>
    <comment type="line">//----------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Cp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ch</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ch_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ci_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>Cp</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>cvdim</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cp_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>Ch</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ch_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>Ci</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ci_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Cp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>B_is_hyper</name> <operator>&amp;&amp;</operator> <name>Ch</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <name>Ci</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//----------------------------------------------------------------------</comment>
    <comment type="line">// construct the hyperlist of C, if B is hypersparse</comment>
    <comment type="line">//----------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cvdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>B_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C becomes hypersparse</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cvdim</name> <operator>==</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>cvdim</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//----------------------------------------------------------------------</comment>
    <comment type="line">// construct the vector pointers of C</comment>
    <comment type="line">//----------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pC</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>cvdim</name><operator>+</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>pC</name> <operator>*</operator> <name>cvlen</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//----------------------------------------------------------------------</comment>
    <comment type="line">// construct the pattern of C from its bitmap</comment>
    <comment type="line">//----------------------------------------------------------------------</comment>

    <comment type="line">// C(i,j) becomes a zombie if not present in the bitmap</comment>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cb</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_bitmap</name> <init>= <expr><operator>(</operator><name>Cb</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_is_bitmap</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C is bitmap</comment>
        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// only for C=A'*B</comment>
            <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cvlen</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>pC</name> <operator>%</operator> <name>cvlen</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// for C=A'*B or C=A*B</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cvlen</name> <operator>==</operator> <name>cvlen_final</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>pC</name> <operator>%</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>Cb</name> <index>[<expr><name>pC</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><call><name>GB_FLIP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// C is full</comment>
        <if_stmt><if>if <condition>(<expr><name>A_is_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// only for C=A'*B</comment>
            <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cvlen</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>pC</name> <operator>%</operator> <name>cvlen</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// for C=A'*B or C=A*B</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>cvlen</name> <operator>==</operator> <name>cvlen_final</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>pC</name> <operator>&lt;</operator> <name>cnz</name></expr> ;</condition> <incr><expr><name>pC</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>pC</name> <operator>%</operator> <name>cvlen</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Ci</name> <index>[<expr><name>pC</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//----------------------------------------------------------------------</comment>
    <comment type="line">// transplant the new content and finalize C</comment>
    <comment type="line">//----------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>Cp</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Cp</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Cp_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>Ch</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ch</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ch_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>Ci</name></expr> ;</expr_stmt> <expr_stmt><expr><name>Ci</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>Ci_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>C_is_bitmap</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>cnz</name> <operator>-</operator> <name><name>C</name><operator>-&gt;</operator><name>nvals</name></name><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name>cvdim_final</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <name>cvlen_final</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>cvdim</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>cvdim</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cvlen</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>cvdim</name></expr></else></ternary></expr> ;</expr_stmt>

    <comment type="line">// free the bitmap, if present</comment>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>(</operator><operator>&amp;</operator><name><name>C</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>b_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C is now sparse or hypersparse</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C expanded from bitmap/full to hyper"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
