<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_export.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_export: export a matrix in CSR, CSC, FullC, FullR, or COO format</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Exports the contents of a matrix in one of 3 formats: CSR, CSC, or COO</comment>
<comment type="line">// (triplet format).  The exported matrix is not modified.  No typecast is</comment>
<comment type="line">// performed; the output array Ax must be of the same type as the input matrix</comment>
<comment type="line">// A.</comment>

<comment type="line">// The required sizes of the Ap, Ai, and Ax arrays are given by</comment>
<comment type="line">// GrB_Matrix_exportSize.</comment>

<comment type="line">// The GraphBLAS C API does not have a GrB* method to query the type of a</comment>
<comment type="line">// GrB_Matrix or the size of a type.  SuiteSparse:GraphBLAS provides</comment>
<comment type="line">// GxB_Matrix_type_name to query the type of a matrix (returning a string),</comment>
<comment type="line">// which can be converted into a GrB_Type with GxB_Type_from_name.  The size of</comment>
<comment type="line">// a type can be queried with GxB_Type_size.  Using these methods, a user</comment>
<comment type="line">// application can ensure that its Ax array has the correct size for any</comment>
<comment type="line">// given GrB_Matrix it wishes to export, regardless of its type.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                 \
<cpp:value>{                                   \
    GB_Matrix_free (&amp;T) ;           \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_export_worker: export a matrix of any type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>GrB_Info</name></type> <name>GB_export_worker</name>  <comment type="line">// export a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name></decl></parameter>,          <comment type="line">// pointers for CSR, CSC, row indices for COO</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai</name></decl></parameter>,          <comment type="line">// row indices for CSR, CSC, col indices for COO</comment>
    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>Ax</name></decl></parameter>,               <comment type="line">// values (must match the type of A_input)</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap_len</name></decl></parameter>,      <comment type="line">// number of entries in Ap (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai_len</name></decl></parameter>,      <comment type="line">// number of entries in Ai (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ax_len</name></decl></parameter>,      <comment type="line">// number of entries in Ax (not # of bytes)</comment>
    <parameter><decl><type><name>GrB_Format</name></type> <name>format</name></decl></parameter>,      <comment type="line">// export format</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A_input</name></decl></parameter>,     <comment type="line">// matrix to export</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>A_input</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GrB_CSR_FORMAT</name></expr> :</case>
        <case>case <expr><name>GrB_CSC_FORMAT</name></expr> :</case>
        <case>case <expr><name>GrB_COO_FORMAT</name></expr> :</case>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ap_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ai_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <default>default:</default>
            <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>Ax_len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">// finish any pending work</comment>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine current format of A and if a copy is needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>make_copy</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>csc_requested</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GrB_CSR_FORMAT</name></expr> :</case>
            <expr_stmt><expr><name>make_copy</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_csc</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>csc_requested</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GrB_CSC_FORMAT</name></expr> :</case>
            <expr_stmt><expr><name>make_copy</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>&amp;&amp;</operator> <name>is_csc</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>csc_requested</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <break>break ;</break>

<comment type="line">//      case GrB_DENSE_ROW_FORMAT :</comment>
<comment type="line">//          if (!GB_is_dense (A))</comment>
<comment type="line">//          {</comment>
<comment type="line">//              // A must dense or full</comment>
<comment type="line">//              return (GrB_INVALID_VALUE) ;</comment>
<comment type="line">//          }</comment>
<comment type="line">//          make_copy = !(sparsity == GxB_FULL &amp;&amp; !is_csc) ;</comment>
<comment type="line">//          csc_requested = false ;</comment>
<comment type="line">//          break ;</comment>

<comment type="line">//      case GrB_DENSE_COL_FORMAT :</comment>
<comment type="line">//          if (!GB_is_dense (A))</comment>
<comment type="line">//          {</comment>
<comment type="line">//              // A must dense or full</comment>
<comment type="line">//              return (GrB_INVALID_VALUE) ;</comment>
<comment type="line">//          }</comment>
<comment type="line">//          make_copy = !(sparsity == GxB_FULL &amp;&amp; is_csc) ;</comment>
<comment type="line">//          csc_requested = true ;</comment>
<comment type="line">//          break ;</comment>

        <case>case <expr><name>GrB_COO_FORMAT</name></expr> :</case> 
            <comment type="line">// never make a copy to export in tuple format</comment>
            <expr_stmt><expr><name>make_copy</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>csc_requested</name> <operator>=</operator> <name>is_csc</name></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> 
            <comment type="line">// unknown format</comment>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create a copy if the matrix is not in the requested format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>make_copy</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>is_csc</name> <operator>!=</operator> <name>csc_requested</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T = A'</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>csc_requested</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// T = A</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GrB_CSR_FORMAT</name></expr> :</case>
            <case>case <expr><name>GrB_CSC_FORMAT</name></expr> :</case>
                <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_any_to_sparse</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>
<comment type="line">//          case GrB_DENSE_ROW_FORMAT :</comment>
<comment type="line">//          case GrB_DENSE_COL_FORMAT :</comment>
<comment type="line">//              GB_convert_any_to_full (T) ;</comment>
<comment type="line">//              break ;</comment>
            <default>default :</default>
                <break>break ;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the contents of the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>plen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt> 

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GrB_CSR_FORMAT</name></expr> :</case> 
        <case>case <expr><name>GrB_CSC_FORMAT</name></expr> :</case> 
            <if_stmt><if>if <condition>(<expr><name>plen</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>||</operator> <name>nvals</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INSUFFICIENT_SPACE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>plen</name>  <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>nvals</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>=</operator> <name>plen</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>

<comment type="line">//      case GrB_DENSE_ROW_FORMAT :</comment>
<comment type="line">//      case GrB_DENSE_COL_FORMAT :</comment>
            <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ax_len</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INSUFFICIENT_SPACE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>csc_requested</name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// expand the iso A-&gt;x into the non-iso array Ax</comment>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nvals</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_iso_expand</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>nvals</name> <operator>*</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <default>default:</default>
        <case>case <expr><name>GrB_COO_FORMAT</name></expr> :</case> 
            <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>||</operator> <name>nvals</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>||</operator> <name>nvals</name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>Ax_len</name><operator>)</operator></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_INSUFFICIENT_SPACE</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_extractTuples</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ap_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ai_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ax_len</name><operator>)</operator> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_export_*: export a matrix of a given type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXPORT</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>ctype</name></type></parameter>,<parameter><type><name>Type</name></type></parameter>,<parameter><type><name>acode</name></type></parameter>)</parameter_list></cpp:macro>                                     \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Matrix_export_, Type) <comment type="block">/* export a matrix */</comment>        \
(                                                                              \
    GrB_Index *Ap,          <comment type="block">/* pointers for CSR, CSC, row indices for COO    */</comment>\
    GrB_Index *Ai,          <comment type="block">/* row indices for CSR, CSC, col indices for COO */</comment>\
    ctype *Ax,              <comment type="block">/* values (must match the type of A)             */</comment>\
    GrB_Index *Ap_len,      <comment type="block">/* number of entries in Ap (not # of bytes)      */</comment>\
    GrB_Index *Ai_len,      <comment type="block">/* number of entries in Ai (not # of bytes)      */</comment>\
    GrB_Index *Ax_len,      <comment type="block">/* number of entries in Ax (not # of bytes)      */</comment>\
    GrB_Format format,      <comment type="block">/* export format                                 */</comment>\
    GrB_Matrix A            <comment type="block">/* matrix to export                              */</comment>\
)                                                                              \
{                                                                              \
    GB_WHERE1 (GB_STR(prefix) "_Matrix_export_" GB_STR(Type)                   \
        " (Ap, Ai, Ax, &amp;Ap_len, &amp;Ai_len, &amp;Ax_len, format, A)") ;               \
    GB_BURBLE_START (GB_STR(prefix) "_Matrix_export_" GB_STR(Type)) ;          \
    GB_RETURN_IF_NULL_OR_FAULTY (A) ;                                          \
    if (A-&gt;type-&gt;code != acode) return (GrB_DOMAIN_MISMATCH) ;                 \
    GrB_Info info = GB_export_worker (Ap, Ai, (void *) Ax,                     \
        Ap_len, Ai_len, Ax_len, format, A, Context) ;                          \
    GB_BURBLE_END ;                                                            \
    return (info) ;                                                            \
}</cpp:value></cpp:define>

<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>   , <argument>GB_BOOL_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>   , <argument>GB_INT8_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument>  , <argument>GB_INT16_code</argument> )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument>  , <argument>GB_INT32_code</argument> )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument>  , <argument>GB_INT64_code</argument> )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument>  , <argument>GB_UINT8_code</argument> )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument> , <argument>GB_UINT16_code</argument>)</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument> , <argument>GB_UINT32_code</argument>)</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument> , <argument>GB_UINT64_code</argument>)</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>   , <argument>GB_FP32_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>   , <argument>GB_FP64_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>   , <argument>GB_FC32_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>   , <argument>GB_FC64_code</argument>  )</argument_list></macro>
<macro><name>GB_EXPORT</name> <argument_list>(<argument>GrB</argument>, <argument>void</argument>      , <argument>UDT</argument>    , <argument>GB_UDT_code</argument>   )</argument_list></macro>

</unit>
