<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_enumify_identity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_enumify_identity: return ecode for identity value of an op of a monoid </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_enumify_identity</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ecode</name></decl></parameter>,             <comment type="line">// enumerated identity, 0 to 31</comment>
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl></parameter>,       <comment type="line">// built-in binary opcode of a monoid</comment>
    <parameter><decl><type><name>GB_Type_code</name></type> <name>zcode</name></decl></parameter>      <comment type="line">// type code of the operator</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">31</literal></expr></init></decl> ;</decl_stmt>            <comment type="line">// default: use the monoid-&gt;identity bytes</comment>

    <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr>     :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0</comment>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr>    :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 1</comment>

        <case>case <expr><name>GB_LAND_binop_code</name></expr>     :</case> 
        <case>case <expr><name>GB_EQ_binop_code</name></expr>       :</case>   <comment type="line">// LXNOR</comment>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">31</literal><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// true</comment>

        <case>case <expr><name>GB_LOR_binop_code</name></expr>      :</case> 
        <case>case <expr><name>GB_LXOR_binop_code</name></expr>     :</case> 
            <expr_stmt><expr><name>e</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">31</literal><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// false</comment>

        <case>case <expr><name>GB_MIN_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">2</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// true</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">4</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT8_MAX</comment>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">5</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT16_MAX</comment>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">6</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT32_MAX</comment>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">7</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT64_MAX</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">8</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// UINT8_MAX</comment>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">9</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// UINT16_MAX</comment>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">10</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// UINT32_MAX</comment>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">11</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// UINT64_MAX</comment>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> 
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">12</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INFINITY</comment>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr> :</case>

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">3</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// false</comment>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">13</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT8_MIN</comment>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">14</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT16_MIN</comment>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">15</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT32_MIN</comment>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// INT64_MIN</comment>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> 
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> 
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> 
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator>  <literal type="number">0</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0</comment>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> 
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">17</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// -INFINITY</comment>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ANY_binop_code</name></expr>      :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">18</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0, for ANY op only</comment>

        <case>case <expr><name>GB_BOR_binop_code</name></expr>      :</case> 
        <case>case <expr><name>GB_BXOR_binop_code</name></expr>     :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0</comment>

        <case>case <expr><name>GB_BAND_binop_code</name></expr>     :</case> 
        <case>case <expr><name>GB_BXNOR_binop_code</name></expr>    :</case> 

            <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">19</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0xFF</comment>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">20</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0xFFFF</comment>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">21</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0xFFFFFFFF</comment>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">22</literal></expr> ;</expr_stmt> <break>break ;</break> <comment type="line">// 0xFFFFFFFFFFFFFFFF</comment>
                <default>default:</default> <empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ecode</name><operator>)</operator> <operator>=</operator> <name>e</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
