<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Type_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Type_new: create a new user-defined type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GxB_Type_new is like GrB_Type_new, except that it gives the user application</comment>
<comment type="line">// a mechanism for providing a unique name of the type and the C definition of</comment>
<comment type="line">// the type.  Both are provided as null-terminated strings.</comment>

<comment type="line">// When the name of the user type is known, it can be returned to the user</comment>
<comment type="line">// application when querying the type of a GrB_Matrix, GrB_Vector, GrB_Scalar,</comment>
<comment type="line">// or a serialized blob.</comment>

<comment type="line">// If GrB_Type_new is used in SuiteSparse:GraphBLAS in its macro form, as</comment>
<comment type="line">// GrB_Type_new (&amp;t, sizeof (myctype)), then the type_name is extracted as the</comment>
<comment type="line">// string "myctype".  This type_name can then be returnd by</comment>
<comment type="line">// GxB_Matrix_type_name, GxB_deserialize_type_name, etc.</comment>

<comment type="line">// This is not used for built-in types.  Those are created statically.</comment>

<comment type="line">// Example:</comment>

<comment type="line">//  GxB_Type_new (&amp;MyQtype, sizeof (myquaternion), "myquaternion",</comment>
<comment type="line">//      "typedef struct { float x [4][4] ; int color ; } myquaternion ;") ;</comment>

<comment type="line">// The type_name and type_defn are optional and may by NULL, but they are</comment>
<comment type="line">// required for the JIT.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Type_new</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,             <comment type="line">// handle of user type to create</comment>
    <parameter><decl><type><name>size_t</name></type> <name>sizeof_ctype</name></decl></parameter>,        <comment type="line">// size of the user type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_name</name></decl></parameter>,      <comment type="line">// name of the user type, or "sizeof (ctype)"</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type_defn</name></decl></parameter>       <comment type="line">// typedef of the C type (any length)</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Type_new (&amp;type, sizeof (ctype), type_name, type_defn)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator> <operator>!</operator> <name>GB_HAS_VLA</name> <operator>)</operator></expr></cpp:if>
    <block>{<block_content>
        <comment type="line">// Microsoft Visual Studio does not support VLAs allocating</comment>
        <comment type="line">// automatically on the stack.  These arrays are used for scalar values</comment>
        <comment type="line">// for a given type.  If VLA is not supported, user-defined types can</comment>
        <comment type="line">// be no larger than GB_VLA_MAXSIZE.</comment>
        <if_stmt><if>if <condition>(<expr><name>sizeof_ctype</name> <operator>&gt;</operator> <name>GB_VLA_MAXSIZE</name></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate the type</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>t</name> <init>= <expr><call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_Type_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// initialize the type</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>sizeof_ctype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>GB_UDT_code</name></expr> ;</expr_stmt>         <comment type="line">// user-defined type</comment>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// no name yet</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>defn</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>                <comment type="line">// no definition yet</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>defn_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the name: as a type_name or "sizeof (type_name)"</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>type_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// copy the type_name into the working name</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>working</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// look for "sizeof" in the name</comment>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>working</name></expr></argument>, <argument><expr><literal type="string">"sizeof"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// "sizeof" appears in the input string, advance past it</comment>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr> ;</expr_stmt>

            <comment type="line">// find leading "(" if it appears, and advance to one char past it</comment>
            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><call><name>strstr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// find trailing ")" if it appears, and delete it</comment>
            <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>strstr</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// p now contains the final name, copy it to the output name</comment>
            <expr_stmt><expr><call><name>strncpy</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// "sizeof" does not appear, take the input type_name as-is</comment>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>working</name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// no type name, so give it a generic name, with the typesize only</comment>
        <expr_stmt><expr><call><name>snprintf</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"user_type_of_size_%lu"</literal></expr></argument>,
            <argument><expr><name>sizeof_ctype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// ensure t-&gt;name is null-terminated</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>name</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the typedef, if present</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>type_defn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// determine the string length of the typedef</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>type_defn</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// allocate space for the typedef</comment>
        <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>defn</name></name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>char</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>defn_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>defn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// copy the typedef into the new type</comment>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name>type_defn</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>type</name><operator>)</operator> <operator>=</operator> <name>t</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"new user-defined type"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Type_new: create a new user-defined type (historical)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This method was only accessible via the GrB_Type_new macro in v5.1.x and</comment>
<comment type="line">// earlier.  The GrB_Type_new macro in v5.2.x and later calls GxB_Type_new.</comment>

<function><type><name>GrB_Info</name></type> <name>GB_Type_new</name>            <comment type="line">// create a new GraphBLAS type</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,             <comment type="line">// handle of user type to create</comment>
    <parameter><decl><type><name>size_t</name></type> <name>sizeof_ctype</name></decl></parameter>,        <comment type="line">// size = sizeof (ctype) of the C type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>            <comment type="line">// name of the type</comment>
)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><call><name>GxB_Type_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>sizeof_ctype</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
