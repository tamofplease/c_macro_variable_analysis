<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_new_bix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_new_bix: create a matrix and allocate space</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Creates a matrix (with GB_new), then allocates a given space for indices and</comment>
<comment type="line">// values.</comment>

<comment type="line">// Ahandle must be non-NULL on input.</comment>

<comment type="line">// If *Ahandle is NULL on input:</comment>

<comment type="line">//      A new, dynamically allocated header for the matrix A is allocated.  If</comment>
<comment type="line">//      successful, *Ahandle points to the new handle, and its contents, on</comment>
<comment type="line">//      output.  If an out-of-memory condition occurs, the header is freed and</comment>
<comment type="line">//      *Ahandle is NULL on output.  If successful, (*Ahandle)-&gt;static_header</comment>
<comment type="line">//      will always be false on output.</comment>

<comment type="line">// If *Ahandle is not NULL on input:</comment>

<comment type="line">//      The existing header for A is used.  The pointer *Ahandle itself is not</comment>
<comment type="line">//      modified on output, either on success or failure.  If successful, the</comment>
<comment type="line">//      content of A has been created.  If an out-of-memory condition occurs,</comment>
<comment type="line">//      the preexisting header is not freed and *Ahandle is unmodified on</comment>
<comment type="line">//      output. (*Ahandle)-&gt;static_header is unchanged.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_new_bix</name>             <comment type="line">// create a new matrix, incl. A-&gt;b, A-&gt;i, A-&gt;x</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Ahandle</name></decl></parameter>,        <comment type="line">// output matrix to create</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>,        <comment type="line">// type of output matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name></decl></parameter>,         <comment type="line">// length of each vector</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vdim</name></decl></parameter>,         <comment type="line">// number of vectors</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Ap_code</name></type> <name>Ap_option</name></decl></parameter>, <comment type="line">// allocate A-&gt;p and A-&gt;h, or leave NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_csc</name></decl></parameter>,          <comment type="line">// true if CSC, false if CSR</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sparsity</name></decl></parameter>,         <comment type="line">// hyper, sparse, bitmap, full, or auto</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bitmap_calloc</name></decl></parameter>,   <comment type="line">// if true, calloc A-&gt;b, otherwise use malloc</comment>
    <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>hyper_switch</name></decl></parameter>,   <comment type="line">// A-&gt;hyper_switch, unless auto</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>plen</name></decl></parameter>,         <comment type="line">// size of A-&gt;p and A-&gt;h, if hypersparse</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nzmax</name></decl></parameter>,        <comment type="line">// number of nonzeros the matrix must hold;</comment>
                                <comment type="line">// ignored if A is iso and full</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>numeric</name></decl></parameter>,         <comment type="line">// if true, allocate A-&gt;x, else A-&gt;x is NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name></decl></parameter>,           <comment type="line">// if true, allocate A as iso</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ahandle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the header and the vector pointers</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>preexisting_header</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Ahandle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_new</name> <argument_list>(<argument><expr><name>Ahandle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>,
        <argument><expr><name>Ap_option</name></expr></argument>, <argument><expr><name>is_csc</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>hyper_switch</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory.</comment>
        <comment type="line">// If *Ahandle was non-NULL on input, it has not been freed.</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>preexisting_header</name> <operator>==</operator> <operator>(</operator><operator>*</operator><name>Ahandle</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Ahandle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the bitmap (A-&gt;b), indices (A-&gt;i), and values (A-&gt;x)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// set A-&gt;iso = A_iso   OK: burble in the caller</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_bix_alloc</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>nzmax</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>bitmap_calloc</name></expr></argument>, <argument><expr><name>numeric</name></expr></argument>, <argument><expr><name>A_iso</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// out of memory</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>preexisting_header</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// free the header *Ahandle itself unless it existed on input</comment>
            <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><name>Ahandle</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>*</operator><name>Ahandle</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
