<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_mxm.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mxm: matrix-matrix multiply for GrB_mxm, GrB_mxv, and GrB_vxm</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = accum (C,A*B) and variations.</comment>

<comment type="line">// This function is not user-callable.  It does the work for user-callable</comment>
<comment type="line">// functions GrB_mxm, GrB_mxv, and GrB_vxm.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>         \
<cpp:value>{                           \
    GB_Matrix_free (&amp;MT) ;  \
    GB_Matrix_free (&amp;T) ;   \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_accum_mask.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_mxm</name>                     <comment type="line">// C&lt;M&gt; = A*B</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_replace</name></decl></parameter>,           <comment type="line">// if true, clear C before writing to it</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_input</name></decl></parameter>,       <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,    <comment type="line">// defines '+' and '*' for C=A*B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_transpose</name></decl></parameter>,         <comment type="line">// if true, use A' instead of A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// input matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>B_transpose</name></decl></parameter>,         <comment type="line">// if true, use B' instead of B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,              <comment type="line">// if true, do z=fmult(b,a) vs fmult(a,b)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Value</name></type> <name>AxB_method</name></decl></parameter>,<comment type="line">// for auto vs user selection of methods</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>do_sort</name></decl></parameter>,              <comment type="line">// if nonzero, try to return C unjumbled</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <decl_stmt><decl><type><name>double</name></type> <name>ttt</name> <init>= <expr><call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C may be aliased with M, A, and/or B</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>MT_header</name></decl>, <decl><type ref="prev"/><name>T_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>MT</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY_OR_POSITIONAL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C input for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><name>M_input</name></expr></argument>, <argument><expr><literal type="string">"M for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><literal type="string">"accum for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_SEMIRING_OK</name> <argument_list>(<argument><expr><name>semiring</name></expr></argument>, <argument><expr><literal type="string">"semiring for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B for GB_mxm"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check domains and dimensions for C&lt;M&gt; = accum (C,T)</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>T_type</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name><operator>-&gt;</operator><name>op</name><operator>-&gt;</operator><name>ztype</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_compatible</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>M_input</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>T_type</name></expr></argument>,
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// T=A*B via semiring: A and B must be compatible with semiring-&gt;multiply</comment>
    <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// z=fmult(b,a), for entries a from A, and b from B</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_compatible</name> <argument_list>(<argument><expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>GB_ignore_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// z=fmult(a,b), for entries a from A, and b from B</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_compatible</name> <argument_list>(<argument><expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>GB_ignore_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check the dimensions</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ancols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bnrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>bncols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ancols</name> <operator>!=</operator> <name>bnrows</name> <operator>||</operator> <call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>anrows</name> <operator>||</operator> <call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>bncols</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DIMENSION_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Dimensions not compatible:\n"</literal>
            <literal type="string">"output is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"\n"</literal>
            <literal type="string">"first input is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"%s\n"</literal>
            <literal type="string">"second input is "</literal> <name>GBd</name> <literal type="string">"-by-"</literal> <name>GBd</name> <literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>anrows</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><ternary><condition><expr><name>A_transpose</name></expr> ?</condition><then> <expr><literal type="string">" (transposed)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name>bnrows</name></expr></argument>, <argument><expr><name>bncols</name></expr></argument>, <argument><expr><ternary><condition><expr><name>B_transpose</name></expr> ?</condition><then> <expr><literal type="string">" (transposed)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work and check for C&lt;!NULL&gt; mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><name>M_input</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING_OR_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Mask_struct</name> <operator>&amp;&amp;</operator> <call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// ignore the mask if all entries present and not complemented</comment>
        <expr_stmt><expr><name>M</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// quick return if a NULL mask is complemented</comment>
    <expr_stmt><expr><call><name>GB_RETURN_IF_QUICK_MASK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING_OR_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING_OR_ZOMBIES</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// T = A*B, A'*B, A*B', or A'*B', also using the mask if present</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If C is dense (with no pending work), and the accum is present, then</comment>
    <comment type="line">// C+=A*B can be done in-place (C_replace is effectively false).  If C is</comment>
    <comment type="line">// dense, M is present, and C_replace is false, then C&lt;M&gt;+=A*B or</comment>
    <comment type="line">// C&lt;!M&gt;+=A*B can also be done in-place.  In all of these cases, C remains</comment>
    <comment type="line">// dense with all entries present.  C can have any sparsity structure;</comment>
    <comment type="line">// its pattern is ignored.</comment>

    <comment type="line">// If C is bitmap, then it can always be be done in-place (assuming the</comment>
    <comment type="line">// type of C is OK).  The accum operator need not be present.  GB_AxB_meta</comment>
    <comment type="line">// can easily insert non-entries into C and check for non-entries, via the</comment>
    <comment type="line">// bitmap.</comment>

    <comment type="line">// To compute C in-place, its type must match the accum-&gt;ztype, or the</comment>
    <comment type="line">// semiring-&gt;add-&gt;ztype if accum is not present.  To compute in-place,</comment>
    <comment type="line">// C must also not be transposed, and it cannot be aliased with M, A, or B.</comment>

    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>MT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>MT_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<comment type="line">// for (int k = 0 ; k &lt; 40 ; k++) GB_Global_timing_clear (k) ;</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>mask_applied</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>done_in_place</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>M_transposed</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_AxB_meta</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></argument>, <argument><expr><name>MT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M_transposed</name></expr></argument>, <argument><expr><name>M</name></expr></argument>,
        <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>A_transpose</name></expr></argument>,
        <argument><expr><name>B_transpose</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mask_applied</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done_in_place</name></expr></argument>, <argument><expr><name>AxB_method</name></expr></argument>,
        <argument><expr><name>do_sort</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

<comment type="line">// for (int k = 0 ; k &lt; 40 ; k++)</comment>
<comment type="line">// {</comment>
<comment type="line">//      double t = GB_Global_timing_get (k) ;</comment>
<comment type="line">//      if (t &gt; 0) printf ("%2d: %g\n", k, t) ;</comment>
<comment type="line">// }</comment>

    <if_stmt><if>if <condition>(<expr><name>done_in_place</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C has been computed in-place; no more work to do</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C from GB_mxm (in-place)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
        <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T=A*B from GB_AxB_meta"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK_OR_NULL</name> <argument_list>(<argument><expr><ternary><condition><expr><name>M_transposed</name></expr> ?</condition><then> <expr><name>MT</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"MT from meta"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = accum (C,T): accumulate the results into C via the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>accum</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name><name>T</name><operator>-&gt;</operator><name>is_csc</name></name><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>M</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>mask_applied</name><operator>)</operator><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>C_replace</name> <operator>||</operator> <call><name>GB_NNZ_UPPER_BOUND</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C = 0 ; C = (ctype) T ; with the same CSR/CSC format.  The mask M</comment>
        <comment type="line">// (if any) has already been applied.  If C is also empty, or to be</comment>
        <comment type="line">// cleared anyway, and if accum is not present, then T can be</comment>
        <comment type="line">// transplanted directly into C, as C = (ctype) T, typecasting if</comment>
        <comment type="line">// needed.  If no typecasting is done then this takes no time at all</comment>
        <comment type="line">// and is a pure transplant.  Also conform C to its desired</comment>
        <comment type="line">// hypersparsity.</comment>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>MT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>T</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// T = A*B can be constructed with zombies, using the dot3 method.</comment>
            <comment type="line">// Since its type differs from C, its values will be typecasted</comment>
            <comment type="line">// from T-&gt;type to C-&gt;type.  The zombies are killed before</comment>
            <comment type="line">// typecasting.  Otherwise, if they were not killed, uninitialized</comment>
            <comment type="line">// values in T-&gt;x for these zombies will get typecasted into C-&gt;x.</comment>
            <comment type="line">// Typecasting a zombie is safe, since the values of all zombies</comment>
            <comment type="line">// are ignored.  But valgrind complains about it, so they are</comment>
            <comment type="line">// killed now.  Also see the discussion in GB_transplant.</comment>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(wait, so zombies are not typecasted) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_wait</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T"</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transplant_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// C may be returned with zombies and jumbled, but no pending tuples</comment>
        <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C from GB_mxm (transplanted)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_block</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// C&lt;M&gt; = accum (C,T)</comment>
        <comment type="line">// GB_accum_mask also conforms C to its desired hypersparsity.</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_accum_mask</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>M_transposed</name><operator>)</operator></expr> ?</condition><then> <expr><name>MT</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>,
            <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>MT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C may be returned jumbled, with zombies and pending tuples</comment>
            <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"Final C from GB_mxm (accum_mask)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_TIMING</name></cpp:ifdef>
    <expr_stmt><expr><name>ttt</name> <operator>=</operator> <call><name>omp_get_wtime</name> <argument_list>( )</argument_list></call> <operator>-</operator> <name>ttt</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_timing_add</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ttt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
