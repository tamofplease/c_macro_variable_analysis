<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_init.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_init: initialize GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GrB_init or GxB_init must called before any other GraphBLAS</comment>
<comment type="line">// operation; all three rely on this internal function.  If GraphBLAS is used</comment>
<comment type="line">// by multiple user threads, only one can call GrB_init or GxB_init.</comment>

<comment type="line">// Result are undefined if multiple user threads simultaneously call GrB_init</comment>
<comment type="line">// or GxB_init.</comment>

<comment type="line">// Per the spec, GrB_finalize must be called as the last GraphBLAS operation.</comment>
<comment type="line">// Not even GrB_Matrix_free can be safely called after GrB_finalize.  In the</comment>
<comment type="line">// current version of SuiteSparse:GraphBLAS, GrB_finalize does nothing, but in</comment>
<comment type="line">// future versions it may do critical work such as freeing a memory pool.</comment>

<comment type="line">// GrB_init or GxB_init define the mode that GraphBLAS will use:  blocking or</comment>
<comment type="line">// non-blocking.  With blocking mode, all operations finish before returning to</comment>
<comment type="line">// the user application.  With non-blocking mode, operations can be left</comment>
<comment type="line">// pending, and are computed only when needed.</comment>

<comment type="line">// GxB_init is the same as GrB_init except that it also defines the</comment>
<comment type="line">// malloc/realloc/free functions to use.</comment>

<comment type="line">// The realloc function pointer is optional and can be NULL.  If realloc is</comment>
<comment type="line">// NULL, it is not used, and malloc/memcpy/free are used instead.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_init</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_init</name>            <comment type="line">// start up GraphBLAS</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Mode</name></type> <name>mode</name></decl></parameter>,    <comment type="line">// blocking or non-blocking mode</comment>

    <comment type="line">// pointers to memory management functions.</comment>
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>malloc_function</name>  ) <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,          <comment type="line">// required</comment>
    <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type> (<modifier>*</modifier> <name>realloc_function</name> ) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,  <comment type="line">// optional, can be NULL</comment>
    <parameter><function_decl><type><name>void</name></type>   (<modifier>*</modifier> <name>free_function</name>    ) <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,          <comment type="line">// required</comment>

    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>      <comment type="line">// from GrB_init or GxB_init</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n==== GBCUDA_DEV enabled: for CUDA development only! ====\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><call><name>GB_Global_GrB_init_called_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// GrB_init can only be called once</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_Global_GrB_init_called_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>mode</name> <argument_list type="generic">&lt; <argument><expr><name>GrB_NONBLOCKING</name> <operator>||</operator> <name>mode</name></expr></argument> &gt;</argument_list></name> <name>GxB_BLOCKING_GPU</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// invalid mode</comment>
        <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// query hardware features for future use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_cpu_features_query</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// establish malloc/realloc/free</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// GrB_init passes in the ANSI C11 malloc/realloc/free</comment>

    <expr_stmt><expr><call><name>GB_Global_malloc_function_set</name>  <argument_list>(<argument><expr><name>malloc_function</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cannot be NULL</comment>
    <expr_stmt><expr><call><name>GB_Global_realloc_function_set</name> <argument_list>(<argument><expr><name>realloc_function</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// ok if NULL</comment>
    <expr_stmt><expr><call><name>GB_Global_free_function_set</name>    <argument_list>(<argument><expr><name>free_function</name></expr></argument>   )</argument_list></call></expr> ;</expr_stmt> <comment type="line">// cannot be NULL</comment>
    <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <comment type="line">// malloc must be thread-safe</comment>
    <expr_stmt><expr><call><name>GB_Global_memtable_clear</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_free_pool_init</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// max number of threads</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Maximum number of threads for internal parallelization.</comment>
    <comment type="line">// SuiteSparse:GraphBLAS requires OpenMP to use parallelization within</comment>
    <comment type="line">// calls to GraphBLAS.  The user application may also call GraphBLAS in</comment>
    <comment type="line">// parallel, from multiple user threads.  The user threads can use</comment>
    <comment type="line">// any threading library; this has no effect on GraphBLAS.</comment>

    <expr_stmt><expr><call><name>GB_Global_nthreads_max_set</name> <argument_list>(<argument><expr><call><name>GB_Global_omp_get_max_threads</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_chunk_set</name> <argument_list>(<argument><expr><name>GB_CHUNK_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize the blocking/nonblocking mode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// set the mode: blocking or nonblocking</comment>
    <expr_stmt><expr><call><name>GB_Global_mode_set</name> <argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set the global default format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// set the default hyper_switch and the default format (by-row);  any thread</comment>
    <comment type="line">// can do this later as well, so there is no race condition danger.</comment>

    <expr_stmt><expr><call><name>GB_Global_hyper_switch_set</name> <argument_list>(<argument><expr><name>GB_HYPER_SWITCH_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_bitmap_switch_default</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_is_csc_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initialize malloc tracking (testing and debugging only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_malloc_tracking_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_nmalloc_clear</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_debug_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_malloc_debug_count_set</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// diagnostic output</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_burble_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_printf_set</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_flush_set</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// development use only</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_timing_clear_all</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// CUDA initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>GBCUDA</name></expr></argument> )</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>GxB_BLOCKING_GPU</name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name>GxB_NONBLOCKING_GPU</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// initialize the GPUs</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_cuda_init</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{<block_content> 
        <comment type="line">// CUDA not available at compile-time, or not requested at run time</comment>
        <expr_stmt><expr><call><name>GB_Global_gpu_control_set</name> <argument_list>(<argument><expr><name>GxB_GPU_NEVER</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Global_gpu_count_set</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_Global_gpu_chunk_set</name> <argument_list>(<argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
