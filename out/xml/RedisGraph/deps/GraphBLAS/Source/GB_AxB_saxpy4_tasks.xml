<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_saxpy4_tasks.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_saxpy4_tasks: construct tasks for saxpy4 and bitmap_saxpy</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_AxB_saxpy4_tasks constructs the tasks for GB_AxB_saxpy4, and for</comment>
<comment type="line">// GB_AxB_bitmap_saxpy when A is sparse/hyper and B is bitmap/full.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_saxpy.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_AxB_saxpy4_tasks</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks to use</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nfine_tasks_per_vector</name></decl></parameter>,  <comment type="line">// # of tasks per vector (fine case only)</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_use_coarse_tasks</name></decl></parameter>,       <comment type="line">// if true, use coarse tasks</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_use_atomics</name></decl></parameter>,            <comment type="line">// if true, use atomics</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>anz</name></decl></parameter>,                    <comment type="line">// # of entries in A (sparse or hyper)</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>bnz</name></decl></parameter>,                    <comment type="line">// # of entries held in B</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>bvdim</name></decl></parameter>,                  <comment type="line">// # of vectors of B (bitmap or full)</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>cvlen</name></decl></parameter>,                  <comment type="line">// # of vectors of C (bitmap or full)</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the work to do</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>anz</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>bvdim</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nfine_tasks_per_vector</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntasks</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>use_coarse_tasks</name></decl>, <decl><type ref="prev"/><name>use_atomics</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>bvdim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// do the entire computation with a single thread, with coarse task</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>use_coarse_tasks</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(coarse, threads: 1) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nthreads</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>bvdim</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// all tasks are coarse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Each coarse task does 1 or more whole vectors of B</comment>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>bvdim</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>use_coarse_tasks</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(coarse, threads: %d, tasks %d) "</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// use fine tasks</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Each task does a slice of a single vector of B, and each vector of B</comment>
        <comment type="line">// is handled by the same # of fine tasks.  Determine if atomics are</comment>
        <comment type="line">// to be used or not.</comment>

        <expr_stmt><expr><name>use_coarse_tasks</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>cnz</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>cvlen</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>bvdim</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>intensity</name> <init>= <expr><name>work</name> <operator>/</operator> <call><name>fmax</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>workspace</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>cvlen</name><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nthreads</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>relwspace</name> <init>= <expr><name>workspace</name> <operator>/</operator> <call><name>fmax</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name>bnz</name> <operator>+</operator> <name>cnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(threads: %d, relwspace: %0.3g, intensity: %0.3g"</literal></expr></argument>,
            <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>relwspace</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>intensity</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>relwspace</name> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// fine non-atomic method with workspace</comment>
            <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">": fine non-atomic, "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// fine atomic method, with no workspace</comment>
            <expr_stmt><expr><name>use_atomics</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>nthreads</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">": fine atomic, "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>nfine_tasks_per_vector</name> <operator>=</operator> <call><name>ceil</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ntasks</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>bvdim</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <name>bvdim</name> <operator>*</operator> <name>nfine_tasks_per_vector</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nfine_tasks_per_vector</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"tasks: %d, tasks per vector: %d) "</literal></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>,
            <argument><expr><name>nfine_tasks_per_vector</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name><operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name><operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nfine_tasks_per_vector</name><operator>)</operator> <operator>=</operator> <name>nfine_tasks_per_vector</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_use_coarse_tasks</name><operator>)</operator> <operator>=</operator> <name>use_coarse_tasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_use_atomics</name><operator>)</operator> <operator>=</operator> <name>use_atomics</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
