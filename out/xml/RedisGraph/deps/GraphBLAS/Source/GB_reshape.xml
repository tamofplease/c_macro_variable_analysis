<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_reshape.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_reshape:  reshape a matrix into another matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If the input matrix is nrows-by-ncols, and the size of the newly-created</comment>
<comment type="line">// matrix C is nrows_new-by-ncols_new, then nrows*ncols must equal</comment>
<comment type="line">// nrows_new*ncols_new.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reshape.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (T_ek_slicing, int64_t) ;       \
    GB_FREE (&amp;I_work, I_work_size) ;            \
    GB_FREE (&amp;J_work, J_work_size) ;            \
    GB_FREE (&amp;S_work, S_work_size) ;            \
    if (T != A &amp;&amp; T != C)                       \
    {                                           \
        GB_Matrix_free (&amp;T) ;                   \
    }                                           \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    if (Chandle == NULL)                        \
    {                                           \
        GB_phybix_free (A) ;                    \
    }                                           \
    else                                        \
    {                                           \
        GB_Matrix_free (&amp;C) ;                   \
    }                                           \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_reshape</name>         <comment type="line">// reshape a GrB_Matrix into another GrB_Matrix</comment>
<parameter_list>(
    <comment type="line">// output, if not in-place:</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,    <comment type="line">// output matrix, in place if Chandle == NULL</comment>
    <comment type="line">// input, or input/output:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input matrix, or input/output if in-place</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>bool</name></type> <name>by_col</name></decl></parameter>,            <comment type="line">// true if reshape by column, false if by row</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nrows_new</name></decl></parameter>,      <comment type="line">// number of rows of C</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>ncols_new</name></decl></parameter>,      <comment type="line">// number of columns of C</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for reshape"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>I_work</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>S_work</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>S_input</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>I_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>J_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>S_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>T_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>in_place</name> <init>= <expr><operator>(</operator><name>Chandle</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_place</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>matrix_size</name></decl>, <decl><type ref="prev"/><name>s</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows_old</name> <init>= <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ncols_old</name> <init>= <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>matrix_size</name></expr></argument>, <argument><expr><name>nrows_old</name></expr></argument>, <argument><expr><name>ncols_old</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// problem too large</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>GB_int64_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>nrows_new</name></expr></argument>, <argument><expr><name>ncols_new</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name> <operator>||</operator> <name>s</name> <operator>!=</operator> <name>matrix_size</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// dimensions are invalid</comment>
        <return>return <expr><operator>(</operator><name>GrB_DIMENSION_MISMATCH</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finish any pending work, and transpose the input matrix if needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_csc</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_is_csc</name> <operator>!=</operator> <name>by_col</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// transpose the input matrix</comment>
        <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// transpose A in-place</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_in_place</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>by_col</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>T</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// T = A'</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>,  <comment type="line">// new header</comment>
                <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>by_col</name></expr></argument>, <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>,
                <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_cast</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>by_col</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// now T can be reshaped in-place to construct C</comment>
            <expr_stmt><expr><name>in_place</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// use T = A as-is, and reshape it either in-place or not in-place</comment>
        <expr_stmt><expr><name>T</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// T is now in the format required for the reshape</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="string">"T for reshape"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name>by_col</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the dimensions of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen_new</name></decl>, <decl><type ref="prev"/><name>vdim_new</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>T_is_csc</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>T_is_csc</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen_new</name> <operator>=</operator> <name>nrows_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim_new</name> <operator>=</operator> <name>ncols_new</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>vlen_new</name> <operator>=</operator> <name>ncols_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>vdim_new</name> <operator>=</operator> <name>nrows_new</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = reshape (T), keeping the same format (by_col)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// T and C are both full or both bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// move T into C</comment>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// copy T into C</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <comment type="line">// change the size of C</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>=</operator> <name>vlen_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>=</operator> <name>vdim_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>vdim_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>vlen_new</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vdim_new</name></expr></else></ternary></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sparse/hypersparse case</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>nvals</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Tp</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Th</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Ti</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>T_iso</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>tvlen</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>T_jumbled</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>jumbled</name></name></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>T_nthreads</name></decl>, <decl><type ref="prev"/><name>T_ntasks</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate output and workspace</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Remove T-&gt;i and T-&gt;x from T; these become I_work and S_work</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// remove T-&gt;i from T; it becomes I_work</comment>
            <expr_stmt><expr><name>I_work</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>I_work_size</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>i_size</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr>   ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <comment type="line">// remove T-&gt;x from T; it becomes S_work</comment>
            <expr_stmt><expr><name>S_work</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt> <expr_stmt><expr><name>S_work_size</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>x_size</name></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr>   ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>S_input</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

            <comment type="line">// move T into C</comment>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>T</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// create a new matrix C for GB_builder and allocate I_work</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// create the output matrix (just the header; no content)</comment>
            <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// new header</comment>
                <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vlen_new</name></expr></argument>, <argument><expr><name>vdim_new</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>T_is_csc</name></expr></argument>,
                <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>, <argument><expr><call><name>GB_Global_hyper_switch_get</name> <argument_list>( )</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// allocate new space for the future C-&gt;i</comment>
            <expr_stmt><expr><name>I_work</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>I_work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// use T-&gt;x as S_input to GB_builder, which is not modified</comment>
            <expr_stmt><expr><name>S_input</name> <operator>=</operator> <name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// J_work is not needed if vdim_new == 1</comment>
            <expr_stmt><expr><name>J_work</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>J_work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// out of memory</comment>
                <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// construct the new indices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>vdim_new</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is a single vector: no J_work is needed, and new index is 1D</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>T_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>T_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Tslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Tslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jold</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Th</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pT_start</name></decl>, <decl><type ref="prev"/><name>pT_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pT_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pT_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                        <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Tslice</name></expr></argument>, <argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>tvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pT_start</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pT_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iold</name> <init>= <expr><name><name>Ti</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// convert (iold,jold) to a 1D index</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>index_1d</name> <init>= <expr><name>iold</name> <operator>+</operator> <name>jold</name> <operator>*</operator> <name>tvlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// save the new 1D index</comment>
                        <expr_stmt><expr><name><name>I_work</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>index_1d</name></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C is a matrix</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>T_nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
            <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>T_ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><name><name>kfirst_Tslice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name>  <init>= <expr><name><name>klast_Tslice</name>  <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name>kfirst</name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>klast</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>jold</name> <init>= <expr><call><name>GBH</name> <argument_list>(<argument><expr><name>Th</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>pT_start</name></decl>, <decl><type ref="prev"/><name>pT_end</name></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>GB_get_pA</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>pT_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pT_end</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>k</name></expr></argument>,
                        <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>klast</name></expr></argument>, <argument><expr><name>pstart_Tslice</name></expr></argument>, <argument><expr><name>Tp</name></expr></argument>, <argument><expr><name>tvlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>pT_start</name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pT_end</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>iold</name> <init>= <expr><name><name>Ti</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// convert (iold,jold) to a 1D index</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>index_1d</name> <init>= <expr><name>iold</name> <operator>+</operator> <name>jold</name> <operator>*</operator> <name>tvlen</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// convert the 1D index to the 2d index: (inew,jnew)</comment>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>inew</name> <init>= <expr><name>index_1d</name> <operator>%</operator> <name>vlen_new</name></expr></init></decl> ;</decl_stmt>
                        <decl_stmt><decl><type><name>int64_t</name></type> <name>jnew</name> <init>= <expr><operator>(</operator><name>index_1d</name> <operator>-</operator> <name>inew</name><operator>)</operator> <operator>/</operator> <name>vlen_new</name></expr></init></decl> ;</decl_stmt>
                        <comment type="line">// save the new indices</comment>
                        <expr_stmt><expr><name><name>I_work</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>inew</name></expr> ;</expr_stmt>
                        <expr_stmt><expr><name><name>J_work</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>jnew</name></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// free the old C-&gt;p and C-&gt;h, if constructing C in place</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>in_place</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// build the output matrix C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_builder</name> <argument_list>(
            <argument><expr><name>C</name></expr></argument>,              <comment type="line">// output matrix</comment>
            <argument><expr><name>type</name></expr></argument>,           <comment type="line">// same type as T</comment>
            <argument><expr><name>vlen_new</name></expr></argument>,       <comment type="line">// new vlen</comment>
            <argument><expr><name>vdim_new</name></expr></argument>,       <comment type="line">// new vdim</comment>
            <argument><expr><name>T_is_csc</name></expr></argument>,       <comment type="line">// same format as T</comment>
            <argument><expr><operator>&amp;</operator><name>I_work</name></expr></argument>,        <comment type="line">// transplanted into C-&gt;i</comment>
            <argument><expr><operator>&amp;</operator><name>I_work_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>J_work</name></expr></argument>,        <comment type="line">// freed when done</comment>
            <argument><expr><operator>&amp;</operator><name>J_work_size</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>S_work</name></expr></argument>,        <comment type="line">// array of values; transplanted into C-&gt;x in-place</comment>
            <argument><expr><operator>&amp;</operator><name>S_work_size</name></expr></argument>,
            <argument><expr><operator>!</operator><name>T_jumbled</name></expr></argument>,     <comment type="line">// indices may be jumbled on input</comment>
            <argument><expr><name>true</name></expr></argument>,           <comment type="line">// no duplicates exist</comment>
            <argument><expr><name>nvals</name></expr></argument>,          <comment type="line">// number of entries in T and C </comment>
            <argument><expr><name>true</name></expr></argument>,           <comment type="line">// C is a matrix</comment>
            <argument><expr><name>NULL</name></expr></argument>,           <comment type="line">// I_input is not used</comment>
            <argument><expr><name>NULL</name></expr></argument>,           <comment type="line">// J_input is not used</comment>
            <argument><expr><name>S_input</name></expr></argument>,        <comment type="line">// S_input is used if not in-place; NULL if in-place</comment>
            <argument><expr><name>T_iso</name></expr></argument>,          <comment type="line">// true if T and C are iso-valued</comment>
            <argument><expr><name>nvals</name></expr></argument>,          <comment type="line">// number of entries in T and C </comment>
            <argument><expr><name>NULL</name></expr></argument>,           <comment type="line">// no dup operator</comment>
            <argument><expr><name>type</name></expr></argument>,           <comment type="line">// type of S_work and S_input</comment>
            <argument><expr><name>true</name></expr></argument>,           <comment type="line">// burble is allowed</comment>
            <argument><expr><name>Context</name></expr></argument>
        )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// transplanted into C-&gt;i</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>J_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// freed by GB_builder</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>S_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// freed by GB_builder</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// transpose C if needed, to change its format to match the format of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for reshape before transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name>T_is_csc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_is_csc</name> <operator>!=</operator> <name>T_is_csc</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_transpose_in_place</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A_is_csc</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace, conform C, and return results</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_conform</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C result for reshape"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Chandle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
