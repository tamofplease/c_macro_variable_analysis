<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_hyper_hash_build.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_hyper_hash_build: construct A-&gt;Y for a hypersparse matrix A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>               \
<cpp:value>{                                       \
    GB_FREE (&amp;I_work, I_work_size) ;    \
    GB_FREE (&amp;J_work, J_work_size) ;    \
    GB_FREE (&amp;X_work, X_work_size) ;    \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                     \
<cpp:value>{                                       \
    GB_FREE_WORKSPACE ;                 \
    GB_phybix_free (A) ;                \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_hash.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_hyper_hash_build</name>    <comment type="line">// construct A-&gt;Y if not already constructed</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>GB_NEED_HYPER_HASH</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// quick return: A is NULL, not hypersparse, or A-&gt;Y already computed</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>I_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>J_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>J_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>X_work</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>X_work_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for hyper_hash"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(build hyper hash) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate A-&gt;Y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// A-&gt;Y is (A-&gt;vdim)-by-(hash table size for A-&gt;h), with one vector per</comment>
    <comment type="line">// hash bucket.</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <comment type="line">// this ensures a load factor of 0.5 to 1:</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>yvdim</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><call><name>GB_FLOOR_LOG2</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <comment type="line">// divide by 4 to get a load factor of 2 to 4:</comment>
    <expr_stmt><expr><name>yvdim</name> <operator>=</operator> <name>yvdim</name> <operator>/</operator> <literal type="number">4</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>yvdim</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>yvdim</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>yvlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>hash_bits</name> <init>= <expr><operator>(</operator><name>yvdim</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>   <comment type="line">// yvdim is always a power of 2</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Y</name></name><operator>)</operator></expr></argument>, <comment type="line">// new dynamic header, do not allocate any content</comment>
        <argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>yvlen</name></expr></argument>, <argument><expr><name>yvdim</name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>,
        <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Y</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the tuples for A-&gt;Y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>I_work</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>J_work</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>X_work</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X_work_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>I_work</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>J_work</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X_work</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>k</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>anvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>I_work</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>J_work</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>GB_HASHF2</name> <argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>hash_bits</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// in range 0 to yvdim-1</comment>
        <expr_stmt><expr><name><name>X_work</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>k</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build A-&gt;Y, initially hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_builder</name> <argument_list>(
        <argument><expr><name>Y</name></expr></argument>,                      <comment type="line">// create Y using a dynamic header</comment>
        <argument><expr><name>GrB_UINT64</name></expr></argument>,             <comment type="line">// Y-&gt;type</comment>
        <argument><expr><name>yvlen</name></expr></argument>,                  <comment type="line">// Y-&gt;vlen</comment>
        <argument><expr><name>yvdim</name></expr></argument>,                  <comment type="line">// Y-&gt;vdim</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// Y-&gt;is_csc</comment>
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>I_work</name></expr></argument>,   <comment type="line">// row indices</comment>
        <argument><expr><operator>&amp;</operator><name>I_work_size</name></expr></argument>,
        <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>J_work</name></expr></argument>,   <comment type="line">// column indices</comment>
        <argument><expr><operator>&amp;</operator><name>J_work_size</name></expr></argument>,
        <argument><expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>X_work</name></expr></argument>,   <comment type="line">// values</comment>
        <argument><expr><operator>&amp;</operator><name>X_work_size</name></expr></argument>,
        <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// tuples need to be sorted</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// no duplicates</comment>
        <argument><expr><name>anvec</name></expr></argument>,                  <comment type="line">// size of I_work and J_work in # of tuples</comment>
        <argument><expr><name>true</name></expr></argument>,                   <comment type="line">// is_matrix: unused</comment>
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,             <comment type="line">// original I,J tuples</comment>
        <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no scalar iso value</comment>
        <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// Y is never iso</comment>
        <argument><expr><name>anvec</name></expr></argument>,                  <comment type="line">// # of tuples</comment>
        <argument><expr><name>NULL</name></expr></argument>,                   <comment type="line">// no duplicates, so dup is NUL</comment>
        <argument><expr><name>GrB_UINT64</name></expr></argument>,             <comment type="line">// the type of X_work</comment>
        <argument><expr><name>false</name></expr></argument>,                  <comment type="line">// no burble (already burbled above)</comment>
        <argument><expr><name>Context</name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>Y</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>              <comment type="line">// never make Y hypersparse</comment>
    <expr_stmt><expr><name><name>Y</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>  <comment type="line">// Y is always sparse CSC</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// Y is currently hypersparse</comment>

    <comment type="line">// workspace has been freed by GB_builder, or transplanted in to Y</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>J_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>X_work</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert A-&gt;Y to sparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// GB_builder always constructs its matrix as hypersparse.  Y is now</comment>
    <comment type="line">// conformed to its required sparsity format: always sparse.  No burble;</comment>
    <comment type="line">// (already burbled above).</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_convert_hyper_to_sparse</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anvec</name> <operator>==</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <comment type="line">// Y is now sparse and will remain so</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A from hyper_hash"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
