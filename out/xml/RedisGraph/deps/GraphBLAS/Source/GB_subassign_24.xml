<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_subassign_24.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_subassign_24: make a deep copy of a sparse or dense matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = A, making a deep copy into an existing non-shallow matrix C, but</comment>
<comment type="line">// possibly reusing parts of C if C is dense.  See also GB_dup.</comment>
<comment type="line">// C can have any sparsity structure on input.  C takes on the same sparsity</comment>
<comment type="line">// structure as A.</comment>

<comment type="line">// Handles arbitrary typecasting.</comment>

<comment type="line">// if C sparse and A dense/full, C is converted to full, ignoring</comment>
<comment type="line">// C-&gt;sparsity_control.  C is conformed to its desired sparsity structure later.</comment>

<comment type="line">// A can be jumbled, in which case C is also jumbled.</comment>
<comment type="line">// A can have any sparsity structure (sparse, hyper, bitmap, or full).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_Pending.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_subassign_24</name>    <comment type="line">// C = A, copy A into an existing matrix C</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,           <comment type="line">// output matrix to modify</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input matrix to copy</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==A</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for GB_subassign_24"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for GB_subassign_24"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// delete any lingering zombies and assemble any pending tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_MATRIX_WAIT_IF_PENDING_OR_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>        <comment type="line">// prior contents of C are discarded</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt> <comment type="line">// C is iso if A is iso</comment>

    <comment type="line">// save the sparsity control of C</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>C_sparsity_control</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>C_hyper_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>C_bitmap_switch</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>copy_dense_A_to_C</name> <init>=            <comment type="line">// copy from dense A to dense C if:</comment>
        <expr><operator>(</operator>
            <call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call>             <comment type="line">// both A and C are dense</comment>
            <operator>&amp;&amp;</operator> <call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call>
            <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name><operator>)</operator>            <comment type="line">// A cannot be jumbled</comment>
            <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name>       <comment type="line">// A and C have the same size</comment>
            <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>vlen</name></name>
            <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name>   <comment type="line">// A and C have the same format</comment>
            <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name>             <comment type="line">// C-&gt;x exists</comment>
        <operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>copy_dense_A_to_C</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// discard the pattern of C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// make C full, if not full already</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>                   <comment type="line">// overwrite any zombies</comment>
        <expr_stmt><expr><call><name>GB_Pending_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>Pending</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// abandon all pending tuples</comment>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>C_iso</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_convert_any_to_full</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// ensure C is full</comment>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// copy the pattern from A to C</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// clear prior content of C, but keep the CSR/CSC format and its type</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>C_is_csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// copy the pattern, not the values</comment>
        <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>C_is_csc</name></expr> ;</expr_stmt>      <comment type="line">// do not change the CSR/CSC format of C</comment>
        <comment type="line">// GB_assign_prep has assigned the C-&gt;x iso value, but this has just</comment>
        <comment type="line">// been cleared, so it needs to be reassigned below by GB_cast_matrix.</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// copy the values from A to C, typecasting as needed</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(typecast) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GB_cast_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// restore the sparsity control of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <name>C_sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name> <operator>=</operator> <name>C_hyper_switch</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>bitmap_switch</name></name> <operator>=</operator> <name>C_bitmap_switch</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C result for GB_subassign_24"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
