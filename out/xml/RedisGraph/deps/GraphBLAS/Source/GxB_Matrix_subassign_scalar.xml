<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_subassign_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_subassign_[SCALAR]: assign to submatrix, via scalar expansion</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Assigns a single scalar to a submatrix:</comment>

<comment type="line">// C(Rows,Cols)&lt;M&gt; = accum(C(Rows,Cols),x)</comment>

<comment type="line">// The scalar x is implicitly expanded into a matrix A of size nRows-by-nCols,</comment>
<comment type="line">// with each entry in A equal to x.</comment>

<comment type="line">// Compare with GrB_Matrix_assign_scalar,</comment>
<comment type="line">// which uses M and C_Replace differently.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ASSIGN_SCALAR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>,<parameter><type><name>ampersand</name></type></parameter>)</parameter_list></cpp:macro>                                     \
<cpp:value>GrB_Info GB_EVAL2 (GXB (Matrix_subassign_), T) <comment type="block">/* C(Rows,Cols)&lt;M&gt; += x      */</comment> \
(                                                                              \
    GrB_Matrix C,                   <comment type="block">/* input/output matrix for results      */</comment> \
    const GrB_Matrix M,             <comment type="block">/* optional mask for C(Rows,Cols)       */</comment> \
    const GrB_BinaryOp accum,       <comment type="block">/* accum for Z=accum(C(Rows,Cols),x)    */</comment> \
    type x,                         <comment type="block">/* scalar to assign to C(Rows,Cols)     */</comment> \
    const GrB_Index *Rows,          <comment type="block">/* row indices                          */</comment> \
    GrB_Index nRows,                <comment type="block">/* number of row indices                */</comment> \
    const GrB_Index *Cols,          <comment type="block">/* column indices                       */</comment> \
    GrB_Index nCols,                <comment type="block">/* number of column indices             */</comment> \
    const GrB_Descriptor desc       <comment type="block">/* descriptor for C(Rows,Cols) and M */</comment>    \
)                                                                              \
{                                                                              \
    GB_WHERE (C, "GxB_Matrix_subassign_" GB_STR(T)                             \
        " (C, M, accum, x, Rows, nRows, Cols, nCols, desc)") ;                 \
    GB_BURBLE_START ("GxB_Matrix_subassign " GB_STR(T)) ;                      \
    GB_RETURN_IF_NULL_OR_FAULTY (C) ;                                          \
    GB_RETURN_IF_FAULTY (M) ;                                                  \
    GrB_Info info = GB_subassign_scalar (C, M, accum, ampersand x,             \
        GB_## T ## _code, Rows, nRows, Cols, nCols, desc, Context) ;           \
    GB_BURBLE_END ;                                                            \
    return (info) ;                                                            \
}</cpp:value></cpp:define>

<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>bool</argument>      , <argument>BOOL</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>int8_t</argument>    , <argument>INT8</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>uint8_t</argument>   , <argument>UINT8</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>int16_t</argument>   , <argument>INT16</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>uint16_t</argument>  , <argument>UINT16</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>int32_t</argument>   , <argument>INT32</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>uint32_t</argument>  , <argument>UINT32</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>int64_t</argument>   , <argument>INT64</argument>  , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>uint64_t</argument>  , <argument>UINT64</argument> , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>float</argument>     , <argument>FP32</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>double</argument>    , <argument>FP64</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>GxB_FC32_t</argument>, <argument>FC32</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>GxB_FC64_t</argument>, <argument>FC64</argument>   , <argument>&amp;</argument>)</argument_list></macro>
<macro><name>GB_ASSIGN_SCALAR</name> <argument_list>(<argument>void *</argument>    , <argument>UDT</argument>    ,  )</argument_list></macro>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_subassign_Scalar: subassign a GrB_Scalar to a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If the GrB_Scalar s is non-empty, then this is the same as the non-opapue</comment>
<comment type="line">// scalar subassignment above.</comment>

<comment type="line">// If the GrB_Scalar s is empty of type stype, then this is identical to:</comment>
<comment type="line">//  GrB_Matrix_new (&amp;S, stype, nRows, nCols) ;</comment>
<comment type="line">//  GxB_Matrix_subassign (C, M, accum, S, Rows, nRows, Cols, nCols, desc) ;</comment>
<comment type="line">//  GrB_Matrix_free (&amp;S) ;</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>GB_Matrix_free (&amp;S) ;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_static_header.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>GxB_Matrix_subassign_Scalar</name>   <comment type="line">// C(I,J)&lt;M&gt; = accum (C(I,J),s)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C(I,J),x)</comment>
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,              <comment type="line">// scalar to assign to C(I,J)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,             <comment type="line">// row indices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>ni</name></decl></parameter>,                   <comment type="line">// number of row indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,             <comment type="line">// column indices</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nj</name></decl></parameter>,                   <comment type="line">// number of column indices</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for C and Mask</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>S</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GxB_Matrix_subassign_Scalar"</literal>
        <literal type="string">" (C, M, accum, s, Rows, nRows, Cols, nCols, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_subassign"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor</comment>
    <expr_stmt><expr><call><name>GB_GET_DESCRIPTOR</name> <argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,
        <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>xx3</name></expr></argument>, <argument><expr><name>xx7</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the mask</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>GB_get_mask</name> <argument_list>(<argument><expr><name>M_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mask_struct</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C(Rows,Cols)&lt;M&gt; = accum (C(Rows,Cols), scalar)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>Mask_comp</name> <operator>&amp;&amp;</operator> <name>ni</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nj</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>C_replace</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar assignment</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>row</name> <init>= <expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>col</name> <init>= <expr><name><name>J</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// set the element: C(row,col) += scalar or C(row,col) = scalar</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_setElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,
                <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>accum</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// delete the C(row,col) element</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the opaque GrB_Scalar has a single entry</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// This is identical to non-opaque scalar subassignment</comment>

        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_subassign</name> <argument_list>(
            <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,               <comment type="line">// C matrix and its descriptor</comment>
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,  <comment type="line">// mask matrix and its descriptor</comment>
            <argument><expr><name>false</name></expr></argument>,                      <comment type="line">// do not transpose the mask</comment>
            <argument><expr><name>accum</name></expr></argument>,                      <comment type="line">// for accum (C(Rows,Cols),scalar)</comment>
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,                <comment type="line">// no explicit matrix A</comment>
            <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>,                      <comment type="line">// row indices</comment>
            <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>,                      <comment type="line">// column indices</comment>
            <argument><expr><name>true</name></expr></argument>,                       <comment type="line">// do scalar expansion</comment>
            <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>,                  <comment type="line">// scalar to assign, expands to become A</comment>
            <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,         <comment type="line">// type code of scalar to expand</comment>
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// the opaque GrB_Scalar has no entry</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// determine the properites of the I and J index lists</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nRows</name></decl>, <decl><type ref="prev"/><name>nCols</name></decl>, <decl><type ref="prev"/><name><name>RowColon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ColColon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>RowsKind</name></decl>, <decl><type ref="prev"/><name>ColsKind</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>RowsKind</name></expr></argument>, <argument><expr><name>RowColon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>nCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ColsKind</name></expr></argument>, <argument><expr><name>ColColon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create an empty matrix S of the right size, and use matrix assign</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>S_header</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_CLEAR_STATIC_HEADER</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><ternary><condition><expr><name>is_csc</name></expr> ?</condition><then> <expr><name>nRows</name></expr> </then><else>: <expr><name>nCols</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>vdim</name> <init>= <expr><ternary><condition><expr><name>is_csc</name></expr> ?</condition><then> <expr><name>nCols</name></expr> </then><else>: <expr><name>nRows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <comment type="line">// existing header</comment>
            <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>vdim</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>, <argument><expr><name>is_csc</name></expr></argument>, <argument><expr><name>GxB_AUTO_SPARSITY</name></expr></argument>,
            <argument><expr><name>GB_HYPER_SWITCH_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_subassign</name> <argument_list>(
            <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_replace</name></expr></argument>,                   <comment type="line">// C matrix and its descriptor</comment>
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>,      <comment type="line">// mask matrix and its descriptor</comment>
            <argument><expr><name>false</name></expr></argument>,                          <comment type="line">// do not transpose the mask</comment>
            <argument><expr><name>accum</name></expr></argument>,                          <comment type="line">// for accum (C(Rows,Cols),A)</comment>
            <argument><expr><name>S</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,                       <comment type="line">// S matrix and its descriptor</comment>
            <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>,                          <comment type="line">// row indices</comment>
            <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>,                          <comment type="line">// column indices</comment>
            <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GB_ignore_code</name></expr></argument>,    <comment type="line">// no scalar expansion</comment>
            <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
