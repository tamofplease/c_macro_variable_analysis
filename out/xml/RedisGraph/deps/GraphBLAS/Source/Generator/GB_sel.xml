<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generator/GB_sel.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sel:  hard-coded functions for selection operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated1/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sel__include.h"</cpp:file></cpp:include>

<comment type="line">// The selection is defined by the following types and operators:</comment>

<comment type="line">// functions:</comment>
<comment type="line">// phase1: GB (_sel_phase1)</comment>
<comment type="line">// phase2: GB (_sel_phase2)</comment>
<comment type="line">// bitmap: GB (_sel_bitmap)</comment>

<comment type="line">// A type: GB_atype</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_SELECT</name></cpp:macro> \
    <cpp:value>GB_iso_select</cpp:value></cpp:define>

<comment type="line">// kind</comment>
<function><type><name>GB_kind</name>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>GB_atype</cpp:value></cpp:define>

<comment type="line">// test value of Ax [p]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TEST_VALUE_OF_ENTRY</name><parameter_list>(<parameter><type><name>keep</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                  \
    <cpp:value>GB_test_value_of_entry</cpp:value></cpp:define>

<comment type="line">// Cx [pC] = Ax [pA], no typecast</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SELECT_ENTRY</name><parameter_list>(<parameter><type><name>Cx</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                    \
    <cpp:value>GB_select_entry</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sel_phase1</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<name>if_phase1</name>

<name>void</name> <name>GB</name></type> (<name>_sel_phase1</name>)
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Zp</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wfirst</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wlast</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipij</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ithunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_atype</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>athunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ythunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><name>GB_get_thunk</name>
    <name>GB_get_zxtypes</name>
    <name>GB_setup</name></expr></expr_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select_phase1.c"</cpp:file></cpp:include>
</block_content>}</block></function>

<function><type><name>endif_phase1</name>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sel_phase2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<name>if_phase2</name>

<name>void</name> <name>GB</name></type> (<name>_sel_phase2</name>)
<parameter_list>(
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ci</name></decl></parameter>,
    <parameter><decl><type><name>GB_atype</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Zp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp_kfirst</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipij</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ithunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_atype</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>athunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ythunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><name>GB_get_thunk</name>
    <name>GB_get_zxtypes</name>
    <name>GB_setup</name></expr></expr_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_select_phase2.c"</cpp:file></cpp:include>
</block_content>}</block></function>

<function><type><name>endif_phase2</name>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_sel_bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<name>if_bitmap</name>

<name>void</name> <name>GB</name></type> (<name>_sel_bitmap</name>)
<parameter_list>(
    <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>Cb</name></decl></parameter>,
    <parameter><decl><type><name>GB_atype</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>cnvals_handle</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipij</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ithunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_atype</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>athunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ythunk</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><name>GB_get_thunk</name>
    <name>GB_get_zxtypes</name>
    <name>GB_setup</name></expr></expr_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_select_template.c"</cpp:file></cpp:include>
</block_content>}</block></function>

<expr><name>endif_bitmap</name></expr>
</unit>
