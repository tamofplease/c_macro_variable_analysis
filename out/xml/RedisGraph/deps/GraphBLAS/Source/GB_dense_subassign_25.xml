<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_dense_subassign_25.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_dense_subassign_25: C(:,:)&lt;M,s&gt; = A; C empty, A dense, M structural</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Method 25: C(:,:)&lt;M,s&gt; = A ; C is empty, M structural, A bitmap/as-if-full</comment>

<comment type="line">// M:           present</comment>
<comment type="line">// Mask_comp:   false</comment>
<comment type="line">// Mask_struct: true</comment>
<comment type="line">// C_replace:   effectively false (not relevant since C is empty)</comment>
<comment type="line">// accum:       NULL</comment>
<comment type="line">// A:           matrix</comment>
<comment type="line">// S:           none</comment>

<comment type="line">// C and M are sparse or hypersparse.  A can have any sparsity structure, even</comment>
<comment type="line">// bitmap, but it must either be bitmap, or as-if-full.  M may be jumbled.  If</comment>
<comment type="line">// so, C is constructed as jumbled.  C is reconstructed with the same structure</comment>
<comment type="line">// as M and can have any sparsity structure on input.  The only constraint on C</comment>
<comment type="line">// is nnz(C) is zero on input.</comment>

<comment type="line">// C is iso if A is iso</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subassign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_type__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_dense_subassign_25</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==M</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <comment type="line">// NO ALIAS of C==A</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for subassign method_25"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for subassign method_25"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A for subassign method_25"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>       <comment type="line">// C is iso if A is iso</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Method 25: C(:,:)&lt;M&gt; = A ; C is empty, A is dense, M is structural</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Time: Optimal:  the method must iterate over all entries in M,</comment>
    <comment type="line">// and the time is O(nnz(M)).  This is also the size of C.</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// Parallel: slice M into equal-sized chunks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the entries for each task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>M_nthreads</name></decl>, <decl><type ref="prev"/><name>M_ntasks</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_SLICE_MATRIX</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate C and create its pattern</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// clear prior content and then create a copy of the pattern of M.  Keep</comment>
    <comment type="line">// the same type and CSR/CSC for C.  Allocate the values of C but do not</comment>
    <comment type="line">// initialize them.</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_csc</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_phybix_free</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_dup_worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>=</operator> <name>C_is_csc</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = A for built-in types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is iso; assign the iso value and assign zombies if A is bitmap</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_ASSIGN</name></cpp:macro></cpp:define>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_25_template.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C is non-iso; assign values and pattern from A, through the mask</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// define the worker for the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_Cdense_25</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GB (_Cdense_25_ ## cname)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>cname</name></type></parameter>)</parameter_list></cpp:macro>                                          \
            <cpp:value>{                                                                 \
                info = GB_Cdense_25(cname) (C, M, A,                          \
                    M_ek_slicing, M_ntasks, M_nthreads) ;                     \
                done = (info != GrB_NO_VALUE) ;                               \
            }                                                                 \
            break ;</cpp:value></cpp:define>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// launch the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;&amp;</operator> <name>ccode</name> <operator>&lt;</operator> <name>GB_UDT_code</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// FUTURE: use cases 1,2,4,8,16</comment>
                <comment type="line">// C&lt;M&gt; = A</comment>
                <switch>switch <condition>(<expr><name>ccode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_bool</argument>  )</argument_list></macro>
                    <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int8</argument>  )</argument_list></macro>
                    <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int16</argument> )</argument_list></macro>
                    <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int32</argument> )</argument_list></macro>
                    <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_int64</argument> )</argument_list></macro>
                    <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint8</argument> )</argument_list></macro>
                    <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint16</argument>)</argument_list></macro>
                    <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint32</argument>)</argument_list></macro>
                    <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_uint64</argument>)</argument_list></macro>
                    <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fp32</argument>  )</argument_list></macro>
                    <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fp64</argument>  )</argument_list></macro>
                    <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fc32</argument>  )</argument_list></macro>
                    <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <macro><name>GB_WORKER</name> <argument_list>(<argument>_fc64</argument>  )</argument_list></macro>
                    <default>default:</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C&lt;M&gt; = A for user-defined types, and typecasting</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//-----------------------------------------------------------------</comment>
            <comment type="line">// get operators, functions, workspace, contents of A and C</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic C(:,:)&lt;M,struct&gt;=A assign, "</literal>
                <literal type="string">"method 25) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_C</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>ccode</name></expr></argument>, <argument><expr><name>acode</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">// Cx [pC] = (ctype) Ax [pA]</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_A_TO_C</name><parameter_list>(<parameter><type><name>Cx</name></type></parameter>,<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro> \
                <cpp:value>cast_A_to_C (Cx+((pC)*csize), Ax+(A_iso?0:(pA)*asize), asize)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>

            <comment type="line">// no vectorization</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_25_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output for subassign method_25"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
