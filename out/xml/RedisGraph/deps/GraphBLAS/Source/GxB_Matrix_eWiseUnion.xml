<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Matrix_eWiseUnion.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_eWiseUnion: matrix element-wise operations, set union</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C&lt;M&gt; = accum (C,A+B) and variations.</comment>

<comment type="line">// if A(i,j) and B(i,j) both appear:</comment>
<comment type="line">//      C(i,j) = add (A(i,j), B(i,j))</comment>
<comment type="line">// else if A(i,j) appears but B(i,j) does not:</comment>
<comment type="line">//      C(i,j) = add (A(i,j), beta)</comment>
<comment type="line">// else if A(i,j) does not appear but B(i,j) does:</comment>
<comment type="line">//      C(i,j) = add (alpha, B(i,j))</comment>

<comment type="line">// by contrast, GrB_eWiseAdd does the following:</comment>

<comment type="line">// if A(i,j) and B(i,j) both appear:</comment>
<comment type="line">//      C(i,j) = add (A(i,j), B(i,j))</comment>
<comment type="line">// else if A(i,j) appears but B(i,j) does not:</comment>
<comment type="line">//      C(i,j) = A(i,j)</comment>
<comment type="line">// else if A(i,j) does not appear but B(i,j) does:</comment>
<comment type="line">//      C(i,j) = B(i,j)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ewise.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_get_mask.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EWISE</name><parameter_list>(<parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro>                                                        \
    <comment type="block">/* check inputs */</comment>                                                      \
    <cpp:value>GB_RETURN_IF_NULL_OR_FAULTY (C) ;                                       \
    GB_RETURN_IF_NULL_OR_FAULTY (A) ;                                       \
    GB_RETURN_IF_NULL_OR_FAULTY (B) ;                                       \
    GB_RETURN_IF_FAULTY (M_in) ;                                            \
    <comment type="block">/* get the descriptor */</comment>                                                \
    GB_GET_DESCRIPTOR (info, desc, C_replace, Mask_comp, Mask_struct,       \
        A_tran, B_tran, xx, xx7) ;                                          \
    <comment type="block">/* get the mask */</comment>                                                      \
    GrB_Matrix M = GB_get_mask (M_in, &amp;Mask_comp, &amp;Mask_struct) ;           \
    <comment type="block">/* C&lt;M&gt; = accum (C,T) where T = A+B, A'+B, A+B', or A'+B' */</comment>            \
    info = GB_ewise (                                                       \
        C,              C_replace,  <comment type="block">/* C and its descriptor        */</comment>       \
        M, Mask_comp, Mask_struct,  <comment type="block">/* mask and its descriptor     */</comment>       \
        accum,                      <comment type="block">/* accumulate operator         */</comment>       \
        op,                         <comment type="block">/* operator that defines '+'   */</comment>       \
        A,              A_tran,     <comment type="block">/* A matrix and its descriptor */</comment>       \
        B,              B_tran,     <comment type="block">/* B matrix and its descriptor */</comment>       \
        true,                       <comment type="block">/* eWiseAdd                    */</comment>       \
        true, alpha, beta,          <comment type="block">/* eWiseUnion                  */</comment>       \
        Context) ;</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Matrix_eWiseUnion: matrix addition</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GxB_Matrix_eWiseUnion</name>      <comment type="line">// C&lt;M&gt; = accum (C, A+B)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                   <comment type="line">// input/output matrix for results</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M_in</name></decl></parameter>,          <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,       <comment type="line">// optional accum for Z=accum(C,T)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>add</name></decl></parameter>,         <comment type="line">// defines '+' for T=A+B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// first input:  matrix A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>alpha</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,             <comment type="line">// second input: matrix B</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>beta</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>       <comment type="line">// descriptor for C, M, A, and B</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"GxB_Matrix_eWiseUnion (C, M, accum, add, A, alpha,"</literal>
        <literal type="string">" B, beta, desc)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_BURBLE_START</name> <argument_list>(<argument><expr><literal type="string">"GxB_eWiseUnion"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL_OR_FAULTY</name> <argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// apply the eWise kernel (using set union)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_EWISE</name> <argument_list>(<argument><expr><name>add</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_BURBLE_END</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
