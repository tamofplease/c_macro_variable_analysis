<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_compatible.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_compatible: check input and operators for type compatibility</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Check if the types for C&lt;M&gt; = accum (C,T) are all compatible,</comment>
<comment type="line">// and (if present) make sure the size of C and M match.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_compatible</name>          <comment type="line">// SUCCESS if all is OK, *_MISMATCH otherwise</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,       <comment type="line">// the type of C (matrix or scalar)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,         <comment type="line">// the output matrix C; NULL if C is a scalar</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,         <comment type="line">// optional mask, NULL if no mask</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,     <comment type="line">// true if M is structural</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>accum</name></decl></parameter>,   <comment type="line">// C&lt;M&gt; = accum(C,T) is computed</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ttype</name></decl></parameter>,       <comment type="line">// type of T</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C may be aliased with M</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check accum compatibility</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>accum</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Results T are accumlated via C&lt;M&gt;=accum(C,T)</comment>

        <comment type="line">// For entries in C and T, c=z=accum(c,t) is computed, so C must</comment>
        <comment type="line">// be compatible with both the ztype and xtype of accum, and T</comment>
        <comment type="line">// must be compatible with the ytype of accum.</comment>

        <comment type="line">// For entries in T but not C, c=t is assigned, so C and T must</comment>
        <comment type="line">// be compatible.  This is the same as the condition below</comment>
        <comment type="line">// when accum is NULL.</comment>

        <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_BinaryOp_compatible</name> <argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ttype</name></expr></argument>,
            <argument><expr><name>GB_ignore_code</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the types of C and T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// C&lt;M&gt; = T, so C and T must be compatible.</comment>
    <comment type="line">// also C&lt;M&gt; = accum(C,T) for entries in T but not C</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Type_compatible</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ttype</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ERROR</name> <argument_list>(<argument><expr><name>GrB_DOMAIN_MISMATCH</name></expr></argument>,
            <argument><expr><literal type="string">"Result of computation of type [%s]\n"</literal>
            <literal type="string">"cannot be typecast to final output of type [%s]"</literal></expr></argument>,
            <argument><expr><name><name>ttype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check the mask</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>GB_Mask_compatible</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
