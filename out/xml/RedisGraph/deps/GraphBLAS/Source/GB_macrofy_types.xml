<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_types.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_types: construct typedefs for up to 6 types</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_types</name>
<parameter_list>(
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ctype_defn</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>atype_defn</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>btype_defn</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>xtype_defn</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ytype_defn</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ztype_defn</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// need to check if any typedefs are repeated</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>defn</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>ctype_defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>atype_defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>btype_defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>xtype_defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>ytype_defn</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>defn</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>ztype_defn</name></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>defn</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// only print this typedef it is unique</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>is_unique</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>is_unique</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>defn</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>defn</name> <index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>defn</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>is_unique</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>is_unique</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// the typedef is unique: include it in the .h file</comment>
                <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"%s\n\n"</literal></expr></argument>, <argument><expr><name><name>defn</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
