<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose_ix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose_ix: transpose the values and pattern of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The values of A are typecasted to C-&gt;type, the type of the C matrix.</comment>

<comment type="line">// If A is sparse or hypersparse</comment>
<comment type="line">//      The pattern of C is constructed.  C is sparse.</comment>
<comment type="line">//      Workspaces and A_slice are non-NULL.</comment>
<comment type="line">//      This method is parallel, but not highly scalable.  It uses only</comment>
<comment type="line">//      nthreads = nnz(A)/(A-&gt;vlen) threads.</comment>

<comment type="line">// If A is full or as-if-full:</comment>
<comment type="line">//      The pattern of C is not constructed.  C is full.</comment>
<comment type="line">//      Workspaces and A_slice are NULL.</comment>
<comment type="line">//      This method is parallel and fully scalable.</comment>

<comment type="line">// If A is bitmap:</comment>
<comment type="line">//      C-&gt;b is constructed.  C is bitmap.</comment>
<comment type="line">//      Workspaces and A_slice are NULL.</comment>
<comment type="line">//      This method is parallel and fully scalable.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>GB_transpose_ix</name>            <comment type="line">// transpose the pattern and values of a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,                       <comment type="line">// output matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                 <comment type="line">// input matrix</comment>
    <comment type="line">// for sparse case:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Workspaces</name></decl></parameter>,      <comment type="line">// Workspaces, size nworkspaces</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_slice</name></decl></parameter>,    <comment type="line">// how A is sliced, size nthreads+1</comment>
    <parameter><decl><type><name>int</name></type> <name>nworkspaces</name></decl></parameter>,                    <comment type="line">// # of workspaces to use</comment>
    <comment type="line">// for all cases:</comment>
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>                        <comment type="line">// # of threads to use</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code1</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>          <comment type="line">// defines ztype</comment>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>code2</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>        <comment type="line">// defines atype</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// built-in worker: transpose and typecast</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute the iso value and transpose the pattern</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// A and C are iso: Cx [0] = (ctype) Ax [0]</comment>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>code1</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>code2</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// C = pattern of A transposed</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_TRANSPOSE</name></cpp:macro></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transpose the values and pattern</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// define the worker for the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_unop_tran</name><parameter_list>(<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>)</parameter_list></cpp:macro>                               \
                <cpp:value>GB (_unop_tran__identity ## zname ## aname)</cpp:value></cpp:define>

            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>ignore1</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>aname</name></type></parameter>,<parameter><type><name>atype</name></type></parameter>)</parameter_list></cpp:macro>              \
            <cpp:value>{                                                               \
                info = GB_unop_tran (zname,aname)                           \
                    (C, A, Workspaces, A_slice, nworkspaces, nthreads) ;    \
                if (info == GrB_SUCCESS) return ;                           \
            }                                                               \
            break ;</cpp:value></cpp:define>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// launch the switch factory</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_2type_factory.c"</cpp:file></cpp:include>

        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// generic worker: transpose and typecast</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_BURBLE_MATRIX</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"(generic transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>csize</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_X</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>code1</name></expr></argument>, <argument><expr><name>code2</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// Cx [pC] = (ctype) Ax [pA]</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>  \
            <cpp:value>cast_A_to_X (Cx +((pC)*csize), Ax +((pA)*asize), asize) ;</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> <cpp:value>GB_void</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
