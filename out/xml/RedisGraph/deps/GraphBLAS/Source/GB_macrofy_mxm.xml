<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_mxm.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_mxm: construct all macros for a semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_mxm</name>        <comment type="line">// construct all macros for GrB_mxm</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,                   <comment type="line">// target file to write, already open</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>uint64_t</name></type> <name>scode</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Semiring</name></type> <name>semiring</name></decl></parameter>,  <comment type="line">// the semiring to macrofy</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>atype</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>btype</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the semiring scode</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// monoid (4 hex digits)</comment>
<comment type="line">//  int unused      = GB_RSHIFT (scode, 63, 1) ;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>add_ecode</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">58</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id_ecode</name>    <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">53</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>term_ecode</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_term</name>    <init>= <expr><operator>(</operator><name>term_ecode</name> <operator>&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// A and B iso-valued and flipxy (one hex digit)</comment>
<comment type="line">//  int unused      = GB_RSHIFT (scode, 47, 1) ;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>A_iso_code</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_iso_code</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>flipxy</name>     <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// multiplier (5 hex digits)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mult_ecode</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>zcode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>xcode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ycode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// mask (one hex digit)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mask_ecode</name>  <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// types of C, A, and B (3 hex digits)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ccode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>   <comment type="line">// if 0: C is iso</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>acode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>   <comment type="line">// if 0: A is pattern</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bcode</name>       <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>,  <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>   <comment type="line">// if 0: B is pattern</comment>

    <comment type="line">// formats of C, M, A, and B (2 hex digits)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>csparsity</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>msparsity</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>asparsity</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bsparsity</name>   <init>= <expr><call><name>GB_RSHIFT</name> <argument_list>(<argument><expr><name>scode</name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the semiring name</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>add</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>addop</name> <init>= <expr><name><name>add</name><operator>-&gt;</operator><name>op</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// GB_mxm_%016"</literal> <name>PRIx64</name> <literal type="string">".h, semiring: (%s, %s%s)\n\n"</literal></expr></argument>,
        <argument><expr><name>scode</name></expr></argument>, <argument><expr><name><name>addop</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><literal type="string">" (flipped)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the typedefs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_macrofy_types</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name><name>btype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>,
        <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros for the type names</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// semiring types:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_X_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_Y_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_Z_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>mult</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the monoid macros</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// additive monoid:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_monoid</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>add_ecode</name></expr></argument>, <argument><expr><name>id_ecode</name></expr></argument>, <argument><expr><name>term_ecode</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct macros for the multiply</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// do not print the user-defined multiplicative function if it is identical</comment>
    <comment type="line">// to the user-defined additive function.</comment>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// multiplicative operator:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>skip_defn</name> <init>= <expr><operator>(</operator><name><name>mult</name><operator>-&gt;</operator><name>defn</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>addop</name><operator>-&gt;</operator><name>defn</name></name> <operator>!=</operator> <name>NULL</name>
        <operator>&amp;&amp;</operator> <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>mult</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>, <argument><expr><name><name>addop</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_binop</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"GB_MULT"</literal></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>mult_ecode</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>,
        <argument><expr><name>skip_defn</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_FLIPXY %d\n\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>flipxy</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// special cases</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// special cases:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// semiring is plus_pair_real</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_plus_pair_real</name> <init>=
        <expr><operator>(</operator><name>add_ecode</name> <operator>==</operator> <literal type="number">11</literal> <comment type="line">// plus monoid</comment>
        <operator>&amp;&amp;</operator> <name>mult_ecode</name> <operator>==</operator> <literal type="number">133</literal> <comment type="line">// pair multiplicative operator</comment>
        <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>zcode</name> <operator>==</operator> <name>GB_FC32_code</name> <operator>||</operator> <name>zcode</name> <operator>==</operator> <name>GB_FC64_code</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt> <comment type="line">// real</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_IS_PLUS_PAIR_REAL_SEMIRING %d\n"</literal></expr></argument>,
        <argument><expr><name>is_plus_pair_real</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// can ignore overflow in ztype when accumulating the result via the monoid</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ztype_ignore_overflow</name> <init>= <expr><operator>(</operator>
        <name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name> <operator>||</operator> <name>zcode</name> <operator>==</operator> <name>GB_UINT64_code</name> <operator>||</operator>
        <name>zcode</name> <operator>==</operator> <name>GB_FP32_code</name>  <operator>||</operator> <name>zcode</name> <operator>==</operator> <name>GB_FP64_code</name> <operator>||</operator>
        <name>zcode</name> <operator>==</operator> <name>GB_FC32_code</name>  <operator>||</operator> <name>zcode</name> <operator>==</operator> <name>GB_FC64_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// note "CTYPE" is in the name in the CPU kernels (fix them to use ZTYPE)</comment>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_ZTYPE_IGNORE_OVERFLOW %d\n\n"</literal></expr></argument>,
        <argument><expr><name>ztype_ignore_overflow</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// macros for the C matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"// C matrix:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><operator>(</operator><name>ccode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C_iso</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_PUTC(blob)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_C_ISO 1\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_PUTC(blob) blob\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_C_ISO 0\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_sparsity</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>csparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_C_TYPENAME %s\n\n"</literal></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros to access the mask (if any), and its name</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_macrofy_mask</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>mask_ecode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_sparsity</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><name>msparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the macros for A and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// if flipxy false:  A is typecasted to x, and B is typecasted to y.</comment>
    <comment type="line">// if flipxy true:   A is typecasted to y, and B is typecasted to x.</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// A matrix:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_is_pattern</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>acode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_is_pattern</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>bcode</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_A_IS_PATTERN %d\n"</literal></expr></argument>, <argument><expr><name>A_is_pattern</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_A_ISO %d\n"</literal></expr></argument>, <argument><expr><name>A_iso_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_sparsity</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>asparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_A_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>atype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"\n// B matrix:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_B_IS_PATTERN %d\n"</literal></expr></argument>, <argument><expr><name>B_is_pattern</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_B_ISO %d\n"</literal></expr></argument>, <argument><expr><name>B_iso_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_macrofy_sparsity</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>bsparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="string">"#define GB_B_TYPENAME %s\n"</literal></expr></argument>, <argument><expr><name><name>btype</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

</block_content>}</block></function>

</unit>
