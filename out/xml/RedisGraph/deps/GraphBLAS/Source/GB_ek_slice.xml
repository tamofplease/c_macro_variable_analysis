<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ek_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ek_slice: slice the entries and vectors of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Slice the entries of a matrix or vector into ntasks slices.</comment>

<comment type="line">// The function is called GB_ek_slice because it first partitions the e entries</comment>
<comment type="line">// into chunks of identical sizes, and then finds the first and last vector</comment>
<comment type="line">// (k) for each chunk.</comment>

<comment type="line">// Task t does entries pstart_slice [t] to pstart_slice [t+1]-1 inclusive and</comment>
<comment type="line">// vectors kfirst_slice [t] to klast_slice [t].  The first and last vectors</comment>
<comment type="line">// may be shared with prior slices and subsequent slices.</comment>

<comment type="line">// On input, ntasks is the # of tasks requested.</comment>

<comment type="line">// A can have any sparsity structure (sparse, hyper, bitmap, or full).</comment>
<comment type="line">// A may be jumbled.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice_search.c"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_ek_slice</name>            <comment type="line">// slice a matrix</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_ek_slicing</name></decl></parameter>,  <comment type="line">// size 3*ntasks+1</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                       <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><name>int</name></type> <name>ntasks</name></decl></parameter>                          <comment type="line">// # of tasks</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A_ek_slicing</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// pattern of A is not accessed</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>      <comment type="line">// NULL if bitmap or full</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// kfirst_slice and klast_slice are size ntasks.</comment>
    <comment type="line">// pstart_slice is size ntasks+1</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>kfirst_slice</name> <init>= <expr><name>A_ek_slicing</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>klast_slice</name>  <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>ntasks</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pstart_slice</name> <init>= <expr><name>A_ek_slicing</name> <operator>+</operator> <name>ntasks</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// quick return for empty matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single empty task</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>pstart_slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>pstart_slice</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>kfirst_slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>klast_slice</name>  <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr> ;</expr_stmt>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the first and last entries in each slice</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE: this can be done in parallel if there are many tasks</comment>
    <expr_stmt><expr><call><name>GB_eslice</name> <argument_list>(<argument><expr><name>pstart_slice</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the first and last vectors in each slice</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The first vector of the slice is the kth vector of A if</comment>
    <comment type="line">// pstart_slice [taskid] is in the range Ap [k]...A[k+1]-1, and this</comment>
    <comment type="line">// is vector is k = kfirst_slice [taskid].</comment>

    <comment type="line">// The last vector of the slice is the kth vector of A if</comment>
    <comment type="line">// pstart_slice [taskid+1]-1 is in the range Ap [k]...A[k+1]-1, and this</comment>
    <comment type="line">// is vector is k = klast_slice [taskid].</comment>

    <comment type="line">// FUTURE: this can be done in parallel if there are many tasks</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>GB_ek_slice_search</name> <argument_list>(<argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>pstart_slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>,
            <argument><expr><name>kfirst_slice</name></expr></argument>, <argument><expr><name>klast_slice</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>kfirst_slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>klast_slice</name>  <index>[<expr><name>ntasks</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>anvec</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
