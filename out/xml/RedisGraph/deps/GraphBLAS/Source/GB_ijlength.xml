<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ijlength.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ijlength: get the length and kind of an index list I</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determine the length of I, and process the colon notation I = begin:inc:end.</comment>
<comment type="line">// No error checking is done.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>

<comment type="line">// ensure an unsigned integer does not cause signed integer overflow</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIMIT</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int64_t) (GB_IMIN (u, INT64_MAX))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>GB_ijlength</name>            <comment type="line">// get the length and kind of an index list I</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,     <comment type="line">// list of indices (actual or implicit)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,       <comment type="line">// length I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>limit</name></decl></parameter>,    <comment type="line">// indices must be in the range 0 to limit-1</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>nI</name></decl></parameter>,            <comment type="line">// actual length of I</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Ikind</name></decl></parameter>,             <comment type="line">// kind of I: GB_ALL, GB_RANGE, GB_STRIDE, GB_LIST</comment>
    <parameter><decl><type><name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>      <comment type="line">// begin:inc:end for all but GB_LIST</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>limit</name> <operator>&lt;=</operator> <name>GB_NMAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the length of I</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>GrB_ALL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = ":" = 0:limit-1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_ALL</name></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>limit</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <name>limit</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ni</name> <operator>==</operator> <name>GxB_RANGE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = ibegin:iend</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_RANGE</name></expr> ;</expr_stmt>

        <comment type="line">// the array I must have size at least 2</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>ibegin</name> <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ibegin</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iend</name> <operator>==</operator> <name>limit</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// 0:limit-1 is the same as ":"</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_ALL</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>ibegin</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>iend</name></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>&gt;</operator> <name>iend</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the list is empty</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// ibegin &lt;= iend</comment>
        <block>{<block_content> 
            <comment type="line">// list ibegin:iend is not empty</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <name>ibegin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ni</name> <operator>==</operator> <name>GxB_STRIDE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = ibegin:iinc:iend where iinc &gt;= 0</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_STRIDE</name></expr> ;</expr_stmt>

        <comment type="line">// The array I must have size at least 3.  It is an unsigned uint64_t</comment>
        <comment type="line">// array, so integers must be positive.</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>ibegin</name> <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name>   <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ibegin</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iinc</name>   <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iend</name>   <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iend</name> <operator>==</operator> <name>limit</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// 0:1:limit-1 is the same as ":"</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_ALL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// ibegin:1:iend is the same as ibegin:iend</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_RANGE</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// an increment of 0 means the list is empty</comment>
        <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// iinc &gt; 0</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>&gt;</operator> <name>iend</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the list ibegin:iinc:iend is empty (for example 10:1:0)</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else <comment type="line">// ibegin &lt;= iend</comment>
            <block>{<block_content> 
                <comment type="line">// the list is non-empty (for example 4:2:7 = [4 6])</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>ibegin</name><operator>)</operator> <operator>/</operator> <name>iinc</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>ibegin</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <name>iinc</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>iend</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ni</name> <operator>==</operator> <name>GxB_BACKWARDS</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = ibegin:iinc:iend where iinc &lt;= 0</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_STRIDE</name></expr> ;</expr_stmt>

        <comment type="line">// The array I must have size at least 3.  It is an unsigned uint64_t</comment>
        <comment type="line">// array, so integers must be positive.</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>ibegin</name> <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name>   <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><call><name>GB_LIMIT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iinc</name>   <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// the stride is backwards, so negate iinc</comment>
        <expr_stmt><expr><name>iinc</name> <operator>=</operator> <operator>-</operator><name>iinc</name></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ibegin</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iinc</name>   <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iend</name>   <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// an increment of 0 means the list is empty</comment>
        <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// iinc &lt; 0</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ibegin</name> <operator>&lt;</operator> <name>iend</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the list ibegin:iinc:iend is empty (for example 1:-1:10)</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// the list is non-empty (for example 7:-2:4 = [7 5])</comment>
                <comment type="line">// two positive numbers are divided here</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ibegin</name> <operator>-</operator> <name>iend</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>-</operator><name>iinc</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>ibegin</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <name>iinc</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>iend</name></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I is an array of indices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_LIST</name></expr> ;</expr_stmt>

        <comment type="line">// not computed</comment>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nI</name><operator>)</operator> <operator>=</operator> <name>ni</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
