<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generated2/GB_unop__identity_bool_bool.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_unop:  hard-coded functions for each built-in unary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated2/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop__include.h"</cpp:file></cpp:include>

<comment type="line">// C=unop(A) is defined by the following types and operators:</comment>

<comment type="line">// op(A)  function:  GB (_unop_apply__(none))</comment>
<comment type="line">// op(A') function:  GB (_unop_tran__identity_bool_bool)</comment>

<comment type="line">// C type:   bool</comment>
<comment type="line">// A type:   bool</comment>
<comment type="line">// cast:     bool cij = aij</comment>
<comment type="line">// unaryop:  cij = aij</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>bool</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> \
    <cpp:value>bool</cpp:value></cpp:define>

<comment type="line">// aij = Ax [pA]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETA</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>bool aij = Ax [pA]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [p]</cpp:value></cpp:define>

<comment type="line">// unary operator</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP</name><parameter_list>(<parameter><type><name>z</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z = x ;</cpp:value></cpp:define>

<comment type="line">// casting</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST</name><parameter_list>(<parameter><type><name>z</name></type></parameter>, <parameter><type><name>aij</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>bool z = aij ;</cpp:value></cpp:define>

<comment type="line">// cij = op (aij)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>           \
<cpp:value>{                                   \
    <comment type="block">/* aij = Ax [pA] */</comment>             \
    bool aij = Ax [pA] ;          \
    <comment type="block">/* Cx [pC] = op (cast (aij)) */</comment> \
    bool z = aij ;               \
    Cx [pC] = z ;        \
}</cpp:value></cpp:define>

<comment type="line">// disable this operator and use the generic case if these conditions hold</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DISABLE</name></cpp:macro> \
    <cpp:value>(GxB_NO_IDENTITY || GxB_NO_BOOL)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cx = op (cast (Ax)): apply a unary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
GrB_Info GB (_unop_apply__(none))
(
    bool *Cx,       <comment type="line">// Cx and Ax may be aliased</comment>
    const bool *Ax,
    const int8_t *restrict Ab,   <comment type="line">// A-&gt;b if A is bitmap</comment>
    int64_t anz,
    int nthreads
)
{
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    int64_t p ;
    if (Ab == NULL)
    { 
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        for (p = 0 ; p &lt; anz ; p++)
        {
            bool aij = Ax [p] ;
            bool z = aij ;
            Cx [p] = z ;
        }
    }
    else
    { 
        <comment type="line">// bitmap case, no transpose; A-&gt;b already memcpy'd into C-&gt;b</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        for (p = 0 ; p &lt; anz ; p++)
        {
            if (!Ab [p]) continue ;
            bool aij = Ax [p] ;
            bool z = aij ;
            Cx [p] = z ;
        }
    }
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = op (cast (A')): transpose, typecast, and apply a unary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_unop_tran__identity_bool_bool</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Workspaces</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_slice</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nworkspaces</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
