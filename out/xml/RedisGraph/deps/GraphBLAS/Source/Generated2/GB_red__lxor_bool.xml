<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generated2/GB_red__lxor_bool.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_red:  hard-coded functions for reductions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated2/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_control.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_red__include.h"</cpp:file></cpp:include>

<comment type="line">// The reduction is defined by the following types and operators:</comment>

<comment type="line">// Assemble tuples:    GB (_red_build__lxor_bool)</comment>
<comment type="line">// Reduce to scalar:   GB (_red_scalar__lxor_bool)</comment>

<comment type="line">// A type:   bool</comment>
<comment type="line">// C type:   bool</comment>

<comment type="line">// Reduce:   s = (s != aij)</comment>
<comment type="line">// Identity: false</comment>
<comment type="line">// Terminal: ;</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>bool</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> \
    <cpp:value>bool</cpp:value></cpp:define>

<comment type="line">// monoid identity value</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IDENTITY</name></cpp:macro> \
        <cpp:value>false</cpp:value></cpp:define>

<comment type="line">// declare a scalar and set it equal to the monoid identity value</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SCALAR_IDENTITY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                   \
        <cpp:value>bool s = GB_IDENTITY</cpp:value></cpp:define>

<comment type="line">// Array to array</comment>

    <comment type="line">// W [k] = (ztype) S [i], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>         \
        <cpp:value>W [k] = S [i]</cpp:value></cpp:define>

    <comment type="line">// W [k] += (ztype) S [i], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>     \
        <cpp:value>W [k] = (W [k] != S [i])</cpp:value></cpp:define>

    <comment type="line">// W [k] += Ax [p], no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>         \
        <cpp:value>W [k] = (W [k] != Ax [p])</cpp:value></cpp:define>  

<comment type="line">// Array to scalar</comment>

    <comment type="line">// s += (ztype) Ax [p], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>     \
        <cpp:value>s = (s != Ax [p])</cpp:value></cpp:define>

    <comment type="line">// s += S [i], no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>           \
        <cpp:value>s = (s != S [i])</cpp:value></cpp:define>

<comment type="line">// Scalar to array</comment>

    <comment type="line">// W [k] = s, no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_SCALAR_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>          \
        <cpp:value>W [k] = s</cpp:value></cpp:define>

<comment type="line">// break the loop if terminal condition reached</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_HAS_TERMINAL</name></cpp:macro>                         \
        <cpp:value>0</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_TERMINAL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                       \
        <cpp:value>(none)</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TERMINAL_VALUE</name></cpp:macro>                       \
        <cpp:value>(none)</cpp:value></cpp:define>

<comment type="line">// panel size for built-in operators</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PANEL</name></cpp:macro>                                \
        <cpp:value>8</cpp:value></cpp:define>

<comment type="line">// special case for the ANY monoid</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_ANY_MONOID</name></cpp:macro>                        \
        <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// disable this operator and use the generic case if these conditions hold</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DISABLE</name></cpp:macro> \
    <cpp:value>(GxB_NO_LXOR || GxB_NO_BOOL || GxB_NO_LXOR_BOOL)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// reduce to a non-iso matrix to scalar, for monoids only</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>


<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_red_scalar__lxor_bool</name>)
<parameter_list>(
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W_space</name></decl></parameter>,
    <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>F</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>ntasks</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>bool</name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>W_space</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_to_scalar_template.c"</cpp:file></cpp:include>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_panel.c"</cpp:file></cpp:include>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// build a non-iso matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_red_build__lxor_bool</name>)
<parameter_list>(
    <parameter><decl><type><name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tx</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ti</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sx</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>nvals</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>ndupl</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I_work</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>K_work</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tstart_slice</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tnz_slice</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_build_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
