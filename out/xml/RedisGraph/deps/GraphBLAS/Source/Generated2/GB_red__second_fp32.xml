<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generated2/GB_red__second_fp32.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_red:  hard-coded functions for reductions</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated2/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_control.h"</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_red__include.h"</cpp:file></cpp:include>

<comment type="line">// The reduction is defined by the following types and operators:</comment>

<comment type="line">// Assemble tuples:    GB (_red_build__second_fp32)</comment>
<comment type="line">// Reduce to scalar:   GB (_red_scalar__(none))</comment>

<comment type="line">// A type:   float</comment>
<comment type="line">// C type:   float</comment>

<comment type="line">// Reduce:   s = aij</comment>
<comment type="line">// Identity: (none)</comment>
<comment type="line">// Terminal: ;</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> \
    <cpp:value>float</cpp:value></cpp:define>

<comment type="line">// monoid identity value</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IDENTITY</name></cpp:macro> \
        <cpp:value>(none)</cpp:value></cpp:define>

<comment type="line">// declare a scalar and set it equal to the monoid identity value</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_SCALAR_IDENTITY</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                   \
        <cpp:value>float s = GB_IDENTITY</cpp:value></cpp:define>

<comment type="line">// Array to array</comment>

    <comment type="line">// W [k] = (ztype) S [i], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>         \
        <cpp:value>W [k] = S [i]</cpp:value></cpp:define>

    <comment type="line">// W [k] += (ztype) S [i], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>     \
        <cpp:value>W [k] = S [i]</cpp:value></cpp:define>

    <comment type="line">// W [k] += Ax [p], no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_ARRAY_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>         \
        <cpp:value>W [k] = Ax [p]</cpp:value></cpp:define>  

<comment type="line">// Array to scalar</comment>

    <comment type="line">// s += (ztype) Ax [p], with typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_CAST_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>     \
        <cpp:value>s = Ax [p]</cpp:value></cpp:define>

    <comment type="line">// s += S [i], no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ADD_ARRAY_TO_SCALAR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>S</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>           \
        <cpp:value>s = S [i]</cpp:value></cpp:define>

<comment type="line">// Scalar to array</comment>

    <comment type="line">// W [k] = s, no typecast</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_SCALAR_TO_ARRAY</name><parameter_list>(<parameter><type><name>W</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>          \
        <cpp:value>W [k] = s</cpp:value></cpp:define>

<comment type="line">// break the loop if terminal condition reached</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_HAS_TERMINAL</name></cpp:macro>                         \
        <cpp:value>0</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_TERMINAL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                       \
        <cpp:value>(none)</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_TERMINAL_VALUE</name></cpp:macro>                       \
        <cpp:value>(none)</cpp:value></cpp:define>

<comment type="line">// panel size for built-in operators</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PANEL</name></cpp:macro>                                \
        <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// special case for the ANY monoid</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_IS_ANY_MONOID</name></cpp:macro>                        \
        <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// disable this operator and use the generic case if these conditions hold</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DISABLE</name></cpp:macro> \
    <cpp:value>(GxB_NO_SECOND || GxB_NO_FP32 || GxB_NO_SECOND_FP32)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// reduce to a non-iso matrix to scalar, for monoids only</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
GrB_Info GB (_red_scalar__(none))
(
    float *result,
    const GrB_Matrix A,
    GB_void *restrict W_space,
    bool *restrict F,
    int ntasks,
    int nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    float s = (*result) ;
    float *restrict W = (float *) W_space ;
    if (A-&gt;nzombies &gt; 0 || GB_IS_BITMAP (A))
    {
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_to_scalar_template.c"</cpp:file></cpp:include>
    }
    else
    {
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_panel.c"</cpp:file></cpp:include>
    }
    (*result) = s ;
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// build a non-iso matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_red_build__second_fp32</name>)
<parameter_list>(
    <parameter><decl><type><name>float</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Tx</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name>  <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ti</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Sx</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>nvals</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>ndupl</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>I_work</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>K_work</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tstart_slice</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>tnz_slice</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_reduce_build_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
