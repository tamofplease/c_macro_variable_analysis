<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generated2/GB_binop__pair_fp64.c">
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop:  hard-coded functions for each built-in binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated2/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop__include.h"</cpp:file></cpp:include>

<comment type="line">// C=binop(A,B) is defined by the following types and operators:</comment>

<comment type="line">// A+B function (eWiseAdd):         GB (_AaddB__pair_fp64)</comment>
<comment type="line">// A.*B function (eWiseMult):       GB ((none))</comment>
<comment type="line">// A.*B function (eWiseMult):       GB ((none))</comment>
<comment type="line">// A.*B function (eWiseMult):       GB ((none))</comment>
<comment type="line">// A.*B function (eWiseMult):       GB ((none))</comment>
<comment type="line">// A*D function (colscale):         GB ((none))</comment>
<comment type="line">// D*A function (rowscale):         GB ((none))</comment>
<comment type="line">// C+=B function (dense accum):     GB (_Cdense_accumB__pair_fp64)</comment>
<comment type="line">// C+=b function (dense accum):     GB (_Cdense_accumb__pair_fp64)</comment>
<comment type="line">// C+=A+B function (dense ewise3):  GB ((none))</comment>
<comment type="line">// C=A+B function (dense ewise3):   GB (_Cdense_ewise3_noaccum__pair_fp64)</comment>
<comment type="line">// C=scalar+B                       GB ((none))</comment>
<comment type="line">// C=scalar+B'                      GB ((none))</comment>
<comment type="line">// C=A+scalar                       GB ((none))</comment>
<comment type="line">// C=A'+scalar                      GB ((none))</comment>

<comment type="line">// C type:     double</comment>
<comment type="line">// A type:     double</comment>
<comment type="line">// A pattern?  1</comment>
<comment type="line">// B type:     double</comment>
<comment type="line">// B pattern?  1</comment>

<comment type="line">// BinaryOp:   cij = 1</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BTYPE</name></cpp:macro> \
    <cpp:value>double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> \
    <cpp:value>double</cpp:value></cpp:define>

<comment type="line">// true if the types of A and B are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE_IS_BTYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// true if the types of C and A are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_IS_ATYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// true if the types of C and B are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_IS_BTYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// aij = Ax [pA]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETA</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>;</cpp:value></cpp:define>

<comment type="line">// true if values of A are not used</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_PATTERN</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define> \

<comment type="line">// bij = Bx [pB]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETB</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>;</cpp:value></cpp:define>

<comment type="line">// true if values of B are not used</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_PATTERN</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define> \

<comment type="line">// declare scalar of the same type as C</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_SCALAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>double t</cpp:value></cpp:define>

<comment type="line">// cij = Ax [pA]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_A_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cij = GBX (Ax, pA, A_iso)</cpp:value></cpp:define>

<comment type="line">// cij = Bx [pB]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_B_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cij = GBX (Bx, pB, B_iso)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [p]</cpp:value></cpp:define>

<comment type="line">// binary operator</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z = 1 ;</cpp:value></cpp:define>

<comment type="line">// true if the binop must be flipped</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_FLIP</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// op is second</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP_IS_SECOND</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// do the numerical phases of GB_add and GB_emult</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>

<comment type="line">// hard-coded loops can be vectorized</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>GB_PRAGMA_SIMD</cpp:value></cpp:define>

<comment type="line">// disable this operator and use the generic case if these conditions hold</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DISABLE</name></cpp:macro> \
    <cpp:value>(GxB_NO_PAIR || GxB_NO_FP64 || GxB_NO_PAIR_FP64)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += A+B, all 3 matrices dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<comment type="line">// The op must be MIN, MAX, PLUS, MINUS, RMINUS, TIMES, DIV, or RDIV.</comment>

void GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const int nthreads
)
{ 
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_ewise3_accum_template.c"</cpp:file></cpp:include>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = A+B, all 3 matrices dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name> <name>GB</name></type> (<name>_Cdense_ewise3_noaccum__pair_fp64</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_ewise3_noaccum_template.c"</cpp:file></cpp:include>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += B, accumulate a sparse matrix into a dense matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_Cdense_accumB__pair_fp64</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>B_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    
    <block>{<block_content> 
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_23_template.c"</cpp:file></cpp:include>
    </block_content>}</block>
    
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += b, accumulate a scalar into a dense matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_Cdense_accumb__pair_fp64</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>p_bwork</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    
    <block>{<block_content> 
        <comment type="line">// get the scalar b for C += b, of type double</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>bwork</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>p_bwork</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_22_template.c"</cpp:file></cpp:include>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block>
    
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = A*D, column scale with diagonal D matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix A,
    const GrB_Matrix D,
    const int64_t *A_ek_slicing, const int A_ntasks, const int A_nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    double *restrict Cx = (double *) C-&gt;x ;
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_colscale_template.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = D*B, row scale with diagonal D matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix D,
    const GrB_Matrix B,
    int nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    double *restrict Cx = (double *) C-&gt;x ;
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_rowscale_template.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseAdd: C=A+B, C&lt;M&gt;=A+B, C&lt;!M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AaddB__pair_fp64</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_sparsity</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>alpha_scalar_in</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>beta_scalar_in</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Ch_is_Mh</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_ntasks</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>B_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>alpha_scalar</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>beta_scalar</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>alpha_scalar</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>alpha_scalar_in</name><operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>beta_scalar</name>  <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>beta_scalar_in</name> <operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C=A.*B, C&lt;M&gt;=A.*B, or C&lt;M!&gt;=A.*B where C is sparse/hyper</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const int C_sparsity,
    const int ewise_method,
    const GrB_Matrix M,
    const bool Mask_struct,
    const bool Mask_comp,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const int64_t *restrict C_to_M,
    const int64_t *restrict C_to_A,
    const int64_t *restrict C_to_B,
    const GB_task_struct *restrict TaskList,
    const int C_ntasks,
    const int C_nthreads,
    GB_Context Context
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_meta.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C&lt;#&gt; = A.*B when A is sparse/hyper and B is bitmap/full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix M,
    const bool Mask_struct,
    const bool Mask_comp,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const bool flipxy,
    const int64_t *restrict Cp_kfirst,
    const int64_t *A_ek_slicing, const int A_ntasks, const int A_nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_BINOP_FLIP</name></expr></cpp:if>
        <comment type="line">// The operator is not commutative, and does not have a flipped</comment>
        <comment type="line">// variant.  For example z=atan2(y,x).</comment>
        if (flipxy)
        {
            <comment type="line">// use fmult(y,x)</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
        }
        else
        {
            <comment type="line">// use fmult(x,y)</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
        }
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="line">// No need to handle the flip: the operator is either commutative, or</comment>
        <comment type="line">// has been handled by changing z=div(y,x) to z=rdiv(x,y) for example.</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C&lt;M&gt; = A.*B, M sparse/hyper, A and B bitmap/full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix M,
    const bool Mask_struct,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const int64_t *restrict Cp_kfirst,
    const int64_t *M_ek_slicing, const int M_ntasks, const int M_nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_04_template.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C=A.*B, C&lt;M&gt;=A.*B, C&lt;!M&gt;=A.*B where C is bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const int ewise_method,
    const GrB_Matrix M,
    const bool Mask_struct,
    const bool Mask_comp,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const int64_t *M_ek_slicing, const int M_ntasks, const int M_nthreads,
    const int C_nthreads,
    GB_Context Context
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_emult_template.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cx = op (x,Bx):  apply a binary operator to a matrix with scalar bind1st</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GB_void *Cx_output,         <comment type="line">// Cx and Bx may be aliased</comment>
    const GB_void *x_input,
    const GB_void *Bx_input,
    const int8_t *restrict Bb,
    int64_t bnz,
    int nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    double *Cx = (double *) Cx_output ;
    double   x = (*((double *) x_input)) ;
    double *Bx = (double *) Bx_input ;
    int64_t p ;
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    for (p = 0 ; p &lt; bnz ; p++)
    {
        if (!GBB (Bb, p)) continue ;
        ; ;
        Cx [p] = 1 ;
    }
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cx = op (Ax,y):  apply a binary operator to a matrix with scalar bind2nd</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

GrB_Info GB ((none))
(
    GB_void *Cx_output,         <comment type="line">// Cx and Ax may be aliased</comment>
    const GB_void *Ax_input,
    const GB_void *y_input,
    const int8_t *restrict Ab,
    int64_t anz,
    int nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    int64_t p ;
    double *Cx = (double *) Cx_output ;
    double *Ax = (double *) Ax_input ;
    double   y = (*((double *) y_input)) ;
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    for (p = 0 ; p &lt; anz ; p++)
    {
        if (!GBB (Ab, p)) continue ;
        ; ;
        Cx [p] = 1 ;
    }
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = op (x, A'): transpose and apply a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<comment type="line">// cij = op (x, aij), no typecasting (in spite of the macro name)</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                       \
<cpp:value>{                                               \
    ; ;               \
    Cx [pC] = 1 ;        \
}</cpp:value></cpp:define>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GB_void *x_input,
    const GrB_Matrix A,
    int64_t *restrict *Workspaces,
    const int64_t *restrict A_slice,
    int nworkspaces,
    int nthreads
)
{ 
    <comment type="line">// GB_unop_transpose.c uses GB_ATYPE, but A is</comment>
    <comment type="line">// the 2nd input to binary operator z=f(x,y).</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ATYPE</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>double</cpp:value></cpp:define>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    double x = (*((const double *) x_input)) ;
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ATYPE</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>double</cpp:value></cpp:define>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = op (A', y): transpose and apply a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<comment type="line">// cij = op (aij, y), no typecasting (in spite of the macro name)</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                       \
<cpp:value>{                                               \
    ; ;               \
    Cx [pC] = 1 ;        \
}</cpp:value></cpp:define>

GrB_Info GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix A,
    const GB_void *y_input,
    int64_t *restrict *Workspaces,
    const int64_t *restrict A_slice,
    int nworkspaces,
    int nthreads
)
{ 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    return (GrB_NO_VALUE) ;
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    double y = (*((const double *) y_input)) ;
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    return (GrB_SUCCESS) ;
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
