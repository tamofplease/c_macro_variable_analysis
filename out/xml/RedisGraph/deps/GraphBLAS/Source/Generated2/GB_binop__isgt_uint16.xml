<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/Generated2/GB_binop__isgt_uint16.c">
<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop:  hard-coded functions for each built-in binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If this file is in the Generated2/ folder, do not edit it</comment>
<comment type="line">// (it is auto-generated from Generator/*).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_assign_methods.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop__include.h"</cpp:file></cpp:include>

<comment type="line">// C=binop(A,B) is defined by the following types and operators:</comment>

<comment type="line">// A+B function (eWiseAdd):         GB (_AaddB__isgt_uint16)</comment>
<comment type="line">// A.*B function (eWiseMult):       GB (_AemultB__isgt_uint16)</comment>
<comment type="line">// A.*B function (eWiseMult):       GB (_AemultB_02__isgt_uint16)</comment>
<comment type="line">// A.*B function (eWiseMult):       GB (_AemultB_04__isgt_uint16)</comment>
<comment type="line">// A.*B function (eWiseMult):       GB (_AemultB_bitmap__isgt_uint16)</comment>
<comment type="line">// A*D function (colscale):         GB (_AxD__isgt_uint16)</comment>
<comment type="line">// D*A function (rowscale):         GB (_DxB__isgt_uint16)</comment>
<comment type="line">// C+=B function (dense accum):     GB (_Cdense_accumB__isgt_uint16)</comment>
<comment type="line">// C+=b function (dense accum):     GB (_Cdense_accumb__isgt_uint16)</comment>
<comment type="line">// C+=A+B function (dense ewise3):  GB ((none))</comment>
<comment type="line">// C=A+B function (dense ewise3):   GB (_Cdense_ewise3_noaccum__isgt_uint16)</comment>
<comment type="line">// C=scalar+B                       GB (_bind1st__isgt_uint16)</comment>
<comment type="line">// C=scalar+B'                      GB (_bind1st_tran__isgt_uint16)</comment>
<comment type="line">// C=A+scalar                       GB (_bind2nd__isgt_uint16)</comment>
<comment type="line">// C=A'+scalar                      GB (_bind2nd_tran__isgt_uint16)</comment>

<comment type="line">// C type:     uint16_t</comment>
<comment type="line">// A type:     uint16_t</comment>
<comment type="line">// A pattern?  0</comment>
<comment type="line">// B type:     uint16_t</comment>
<comment type="line">// B pattern?  0</comment>

<comment type="line">// BinaryOp:   cij = (aij &gt; bij)</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BTYPE</name></cpp:macro> \
    <cpp:value>uint16_t</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE</name></cpp:macro> \
    <cpp:value>uint16_t</cpp:value></cpp:define>

<comment type="line">// true if the types of A and B are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE_IS_BTYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// true if the types of C and A are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_IS_ATYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// true if the types of C and B are identical</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_IS_BTYPE</name></cpp:macro> \
    <cpp:value>1</cpp:value></cpp:define>

<comment type="line">// aij = Ax [pA]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETA</name><parameter_list>(<parameter><type><name>aij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>uint16_t aij = GBX (Ax, pA, A_iso)</cpp:value></cpp:define>

<comment type="line">// true if values of A are not used</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_A_IS_PATTERN</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define> \

<comment type="line">// bij = Bx [pB]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_GETB</name><parameter_list>(<parameter><type><name>bij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>uint16_t bij = GBX (Bx, pB, B_iso)</cpp:value></cpp:define>

<comment type="line">// true if values of B are not used</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_B_IS_PATTERN</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define> \

<comment type="line">// declare scalar of the same type as C</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CTYPE_SCALAR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>  \
    <cpp:value>uint16_t t</cpp:value></cpp:define>

<comment type="line">// cij = Ax [pA]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_A_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Ax</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>,<parameter><type><name>A_iso</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cij = GBX (Ax, pA, A_iso)</cpp:value></cpp:define>

<comment type="line">// cij = Bx [pB]</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_COPY_B_TO_C</name><parameter_list>(<parameter><type><name>cij</name></type></parameter>,<parameter><type><name>Bx</name></type></parameter>,<parameter><type><name>pB</name></type></parameter>,<parameter><type><name>B_iso</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>cij = GBX (Bx, pB, B_iso)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CX</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>Cx [p]</cpp:value></cpp:define>

<comment type="line">// binary operator</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP</name><parameter_list>(<parameter><type><name>z</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z = (x &gt; y) ;</cpp:value></cpp:define>

<comment type="line">// true if the binop must be flipped</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_BINOP_FLIP</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// op is second</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_OP_IS_SECOND</name></cpp:macro> \
    <cpp:value>0</cpp:value></cpp:define>

<comment type="line">// do the numerical phases of GB_add and GB_emult</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>

<comment type="line">// hard-coded loops can be vectorized</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PRAGMA_SIMD_VECTORIZE</name></cpp:macro> <cpp:value>GB_PRAGMA_SIMD</cpp:value></cpp:define>

<comment type="line">// disable this operator and use the generic case if these conditions hold</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_DISABLE</name></cpp:macro> \
    <cpp:value>(GxB_NO_ISGT || GxB_NO_UINT16 || GxB_NO_ISGT_UINT16)</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += A+B, all 3 matrices dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<comment type="line">// The op must be MIN, MAX, PLUS, MINUS, RMINUS, TIMES, DIV, or RDIV.</comment>

void GB ((none))
(
    GrB_Matrix C,
    const GrB_Matrix A,
    const GrB_Matrix B,
    const int nthreads
)
{ 
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_ewise3_accum_template.c"</cpp:file></cpp:include>
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = A+B, all 3 matrices dense</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name> <name>GB</name></type> (<name>_Cdense_ewise3_noaccum__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_ewise3_noaccum_template.c"</cpp:file></cpp:include>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += B, accumulate a sparse matrix into a dense matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_Cdense_accumB__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>B_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>B_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    
    <block>{<block_content> 
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_23_template.c"</cpp:file></cpp:include>
    </block_content>}</block>
    
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C += b, accumulate a scalar into a dense matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_Cdense_accumb__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>p_bwork</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    
    <block>{<block_content> 
        <comment type="line">// get the scalar b for C += b, of type uint16_t</comment>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>bwork</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>p_bwork</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_dense_subassign_22_template.c"</cpp:file></cpp:include>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block>
    
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = A*D, column scale with diagonal D matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AxD__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>D</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_colscale_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = D*B, row scale with diagonal D matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_DxB__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>D</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_AxB_rowscale_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseAdd: C=A+B, C&lt;M&gt;=A+B, C&lt;!M&gt;=A+B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AaddB__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_sparsity</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>is_eWiseUnion</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>alpha_scalar_in</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>beta_scalar_in</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Ch_is_Mh</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_ntasks</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>B_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>alpha_scalar</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>beta_scalar</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>is_eWiseUnion</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>alpha_scalar</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>alpha_scalar_in</name><operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><name>beta_scalar</name>  <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>beta_scalar_in</name> <operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add_template.c"</cpp:file></cpp:include>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C=A.*B, C&lt;M&gt;=A.*B, or C&lt;M!&gt;=A.*B where C is sparse/hyper</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AemultB__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_sparsity</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ewise_method</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>C_to_B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_ntasks</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_meta.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C&lt;#&gt; = A.*B when A is sparse/hyper and B is bitmap/full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AemultB_02__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>flipxy</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp_kfirst</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>A_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>A_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_BINOP_FLIP</name></expr></cpp:if>
        <comment type="line">// The operator is not commutative, and does not have a flipped</comment>
        <comment type="line">// variant.  For example z=atan2(y,x).</comment>
        <if_stmt><if>if <condition>(<expr><name>flipxy</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// use fmult(y,x)</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// use fmult(x,y)</comment>
            <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
        </block_content>}</block></else></if_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <comment type="line">// No need to handle the flip: the operator is either commutative, or</comment>
        <comment type="line">// has been handled by changing z=div(y,x) to z=rdiv(x,y) for example.</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FLIPPED</name></cpp:undef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FLIPPED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_02_template.c"</cpp:file></cpp:include>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C&lt;M&gt; = A.*B, M sparse/hyper, A and B bitmap/full</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AemultB_04__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp_kfirst</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>M_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult_04_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// eWiseMult: C=A.*B, C&lt;M&gt;=A.*B, C&lt;!M&gt;=A.*B where C is bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_AemultB_bitmap__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>ewise_method</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>M_ek_slicing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_ntasks</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>M_nthreads</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>C_nthreads</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_bitmap_emult_template.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cx = op (x,Bx):  apply a binary operator to a matrix with scalar bind1st</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_bind1st__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx_output</name></decl></parameter>,         <comment type="line">// Cx and Bx may be aliased</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>x_input</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>Bx_input</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bb</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>bnz</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>Cx_output</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type>   <name>x</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>x_input</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Bx</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>Bx_input</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>bnz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Bb</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>bij</name> <init>= <expr><call><name>GBX</name> <argument_list>(<argument><expr><name>Bx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <name>bij</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// Cx = op (Ax,y):  apply a binary operator to a matrix with scalar bind2nd</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_bind2nd__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx_output</name></decl></parameter>,         <comment type="line">// Cx and Ax may be aliased</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>Ax_input</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>y_input</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>anz</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>Cx_output</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>Ax_input</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type>   <name>y</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>y_input</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>aij</name> <init>= <expr><call><name>GBX</name> <argument_list>(<argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>aij</name> <operator>&gt;</operator> <name>y</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = op (x, A'): transpose and apply a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<comment type="line">// cij = op (x, aij), no typecasting (in spite of the macro name)</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                       \
<cpp:value>{                                               \
    uint16_t aij = GBX (Ax, pA, false) ;               \
    Cx [pC] = (x &gt; aij) ;        \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_bind1st_tran__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>x_input</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Workspaces</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_slice</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nworkspaces</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <comment type="line">// GB_unop_transpose.c uses GB_ATYPE, but A is</comment>
    <comment type="line">// the 2nd input to binary operator z=f(x,y).</comment>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ATYPE</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>uint16_t</cpp:value></cpp:define>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>x</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>x_input</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_ATYPE</name></cpp:undef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ATYPE</name></cpp:macro> \
    <cpp:value>uint16_t</cpp:value></cpp:define>
</block_content>}</block></function>



<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = op (A', y): transpose and apply a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>



<comment type="line">// cij = op (aij, y), no typecasting (in spite of the macro name)</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_CAST_OP</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_CAST_OP</name><parameter_list>(<parameter><type><name>pC</name></type></parameter>,<parameter><type><name>pA</name></type></parameter>)</parameter_list></cpp:macro>                       \
<cpp:value>{                                               \
    uint16_t aij = GBX (Ax, pA, false) ;               \
    Cx [pC] = (aij &gt; y) ;        \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name> <name>GB</name></type> (<name>_bind2nd_tran__isgt_uint16</name>)
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier></type><name>y_input</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>Workspaces</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>A_slice</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nworkspaces</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>GB_DISABLE</name></expr></cpp:if>
    <return>return <expr><operator>(</operator><name>GrB_NO_VALUE</name><operator>)</operator></expr> ;</return>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>y</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>y_input</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop_transpose.c"</cpp:file></cpp:include>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
