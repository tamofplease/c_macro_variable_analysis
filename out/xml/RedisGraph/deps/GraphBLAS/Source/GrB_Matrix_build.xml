<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Matrix_build.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Matrix_build: build a sparse GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If dup is NULL: any duplicates result in an error.</comment>
<comment type="line">// If dup is GxB_IGNORE_DUP: duplicates are ignored, which is not an error.</comment>
<comment type="line">// If dup is a valid binary operator, it is used to reduce any duplicates to</comment>
<comment type="line">// a single value.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_build.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MATRIX_BUILD</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>,<parameter><type><name>T</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro>                                  \
<cpp:value>GrB_Info GB_EVAL3 (prefix, _Matrix_build_, T) <comment type="block">/* build a matrix from tuples */</comment>\
(                                                                             \
    GrB_Matrix C,                   <comment type="block">/* matrix to build                    */</comment>  \
    const GrB_Index *I,             <comment type="block">/* array of row indices of tuples     */</comment>  \
    const GrB_Index *J,             <comment type="block">/* array of column indices of tuples  */</comment>  \
    const type *X,                  <comment type="block">/* array of values of tuples          */</comment>  \
    GrB_Index nvals,                <comment type="block">/* number of tuples                   */</comment>  \
    const GrB_BinaryOp dup          <comment type="block">/* binary op to assemble duplicates   */</comment>  \
)                                                                             \
{                                                                             \
    GB_WHERE (C, GB_STR(prefix) "_Matrix_build_" GB_STR(T)                    \
        " (C, I, J, X, nvals, dup)") ;                                        \
    GB_BURBLE_START ("GrB_Matrix_build_" GB_STR(T)) ;                         \
    GB_RETURN_IF_NULL_OR_FAULTY (C) ;  <comment type="block">/* check now so C-&gt;type can be done */</comment> \
    GrB_Info info = GB_build (C, I, J, X, nvals, dup,                         \
        xtype, true, false, Context) ;                                        \
    GB_BURBLE_END ;                                                           \
    return (info) ;                                                           \
}</cpp:value></cpp:define>

<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>bool</argument>      , <argument>BOOL</argument>   , <argument>GrB_BOOL</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>int8_t</argument>    , <argument>INT8</argument>   , <argument>GrB_INT8</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>int16_t</argument>   , <argument>INT16</argument>  , <argument>GrB_INT16</argument> )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>int32_t</argument>   , <argument>INT32</argument>  , <argument>GrB_INT32</argument> )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>int64_t</argument>   , <argument>INT64</argument>  , <argument>GrB_INT64</argument> )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>uint8_t</argument>   , <argument>UINT8</argument>  , <argument>GrB_UINT8</argument> )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>uint16_t</argument>  , <argument>UINT16</argument> , <argument>GrB_UINT16</argument>)</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>uint32_t</argument>  , <argument>UINT32</argument> , <argument>GrB_UINT32</argument>)</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>uint64_t</argument>  , <argument>UINT64</argument> , <argument>GrB_UINT64</argument>)</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>float</argument>     , <argument>FP32</argument>   , <argument>GrB_FP32</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>double</argument>    , <argument>FP64</argument>   , <argument>GrB_FP64</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC32_t</argument>, <argument>FC32</argument>   , <argument>GxB_FC32</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GxB</argument>, <argument>GxB_FC64_t</argument>, <argument>FC64</argument>   , <argument>GxB_FC64</argument>  )</argument_list></macro>
<macro><name>GB_MATRIX_BUILD</name> <argument_list>(<argument>GrB</argument>, <argument>void</argument>      , <argument>UDT</argument>    , <argument>C-&gt;type</argument>   )</argument_list></macro>

</unit>
