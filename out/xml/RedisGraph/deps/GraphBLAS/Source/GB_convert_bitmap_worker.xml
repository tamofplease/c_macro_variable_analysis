<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_bitmap_worker.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_bitmap_worker: construct triplets or CSC/CSR from bitmap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// If A is iso and Ax_new is not NULL, the iso scalar is expanded into the</comment>
<comment type="line">// non-iso array Ax_new.  Otherwise, if Ax_new and Ax are NULL then no values</comment>
<comment type="line">// are extracted.</comment>

<comment type="line">// TODO allow this function to do typecasting.  Create 169 different versions</comment>
<comment type="line">// for all 13x13 versions.  Use this as part of Method 24, C=A assignment.</comment>
<comment type="line">// Can also use typecasting for GB_Matrix_diag.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_convert_bitmap_worker</name>   <comment type="line">// extract CSC/CSR or triplets from bitmap</comment>
<parameter_list>(
    <comment type="line">// outputs:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name></decl></parameter>,           <comment type="line">// vector pointers for CSC/CSR form</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name></decl></parameter>,           <comment type="line">// indices for CSC/CSR or triplet form</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Aj</name></decl></parameter>,           <comment type="line">// vector indices for triplet form</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax_new</name></decl></parameter>,       <comment type="line">// values for CSC/CSR or triplet form</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>anvec_nonempty</name></decl></parameter>,        <comment type="line">// # of non-empty vectors</comment>
    <comment type="line">// inputs: not modified</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,             <comment type="line">// matrix to extract; not modified</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ap</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <comment type="line">// must be provided on input, size avdim+1</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>W</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>W_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avdim</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>avlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// count the entries in each vector</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>avlen</name><operator>*</operator><name>avdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>by_vector</name> <init>= <expr><operator>(</operator><name>nthreads</name> <operator>&lt;=</operator> <name>avdim</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>by_vector</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute all vectors in parallel (no workspace)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// ajnz = nnz (A (:,j))</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>avlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <comment type="line">// see if A(i,j) is present in the bitmap</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>ajnz</name> <operator>+=</operator> <name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ajnz</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute blocks of rows in parallel</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// allocate one row of W per thread, each row of length avdim</comment>
        <expr_stmt><expr><name>W</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>nthreads</name> <operator>*</operator> <name>avdim</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>W</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// out of memory</comment>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wtask</name> <init>= <expr><name>W</name> <operator>+</operator> <name>taskid</name> <operator>*</operator> <name>avdim</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// ajnz = nnz (A (istart:iend-1,j))</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// see if A(i,j) is present in the bitmap</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name>ajnz</name> <operator>+=</operator> <name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name><name>Wtask</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ajnz</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// cumulative sum to compute nnz(A(:,j)) for each vector j</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ajnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>taskid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wtask</name> <init>= <expr><name>W</name> <operator>+</operator> <name>taskid</name> <operator>*</operator> <name>avdim</name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>Wtask</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>Wtask</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ajnz</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ajnz</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ajnz</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// cumulative sum of Ap </comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>avdim</name></expr></argument>, <argument><expr><name>anvec_nonempty</name></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Ap</name> <index>[<expr><name>avdim</name></expr>]</index></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>nvals</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// gather the pattern and values from the bitmap</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// TODO: add type-specific versions for built-in types</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>A_iso</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>numeric</name> <init>= <expr><operator>(</operator><name>Ax_new</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>Ax</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>by_vector</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// construct all vectors in parallel (no workspace)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// gather from the bitmap into the new A (:,j)</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pnew</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>avlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// A(i,j) is in the bitmap</comment>
                    <if_stmt><if>if <condition>(<expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Ai</name> <index>[<expr><name>pnew</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>Aj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Aj</name> <index>[<expr><name>pnew</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>numeric</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// Ax_new [pnew] = Ax [p])</comment>
                        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ax_new</name> <operator>+</operator><operator>(</operator><name>pnew</name><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                            <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>A_iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>asize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>pnew</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pnew</name> <operator>==</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute blocks of rows in parallel</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>taskid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>taskid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>taskid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>taskid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Wtask</name> <init>= <expr><name>W</name> <operator>+</operator> <name>taskid</name> <operator>*</operator> <name>avdim</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>taskid</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>avdim</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// gather from the bitmap into the new A (:,j)</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pnew</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>Wtask</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name>j</name> <operator>*</operator> <name>avlen</name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// see if A(i,j) is present in the bitmap</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name>i</name> <operator>+</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>Ab</name> <index>[<expr><name>p</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// A(i,j) is in the bitmap</comment>
                        <if_stmt><if>if <condition>(<expr><name>Ai</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Ai</name> <index>[<expr><name>pnew</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>Aj</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Aj</name> <index>[<expr><name>pnew</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>numeric</name></expr>)</condition>
                        <block>{<block_content> 
                            <comment type="line">// Ax_new [pnew] = Ax [p] ;</comment>
                            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ax_new</name> <operator>+</operator><operator>(</operator><name>pnew</name><operator>)</operator><operator>*</operator><name>asize</name></expr></argument>,
                                <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><ternary><condition><expr><name>A_iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr></then><else>:<expr><operator>(</operator><name>p</name><operator>)</operator><operator>*</operator><name>asize</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                        <expr_stmt><expr><name>pnew</name><operator>++</operator></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>W</name></expr></argument>, <argument><expr><name>W_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
