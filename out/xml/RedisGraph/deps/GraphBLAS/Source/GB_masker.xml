<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_masker.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_masker: R = masker (C, M, Z) constructs R for C&lt;M&gt;=Z</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_masker (R, C, M, Z), does R=C ; R&lt;M&gt;=Z.  No typecasting is performed.</comment>
<comment type="line">// The operation is similar to both R=C+Z via GB_add and R=C.*Z via GB_emult,</comment>
<comment type="line">// depending on the value of the mask.</comment>

<comment type="line">// GB_masker is only called by GB_mask, which itself is only called by</comment>
<comment type="line">// GB_accum_mask.</comment>

<comment type="line">// Let R be the result of the mask.  In the caller, R is written back into the</comment>
<comment type="line">// final C matrix, but in GB_masker, C is a read-only matrix.  Consider the</comment>
<comment type="line">// following table, where "add" is the result of C+Z, an "emult" is the result</comment>
<comment type="line">// of C.*Z.</comment>

<comment type="line">//                                      R = masker (C,M,Z)</comment>

<comment type="line">// C(i,j)   Z(i,j)  add     emult       M(i,j)=1    M(i,j)=0</comment>

<comment type="line">// ------   ------  ------  ------      --------    --------</comment>

<comment type="line">//  cij     zij     cij+zij cij*zij     zij         cij</comment>

<comment type="line">//   -      zij     zij     -           zij         -</comment>

<comment type="line">//  cij     -       cij     -           -           cij</comment>

<comment type="line">//   -      -       -       -           -           -</comment>

<comment type="line">// As a result, GB_masker is very similar to GB_add and GB_emult.  The</comment>
<comment type="line">// vectors that appear in R are bounded by the set union of C and Z, just</comment>
<comment type="line">// like GB_add when the mask is *not* present.  The pattern of R is bounded</comment>
<comment type="line">// by the pattern of C+Z, also ignoring the mask.</comment>

<comment type="line">// C is always sparse or hypersparse; if C is bitmap or full, GB_subassign is</comment>
<comment type="line">// used instead, since C(:,:)&lt;M&gt;=Z can directly modify C in that case, without</comment>
<comment type="line">// creating zombies or pending tuples, in GB_bitmap_assign.</comment>

<comment type="line">// M and Z can have any sparsity structure: sparse, hypersparse, bitmap, or</comment>
<comment type="line">// full.  R is constructed as sparse, hypersparse, or bitmap, depending on</comment>
<comment type="line">// the sparsity of M and Z, as determined by GB_masker_sparsity.</comment>

<comment type="line">// R is iso if both C and Z are iso and zij == cij.  This is handled in</comment>
<comment type="line">// GB_masker_phase2.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_add.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_masker</name>          <comment type="line">// R = masker (C, M, Z)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>R</name></decl></parameter>,           <comment type="line">// output matrix, static header</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>R_is_csc</name></decl></parameter>,    <comment type="line">// format of output matrix R</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,     <comment type="line">// required input mask</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,   <comment type="line">// descriptor for M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>, <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,     <comment type="line">// input C matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>Z</name></decl></parameter>,     <comment type="line">// input Z matrix</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>R</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>R</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for masker"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for masker"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="string">"Z for masker"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// GB_masker not used if C is bitmap</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// GB_masker not used if C is full</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>R_sparsity</name> <init>= <expr><call><name>GB_masker_sparsity</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// initializations</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>Rnvec</name></decl>, <decl><type ref="prev"/><name>Rnvec_nonempty</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Rp</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Rp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Rh</name>     <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Rh_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>R_to_M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>R_to_M_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>R_to_C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>R_to_C_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>R_to_Z</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>R_to_Z_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>R_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>R_nthreads</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier></type><name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase0: finalize the sparsity structure of R and the vectors of R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// This phase is identical to phase0 of GB_add, except that Ch is never a</comment>
    <comment type="line">// deep or shallow copy of Mh.</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_add_phase0</name> <argument_list>(
        <comment type="line">// computed by by phase0:</comment>
        <argument><expr><operator>&amp;</operator><name>Rnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rh_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>R_to_M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_to_M_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>R_to_C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_to_C_size</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>R_to_Z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_to_Z_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_sparsity</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"masker:(%s:%s%s%s%s%s=%s) "</literal></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char</name> <argument_list>(<argument><expr><name>R_sparsity</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"{"</literal></expr> </then><else>: <expr><literal type="string">"&lt;"</literal></expr></else></ternary></expr></argument>,
        <argument><expr><ternary><condition><expr><name>Mask_comp</name></expr> ?</condition><then> <expr><literal type="string">"!"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><name>Mask_struct</name></expr> ?</condition><then> <expr><literal type="string">"}"</literal></expr> </then><else>: <expr><literal type="string">"&gt;"</literal></expr></else></ternary></expr></argument>,
        <argument><expr><call><name>GB_sparsity_char_matrix</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase1: split R into tasks, and count entries in each vector of R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>R_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>R_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// R is sparse or hypersparse: slice and analyze the R matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// phase1a: split R into tasks</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_ewise_slice</name> <argument_list>(
            <comment type="line">// computed by phase1a</comment>
            <argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TaskList_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_ntasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R_nthreads</name></expr></argument>,
            <comment type="line">// computed by phase0:</comment>
            <argument><expr><name>Rnvec</name></expr></argument>, <argument><expr><name>Rh</name></expr></argument>, <argument><expr><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_Z</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <comment type="line">// original input:</comment>
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory; free everything allocated by GB_add_phase0</comment>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Rh</name></expr></argument>, <argument><expr><name>Rh_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_C_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_Z</name></expr></argument>, <argument><expr><name>R_to_Z_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// count the number of entries in each vector of R</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_masker_phase1</name> <argument_list>(
            <comment type="line">// computed or used by phase1:</comment>
            <argument><expr><operator>&amp;</operator><name>Rp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rnvec_nonempty</name></expr></argument>,
            <comment type="line">// from phase1a:</comment>
            <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>R_ntasks</name></expr></argument>, <argument><expr><name>R_nthreads</name></expr></argument>,
            <comment type="line">// from phase0:</comment>
            <argument><expr><name>Rnvec</name></expr></argument>, <argument><expr><name>Rh</name></expr></argument>, <argument><expr><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_Z</name></expr></argument>,
            <comment type="line">// original input:</comment>
            <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory; free everything allocated by GB_add_phase0</comment>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><name>TaskList_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Rh</name></expr></argument>, <argument><expr><name>Rh_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_C_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_Z</name></expr></argument>, <argument><expr><name>R_to_Z_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// R is bitmap or full: only determine how many threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>R_nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name> <operator>*</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// phase2: compute the entries (indices and values) in each vector of R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Rp and Rh are either freed by phase2, or transplanted into R.</comment>
    <comment type="line">// Either way, they are not freed here.</comment>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_masker_phase2</name> <argument_list>(
        <comment type="line">// computed or used by phase2:</comment>
        <argument><expr><name>R</name></expr></argument>, <argument><expr><name>R_is_csc</name></expr></argument>,
        <comment type="line">// from phase1:</comment>
        <argument><expr><operator>&amp;</operator><name>Rp</name></expr></argument>, <argument><expr><name>Rp_size</name></expr></argument>, <argument><expr><name>Rnvec_nonempty</name></expr></argument>,
        <comment type="line">// from phase1a:</comment>
        <argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>R_ntasks</name></expr></argument>, <argument><expr><name>R_nthreads</name></expr></argument>,
        <comment type="line">// from phase0:</comment>
        <argument><expr><name>Rnvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Rh</name></expr></argument>, <argument><expr><name>Rh_size</name></expr></argument>, <argument><expr><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_Z</name></expr></argument>, <argument><expr><name>R_sparsity</name></expr></argument>,
        <comment type="line">// original input:</comment>
        <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Mask_comp</name></expr></argument>, <argument><expr><name>Mask_struct</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>Z</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// if successful, Rh and Rp must not be freed; they are now R-&gt;h and R-&gt;p</comment>

    <comment type="line">// free workspace</comment>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>TaskList</name></expr></argument>, <argument><expr><name>TaskList_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_M</name></expr></argument>, <argument><expr><name>R_to_M_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_C</name></expr></argument>, <argument><expr><name>R_to_C_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R_to_Z</name></expr></argument>, <argument><expr><name>R_to_Z_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory; note that Rp and Rh are already freed</comment>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"R output for masker"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
