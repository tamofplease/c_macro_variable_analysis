<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_masker_phase2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_masker_phase2: phase2 for R = masker (C,M,Z)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// GB_masker_phase2 computes R = masker (C,M,Z).  It is preceded first by</comment>
<comment type="line">// GB_add_phase0, which computes the list of vectors of R to compute (Rh) and</comment>
<comment type="line">// their location in C and Z (R_to_[CZ]).  Next, GB_masker_phase1 counts the</comment>
<comment type="line">// entries in each vector R(:,j) and computes Rp.</comment>

<comment type="line">// GB_masker_phase2 computes the pattern and values of each vector of R(:,j),</comment>
<comment type="line">// entirely in parallel.</comment>

<comment type="line">// R, M, C, and Z can be standard sparse or hypersparse, as determined by</comment>
<comment type="line">// GB_add_phase0.  All cases of the mask M are handled: present and not</comment>
<comment type="line">// complemented, and present and complemented.  The mask is always present.</comment>

<comment type="line">// This function either frees Rp and Rh, or transplants then into R, as R-&gt;p</comment>
<comment type="line">// and R-&gt;h.  Either way, the caller must not free them.</comment>

<comment type="line">// R is iso if both C and Z are iso and zij == cij.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mask.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ek_slice.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unused.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_WORKSPACE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                   \
<cpp:value>{                                           \
    GB_WERK_POP (M_ek_slicing, int64_t) ;   \
    GB_WERK_POP (C_ek_slicing, int64_t) ;   \
}</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>GB_FREE_ALL</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                         \
<cpp:value>{                                           \
    GB_FREE_WORKSPACE ;                     \
    GB_phybix_free (R) ;                    \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_masker_phase2</name>           <comment type="line">// phase2 for R = masker (C,M,Z)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>R</name></decl></parameter>,                   <comment type="line">// output matrix, static header</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>R_is_csc</name></decl></parameter>,            <comment type="line">// format of output matrix R</comment>
    <comment type="line">// from phase1:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Rp_handle</name></decl></parameter>,            <comment type="line">// vector pointers for R</comment>
    <parameter><decl><type><name>size_t</name></type> <name>Rp_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Rnvec_nonempty</name></decl></parameter>,   <comment type="line">// # of non-empty vectors in R</comment>
    <comment type="line">// tasks from phase1a:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name></decl></parameter>,     <comment type="line">// array of structs</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>R_ntasks</name></decl></parameter>,               <comment type="line">// # of tasks</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>R_nthreads</name></decl></parameter>,             <comment type="line">// # of threads to use</comment>
    <comment type="line">// analysis from phase0:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>Rnvec</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>Rh_handle</name></decl></parameter>,
    <parameter><decl><type><name>size_t</name></type> <name>Rh_size</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_to_M</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_to_C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>R_to_Z</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>R_sparsity</name></decl></parameter>,
    <comment type="line">// original input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,             <comment type="line">// required mask</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,           <comment type="line">// if true, then M is complemented</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_struct</name></decl></parameter>,         <comment type="line">// if true, use the only structure of M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>Z</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"M for mask phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C for mask phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>, <argument><expr><literal type="string">"Z for mask phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <comment type="line">// not used if C is bitmap</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vdim</name></name> <operator>&amp;&amp;</operator> <name><name>C</name><operator>-&gt;</operator><name>vlen</name></name> <operator>==</operator> <name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>Z</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>R</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>R</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>C_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>M_ek_slicing</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Rp_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Rh_handle</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Rp</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Rp_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Rh</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Rh_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the output matrix R</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>R_is_hyper</name> <init>= <expr><operator>(</operator><name>R_sparsity</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>R_is_sparse_or_hyper</name> <init>= <expr><operator>(</operator><name>R_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name><operator>)</operator> <operator>||</operator> <name>R_is_hyper</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>R_is_sparse_or_hyper</name> <operator>==</operator> <operator>(</operator><name>Rp</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>R_is_hyper</name> <operator>==</operator> <operator>(</operator><name>Rh</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>rnz</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>R_is_sparse_or_hyper</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Rp</name> <index>[<expr><name>Rnvec</name></expr>]</index></name></expr> </then><else>: <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name><operator>*</operator><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>czsize</name> <init>= <expr><name><name>Z</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>R_iso</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>znz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>Z</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// C is empty: R is iso if Z is iso</comment>
        <expr_stmt><expr><name>R_iso</name> <operator>=</operator> <name><name>Z</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>znz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Z is empty: R is iso if C is iso</comment>
        <expr_stmt><expr><name>R_iso</name> <operator>=</operator> <name><name>C</name><operator>-&gt;</operator><name>iso</name></name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// C and Z are both non-empty:  R is iso if both C and Z are</comment>
        <comment type="line">// iso, and have the same iso value.</comment>
        <expr_stmt><expr><name>R_iso</name> <operator>=</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <name><name>Z</name><operator>-&gt;</operator><name>iso</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Z</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>czsize</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// allocate the result R (but do not allocate R-&gt;p or R-&gt;h)</comment>
    <comment type="line">// set R-&gt;iso = R_iso   OK</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <comment type="line">// any sparsity, existing header</comment>
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>GB_Ap_null</name></expr></argument>, <argument><expr><name>R_is_csc</name></expr></argument>,
        <argument><expr><name>R_sparsity</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>Rnvec</name></expr></argument>, <argument><expr><name>rnz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>R_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory; caller must free R_to_M, R_to_C, R_to_Z</comment>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Rp_handle</name></expr></argument>, <argument><expr><name>Rp_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>Rh_handle</name></expr></argument>, <argument><expr><name>Rh_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add Rp as the vector pointers for R, from GB_masker_phase1</comment>
    <if_stmt><if>if <condition>(<expr><name>R_is_sparse_or_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>Rnvec_nonempty</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Rp</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Rp_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>rnz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Rp_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add Rh as the hypersparse list for R, from GB_add_phase0</comment>
    <if_stmt><if>if <condition>(<expr><name>R_is_hyper</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Rh</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Rh_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>Rnvec</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Rh_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// now Rp and Rh have been transplanted into R, so they must not be freed.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Rp_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>Rh_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>R</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// generic worker</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_PHASE_2_OF_2</name></cpp:macro></cpp:define>
    <if_stmt><if>if <condition>(<expr><name>R_iso</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// R can be iso only if C and/or Z are iso</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(iso mask) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ISO_MASKER</name></cpp:macro></cpp:define>
        <if_stmt><if>if <condition>(<expr><name>cnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Z must be iso; copy its iso value into R</comment>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>Z</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>czsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C must be iso; copy its iso value into R</comment>
            <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name><name>R</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>czsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_masker_template.c"</cpp:file></cpp:include>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_masker_template.c"</cpp:file></cpp:include>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// prune empty vectors from Rh</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// caller must free R_to_M, R_to_C, and R_to_Z, but not Rp or Rh</comment>
    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="string">"R output for mask phase2"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_JUMBLED</name> <argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
