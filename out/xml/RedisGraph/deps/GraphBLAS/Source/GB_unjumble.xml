<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_unjumble.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_unjumble: unjumble the vectors of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_sort.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_unjumble</name>        <comment type="line">// unjumble a matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// matrix to unjumble</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A to unjumble"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <comment type="line">// zombies must be killed first</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <comment type="line">// pending tuples are not modified</comment>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <call><name>GB_nvec_nonempty</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// nothing to do</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// full and bitmap matrices are never jumbled </comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anvec</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>iso</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>anz</name> <operator>+</operator> <name>anvec</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_slice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><name>anvec</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort the vectors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>asize</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr> :</case> <comment type="line">// iso matrices of any type; only sort the pattern</comment>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1 (Ai+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
            <break>break ;</break>

        <case>case <expr><name>GB_1BYTE</name></expr> :</case> <comment type="line">// bool, uint8, int8, and user defined types of size 1</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b_size1 (Ai+pA_start, Ax+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GB_2BYTE</name></expr> :</case> <comment type="line">// uint16, int16, and user-defined types of size 2</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b_size2 (Ai+pA_start, Ax+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GB_4BYTE</name></expr> :</case> <comment type="line">// uint32, int32, float, and 4-byte user</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b_size4 (Ai+pA_start, Ax+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GB_8BYTE</name></expr> :</case> <comment type="line">// uint64, int64, double, float complex, and 8-byte user</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b_size8 (Ai+pA_start, Ax+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>

        <case>case <expr><name>GB_16BYTE</name></expr> :</case> <comment type="line">// double complex, and user-defined types of size 16</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GB_blob16</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_blob16</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b_size16 (Ai+pA_start, Ax+pA_start, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>

        <default>default :</default> <comment type="line">// user-defined types of arbitrary size</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><operator>(</operator><name>GB_void</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_QSORT</name></cpp:macro> \
                <cpp:value>GB_qsort_1b (Ai+pA_start, Ax+pA_start*asize, asize, aknz) ;</cpp:value></cpp:define>
            <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unjumbled_template.c"</cpp:file></cpp:include>
        </block_content>}</block>
        <break>break ;</break>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>        <comment type="line">// A has been unjumbled</comment>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A unjumbled"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <macro><name>ASSERT</name> <argument_list>(<argument>A-&gt;nvec_nonempty &gt;= <literal type="number">0</literal></argument>)</argument_list></macro>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
