<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_Op_free.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_Op_free: free any operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_Op_free</name>             <comment type="line">// free a user-created op</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_Operator</name> <modifier>*</modifier></type><name>op_handle</name></decl></parameter>      <comment type="line">// handle of operator to free</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>op_handle</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// only free a dynamically-allocated operator</comment>
        <decl_stmt><decl><type><name>GB_Operator</name></type> <name>op</name> <init>= <expr><operator>*</operator><name>op_handle</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>op</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>header_size</name></name></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>size_t</name></type> <name>defn_size</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>defn_size</name></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>defn_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content> 
                    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>op</name><operator>-&gt;</operator><name>defn</name></name><operator>)</operator></expr></argument>, <argument><expr><name>defn_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_FREED</name></expr> ;</expr_stmt>  <comment type="line">// to help detect dangling pointers</comment>
                <expr_stmt><expr><name><name>op</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><name>op_handle</name></expr></argument>, <argument><expr><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
