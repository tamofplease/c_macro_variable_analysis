<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_emult_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_emult_sparsity: determine the sparsity structure for C&lt;M or !M&gt;=A.*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Determines the sparsity structure for C, for computing C=A.*B, C&lt;M&gt;=A.*B,</comment>
<comment type="line">// or C&lt;!M&gt;=A.*B, based on the sparsity structures of M, A, and B, and whether</comment>
<comment type="line">// or not M is complemented.  It also decides if the mask M should be applied</comment>
<comment type="line">// by GB_emult, or if C=A.*B should be computed without the mask, and the mask</comment>
<comment type="line">// applied later.</comment>

<comment type="line">// If C should be constructed as hypersparse or sparse, this function simply</comment>
<comment type="line">// returns GxB_SPARSE.  The final determination is made later.</comment>

<comment type="line">// If both A and B are full, then GB_ewise can call GB_add instead of GB_emult.</comment>
<comment type="line">// This is the only case where the eWise multiply can produce a full C matrix,</comment>
<comment type="line">// and as a result, there is no need for a GB_emult to handle the case when</comment>
<comment type="line">// C is full.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_emult.h"</cpp:file></cpp:include>

<comment type="line">// GB_MASK_VERY_SPARSE is true if C&lt;M&gt;=A+B, C&lt;M&gt;=A.*B or C&lt;M&gt;=accum(C,T) is</comment>
<comment type="line">// being computed, and the mask M is very sparse compared with A and B.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_MASK_VERY_SPARSE</name><parameter_list>(<parameter><type><name>mfactor</name></type></parameter>,<parameter><type><name>M</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>((mfactor) * GB_nnz (M) &lt; GB_nnz (A) + GB_nnz (B))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>GB_emult_sparsity</name>       <comment type="line">// return the sparsity structure for C</comment>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>apply_mask</name></decl></parameter>,       <comment type="line">// if true then mask will be applied by GB_emult</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ewise_method</name></decl></parameter>,      <comment type="line">// method to use</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>M</name></decl></parameter>,     <comment type="line">// optional mask for C, unused if NULL</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>Mask_comp</name></decl></parameter>,   <comment type="line">// if true, use !M</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,     <comment type="line">// input A matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>B</name></decl></parameter>      <comment type="line">// input B matrix</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Unless deciding otherwise, use the mask if it appears</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>M</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>C_sparsity</name></decl> ;</decl_stmt>

    <comment type="line">// In the table below, sparse/hypersparse are listed as "sparse".  If C is</comment>
    <comment type="line">// listed as sparse, it will become sparse or hypersparse, depending on the</comment>
    <comment type="line">// method.</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>M_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_sparse_or_hyper</name> <init>= <expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_full</name> <init>= <expr><call><name>GB_as_if_full</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      C       =           A       .*      B</comment>
        <comment type="line">//      ------------------------------------------</comment>
        <comment type="line">//      sparse  .           sparse          sparse  (method: 8)</comment>
        <comment type="line">//      sparse  .           sparse          bitmap  (method: 2)</comment>
        <comment type="line">//      sparse  .           sparse          full    (method: 2)</comment>
        <comment type="line">//      sparse  .           bitmap          sparse  (method: 3)</comment>
        <comment type="line">//      bitmap  .           bitmap          bitmap  (method: 5)</comment>
        <comment type="line">//      bitmap  .           bitmap          full    (method: 5)</comment>
        <comment type="line">//      sparse  .           full            sparse  (method: 3)</comment>
        <comment type="line">//      bitmap  .           full            bitmap  (method: 5)</comment>
        <comment type="line">//      full    .           full            full    (must use GB_add)</comment>

        <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C=A.*B with A and B both sparse/hyper, C sparse</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD8</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C=A.*B with A sparse/hyper, B bitmap/full</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD2</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>B_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C=A.*B with B sparse/hyper, A bitmap/full</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD3</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// C=A.*B with A and B full, must use GB_add since GB_emult does</comment>
            <comment type="line">// not handle the case when C is full.</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD1_ADD</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// C=A.*B, otherwise, C bitmap</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD5</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>Mask_comp</name></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C       &lt;M&gt;=        A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  sparse      sparse          sparse  (method: 8)</comment>
            <comment type="line">//      sparse  sparse      sparse          bitmap  (9 or 2)</comment>
            <comment type="line">//      sparse  sparse      sparse          full    (9 or 2)</comment>
            <comment type="line">//      sparse  sparse      bitmap          sparse  (10 or 3)</comment>
            <comment type="line">//      sparse  sparse      bitmap          bitmap  (method: 4)</comment>
            <comment type="line">//      sparse  sparse      bitmap          full    (method: 4)</comment>
            <comment type="line">//      sparse  sparse      full            sparse  (10 or 3)</comment>
            <comment type="line">//      sparse  sparse      full            bitmap  (method: 4)</comment>
            <comment type="line">//      sparse  sparse      full            full    (GB_add or 4)</comment>

            <comment type="line">// C&lt;M&gt;=A.*B with M sparse/hyper, C sparse</comment>
            <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;M&gt;=A.*B with A and B both sparse/hyper, C sparse</comment>
                <comment type="line">// apply the mask only if it is extremely sparse</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <call><name>GB_MASK_VERY_SPARSE</name> <argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD8</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C&lt;M&gt;=A.*B with A sparse/hyper, B bitmap/full</comment>
                <comment type="line">// apply the mask only if it is very sparse</comment>
                <if_stmt><if>if <condition>(<expr><call><name>GB_MASK_VERY_SPARSE</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C&lt;M&gt;=A.*B with A sparse/hyper, B bitmap/full</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD9</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// C&lt;M&gt;=A.*B with A sparse/hyper, B bitmap/full, mask later</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD2</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C&lt;M&gt;=A.*B with B sparse/hyper, A bitmap/full</comment>
                <comment type="line">// apply the mask only if it is very sparse</comment>
                <if_stmt><if>if <condition>(<expr><call><name>GB_MASK_VERY_SPARSE</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// C&lt;M&gt;=A.*B with A bitmap/full, B sparse/hyper</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD10</name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// C&lt;M&gt;=A.*B with A bitmap/full, B sparse/hyper, mask later</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD3</name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C=A.*B with A and B full</comment>
                <comment type="line">// (*ewise_method) = GB_EMULT_METHOD1_ADD ;  this is possible</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD4</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C=A.*B, otherwise</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD4</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;M&gt; =        A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  bitmap      sparse          sparse  (method: 8)</comment>
            <comment type="line">//      sparse  bitmap      sparse          bitmap  (method: 2)</comment>

            <comment type="line">//      sparse  bitmap      sparse          full    (method: 2)</comment>
            <comment type="line">//      sparse  bitmap      bitmap          sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          full    (method: 7)</comment>
            <comment type="line">//      sparse  bitmap      full            sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  bitmap      full            bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  bitmap      full            full    (GB_add or 7)</comment>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;M&gt; =        A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  full        sparse          sparse  (method: 8)</comment>
            <comment type="line">//      sparse  full        sparse          bitmap  (method: 2)</comment>
            <comment type="line">//      sparse  full        sparse          full    (method: 2)</comment>
            <comment type="line">//      sparse  full        bitmap          sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  full        bitmap          bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  full        bitmap          full    (method: 7)</comment>
            <comment type="line">//      sparse  full        full            sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  full        full            bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  full        full            full    (GB_add or 7)</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;M&gt;=A.*B with A and B both sparse/hyper, C sparse</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD8</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;M&gt;=A.*B with A sparse/hyper, B bitmap/full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD2</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;M&gt;=A.*B with B sparse/hyper, A bitmap/full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD3</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;M&gt;=A.*B with A and B full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <comment type="line">// (*ewise_method) = GB_EMULT_METHOD1_ADD ;  this is possible</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD7</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C=A.*B, otherwise, C bitmap</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD7</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// Mask_comp</comment>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>M_is_sparse_or_hyper</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C       &lt;!M&gt;=       A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  sparse      sparse          sparse  (8: M later)</comment>
            <comment type="line">//      sparse  sparse      sparse          bitmap  (2: M later)</comment>
            <comment type="line">//      sparse  sparse      sparse          full    (2: M later)</comment>
            <comment type="line">//      sparse  sparse      bitmap          sparse  (3: M later)</comment>
            <comment type="line">//      bitmap  sparse      bitmap          bitmap  (method: 6)</comment>
            <comment type="line">//      bitmap  sparse      bitmap          full    (method: 6)</comment>
            <comment type="line">//      sparse  sparse      full            sparse  (3: M later)</comment>
            <comment type="line">//      bitmap  sparse      full            bitmap  (method: 6)</comment>
            <comment type="line">//      bitmap  sparse      full            full    (GB_add or 6)</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A and B sparse/hyper, C sparse, M later</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD8</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A sparse/hyper, B bitmap/full, M later</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD2</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with B sparse/hyper, A bitmap/full, M later</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>apply_mask</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD3</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A and B full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <comment type="line">// (*ewise_method) = GB_EMULT_METHOD1_ADD ;  this is possible</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD6</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B, otherwise, C bitmap</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD6</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;!M&gt; =       A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  bitmap      sparse          sparse  (method: 8)</comment>
            <comment type="line">//      sparse  bitmap      sparse          bitmap  (method: 2)</comment>
            <comment type="line">//      sparse  bitmap      sparse          full    (method: 2)</comment>
            <comment type="line">//      sparse  bitmap      bitmap          sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  bitmap      bitmap          full    (method: 7)</comment>
            <comment type="line">//      sparse  bitmap      full            sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  bitmap      full            bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  bitmap      full            full    (GB_add or 7)</comment>

            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      C      &lt;!M&gt; =       A       .*      B</comment>
            <comment type="line">//      ------------------------------------------</comment>
            <comment type="line">//      sparse  full        sparse          sparse  (method: 8)</comment>
            <comment type="line">//      sparse  full        sparse          bitmap  (method: 2)</comment>
            <comment type="line">//      sparse  full        sparse          full    (method: 2)</comment>
            <comment type="line">//      sparse  full        bitmap          sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  full        bitmap          bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  full        bitmap          full    (method: 7)</comment>
            <comment type="line">//      sparse  full        full            sparse  (method: 3)</comment>
            <comment type="line">//      bitmap  full        full            bitmap  (method: 7)</comment>
            <comment type="line">//      bitmap  full        full            full    (GB_add or 7)</comment>

            <if_stmt><if>if <condition>(<expr><name>A_is_sparse_or_hyper</name> <operator>&amp;&amp;</operator> <name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A and B both sparse/hyper, C sparse</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD8</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A sparse/hyper, B bitmap/full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD2</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>B_is_sparse_or_hyper</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with B sparse/hyper, A bitmap/full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD3</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>A_is_full</name> <operator>&amp;&amp;</operator> <name>B_is_full</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B with A and B full</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <comment type="line">// (*ewise_method) = GB_EMULT_METHOD1_ADD ; this is possible</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD7</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C&lt;!M&gt;=A.*B, otherwise, C bitmap</comment>
                <expr_stmt><expr><name>C_sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ewise_method</name><operator>)</operator> <operator>=</operator> <name>GB_EMULT_METHOD7</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>C_sparsity</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
