<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_convert_sparse_to_hyper.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_convert_sparse_to_hyper: convert a matrix from sparse to hyperspasre</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// On input, the matrix may have shallow A-&gt;p content; it is safely removed.</comment>
<comment type="line">// On output, the matrix is always hypersparse (even if out of memory).  If the</comment>
<comment type="line">// input matrix is non-hypersparse, it is given new A-&gt;p and A-&gt;h that are not</comment>
<comment type="line">// shallow.  If the input matrix is already hypersparse, nothing is changed</comment>
<comment type="line">// (and in that case A-&gt;p and A-&gt;h remain shallow on output if shallow on</comment>
<comment type="line">// input). The A-&gt;x and A-&gt;i content is not changed; it remains in whatever</comment>
<comment type="line">// shallow/non-shallow/iso property that it had on input).</comment>

<comment type="line">// If an out-of-memory condition occurs, all content of the matrix is cleared.</comment>

<comment type="line">// If the input matrix A is hypersparse, bitmap or full, it is unchanged.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_convert_sparse_to_hyper</name> <comment type="line">// convert from sparse to hypersparse</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// matrix to convert to hypersparse</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A converting to hypersparse"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert A from sparse to hypersparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// determine the number of threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_BURBLE_N</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="string">"(sparse to hyper) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// count the number of non-empty vectors in A in each slice</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>==</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>==</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_old</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_old_size</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>Ap_old_shallow</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name></expr></init></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Count</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl>, <decl><type ref="prev"/><name>my_nvec_nonempty</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> <empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <if_stmt><if>if <condition>(<expr><name><name>Ap_old</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>Ap_old</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>my_nvec_nonempty</name><operator>++</operator></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_nvec_nonempty</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// compute cumulative sum of Counts and nvec_nonempty</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec_nonempty</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>ntasks</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <name>nvec_nonempty</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate the new A-&gt;p and A-&gt;h</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ap_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ah_new</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Ah_new_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>plen_new</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>n</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>nvec_nonempty</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>Ap_new</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>plen_new</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Ah_new</name> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><name>plen_new</name></expr></argument>  , <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ap_new</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Ah_new</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ap_new</name></expr></argument>, <argument><expr><name>Ap_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ah_new</name></expr></argument>, <argument><expr><name>Ah_new_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// transplant the new A-&gt;p and A-&gt;h into the matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <name>plen_new</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name> <operator>=</operator> <name>nvec_nonempty</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>Ap_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name> <operator>=</operator> <name>Ap_new_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>Ah_new</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_size</name></name> <operator>=</operator> <name>Ah_new_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>h_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// construct the new hyperlist in the new A-&gt;p and A-&gt;h</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>jstart</name></decl>, <decl><type ref="prev"/><name>jend</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><name><name>Count</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>jstart</name></expr></argument>, <argument><expr><name>jend</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name>jstart</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>jend</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>Ap_old</name> <index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>Ap_old</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// vector index j is the kth vector in the new Ah</comment>
                    <expr_stmt><expr><name><name>Ap_new</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>Ap_old</name> <index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name><name>Ah_new</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>k</name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>k</name> <operator>==</operator> <name><name>Count</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>Ap_new</name> <index>[<expr><name>nvec_nonempty</name></expr>]</index></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// free workspace, and free the old A-&gt;p unless it's shallow</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Count</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>Ap_old_shallow</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Ap_old</name></expr></argument>, <argument><expr><name>Ap_old_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is now hypersparse, but A-&gt;Y is not yet constructed</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>Y</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>Y_shallow</name></name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// A is now in hypersparse form (or left as full or bitmap)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>==</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A conv to hypersparse (or left full/bitmap)"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_ZOMBIES_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_PENDING_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
