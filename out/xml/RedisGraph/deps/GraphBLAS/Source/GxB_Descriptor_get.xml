<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GxB_Descriptor_get.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GxB_Descriptor_get: get a field in a descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Use GxB_Desc_get instead; this is kept for backward compatibility.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GxB_Descriptor_get</name>     <comment type="line">// get a parameter from a descriptor</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Desc_Value</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,        <comment type="line">// value of the parameter</comment>
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,        <comment type="line">// descriptor to query; NULL is ok</comment>
    <parameter><decl><type><name>GrB_Desc_Field</name></type> <name>field</name></decl></parameter>        <comment type="line">// parameter to query</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GxB_Descriptor_get (&amp;value, desc, field)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_FAULTY</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the parameter</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <switch>switch <condition>(<expr><name>field</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GrB_OUTP</name></expr> :</case> 

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>out</name></name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GrB_MASK</name></expr> :</case> 

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>mask</name></name></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GrB_INP0</name></expr> :</case> 

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>in0</name></name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GrB_INP1</name></expr> :</case> 

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>in1</name></name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>

        <case>case <expr><name>GxB_AxB_METHOD</name></expr> :</case> 

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>val</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>desc</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_DEFAULT</name></expr> </then><else>: <expr><name><name>desc</name><operator>-&gt;</operator><name>axb</name></name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>

        <default>default :</default> 

            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>flush</omp:name></omp:directive></cpp:pragma>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
