<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_binop_rename.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_binop_rename: rename a bound binary operator to its unary op equivalent</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A binary operator can be applied to a matrix with GrB_apply, but some of</comment>
<comment type="line">// them can be remapped into equivalent unary operators.  Any idxunop can also</comment>
<comment type="line">// be applied, and some of them can be remapped into binary ops (with bind2nd).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_binop_rename</name>            <comment type="line">// rename a bound binary op or an idxunop</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_Operator</name> <modifier>*</modifier></type><name>op</name></decl></parameter>,            <comment type="line">// operator to rename</comment>
    <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>op</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator><operator>-&gt;</operator><name>xtype</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>xtype</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GB_ignore_code</name></expr> </then><else>: <expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename a binary op or an idxunop</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><call><name>GB_IS_BINARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// rename a binary operator to its equivalent unary op</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// for boolean: DIV becomes FIRST, RDIV becomes SECOND</comment>
            <expr_stmt><expr><name>opcode</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_FIRST_binop_code</name>  <operator>&amp;&amp;</operator> <operator>!</operator><name>binop_bind1st</name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>opcode</name> <operator>==</operator> <name>GB_SECOND_binop_code</name> <operator>&amp;&amp;</operator>  <name>binop_bind1st</name><operator>)</operator></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// first(A,scalar) and second(scalar,A) become identity(A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_IDENTITY_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_IDENTITY_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_IDENTITY_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                <default>default:</default><empty_stmt>;</empty_stmt>
            </block_content>}</block></switch>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>opcode</name> <operator>==</operator> <name>GB_PAIR_binop_code</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// pair(A,scalar) and pair(scalar,A) become one(A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <call><name>GB_unop_one</name> <argument_list>(<argument><expr><name>xcode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>GB_IS_INDEXUNARYOP_CODE</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// rename an idxunop operator to its equivalent binary op</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// All built-in GrB_IndexUnaryOps of the form GrB_VALUE* can be</comment>
        <comment type="line">// remapped to equivalent binary ops, with bind 2nd.  After this</comment>
        <comment type="line">// remapping, only the positional idxunops need to be handled in</comment>
        <comment type="line">// GB_apply, as well as user-defined idxunops.</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><name>binop_bind1st</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_VALUENE_idxunop_code</name></expr> :</case> <comment type="line">// (aij != thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_NE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_NE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_NE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_VALUEEQ_idxunop_code</name></expr> :</case> <comment type="line">// (aij == thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_EQ_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_EQ_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GxB_EQ_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_VALUEGT_idxunop_code</name></expr> :</case> <comment type="line">// (aij &gt; thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_VALUEGE_idxunop_code</name></expr> :</case> <comment type="line">// (aij &gt;= thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_GE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_VALUELT_idxunop_code</name></expr> :</case> <comment type="line">// (aij &lt; thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_VALUELE_idxunop_code</name></expr> :</case> <comment type="line">// (aij &lt;= thunk)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GB_Operator</name><operator>)</operator> <name>GrB_LE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default:</default><empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default:</default><empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
