<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_AxB_dot3_slice.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_slice: slice the entries and vectors for C&lt;M&gt;=A'*B</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Constructs a set of tasks that slice the matrix C for C&lt;M&gt;=A'*B.  The matrix</comment>
<comment type="line">// C has been allocated, and its pattern will be a copy of M, but with some</comment>
<comment type="line">// entries possibly turned into zombies.  However, on input, the pattern C-&gt;i</comment>
<comment type="line">// does yet not contain the indices, but the work required to compute each</comment>
<comment type="line">// entry in the dot product C(i,j)&lt;M(i,j)&gt; = A(:,i)'*B(:,j).</comment>

<comment type="line">// The strategy for slicing of C and M is like GB_ek_slice, for coarse tasks.</comment>
<comment type="line">// These coarse tasks differ from the tasks generated by GB_ewise_slice,</comment>
<comment type="line">// since they may start in the middle of a vector.  If a single entry C(i,j)</comment>
<comment type="line">// is costly to compute, it is possible that it is placed by itself in a</comment>
<comment type="line">// single coarse task.</comment>

<comment type="line">// FUTURE:: Ultra-fine tasks could also be constructed, so that the computation</comment>
<comment type="line">// of a single entry C(i,j) can be broken into multiple tasks.  The slice of</comment>
<comment type="line">// A(:,i) and B(:,j) would use GB_slice_vector, where no mask would be used.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                       \
<cpp:value>{                                               \
    GB_WERK_POP (Coarse, int64_t) ;             \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                             \
<cpp:value>{                                               \
    GB_FREE_WORKSPACE ;                         \
    GB_FREE_WORK (&amp;TaskList, TaskList_size) ;   \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mxm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_search_for_vector_template.c"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_AxB_dot3_slice</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>GB_AxB_dot3_slice</name>
<parameter_list>(
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>GB_task_struct</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_TaskList</name></decl></parameter>,    <comment type="line">// array of structs</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_TaskList_size</name></decl></parameter>,        <comment type="line">// size of TaskList</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_ntasks</name></decl></parameter>,                  <comment type="line">// # of tasks constructed</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_nthreads</name></decl></parameter>,                <comment type="line">// # of threads to use</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,             <comment type="line">// matrix to slice</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_TaskList_size</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_ntasks</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_nthreads</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// ASSERT_MATRIX_OK (C, ...) cannot be done since C-&gt;i is the work need to</comment>
    <comment type="line">// compute the entry, not the row index itself.</comment>

    <comment type="line">// C is always constructed as sparse or hypersparse, not full, since it</comment>
    <comment type="line">// must accomodate zombies</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cwork</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnvec</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cvlen</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>cnz</name> <init>= <expr><call><name>GB_nnz_held</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute the cumulative sum of the work</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// FUTURE:: handle possible int64_t overflow</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>total_work</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Cwork</name> <index>[<expr><name>cnz</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate the initial TaskList</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>nthreads</name> <operator>=</operator> <call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>total_work</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GB_task_struct</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>TaskList</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>TaskList_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ntasks0</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">32</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks0</name></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check for quick return for a single task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>cnvec</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ntasks0</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a single coarse task that does all the work</comment>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>cnvec</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pC</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pC_end</name>  <operator>=</operator> <name>cnz</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cnvec</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine # of threads and tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>target_task_size</name> <init>= <expr><name>total_work</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name>ntasks0</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>target_task_size</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>target_task_size</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <name>total_work</name> <operator>/</operator> <name>target_task_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ntasks1</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// slice the work into coarse tasks</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>ntasks1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Coarse</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Coarse</name></expr></argument>, <argument><expr><name>Cwork</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><name>ntasks1</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct all tasks, both coarse and fine</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>ntasks1</name></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// coarse task operates on A (:, k:klast)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>pfirst</name> <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>plast</name>  <init>= <expr><name><name>Coarse</name> <index>[<expr><name>t</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>pfirst</name> <operator>&lt;=</operator> <name>plast</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// find the first vector of the slice for task taskid: the</comment>
            <comment type="line">// vector that owns the entry Ci [pfirst] and Cx [pfirst].</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>kfirst</name> <init>= <expr><call><name>GB_search_for_vector</name> <argument_list>(<argument><expr><name>pfirst</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>,
                <argument><expr><name>cvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">// find the last vector of the slice for task taskid: the</comment>
            <comment type="line">// vector that owns the entry Ci [plast] and Cx [plast].</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>klast</name> <init>= <expr><call><name>GB_search_for_vector</name> <argument_list>(<argument><expr><name>plast</name></expr></argument>, <argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>kfirst</name></expr></argument>, <argument><expr><name>cnvec</name></expr></argument>,
                <argument><expr><name>cvlen</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <comment type="line">// construct a coarse task that computes Ci,Cx [pfirst:plast].</comment>
            <comment type="line">// These entries appear in C(:,kfirst:klast), but this task does</comment>
            <comment type="line">// not compute all of C(:,kfirst), but just the subset starting at</comment>
            <comment type="line">// Ci,Cx [pstart].  The task computes all of the vectors</comment>
            <comment type="line">// C(:,kfirst+1:klast-1).  The task computes only part of the last</comment>
            <comment type="line">// vector, ending at Ci,Cx [pC_end-1] or Ci,Cx [plast].  This</comment>
            <comment type="line">// slice strategy is the same as GB_ek_slice.</comment>

            <expr_stmt><expr><call><name>GB_REALLOC_TASK_WORK</name> <argument_list>(<argument><expr><name>TaskList</name></expr></argument>, <argument><expr><name>ntasks</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>kfirst</name> <operator>=</operator> <name>kfirst</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>klast</name>  <operator>=</operator> <name>klast</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>kfirst</name> <operator>&lt;=</operator> <name>klast</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pC</name>     <operator>=</operator> <name>pfirst</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>TaskList</name> <index>[<expr><name>ntasks</name></expr>]</index></name><operator>.</operator><name>pC_end</name> <operator>=</operator> <name>plast</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>ntasks</name><operator>++</operator></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// This task is empty, which means the coarse task that computes</comment>
            <comment type="line">// C(i,j) is doing too much work.</comment>
            <comment type="line">// FUTURE:: Use ultra-fine tasks here instead, and split the work</comment>
            <comment type="line">// for computing the single dot product C(i,j) amongst several</comment>
            <comment type="line">// ultra-fine tasks.</comment>
            <empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>ntasks</name> <operator>&lt;=</operator> <name>max_ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList</name>  <operator>)</operator> <operator>=</operator> <name>TaskList</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_TaskList_size</name><operator>)</operator> <operator>=</operator> <name>TaskList_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ntasks</name>    <operator>)</operator> <operator>=</operator> <name>ntasks</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_nthreads</name>  <operator>)</operator> <operator>=</operator> <name>nthreads</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
