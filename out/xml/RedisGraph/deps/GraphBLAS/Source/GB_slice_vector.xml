<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_slice_vector.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_slice_vector:  slice a vector for GB_add, GB_emult, and GB_mask</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A(:,kA) and B(:,kB) are two long vectors that will be added with GB_add,</comment>
<comment type="line">// GB_emult, or GB_mask, and the work to compute them needs to be split into</comment>
<comment type="line">// multiple tasks.  They represent the same vector index j, for:</comment>

<comment type="line">//      C(:,j) = A(:,j) +  B(:,j) in GB_add</comment>
<comment type="line">//      C(:,j) = A(:,j) .* B(:,j) in GB_emult</comment>
<comment type="line">//      C(:,j)&lt;M(:,j)&gt; = B(:,j) in GB_mask; A is passed in as the input C</comment>
<comment type="line">//      union (A-&gt;h, B-&gt;h) in GB_add_phase0.</comment>

<comment type="line">// The vector index j is not needed here.  The vectors kA and kB are not</comment>
<comment type="line">// required, either; just the positions where the vectors appear in A and B</comment>
<comment type="line">// (pA_start, pA_end, pB_start, and pB_end).</comment>

<comment type="line">// The inputs Mi, Ai, and Bi must be sorted on input.</comment>

<comment type="line">// This method finds i so that nnz (A (i:end,kA)) + nnz (B (i:end,kB)) is</comment>
<comment type="line">// roughly equal to target_work.  The entries in A(i:end,kA) start at position</comment>
<comment type="line">// pA in Ai and Ax, and the entries in B(i:end,kB) start at position pB in Bi</comment>
<comment type="line">// and Bx.  Once the work is split, pM is found for M(i:end,kM), if the mask M</comment>
<comment type="line">// is present.</comment>

<comment type="line">// The lists Mi, Ai, and Bi can also be any sorted integer array.  This is used</comment>
<comment type="line">// by GB_add_phase0 to construct the set union of A-&gt;h and B-&gt;h.  In this case,</comment>
<comment type="line">// pA_start and pB_start are both zero, and pA_end and pB_end are A-&gt;nvec and</comment>
<comment type="line">// B-&gt;nvec, respectively.</comment>

<comment type="line">// If n = A-&gt;vlen = B-&gt;vlen, anz = nnz (A (:,kA)), and bnz = nnz (B (:,kB)),</comment>
<comment type="line">// then the total time taken by this function is O(log(n)*(log(anz)+log(bnz))),</comment>
<comment type="line">// or at most O((log(n)^2)).</comment>

<comment type="line">// The input matrices M, A, and B are not present here, except for M-&gt;i,</comment>
<comment type="line">// A-&gt;i, and B-&gt;i if they are sparse or hypersparse.  They cannot be jumbled.</comment>
<comment type="line">// M, A, and B can have any sparsity structure.  If bitmap or full, their</comment>
<comment type="line">// corresponding [A,B,M]-&gt;i arrays are NULL.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_slice_vector</name>
<parameter_list>(
    <comment type="line">// output: return i, pA, and pB</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_i</name></decl></parameter>,                   <comment type="line">// work starts at A(i,kA) and B(i,kB)</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_pM</name></decl></parameter>,                  <comment type="line">// M(i:end,kM) starts at pM</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_pA</name></decl></parameter>,                  <comment type="line">// A(i:end,kA) starts at pA</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_pB</name></decl></parameter>,                  <comment type="line">// B(i:end,kB) starts at pB</comment>
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pM_start</name></decl></parameter>,         <comment type="line">// M(:,kM) starts at pM_start in Mi,Mx</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pM_end</name></decl></parameter>,           <comment type="line">// M(:,kM) ends at pM_end-1 in Mi,Mx</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Mi</name></decl></parameter>,  <comment type="line">// indices of M (or NULL)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_start</name></decl></parameter>,         <comment type="line">// A(:,kA) starts at pA_start in Ai,Ax</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pA_end</name></decl></parameter>,           <comment type="line">// A(:,kA) ends at pA_end-1 in Ai,Ax</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name></decl></parameter>,  <comment type="line">// indices of A (or NULL)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_start</name></decl></parameter>,         <comment type="line">// B(:,kB) starts at pB_start in Bi,Bx</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>pB_end</name></decl></parameter>,           <comment type="line">// B(:,kB) ends at pB_end-1 in Bi,Bx</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Bi</name></decl></parameter>,  <comment type="line">// indices of B (or NULL)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>vlen</name></decl></parameter>,             <comment type="line">// A-&gt;vlen and B-&gt;vlen</comment>
    <parameter><decl><type><specifier>const</specifier> <name>double</name></type> <name>target_work</name></decl></parameter>        <comment type="line">// target work</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>p_pA</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>p_pB</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find i, pA, and pB for the start of this task</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// search for index i in the range ileft:iright, inclusive</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ileft</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>iright</name> <init>= <expr><name>vlen</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>aknz</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <name>pA_start</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bknz</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <name>pB_start</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>mknz</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <name>pM_start</name></expr></init></decl> ;</decl_stmt>      <comment type="line">// zero if M not present</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>a_empty</name> <init>= <expr><operator>(</operator><name>aknz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_empty</name> <init>= <expr><operator>(</operator><name>bknz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>m_empty</name> <init>= <expr><operator>(</operator><name>mknz</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>pM</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>m_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pM_start</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>a_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pA_start</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>pB</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b_empty</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>pB_start</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <while>while <condition>(<expr><name>ileft</name> <operator>&lt;</operator> <name>iright</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// find the index i in the middle of ileft:iright</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>ileft</name> <operator>+</operator> <name>iright</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// find where i appears in A(:,kA)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>a_empty</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// Ai is empty so i does not appear</comment>
            <expr_stmt><expr><name>pA</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>aknz</name> <operator>==</operator> <name>vlen</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A(:,kA) is dense (bitmap, full, or all entries present)</comment>
            <comment type="line">// no need for a binary search</comment>
            <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pA_start</name> <operator>+</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// Ai is an explicit integer list, Ai [pA_start:pA_end-1]</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>aknz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pA_start</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>afound</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>apright</name> <init>= <expr><name>pA_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>apright</name></expr></argument>, <argument><expr><name>afound</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>afound</name></expr></argument>, <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA_start</name> <operator>&lt;=</operator> <name>pA</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;=</operator> <name>pA_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>pA</name> <operator>&gt;</operator>  <name>pA_start</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>pA</name> <operator>&gt;=</operator> <name>pA_start</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>i</name> <operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// Ai has been split.  If afound is false:</comment>
        <comment type="line">//      Ai [pA_start : pA-1] &lt; i</comment>
        <comment type="line">//      Ai [pA : pA_end-1]   &gt; i</comment>
        <comment type="line">// If afound is true:</comment>
        <comment type="line">//      Ai [pA_start : pA-1] &lt; i</comment>
        <comment type="line">//      Ai [pA : pA_end-1]  &gt;= i</comment>
        <comment type="line">//</comment>
        <comment type="line">// in both cases, if i is chosen as the breakpoint, then the</comment>
        <comment type="line">// subtask starts at index i, and position pA in Ai,Ax.</comment>

        <comment type="line">// if A(:,kA) is empty, then pA is -1</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// find where i appears in B(:,kB)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>b_empty</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// B(:,kB) is empty so i does not appear</comment>
            <expr_stmt><expr><name>pB</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>bknz</name> <operator>==</operator> <name>vlen</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// B(:,kB) is dense (bitmap, full, or all entries present)</comment>
            <comment type="line">// no need for a binary search</comment>
            <expr_stmt><expr><name>pB</name> <operator>=</operator> <name>pB_start</name> <operator>+</operator> <name>i</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// B(:,kB) is sparse, and not empty</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>bknz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Bi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>pB</name> <operator>=</operator> <name>pB_start</name></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>bfound</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>bpright</name> <init>= <expr><name>pB_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>bpright</name></expr></argument>, <argument><expr><name>bfound</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pB_start</name> <operator>&lt;=</operator> <name>pB</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;=</operator> <name>pB_end</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>pB</name> <operator>&gt;</operator>  <name>pB_start</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>pB</name> <operator>&gt;=</operator> <name>pB_start</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name></expr></argument>,
            <argument><expr><operator>(</operator><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>i</name> <operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// Bi has been split.  If bfound is false:</comment>
        <comment type="line">//      Bi [pB_start : pB-1] &lt; i</comment>
        <comment type="line">//      Bi [pB : pB_end-1]   &gt; i</comment>
        <comment type="line">// If bfound is true:</comment>
        <comment type="line">//      Bi [pB_start : pB-1] &lt; i</comment>
        <comment type="line">//      Bi [pB : pB_end-1]  &gt;= i</comment>
        <comment type="line">//</comment>
        <comment type="line">// in both cases, if i is chosen as the breakpoint, then the</comment>
        <comment type="line">// subtask starts at index i, and position pB in Bi,Bx.</comment>

        <comment type="line">// if B(:,kB) is empty, then pB is -1</comment>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// determine if the subtask is near the target task size</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>double</name></type> <name>work</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>a_empty</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>pA_end</name> <operator>-</operator> <name>pA</name><operator>)</operator></expr></else></ternary><operator>)</operator>
                    <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>b_empty</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>pB_end</name> <operator>-</operator> <name>pB</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>work</name> <operator>&lt;</operator> <literal type="number">0.9999</literal> <operator>*</operator> <name>target_work</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// work is too low</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// work is too low, so i is too high.</comment>
            <comment type="line">// Keep searching in the range (ileft:i), inclusive.</comment>

            <expr_stmt><expr><name>iright</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>work</name> <operator>&gt;</operator> <literal type="number">1.0001</literal> <operator>*</operator> <name>target_work</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// work is too high</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// work is too high, so i is too low.</comment>
            <comment type="line">// Keep searching in the range (i+1):iright, inclusive.</comment>

            <expr_stmt><expr><name>ileft</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// work is about right; use this result.</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// return i, pA, and pB as the start of this task.</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>vlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pA</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>pA_start</name> <operator>&lt;=</operator> <name>pA</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;=</operator> <name>pA_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>pB</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>(</operator><name>pB_start</name> <operator>&lt;=</operator> <name>pB</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;=</operator> <name>pB_end</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find where i appears in M(:,kM)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>m_empty</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>pM</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>mknz</name> <operator>==</operator> <name>vlen</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// M(:,kM) is dense (bitmap, full, or all entries present)</comment>
        <comment type="line">// no need for a binary search</comment>
        <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_start</name> <operator>+</operator> <name>i</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// M(:,kM) is sparse, and not empty</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>mknz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Mi</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>pM</name> <operator>=</operator> <name>pM_start</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>mfound</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>mpright</name> <init>= <expr><name>pM_end</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_SPLIT_BINARY_SEARCH</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>mpright</name></expr></argument>, <argument><expr><name>mfound</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// pM, pA, and pB partition the three vectors M(:,j), A(:,j), and B(:,j),</comment>
    <comment type="line">// or if any vector is empty, their p* pointer is -1.</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pM</name> <operator>&gt;</operator>  <name>pM_start</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;</operator> <name>pM_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>  <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pM</name> <operator>&gt;=</operator> <name>pM_start</name> <operator>&amp;&amp;</operator> <name>pM</name> <operator>&lt;</operator> <name>pM_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>pM</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pA</name> <operator>&gt;</operator>  <name>pA_start</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>  <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pA</name> <operator>&gt;=</operator> <name>pA_start</name> <operator>&amp;&amp;</operator> <name>pA</name> <operator>&lt;</operator> <name>pA_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pB</name> <operator>&gt;</operator>  <name>pB_start</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator>  <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><operator>(</operator><name>pB</name> <operator>&gt;=</operator> <name>pB_start</name> <operator>&amp;&amp;</operator> <name>pB</name> <operator>&lt;</operator> <name>pB_end</name><operator>)</operator></expr></argument>,
        <argument><expr><call><name>GBI</name> <argument_list>(<argument><expr><name>Bi</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>p_i</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_i</name><operator>)</operator>  <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>p_pM</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_pM</name><operator>)</operator> <operator>=</operator> <name>pM</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_pA</name><operator>)</operator> <operator>=</operator> <name>pA</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_pB</name><operator>)</operator> <operator>=</operator> <name>pB</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
