<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_ijproperties.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_ijproperties: check I and determine its properties</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// check a list of indices I and determine its properties</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>

<comment type="line">// FUTURE:: if limit=0, print a different message.  see also setEl, extractEl.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_ICHECK</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>limit</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
<cpp:value>{                                                                           \
    if ((i) &lt; 0 || (i) &gt;= (limit))                                          \
    {                                                                       \
        GB_ERROR (GrB_INDEX_OUT_OF_BOUNDS,                                  \
        "index " GBd " out of bounds, must be &lt; " GBd , (i), (limit)) ;     \
    }                                                                       \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_ijproperties</name>        <comment type="line">// check I and determine its properties</comment>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// list of indices, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>ni</name></decl></parameter>,           <comment type="line">// length I, or special</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>nI</name></decl></parameter>,           <comment type="line">// actual length from GB_ijlength</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>limit</name></decl></parameter>,        <comment type="line">// I must be in the range 0 to limit-1</comment>
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Ikind</name></decl></parameter>,                 <comment type="line">// kind of I, from GB_ijlength</comment>
    <parameter><decl><type><name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,         <comment type="line">// begin:inc:end from GB_ijlength</comment>
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>I_is_unsorted</name></decl></parameter>,        <comment type="line">// true if I is out of order</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>I_has_dupl</name></decl></parameter>,           <comment type="line">// true if I has a duplicate entry (undefined</comment>
                                <comment type="line">// if I is unsorted)</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>I_is_contig</name></decl></parameter>,          <comment type="line">// true if I is a contiguous list, imin:imax</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>imin_result</name></decl></parameter>,       <comment type="line">// min (I)</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>imax_result</name></decl></parameter>,       <comment type="line">// max (I)</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// inputs:</comment>
    <comment type="line">// I: a list of indices if Ikind is GB_LIST</comment>
    <comment type="line">// limit: the matrix dimension (# of rows or # of columns)</comment>
    <comment type="line">// ni: only used if Ikind is GB_LIST: the length of the array I</comment>
    <comment type="line">// nI: the length of the list I, either actual or implicit</comment>

    <comment type="line">// input/output:  these can be modified</comment>
    <comment type="line">// Ikind: GB_ALL, GB_RANGE, GB_STRIDE (both +/- inc), or GB_LIST</comment>
    <comment type="line">// Icolon: begin:inc:end for all but GB_LIST</comment>

    <comment type="line">// outputs:</comment>
    <comment type="line">// I_is_unsorted: true if Ikind == GB_LIST and not in ascending order</comment>
    <comment type="line">// I_is_contig: true if I has the form I = begin:end</comment>
    <comment type="line">// imin, imax: min (I) and max (I), but only including actual indices</comment>
    <comment type="line">//      in the sequence.  The end value of I=begin:inc:end may not be</comment>
    <comment type="line">//      reached.  For example if I=1:2:10 then max(I)=9, not 10.</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>limit</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>limit</name> <operator>&lt;=</operator> <name>GB_NMAX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>imin</name></decl>, <decl><type ref="prev"/><name>imax</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scan I</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// scan the list of indices: check if OK, determine if they are</comment>
    <comment type="line">// unsorted, or contiguous, their min and max index, and actual length</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>I_unsorted</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>I_has_duplicates</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>I_contig</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>==</operator> <name>GB_ALL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = 0:limit-1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>imin</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>imax</name> <operator>=</operator> <name>limit</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>==</operator> <name>imin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>==</operator> <name>imax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>==</operator> <name>GB_RANGE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = imin:imax</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>imin</name> <operator>=</operator> <name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>imax</name> <operator>=</operator> <name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>imin</name> <operator>&gt;</operator> <name>imax</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// imin &gt; imax: list is empty</comment>
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <name>limit</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// check the limits</comment>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>==</operator> <name>GB_STRIDE</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = imin:iinc:imax</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// int64_t ibegin = Icolon [GxB_BEGIN] ;</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name>   <init>= <expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name></expr></init></decl> ;</decl_stmt>
        <comment type="line">// int64_t iend   = Icolon [GxB_END  ] ;</comment>

        <comment type="line">// if iinc == 1 on input, the kind has been changed to GB_RANGE</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>iinc</name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// stride is zero: list is empty, contiguous, and sorted</comment>
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <name>limit</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>iinc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// stride is positive, get the first and last indices</comment>
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// stride is negative, get the first and last indices</comment>
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>nI</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <call><name>GB_ijlist</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,    <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>imin</name> <operator>&gt;</operator> <name>imax</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// list is empty: so it is contiguous and sorted</comment>
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <name>limit</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

            <comment type="line">// change this to an empty GB_RANGE</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_RANGE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>imin</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>imax</name></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// list is contiguous if the stride is 1, not contiguous otherwise</comment>
            <expr_stmt><expr><name>I_contig</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

            <comment type="line">// check the limits</comment>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// (*Ikind) == GB_LIST</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// determine the number of threads to use</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>ni</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ntasks</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>nthreads</name><operator>)</operator></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ntasks</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ntasks</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I is an array of indices</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// scan I to find imin and imax, and validate the list. Also determine</comment>
        <comment type="line">// if it is sorted or not, and contiguous or not.</comment>

        <expr_stmt><expr><name>imin</name> <operator>=</operator> <name>limit</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>imax</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

        <comment type="line">// allocate workspace for imin and imax</comment>
        <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Work_imin</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Work_imax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Work_imin</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Work_imax</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>Work_imin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Work_imax</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// out of memory</comment>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Work_imax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Work_imin</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>dynamic</omp:expr></omp:argument>,<omp:argument><omp:expr>1</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>||:I_unsorted</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>&amp;&amp;:I_contig</omp:expr></omp:argument>)</omp:argument_list></omp:clause> \
            <omp:clause><omp:name>reduction</omp:name><omp:argument_list>(<omp:argument><omp:expr>||:I_has_duplicates</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>my_imin</name> <init>= <expr><name>limit</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>my_imax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>istart</name></decl>, <decl><type ref="prev"/><name>iend</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_PARTITION</name> <argument_list>(<argument><expr><name>istart</name></expr></argument>, <argument><expr><name>iend</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>ntasks</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>istart</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name><name>I</name> <index>[<expr><name>istart</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inew</name> <init>= <expr><name>istart</name></expr></init></decl> ;</init> <condition><expr><name>inew</name> <operator>&lt;</operator> <name>iend</name></expr> ;</condition> <incr><expr><name>inew</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>I</name> <index>[<expr><name>inew</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>inew</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ilast</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// The list I of row indices is out of order, and</comment>
                        <comment type="line">// C=A(I,J) will need to use qsort to sort each column.</comment>
                        <comment type="line">// If C=A(I,J)' is computed, however, this flag will be</comment>
                        <comment type="line">// set back to false, since qsort is not needed if the</comment>
                        <comment type="line">// result is transposed.</comment>
                        <expr_stmt><expr><name>I_unsorted</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilast</name></expr>)</condition>
                    <block>{<block_content> 
                        <comment type="line">// I has at least one duplicate entry.  If I is</comment>
                        <comment type="line">// unsorted, then it is not known if I has duplicates</comment>
                        <comment type="line">// or not.  But if I is sorted, but with duplicates,</comment>
                        <comment type="line">// then this flag will be true.</comment>
                        <expr_stmt><expr><name>I_has_duplicates</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>ilast</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
                    <block>{<block_content> 
                        <expr_stmt><expr><name>I_contig</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>my_imin</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>my_imin</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>my_imax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>my_imax</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Work_imin</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_imin</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Work_imax</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <name>my_imax</name></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// wrapup</comment>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>ntasks</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <expr_stmt><expr><name>imin</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><name><name>Work_imin</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>imax</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><name><name>Work_imax</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// free workspace</comment>
        <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Work_imax</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_WERK_POP</name> <argument_list>(<argument><expr><name>Work_imin</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
        <block>{<block_content>
            <comment type="line">// check result with one thread</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>I_unsorted2</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>I_has_dupl2</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>I_contig2</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>imin2</name> <init>= <expr><name>limit</name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>imax2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>ilast</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>inew</name> <operator>&lt;</operator> <name>ni</name></expr> ;</condition> <incr><expr><name>inew</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>I</name> <index>[<expr><name>inew</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>inew</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>ilast</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>I_unsorted2</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>ilast</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>I_has_dupl2</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>ilast</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>I_contig2</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name>imin2</name> <operator>=</operator> <call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>imin2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>imax2</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>imax2</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>ilast</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_unsorted</name> <operator>==</operator> <name>I_unsorted2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_has_duplicates</name> <operator>==</operator> <name>I_has_dupl2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_contig</name>   <operator>==</operator> <name>I_contig2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>imin</name>       <operator>==</operator> <name>imin2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>imax</name>       <operator>==</operator> <name>imax2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// check the limits</comment>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imin</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GB_ICHECK</name> <argument_list>(<argument><expr><name>imax</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// a single entry does not need to be sorted</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>imin</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>imax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_unsorted</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>I_contig</name>   <operator>==</operator> <name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// the list is empty</comment>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>imin</name> <operator>==</operator> <name>limit</name> <operator>&amp;&amp;</operator> <name>imax</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// change I if it is an explicit contiguous list of stride 1</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>I_contig</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// I is a contigous list of stride 1, imin:imax.</comment>
            <comment type="line">// change Ikind to GB_ALL if 0:limit-1, or GB_RANGE otherwise</comment>
            <if_stmt><if>if <condition>(<expr><name>imin</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>imax</name> <operator>==</operator> <name>limit</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_ALL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>=</operator> <name>GB_RANGE</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>imin</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>Icolon</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>imax</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IMPLIES</name> <argument_list>(<argument><expr><name>I_contig</name></expr></argument>, <argument><expr><operator>!</operator><name>I_unsorted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>==</operator> <name>GB_ALL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>Ikind</name><operator>)</operator> <operator>==</operator> <name>GB_RANGE</name><operator>)</operator> <operator>==</operator> <name>I_contig</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// I_is_contig is true if the list of row indices is a contiguous list,</comment>
    <comment type="line">// imin:imax.  This is an important special case.</comment>

    <comment type="line">// I_is_unsorted is true if I is an explicit list, the list is non-empty,</comment>
    <comment type="line">// and the indices are not sorted in ascending order.</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_is_contig</name><operator>)</operator> <operator>=</operator> <name>I_contig</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_is_unsorted</name><operator>)</operator> <operator>=</operator> <name>I_unsorted</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_has_dupl</name><operator>)</operator> <operator>=</operator> <name>I_has_duplicates</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>imin_result</name><operator>)</operator> <operator>=</operator> <name>imin</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>imax_result</name><operator>)</operator> <operator>=</operator> <name>imax</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
