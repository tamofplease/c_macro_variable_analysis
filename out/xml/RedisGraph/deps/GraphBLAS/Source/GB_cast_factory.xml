<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_cast_factory.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cast_factory: return a pointer to a typecasting function</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns a pointer to a function f(z,x,s) that copies its input x into its</comment>
<comment type="line">// output z, casting as needed.  That is, it computes z = (type of z) x.</comment>
<comment type="line">// s is the size for user-defined types, which can only be copied.</comment>

<comment type="line">// This function returns one of ((13*13) + 1) pointers to a typecasting/copy</comment>
<comment type="line">// function, defined by GB_casting.c.  The last function pointer is the</comment>
<comment type="line">// function GB_copy_user_user.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GB_cast_function</name></type> <name>GB_cast_factory</name>   <comment type="line">// returns pointer to function to cast x to z</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code1</name></decl></parameter>,      <comment type="line">// the type of z, the output value</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code2</name></decl></parameter>       <comment type="line">// the type of x, the input value</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// define the worker for the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// the worker selects a typecast function and returns it to the caller</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>ignore1</name></type></parameter>,<parameter><type><name>ignore2</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>ignore3</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>return (&amp;GB (_cast_ ## ztype ## _ ## xtype)) ;</cpp:value></cpp:define>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// launch the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// switch factory for two built-in types; user types are skipped.</comment>
    <comment type="line">// no generic worker so the switch factory cannot be disabled.</comment>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_2type_factory.c"</cpp:file></cpp:include>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// user-defined types fall through the switch factory to here</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><operator>&amp;</operator><name>GB_copy_user_user</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
