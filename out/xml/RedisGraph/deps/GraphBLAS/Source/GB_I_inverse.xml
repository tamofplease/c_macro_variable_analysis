<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_I_inverse.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_I_inverse: invert an index list</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// I is a large list relative to the vector length, avlen, and it is not</comment>
<comment type="line">// contiguous.  Scatter I into the I inverse buckets (Mark and Inext) for quick</comment>
<comment type="line">// lookup.</comment>

<comment type="line">// FUTURE:: this code is sequential.  Constructing the I inverse buckets in</comment>
<comment type="line">// parallel would require synchronization (a critical section for each bucket,</comment>
<comment type="line">// or atomics).  A more parallel approach might use qsort first, to find</comment>
<comment type="line">// duplicates in I, and then construct the buckets in parallel after the qsort.</comment>
<comment type="line">// But the time complexity would be higher.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_subref.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GB_I_inverse</name>           <comment type="line">// invert the I list for C=A(I,:)</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,         <comment type="line">// list of indices, duplicates OK</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>nI</name></decl></parameter>,                 <comment type="line">// length of I</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>avlen</name></decl></parameter>,              <comment type="line">// length of the vectors of A</comment>
    <comment type="line">// outputs:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Mark</name></decl></parameter>,  <comment type="line">// head pointers for buckets, size avlen</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Mark_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier> <modifier>*</modifier></type><name>p_Inext</name></decl></parameter>, <comment type="line">// next pointers for buckets, size nI</comment>
    <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>p_Inext_size</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>p_ndupl</name></decl></parameter>,           <comment type="line">// number of duplicate entries in I</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Mark</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Mark_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Inext</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>Inext_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ndupl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark</name> <operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark_size</name> <operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext_size</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ndupl</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>Mark</name>  <operator>=</operator> <call><name>GB_CALLOC_WORK</name> <argument_list>(<argument><expr><name>avlen</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Mark_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Inext</name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>nI</name></expr></argument>,    <argument><expr><name>int64_t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Inext_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Inext</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Mark</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Mark</name></expr></argument>, <argument><expr><name>Mark_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_FREE_WORK</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Inext</name></expr></argument>, <argument><expr><name>Inext_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// scatter the I indices into buckets</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// at this point, Mark is all zero, so Mark [i] &lt; 1 for all i in</comment>
    <comment type="line">// the range 0 to avlen-1.</comment>

    <comment type="line">// O(nI) time; not parallel</comment>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>inew</name> <init>= <expr><name>nI</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>inew</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>inew</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>I</name> <index>[<expr><name>inew</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>avlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ihead</name> <init>= <expr><operator>(</operator><name><name>Mark</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ihead</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// first time i has been seen in the list I</comment>
            <expr_stmt><expr><name>ihead</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// i has already been seen in the list I</comment>
            <expr_stmt><expr><name>ndupl</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>Mark</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>inew</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>       <comment type="line">// (Mark [i] - 1) = inew</comment>
        <expr_stmt><expr><name><name>Inext</name> <index>[<expr><name>inew</name></expr>]</index></name> <operator>=</operator> <name>ihead</name></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// indices in I are now in buckets.  An index i might appear more than once</comment>
    <comment type="line">// in the list I.  inew = (Mark [i] - 1) is the first position of i in I (i</comment>
    <comment type="line">// will be I [inew]), (Mark [i] - 1) is the head of a link list of all</comment>
    <comment type="line">// places where i appears in I.  inew = Inext [inew] traverses this list,</comment>
    <comment type="line">// until inew is -1.</comment>

    <comment type="line">// to traverse all entries in bucket i, do:</comment>
    <comment type="line">// GB_for_each_index_in_bucket (inew,i)) { ... }</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_for_each_index_in_bucket</name><parameter_list>(<parameter><type><name>inew</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
        <cpp:value>for (int64_t inew = Mark [i] - 1 ; inew &gt;= 0 ; inew = Inext [inew])</cpp:value></cpp:define>

    <comment type="line">// If Mark [i] &lt; 1, then the ith bucket is empty and i is not in I.</comment>
    <comment type="line">// Otherise, the first index in bucket i is (Mark [i] - 1).</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_DEBUG</name></cpp:ifdef>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>avlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <macro><name>GB_for_each_index_in_bucket</name> <argument_list>(<argument>inew</argument>, <argument>i</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>inew</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>inew</name> <operator>&lt;</operator> <name>nI</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name><name>I</name> <index>[<expr><name>inew</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark</name> <operator>)</operator> <operator>=</operator> <name>Mark</name></expr>  ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Mark_size</name> <operator>)</operator> <operator>=</operator> <name>Mark_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext</name><operator>)</operator> <operator>=</operator> <name>Inext</name></expr> ;</expr_stmt> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_Inext_size</name><operator>)</operator> <operator>=</operator> <name>Inext_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_ndupl</name><operator>)</operator> <operator>=</operator> <name>ndupl</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
