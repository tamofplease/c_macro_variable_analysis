<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_macrofy_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_macrofy_sparsity: define macro for the sparsity structure of a matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2021, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_stringify.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_macrofy_sparsity</name>    <comment type="line">// construct macros for sparsity structure</comment>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl></parameter>,
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>matrix_name</name></decl></parameter>,      <comment type="line">// "C", "M", "A", or "B"</comment>
    <parameter><decl><type><name>int</name></type> <name>ecode</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <switch>switch <condition>(<expr><name>ecode</name></expr>)</condition>
    <block>{<block_content>

        <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// hypersparse</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>fp</name></expr></argument>,
                <argument><expr><literal type="string">"#define GB_%s_IS_HYPER  1\n"</literal>
                <literal type="string">"#define GB_%s_IS_SPARSE 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_BITMAP 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_FULL   0\n"</literal></expr></argument>,
                <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// sparse</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>fp</name></expr></argument>, 
                <argument><expr><literal type="string">"#define GB_%s_IS_HYPER  0\n"</literal>
                <literal type="string">"#define GB_%s_IS_SPARSE 1\n"</literal>
                <literal type="string">"#define GB_%s_IS_BITMAP 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_FULL   0\n"</literal></expr></argument>,
                <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// bitmap</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>fp</name></expr></argument>, 
                <argument><expr><literal type="string">"#define GB_%s_IS_HYPER  0\n"</literal>
                <literal type="string">"#define GB_%s_IS_SPARSE 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_BITMAP 1\n"</literal>
                <literal type="string">"#define GB_%s_IS_FULL   0\n"</literal></expr></argument>,
                <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><literal type="number">3</literal></expr> :</case>    <comment type="line">// full</comment>
            <expr_stmt><expr><call><name>fprintf</name> <argument_list>( <argument><expr><name>fp</name></expr></argument>, 
                <argument><expr><literal type="string">"#define GB_%s_IS_HYPER  0\n"</literal>
                <literal type="string">"#define GB_%s_IS_SPARSE 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_BITMAP 0\n"</literal>
                <literal type="string">"#define GB_%s_IS_FULL   1\n"</literal></expr></argument>,
                <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>, <argument><expr><name>matrix_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default>
            <break>break ;</break>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
