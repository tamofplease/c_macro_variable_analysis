<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_transpose_bucket.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_transpose_bucket: transpose and optionally typecast and/or apply operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// C = A' or op(A').  Optionally typecasts from A-&gt;type to the new type ctype,</comment>
<comment type="line">// and/or optionally applies a unary operator.</comment>

<comment type="line">// If an operator z=op(x) is provided, the type of z must be the same as the</comment>
<comment type="line">// type of C.  The type of A must be compatible with the type of of x (A is</comment>
<comment type="line">// typecasted into the type of x).  These conditions must be checked in the</comment>
<comment type="line">// caller.</comment>

<comment type="line">// This function is agnostic for the CSR/CSC format of C and A.  C_is_csc is</comment>
<comment type="line">// defined by the caller and assigned to C-&gt;is_csc, but otherwise unused.</comment>
<comment type="line">// A-&gt;is_csc is ignored.</comment>

<comment type="line">// The input can be hypersparse or non-hypersparse.  The output C is always</comment>
<comment type="line">// non-hypersparse, and never shallow.  On input, C is a static header.</comment>

<comment type="line">// If A is m-by-n in CSC format, with e nonzeros, the time and memory taken is</comment>
<comment type="line">// O(m+n+e) if A is non-hypersparse, or O(m+e) if hypersparse.  This is fine if</comment>
<comment type="line">// most rows and columns of A are non-empty, but can be very costly if A or A'</comment>
<comment type="line">// is hypersparse.  In particular, if A is a non-hypersparse column vector with</comment>
<comment type="line">// m &gt;&gt; e, the time and memory is O(m), which can be huge.  Thus, for</comment>
<comment type="line">// hypersparse matrices, or for very sparse matrices, the qsort method should</comment>
<comment type="line">// be used instead (see GB_transpose).</comment>

<comment type="line">// This method is parallel, but not highly scalable.  At most O(e/m) threads</comment>
<comment type="line">// are used.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_WORKSPACE</name></cpp:macro>                                               \
<cpp:value>{                                                                       \
    if (Workspaces != NULL &amp;&amp; Workspaces_size != NULL)                  \
    {                                                                   \
        for (int tid = 0 ; tid &lt; nworkspaces ; tid++)                   \
        {                                                               \
            GB_FREE_WORK (&amp;(Workspaces [tid]), Workspaces_size [tid]) ; \
        }                                                               \
    }                                                                   \
    GB_WERK_POP (A_slice, int64_t) ;                                    \
    GB_WERK_POP (Workspaces_size, size_t) ;                             \
    GB_WERK_POP (Workspaces, int64_t *) ;                               \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_FREE_ALL</name></cpp:macro>                                                     \
<cpp:value>{                                                                       \
    GB_phybix_free (C) ;                                                \
    GB_FREE_WORKSPACE ;                                                 \
}</cpp:value></cpp:define>

<function><type><name>GrB_Info</name></type> <name>GB_transpose_bucket</name>    <comment type="line">// bucket transpose; typecast and apply op</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl></parameter>,               <comment type="line">// output matrix (static header)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_iso_code</name></type> <name>C_code_iso</name></decl></parameter>,   <comment type="line">// iso code for C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,       <comment type="line">// type of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>C_is_csc</name></decl></parameter>,        <comment type="line">// format of output matrix C</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,         <comment type="line">// input matrix</comment>
        <comment type="line">// no operator is applied if op is NULL</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GB_Operator</name></type> <name>op</name></decl></parameter>,       <comment type="line">// unary/idxunop/binop to apply</comment>
        <parameter><decl><type><specifier>const</specifier> <name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>,    <comment type="line">// scalar to bind to binary operator</comment>
        <parameter><decl><type><name>bool</name></type> <name>binop_bind1st</name></decl></parameter>,         <comment type="line">// if true, binop(x,A) else binop(A,y)</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nworkspaces</name></decl></parameter>,      <comment type="line">// # of workspaces to use</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>,         <comment type="line">// # of threads to use</comment>
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>C</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>static_header</name></name> <operator>||</operator> <name>GBNSTATIC</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"ctype for transpose"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A input for transpose_bucket"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_PENDING</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ZOMBIES</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_JUMBLED_OK</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// if op is NULL, then no operator is applied</comment>

    <comment type="line">// This method is only be used when A is sparse or hypersparse.</comment>
    <comment type="line">// The full and bitmap cases are handled in GB_transpose.</comment>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_IS_BITMAP</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>            <comment type="line">// size nthreads+1</comment>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Workspaces</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <comment type="line">// size nworkspaces</comment>
    <expr_stmt><expr><call><name>GB_WERK_DECLARE</name> <argument_list>(<argument><expr><name>Workspaces_size</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>     <comment type="line">// size nworkspaces</comment>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>anz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>vlen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the number of threads to use</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// # of threads to use in the O(vlen) loops below</comment>
    <expr_stmt><expr><call><name>GB_GET_NTHREADS_MAX</name> <argument_list>(<argument><expr><name>nthreads_max</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nth</name> <init>= <expr><call><name>GB_nthreads</name> <argument_list>(<argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate C: always sparse</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// The bucket transpose only works when C is sparse.</comment>
    <comment type="line">// A can be sparse or hypersparse.</comment>

    <comment type="line">// C-&gt;p is allocated but not initialized.</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <comment type="line">// set C-&gt;iso = C_iso   OK</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>C_iso</name> <init>= <expr><operator>(</operator><name>C_code_iso</name> <operator>!=</operator> <name>GB_NON_ISO</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_OK</name> <argument_list>(<argument><expr><call><name>GB_new_bix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <comment type="line">// sparse, existing header</comment>
        <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>GB_Ap_malloc</name></expr></argument>, <argument><expr><name>C_is_csc</name></expr></argument>,
        <argument><expr><name>GxB_SPARSE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>hyper_switch</name></name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>C_iso</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cp</name> <init>= <expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>anz</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Workspaces</name></expr></argument>, <argument><expr><name>nworkspaces</name></expr></argument>, <argument><expr><name>int64_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>Workspaces_size</name></expr></argument>, <argument><expr><name>nworkspaces</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Workspaces</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Workspaces_size</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nworkspaces</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>=</operator> <call><name>GB_MALLOC_WORK</name> <argument_list>(<argument><expr><name>vlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name><name>Workspaces_size</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ok</name> <operator>=</operator> <name>ok</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase1: symbolic analysis</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// slice the A matrix, perfectly balanced for one task per thread</comment>
    <expr_stmt><expr><call><name>GB_WERK_PUSH</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>nthreads</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>int64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_slice</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <expr_stmt><expr><name>GB_FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// sum up the row counts and find C-&gt;p</comment>
    <if_stmt><if>if <condition>(<expr><name>nthreads</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// sequential method: A is not sliced</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Only requires a single int64 workspace of size vlen for a single</comment>
        <comment type="line">// thread.  The resulting C matrix is not jumbled.</comment>
        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(1-thread bucket transpose) "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// compute the row counts of A.  No need to scan the A-&gt;p pointers</comment>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nworkspaces</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>workspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// cumulative sum of the workspace, and copy back into C-&gt;p</comment>
        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>workspace</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>workspace</name></expr></argument>, <argument><expr><operator>(</operator><name>vlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nworkspaces</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// atomic method: A is sliced but workspace is shared</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Only requires a single int64 workspace of size vlen, shared by all</comment>
        <comment type="line">// threads.  Scales well, but requires atomics.  If the # of rows is</comment>
        <comment type="line">// very small and the average row degree is high, this can be very slow</comment>
        <comment type="line">// because of contention on the atomic workspace.  Otherwise, it is</comment>
        <comment type="line">// typically faster than the non-atomic method.  The resulting C matrix</comment>
        <comment type="line">// is jumbled.</comment>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%d-thread atomic bucket transpose) "</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// compute the row counts of A.  No need to scan the A-&gt;p pointers</comment>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_memset</name> <argument_list>(<argument><expr><name>workspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <comment type="line">// update workspace [i]++ automically:</comment>
            <expr_stmt><expr><name>GB_ATOMIC_UPDATE</name>
            <name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt> <comment type="line">// atomic transpose leaves C jumbled</comment>

        <comment type="line">// cumulative sum of the workspace, and copy back into C-&gt;p</comment>
        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>workspace</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_memcpy</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>workspace</name></expr></argument>, <argument><expr><operator>(</operator><name>vlen</name><operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nth</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// non-atomic method</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// compute the row counts of A for each slice, one per thread; This</comment>
        <comment type="line">// method is parallel, but not highly scalable.  Each thread requires</comment>
        <comment type="line">// int64 workspace of size vlen, but no atomics are required.  The</comment>
        <comment type="line">// resulting C matrix is not jumbled, so this can save work if C needs</comment>
        <comment type="line">// to be unjumbled later.</comment>

        <expr_stmt><expr><call><name>GBURBLE</name> <argument_list>(<argument><expr><literal type="string">"(%d-thread non-atomic bucket transpose) "</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>nworkspaces</name> <operator>==</operator> <name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ap</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
<comment type="line">//      const int64_t *restrict Ah = A-&gt;h ;</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ai</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>tid</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// get the row counts for this slice, of size A-&gt;vlen</comment>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>workspace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>vlen</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><name><name>A_slice</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>A_slice</name> <index>[<expr><name>tid</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// iterate over the entries in A(:,j)</comment>
                <comment type="line">// int64_t j = GBH (Ah, k) ;</comment>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_start</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>pA_end</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>pA</name> <init>= <expr><name>pA_start</name></expr></init></decl> ;</init> <condition><expr><name>pA</name> <operator>&lt;</operator> <name>pA_end</name></expr> ;</condition> <incr><expr><name>pA</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content> 
                    <comment type="line">// count one more entry in C(i,:) for this slice</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ai</name> <index>[<expr><name>pA</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// cumulative sum of the workspaces across the slices</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl> ;</decl_stmt>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>c</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>Cp</name> <index>[<expr><name>vlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

        <comment type="line">// compute the vector pointers for C</comment>
        <expr_stmt><expr><call><name>GB_cumsum</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name><operator>)</operator></expr></argument>, <argument><expr><name>nth</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// add Cp back to all Workspaces</comment>
        <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nth</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>vlen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name> <init>= <expr><name><name>Cp</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>tid</name> <operator>&lt;</operator> <name>nthreads</name></expr> ;</condition> <incr><expr><name>tid</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content> 
                <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>workspace</name> <init>= <expr><name><name>Workspaces</name> <index>[<expr><name>tid</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name><name>workspace</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>s</name></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>

    <comment type="line">//==========================================================================</comment>
    <comment type="line">// phase2: transpose A into C</comment>
    <comment type="line">//==========================================================================</comment>

    <comment type="line">// transpose both the pattern and the values</comment>
    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// do not apply an operator; optional typecast to C-&gt;type</comment>
        <expr_stmt><expr><call><name>GB_transpose_ix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>Workspaces</name></expr></argument>, <argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>nworkspaces</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// apply an operator, C has type op-&gt;ztype</comment>
        <expr_stmt><expr><call><name>GB_transpose_op</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C_code_iso</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>binop_bind1st</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
            <argument><expr><name>Workspaces</name></expr></argument>, <argument><expr><name>A_slice</name></expr></argument>, <argument><expr><name>nworkspaces</name></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>GB_FREE_WORKSPACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C transpose of A"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>h</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
