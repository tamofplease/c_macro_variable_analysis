<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GrB_Descriptor_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GrB_Descriptor_new: create a new descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Default values are set to GxB_DEFAULT</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>GrB_Info</name></type> <name>GrB_Descriptor_new</name>     <comment type="line">// create a new descriptor</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Descriptor</name> <modifier>*</modifier></type><name>descriptor</name></decl></parameter>  <comment type="line">// handle of descriptor to create</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_WHERE1</name> <argument_list>(<argument><expr><literal type="string">"GrB_Descriptor_new (&amp;descriptor)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_RETURN_IF_NULL</name> <argument_list>(<argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>descriptor</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// allocate the descriptor</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>descriptor</name><operator>)</operator> <operator>=</operator> <call><name>GB_MALLOC</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr>struct <name>GB_Descriptor_opaque</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>descriptor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// out of memory</comment>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// initialize the descriptor</comment>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><operator>*</operator><name>descriptor</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>          <comment type="line">// error string</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>logger_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>out</name></name>  <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>     <comment type="line">// descriptor for output</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>     <comment type="line">// descriptor for the mask input</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in0</name></name>  <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>     <comment type="line">// descriptor for the first input</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>in1</name></name>  <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>     <comment type="line">// descriptor for the second input</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>axb</name></name>  <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>     <comment type="line">// descriptor for selecting the C=A*B method</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nthreads_max</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>  <comment type="line">// max # of threads to use</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>chunk</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>         <comment type="line">// chunk for auto-tuning of # threads</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>do_sort</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>        <comment type="line">// do not sort in GrB_mxm and others</comment>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>compression</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>import</name></name> <operator>=</operator> <name>GxB_DEFAULT</name></expr> ;</expr_stmt>   <comment type="line">// trust input data in GxB import/deserialize</comment>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
