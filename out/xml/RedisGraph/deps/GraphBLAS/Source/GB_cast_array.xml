<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_cast_array.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_cast_array: typecast an array</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Casts an input array Ax to an output array Cx with a different type.  The</comment>
<comment type="line">// two types are always different, so this does not need to handle user-defined</comment>
<comment type="line">// types.  The iso case is not handled; Ax and Cx must be the same size and no</comment>
<comment type="line">// iso expansion is done.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_unop__include.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>GB_cast_array</name>              <comment type="line">// typecast an array</comment>
<parameter_list>(
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Cx</name></decl></parameter>,                <comment type="line">// output array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code1</name></decl></parameter>,   <comment type="line">// type code for Cx</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>Ax</name></decl></parameter>,                <comment type="line">// input array</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>code2</name></decl></parameter>,   <comment type="line">// type code for Ax</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Ab</name></decl></parameter>,  <comment type="line">// bitmap for Ax</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>anz</name></decl></parameter>,          <comment type="line">// number of entries in Cx and Ax</comment>
    <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>nthreads</name></decl></parameter>          <comment type="line">// number of threads to use</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>anz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>Cx</name> <operator>==</operator> <name>Ax</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if anz is zero: no work to do, and the Ax and Cx pointer may be NULL</comment>
        <comment type="line">// as well.  If Cx and Ax are aliased, then no copy is needed.</comment>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Ax</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>anz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><call><name>GB_code_compatible</name> <argument_list>(<argument><expr><name>code1</name></expr></argument>, <argument><expr><name>code2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>code1</name> <operator>!=</operator> <name>code2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>code1</name> <operator>!=</operator> <name>GB_UDT_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// typecast the array</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GBCUDA_DEV</name></cpp:ifndef>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// define the worker for the switch factory</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_unop_apply</name><parameter_list>(<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>)</parameter_list></cpp:macro>                                  \
            <cpp:value>GB (_unop_apply__identity ## zname ## xname)</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_WORKER</name><parameter_list>(<parameter><type><name>ignore1</name></type></parameter>,<parameter><type><name>zname</name></type></parameter>,<parameter><type><name>ztype</name></type></parameter>,<parameter><type><name>xname</name></type></parameter>,<parameter><type><name>xtype</name></type></parameter>)</parameter_list></cpp:macro>                  \
        <cpp:value>{                                                                   \
            GrB_Info info = GB_unop_apply (zname,xname)                     \
                ((ztype *) Cx, (xtype *) Ax, Ab, anz, nthreads) ;           \
            if (info == GrB_SUCCESS) return ;                               \
        }                                                                   \
        break ;</cpp:value></cpp:define>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// launch the switch factory</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_EXCLUDE_SAME_TYPES</name></cpp:macro></cpp:define>
        <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_2type_factory.c"</cpp:file></cpp:include>

    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// generic worker: only used for GBCUDA_DEV case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>csize</name> <init>= <expr><call><name>GB_code_size</name> <argument_list>(<argument><expr><name>code1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>asize</name> <init>= <expr><call><name>GB_code_size</name> <argument_list>(<argument><expr><name>code2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_cast_function</name></type> <name>cast_A_to_C</name> <init>= <expr><call><name>GB_cast_factory</name> <argument_list>(<argument><expr><name>code1</name></expr></argument>, <argument><expr><name>code2</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>p</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>nthreads</omp:expr></omp:argument>)</omp:argument_list></omp:clause> <omp:clause><omp:name>schedule</omp:name><omp:argument_list>(<omp:argument><omp:expr>static</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma>
    <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>anz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GBB</name> <argument_list>(<argument><expr><name>Ab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>
        <comment type="line">// Cx [p] = Ax [p]</comment>
        <expr_stmt><expr><call><name>cast_A_to_C</name> <argument_list>(<argument><expr><name>Cx</name> <operator>+</operator><operator>(</operator><name>p</name><operator>*</operator><name>csize</name><operator>)</operator></expr></argument>, <argument><expr><name>Ax</name> <operator>+</operator><operator>(</operator><name>p</name><operator>*</operator><name>asize</name><operator>)</operator></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
