<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Source/GB_iso_unop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_iso_unop: apply a unary or binary op (with scalar) with an iso result</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The input matrix A need not be entirely valid.  GB_transpose can be</comment>
<comment type="line">// transposing the matrix in place, which case the contents of A have already</comment>
<comment type="line">// been transplanted into T, and only A-&gt;x remains.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>GB_iso_unop</name>            <comment type="line">// Cx [0] = unop (A), binop (s,A) or binop (A,s)</comment>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>Cx</name></decl></parameter>,   <comment type="line">// output scalar of iso array</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,         <comment type="line">// type of Cx</comment>
    <parameter><decl><type><name>GB_iso_code</name></type> <name>C_code_iso</name></decl></parameter>, <comment type="line">// defines how C iso value is to be computed</comment>
    <parameter><decl><type><name>GB_Operator</name></type> <name>op</name></decl></parameter>,         <comment type="line">// unary/binop operator, if present</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,           <comment type="line">// input matrix</comment>
    <parameter><decl><type><name>GrB_Scalar</name></type> <name>scalar</name></decl></parameter>       <comment type="line">// input scalar (may be NULL)</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"ctype for GB_iso_unop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>Cx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>stype</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>scalar</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>scalar</name><operator>-&gt;</operator><name>type</name></name></expr> </then><else>: <expr><name>GrB_BOOL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
<comment type="line">//  const size_t csize = ctype-&gt;size ;</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>ssize</name> <init>= <expr><name><name>stype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>ccode</name> <init>= <expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>acode</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>GB_Type_code</name></type> <name>scode</name> <init>= <expr><name><name>stype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute the C iso value</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_1</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Cx [0] = (ctype) 1, via the PAIR binary op or ONE unary op</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>GB_cast_one</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_S</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Cx [0] = (ctype) scalar via FIRST(s,A), SECOND(A,s), ANY(..), ...</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT_SCALAR_OK</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar for GB_iso_unop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Cx [0] depends on the iso value of A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>A</name><operator>-&gt;</operator><name>x_size</name></name> <operator>&gt;=</operator> <name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_A</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Cx [0] = (ctype) A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>ccode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_OP1_A</name></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Cx [0] = unop (A)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT_UNARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for GB_iso_unop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// x = (xtype) Ax [0]</comment>
            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>x</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// Cx [0] = op (x)</comment>
            <decl_stmt><decl><type><name>GxB_unary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>unop_function</name></name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>fop</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Cx [0] = binop (scalar,A) or binop (A,scalar)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"op for GB_iso_unop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ASSERT_SCALAR_OK</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar for GB_iso_unop binop"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>ycode</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>ysize</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>ytype</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GxB_binary_function</name></type> <name>fop</name> <init>= <expr><name><name>op</name><operator>-&gt;</operator><name>binop_function</name></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>x</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>xsize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GB_void</name></type> <name><name>y</name> <index>[<expr><call><name>GB_VLA</name><argument_list>(<argument><expr><name>ysize</name></expr></argument>)</argument_list></call></expr>]</index></name></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>C_code_iso</name> <operator>==</operator> <name>GB_ISO_OP2_SA</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Cx [0] = binop (scalar, A)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else <comment type="line">// (C_code_iso == GB_ISO_OP2_AS)</comment>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// Cx [0] = binop (A, scalar)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>xcode</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>acode</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GB_cast_scalar</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>ycode</name></expr></argument>, <argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>scode</name></expr></argument>, <argument><expr><name>ssize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="line">// Cx [0] = binop (x, y)</comment>
            <expr_stmt><expr><call><name>fop</name> <argument_list>(<argument><expr><name>Cx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
