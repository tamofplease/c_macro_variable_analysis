<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/ndk_compat/cpu-features.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu-features.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stack_line_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_arm.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_x86.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_mips.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_aarch64.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_once_t</name></type> <name>g_once</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_inited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>g_cpuFeatures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_cpuCount</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_ARM</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>g_cpuIdArm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_cpu_mask_bit</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cpu_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>cpu_mask</name> <operator>|=</operator> <literal type="number">1UL</literal> <operator>&lt;&lt;</operator> <name>index</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Examples of valid inputs: "31", "4-31"</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_cpu_mask</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cpu_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>separator_index</name> <init>= <expr><call><name>CpuFeatures_StringView_IndexOfChar</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>separator_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// A single cpu index</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>cpu_index</name> <init>= <expr><call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cpu_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>set_cpu_mask_bit</name><argument_list>(<argument><expr><name>cpu_index</name></expr></argument>, <argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cpu_index_a</name> <init>= <expr><call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(
        <argument><expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>separator_index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cpu_index_b</name> <init>= <expr><call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(
        <argument><expr><call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>separator_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cpu_index_a</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>cpu_index_b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>cpu_index_a</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cpu_index_b</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>set_cpu_mask_bit</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// Format specification from</comment>
<comment type="line">// https://www.kernel.org/doc/Documentation/cputopology.txt</comment>
<comment type="line">// Examples of valid inputs: "31", "2,4-31,32-63", "0-1,3"</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_cpu_mask_line</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cpu_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>.</operator><name>full_line</name></name> <operator>||</operator> <name><name>result</name><operator>.</operator><name>eof</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>StringView</name></type> <name>line</name> <init>= <expr><name><name>result</name><operator>.</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>line</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>next_entry_index</name> <init>= <expr><call><name>CpuFeatures_StringView_IndexOfChar</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>next_entry_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>parse_cpu_mask</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>StringView</name></type> <name>entry</name> <init>= <expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>next_entry_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>parse_cpu_mask</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>next_entry_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_cpu_mask_from_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>,
                                      <parameter><decl><type><name>uint32_t</name><modifier>*</modifier></type> <name>cpu_mask</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>CpuFeatures_OpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StackLineReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>StackLineReader_Initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>parse_cpu_mask_line</name><argument_list>(<argument><expr><call><name>StackLineReader_NextLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CpuFeatures_CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cpu_count</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>cpu_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>update_cpu_mask_from_file</name><argument_list>(<argument><expr><literal type="string">"/sys/devices/system/cpu/present"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>update_cpu_mask_from_file</name><argument_list>(<argument><expr><literal type="string">"/sys/devices/system/cpu/possible"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>cpu_mask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_cpuInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>g_cpuFeatures</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_cpuCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>g_cpuCount</name> <operator>=</operator> <call><name>get_cpu_count</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>g_cpuCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>g_cpuCount</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>ArmInfo</name></type> <name>info</name> <init>= <expr><call><name>GetArmInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>architecture</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_ARMv7</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>vfpv3</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_VFPv3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>neon</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_NEON</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_VFP_D32</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>vfpv3d16</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_VFP_FP16</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>idiva</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_IDIV_ARM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>idivt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_IDIV_THUMB2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>iwmmxt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_iWMMXt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>aes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_AES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>pmull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_PMULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sha1</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_SHA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sha2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_SHA2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>crc32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_CRC32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>architecture</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_LDREX_STREX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>vfp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_VFPv2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>vfpv4</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_VFP_FMA</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM_FEATURE_NEON_FMA</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_cpuIdArm</name> <operator>=</operator> <call><name>GetArmCpuId</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>X86Info</name></type> <name>info</name> <init>= <expr><call><name>GetX86Info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>ssse3</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_SSSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>popcnt</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_POPCNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>movbe</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_MOVBE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sse4_1</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_SSE4_1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sse4_2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_SSE4_2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>aes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_AES_NI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>avx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_AVX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>rdrnd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_RDRAND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>avx2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_AVX2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sha</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_X86_FEATURE_SHA_NI</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>MipsInfo</name></type> <name>info</name> <init>= <expr><call><name>GetMipsInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>r6</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_MIPS_FEATURE_R6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>msa</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_MIPS_FEATURE_MSA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><name>Aarch64Info</name></type> <name>info</name> <init>= <expr><call><name>GetAarch64Info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_FP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>asimd</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_ASIMD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>aes</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_AES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>pmull</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_PMULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sha1</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_SHA1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>sha2</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_SHA2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>features</name><operator>.</operator><name>crc32</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>g_cpuFeatures</name> <operator>|=</operator> <name>ANDROID_CPU_ARM64_FEATURE_CRC32</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>AndroidCpuFamily</name></type> <name>android_getCpuFamily</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <return>return <expr><name>ANDROID_CPU_FAMILY_ARM</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86_32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>ANDROID_CPU_FAMILY_X86</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>ANDROID_CPU_FAMILY_MIPS64</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>ANDROID_CPU_FAMILY_MIPS</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>ANDROID_CPU_FAMILY_ARM64</name></expr>;</return>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <return>return <expr><name>ANDROID_CPU_FAMILY_X86_64</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>ANDROID_CPU_FAMILY_UNKNOWN</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>android_getCpuFeatures</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_once</name></expr></argument>, <argument><expr><name>android_cpuInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>g_cpuFeatures</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>android_getCpuCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_once</name></expr></argument>, <argument><expr><name>android_cpuInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>g_cpuCount</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>android_cpuInitDummy</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>g_inited</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>android_setCpu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cpu_count</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>cpu_features</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* Fail if the library was already initialized. */</comment>
  <if_stmt><if>if <condition>(<expr><name>g_inited</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>g_cpuCount</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>cpu_count</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>cpu_count</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>g_cpuFeatures</name> <operator>=</operator> <name>cpu_features</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_once</name></expr></argument>, <argument><expr><name>android_cpuInitDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_ARM</name></cpp:ifdef>

<function><type><name>uint32_t</name></type> <name>android_getCpuIdArm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pthread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_once</name></expr></argument>, <argument><expr><name>android_cpuInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>g_cpuIdArm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>android_setCpuArm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cpu_count</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>cpu_features</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>cpu_id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>android_setCpu</name><argument_list>(<argument><expr><name>cpu_count</name></expr></argument>, <argument><expr><name>cpu_features</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>g_cpuIdArm</name> <operator>=</operator> <name>cpu_id</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_ARM</comment>
</unit>
