<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/impl_x86_macos.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_X86</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_OS_MACOS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"impl_x86__base_implementation.inl"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYSCTLBYNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"Darwin needs support for sysctlbyname"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_MOCK_CPUID_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GetDarwinSysCtlByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="line">// CPU_FEATURES_MOCK_CPUID_X86</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetDarwinSysCtlByName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>enabled_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>failure</name> <init>= <expr><call><name>sysctlbyname</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enabled</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>enabled_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>failure</name></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>enabled</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OverrideOsPreserves</name><parameter_list>(<parameter><decl><type><name>OsPreserves</name><modifier>*</modifier></type> <name>os_preserves</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// On Darwin AVX512 support is On-demand.</comment>
  <comment type="line">// We have to query the OS instead of querying the Zmm save/restore state.</comment>
  <comment type="line">// https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/osfmk/i386/fpu.c#L173-L199</comment>
  <expr_stmt><expr><name><name>os_preserves</name><operator>-&gt;</operator><name>avx512_registers</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.avx512f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DetectFeaturesFromOs</name><parameter_list>(<parameter><decl><type><name>X86Features</name><modifier>*</modifier></type> <name>features</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Handling Darwin platform through sysctlbyname.</comment>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.sse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse2</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.sse2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse3</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.sse3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>ssse3</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.supplementalsse3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse4_1</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.sse4_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse4_2</name></name> <operator>=</operator> <call><name>GetDarwinSysCtlByName</name><argument_list>(<argument><expr><literal type="string">"hw.optional.sse4_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_OS_MACOS</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_X86</comment>
</unit>
