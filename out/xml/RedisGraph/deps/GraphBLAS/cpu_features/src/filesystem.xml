<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/filesystem.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_MOCK_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">// Implementation will be provided by test/filesystem_for_testing.cc.</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>CpuFeatures_OpenFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>_sopen_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>_O_RDONLY</name></expr></argument>, <argument><expr><name>_SH_DENYWR</name></expr></argument>, <argument><expr><name>_S_IREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CpuFeatures_CloseFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>_close</name><argument_list>(<argument><expr><name>file_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>CpuFeatures_ReadFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
                         <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>_read</name><argument_list>(<argument><expr><name>file_descriptor</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>CpuFeatures_OpenFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CpuFeatures_CloseFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>file_descriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>CpuFeatures_ReadFile</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>file_descriptor</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>,
                         <parameter><decl><type><name>size_t</name></type> <name>buffer_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>file_descriptor</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1L</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition>;</do>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
