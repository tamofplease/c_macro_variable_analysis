<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/impl_ppc_linux.c"><comment type="line">// Copyright 2018 IBM.</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_PPC</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_OS_LINUX</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_ppc.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Definitions for introspection.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_TABLE</name></cpp:macro>                                                    \
  <cpp:value>LINE(PPC_32, ppc32, "ppc32", PPC_FEATURE_32, 0)                              \
  LINE(PPC_64, ppc64, "ppc64", PPC_FEATURE_64, 0)                              \
  LINE(PPC_601_INSTR, ppc601, "ppc601", PPC_FEATURE_601_INSTR, 0)              \
  LINE(PPC_HAS_ALTIVEC, altivec, "altivec", PPC_FEATURE_HAS_ALTIVEC, 0)        \
  LINE(PPC_HAS_FPU, fpu, "fpu", PPC_FEATURE_HAS_FPU, 0)                        \
  LINE(PPC_HAS_MMU, mmu, "mmu", PPC_FEATURE_HAS_MMU, 0)                        \
  LINE(PPC_HAS_4xxMAC, mac_4xx, "4xxmac", PPC_FEATURE_HAS_4xxMAC, 0)           \
  LINE(PPC_UNIFIED_CACHE, unifiedcache, "ucache", PPC_FEATURE_UNIFIED_CACHE,   \
       0)                                                                      \
  LINE(PPC_HAS_SPE, spe, "spe", PPC_FEATURE_HAS_SPE, 0)                        \
  LINE(PPC_HAS_EFP_SINGLE, efpsingle, "efpsingle", PPC_FEATURE_HAS_EFP_SINGLE, \
       0)                                                                      \
  LINE(PPC_HAS_EFP_DOUBLE, efpdouble, "efpdouble", PPC_FEATURE_HAS_EFP_DOUBLE, \
       0)                                                                      \
  LINE(PPC_NO_TB, no_tb, "notb", PPC_FEATURE_NO_TB, 0)                         \
  LINE(PPC_POWER4, power4, "power4", PPC_FEATURE_POWER4, 0)                    \
  LINE(PPC_POWER5, power5, "power5", PPC_FEATURE_POWER5, 0)                    \
  LINE(PPC_POWER5_PLUS, power5plus, "power5+", PPC_FEATURE_POWER5_PLUS, 0)     \
  LINE(PPC_CELL, cell, "cellbe", PPC_FEATURE_CELL, 0)                          \
  LINE(PPC_BOOKE, booke, "booke", PPC_FEATURE_BOOKE, 0)                        \
  LINE(PPC_SMT, smt, "smt", PPC_FEATURE_SMT, 0)                                \
  LINE(PPC_ICACHE_SNOOP, icachesnoop, "ic_snoop", PPC_FEATURE_ICACHE_SNOOP, 0) \
  LINE(PPC_ARCH_2_05, arch205, "arch_2_05", PPC_FEATURE_ARCH_2_05, 0)          \
  LINE(PPC_PA6T, pa6t, "pa6t", PPC_FEATURE_PA6T, 0)                            \
  LINE(PPC_HAS_DFP, dfp, "dfp", PPC_FEATURE_HAS_DFP, 0)                        \
  LINE(PPC_POWER6_EXT, power6ext, "power6x", PPC_FEATURE_POWER6_EXT, 0)        \
  LINE(PPC_ARCH_2_06, arch206, "arch_2_06", PPC_FEATURE_ARCH_2_06, 0)          \
  LINE(PPC_HAS_VSX, vsx, "vsx", PPC_FEATURE_HAS_VSX, 0)                        \
  LINE(PPC_PSERIES_PERFMON_COMPAT, pseries_perfmon_compat, "archpmu",          \
       PPC_FEATURE_PSERIES_PERFMON_COMPAT, 0)                                  \
  LINE(PPC_TRUE_LE, truele, "true_le", PPC_FEATURE_TRUE_LE, 0)                 \
  LINE(PPC_PPC_LE, ppcle, "ppcle", PPC_FEATURE_PPC_LE, 0)                      \
  LINE(PPC_ARCH_2_07, arch207, "arch_2_07", 0, PPC_FEATURE2_ARCH_2_07)         \
  LINE(PPC_HTM, htm, "htm", 0, PPC_FEATURE2_HTM)                               \
  LINE(PPC_DSCR, dscr, "dscr", 0, PPC_FEATURE2_DSCR)                           \
  LINE(PPC_EBB, ebb, "ebb", 0, PPC_FEATURE2_EBB)                               \
  LINE(PPC_ISEL, isel, "isel", 0, PPC_FEATURE2_ISEL)                           \
  LINE(PPC_TAR, tar, "tar", 0, PPC_FEATURE2_TAR)                               \
  LINE(PPC_VEC_CRYPTO, vcrypto, "vcrypto", 0, PPC_FEATURE2_VEC_CRYPTO)         \
  LINE(PPC_HTM_NOSC, htm_nosc, "htm-nosc", 0, PPC_FEATURE2_HTM_NOSC)           \
  LINE(PPC_ARCH_3_00, arch300, "arch_3_00", 0, PPC_FEATURE2_ARCH_3_00)         \
  LINE(PPC_HAS_IEEE128, ieee128, "ieee128", 0, PPC_FEATURE2_HAS_IEEE128)       \
  LINE(PPC_DARN, darn, "darn", 0, PPC_FEATURE2_DARN)                           \
  LINE(PPC_SCV, scv, "scv", 0, PPC_FEATURE2_SCV)                               \
  LINE(PPC_HTM_NO_SUSPEND, htm_no_suspend, "htm-no-suspend", 0,                \
       PPC_FEATURE2_HTM_NO_SUSPEND)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_PREFIX</name></cpp:macro> <cpp:value>PPC</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_ENUM_PREFIX</name></cpp:macro> <cpp:value>PPC</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"define_introspection_and_hwcaps.inl"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Implementation.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bit_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hwcaps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stack_line_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandlePPCLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineResult</name></type> <name>result</name></decl></parameter>,
                          <parameter><decl><type><name>PPCPlatformStrings</name><modifier>*</modifier> <specifier>const</specifier></type> <name>strings</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StringView</name></type> <name>line</name> <init>= <expr><name><name>result</name><operator>.</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StringView</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_GetAttributeKeyValue</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_HasWord</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"platform"</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>strings</name><operator>-&gt;</operator><name>platform</name></name></expr></argument>,
                                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>-&gt;</operator><name>platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"model"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>strings</name><operator>-&gt;</operator><name>model</name></name></expr></argument>,
                                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>-&gt;</operator><name>platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>strings</name><operator>-&gt;</operator><name>machine</name></name></expr></argument>,
                                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>-&gt;</operator><name>platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"cpu"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>strings</name><operator>-&gt;</operator><name>cpu</name></name></expr></argument>,
                                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>-&gt;</operator><name>platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>!</operator><name><name>result</name><operator>.</operator><name>eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillProcCpuInfoData</name><parameter_list>(<parameter><decl><type><name>PPCPlatformStrings</name><modifier>*</modifier> <specifier>const</specifier></type> <name>strings</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>CpuFeatures_OpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/cpuinfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StackLineReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>StackLineReader_Initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HandlePPCLine</name><argument_list>(<argument><expr><call><name>StackLineReader_NextLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>strings</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>CpuFeatures_CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PPCInfo</name></type> <name>kEmptyPPCInfo</name></decl>;</decl_stmt>

<function><type><name>PPCInfo</name></type> <name>GetPPCInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/*
   * On Power feature flags aren't currently in cpuinfo so we only look at
   * the auxilary vector.
   */</comment>
  <decl_stmt><decl><type><name>PPCInfo</name></type> <name>info</name> <init>= <expr><name>kEmptyPPCInfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>HardwareCapabilities</name></type> <name>hwcaps</name> <init>= <expr><call><name>CpuFeatures_GetHardwareCapabilities</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PPC_LAST_</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_IsHwCapsSet</name><argument_list>(<argument><expr><name><name>kHardwareCapabilities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hwcaps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kSetters</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name><operator>,</operator> <name>true</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PPCPlatformStrings</name></type> <name>kEmptyPPCPlatformStrings</name></decl>;</decl_stmt>

<function><type><name>PPCPlatformStrings</name></type> <name>GetPPCPlatformStrings</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>PPCPlatformStrings</name></type> <name>strings</name> <init>= <expr><name>kEmptyPPCPlatformStrings</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>platform</name> <init>= <expr><call><name>CpuFeatures_GetPlatformPointer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>base_platform</name> <init>= <expr><call><name>CpuFeatures_GetBasePlatformPointer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FillProcCpuInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>strings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>platform</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><call><name>str</name><argument_list>(<argument><expr><name>platform</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>platform</name></name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>base_platform</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>CpuFeatures_StringView_CopyString</name><argument_list>(<argument><expr><call><name>str</name><argument_list>(<argument><expr><name>base_platform</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>base_platform</name></name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>base_platform</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>strings</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_OS_LINUX</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_PPC</comment>
</unit>
