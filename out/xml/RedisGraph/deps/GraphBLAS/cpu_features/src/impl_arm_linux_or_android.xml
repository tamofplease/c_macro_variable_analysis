<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/impl_arm_linux_or_android.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_ARM</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_OS_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_arm.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Definitions for introspection.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_TABLE</name></cpp:macro>                                        \
  <cpp:value>LINE(ARM_SWP, swp, "swp", ARM_HWCAP_SWP, 0)                      \
  LINE(ARM_HALF, half, "half", ARM_HWCAP_HALF, 0)                  \
  LINE(ARM_THUMB, thumb, "thumb", ARM_HWCAP_THUMB, 0)              \
  LINE(ARM_26BIT, _26bit, "26bit", ARM_HWCAP_26BIT, 0)             \
  LINE(ARM_FASTMULT, fastmult, "fastmult", ARM_HWCAP_FAST_MULT, 0) \
  LINE(ARM_FPA, fpa, "fpa", ARM_HWCAP_FPA, 0)                      \
  LINE(ARM_VFP, vfp, "vfp", ARM_HWCAP_VFP, 0)                      \
  LINE(ARM_EDSP, edsp, "edsp", ARM_HWCAP_EDSP, 0)                  \
  LINE(ARM_JAVA, java, "java", ARM_HWCAP_JAVA, 0)                  \
  LINE(ARM_IWMMXT, iwmmxt, "iwmmxt", ARM_HWCAP_IWMMXT, 0)          \
  LINE(ARM_CRUNCH, crunch, "crunch", ARM_HWCAP_CRUNCH, 0)          \
  LINE(ARM_THUMBEE, thumbee, "thumbee", ARM_HWCAP_THUMBEE, 0)      \
  LINE(ARM_NEON, neon, "neon", ARM_HWCAP_NEON, 0)                  \
  LINE(ARM_VFPV3, vfpv3, "vfpv3", ARM_HWCAP_VFPV3, 0)              \
  LINE(ARM_VFPV3D16, vfpv3d16, "vfpv3d16", ARM_HWCAP_VFPV3D16, 0)  \
  LINE(ARM_TLS, tls, "tls", ARM_HWCAP_TLS, 0)                      \
  LINE(ARM_VFPV4, vfpv4, "vfpv4", ARM_HWCAP_VFPV4, 0)              \
  LINE(ARM_IDIVA, idiva, "idiva", ARM_HWCAP_IDIVA, 0)              \
  LINE(ARM_IDIVT, idivt, "idivt", ARM_HWCAP_IDIVT, 0)              \
  LINE(ARM_VFPD32, vfpd32, "vfpd32", ARM_HWCAP_VFPD32, 0)          \
  LINE(ARM_LPAE, lpae, "lpae", ARM_HWCAP_LPAE, 0)                  \
  LINE(ARM_EVTSTRM, evtstrm, "evtstrm", ARM_HWCAP_EVTSTRM, 0)      \
  LINE(ARM_AES, aes, "aes", 0, ARM_HWCAP2_AES)                     \
  LINE(ARM_PMULL, pmull, "pmull", 0, ARM_HWCAP2_PMULL)             \
  LINE(ARM_SHA1, sha1, "sha1", 0, ARM_HWCAP2_SHA1)                 \
  LINE(ARM_SHA2, sha2, "sha2", 0, ARM_HWCAP2_SHA2)                 \
  LINE(ARM_CRC32, crc32, "crc32", 0, ARM_HWCAP2_CRC32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_PREFIX</name></cpp:macro> <cpp:value>Arm</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_ENUM_PREFIX</name></cpp:macro> <cpp:value>ARM</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"define_introspection_and_hwcaps.inl"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Implementation.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/bit_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stack_line_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>processor_reports_armv6</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hardware_reports_goldfish</name></decl>;</decl_stmt>
}</block></struct></type> <name>ProcCpuInfoData</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>IndexOfNonDigit</name><parameter_list>(<parameter><decl><type><name>StringView</name></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>str</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>isdigit</name><argument_list>(<argument><expr><call><name>CpuFeatures_StringView_Front</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandleArmLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineResult</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>ArmInfo</name><modifier>*</modifier> <specifier>const</specifier></type> <name>info</name></decl></parameter>,
                          <parameter><decl><type><name>ProcCpuInfoData</name><modifier>*</modifier> <specifier>const</specifier></type> <name>proc_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StringView</name></type> <name>line</name> <init>= <expr><name><name>result</name><operator>.</operator><name>line</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StringView</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_GetAttributeKeyValue</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"Features"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ARM_LAST_</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>kSetters</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>features</name></name><operator>,</operator> <call><name>CpuFeatures_StringView_HasWord</name><argument_list>(
                                         <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>kCpuInfoFlags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"CPU implementer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>implementer</name></name> <operator>=</operator> <call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"CPU variant"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>variant</name></name> <operator>=</operator> <call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"CPU part"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>part</name></name> <operator>=</operator> <call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"CPU revision"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>revision</name></name> <operator>=</operator> <call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"CPU architecture"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// CPU architecture is a number that may be followed by letters. e.g.</comment>
      <comment type="line">// "6TEJ", "7".</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>digits</name> <init>=
          <expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>IndexOfNonDigit</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>architecture</name></name> <operator>=</operator> <call><name>CpuFeatures_StringView_ParsePositiveNumber</name><argument_list>(<argument><expr><name>digits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"Processor"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
               <call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"model name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// Android reports this in a non-Linux standard "Processor" but sometimes</comment>
      <comment type="line">// also in "model name", Linux reports it only in "model name"</comment>
      <comment type="line">// see RaspberryPiZero (Linux) vs InvalidArmv7 (Android) test-cases</comment>
      <expr_stmt><expr><name><name>proc_info</name><operator>-&gt;</operator><name>processor_reports_armv6</name></name> <operator>=</operator>
          <call><name>CpuFeatures_StringView_IndexOf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"(v6l)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"Hardware"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>proc_info</name><operator>-&gt;</operator><name>hardware_reports_goldfish</name></name> <operator>=</operator>
          <call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"Goldfish"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>!</operator><name><name>result</name><operator>.</operator><name>eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>GetArmCpuId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ArmInfo</name><modifier>*</modifier> <specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><call><name>ExtractBitRange</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>implementer</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><call><name>ExtractBitRange</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>variant</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><call><name>ExtractBitRange</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>part</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>
         <operator>(</operator><call><name>ExtractBitRange</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>revision</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FixErrors</name><parameter_list>(<parameter><decl><type><name>ArmInfo</name><modifier>*</modifier> <specifier>const</specifier></type> <name>info</name></decl></parameter>,
                      <parameter><decl><type><name>ProcCpuInfoData</name><modifier>*</modifier> <specifier>const</specifier></type> <name>proc_cpu_info_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Fixing Samsung kernel reporting invalid cpu architecture.</comment>
  <comment type="line">// http://code.google.com/p/android/issues/detail?id=10812</comment>
  <if_stmt><if>if <condition>(<expr><name><name>proc_cpu_info_data</name><operator>-&gt;</operator><name>processor_reports_armv6</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>architecture</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Handle kernel configuration bugs that prevent the correct reporting of CPU</comment>
  <comment type="line">// features.</comment>
  <switch>switch <condition>(<expr><call><name>GetArmCpuId</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0x4100C080</literal></expr>:</case>
      <comment type="line">// Special case: The emulator-specific Android 4.2 kernel fails to report</comment>
      <comment type="line">// support for the 32-bit ARM IDIV instruction. Technically, this is a</comment>
      <comment type="line">// feature of the virtual CPU implemented by the emulator. Note that it</comment>
      <comment type="line">// could also support Thumb IDIV in the future, and this will have to be</comment>
      <comment type="line">// slightly updated.</comment>
      <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>architecture</name></name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator>
          <name><name>proc_cpu_info_data</name><operator>-&gt;</operator><name>hardware_reports_goldfish</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>idiva</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x511004D0</literal></expr>:</case>
      <comment type="line">// https://crbug.com/341598.</comment>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>neon</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">0x510006F2</literal></expr>:</case>
    <case>case <expr><literal type="number">0x510006F3</literal></expr>:</case>
      <comment type="line">// The Nexus 4 (Qualcomm Krait) kernel configuration forgets to report</comment>
      <comment type="line">// IDIV support.</comment>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>idiva</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>idivt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="line">// Propagate cpu features.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>vfpv4</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>vfpv3</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>neon</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>vfpv3</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>vfpv3</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>features</name><operator>.</operator><name>vfp</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillProcCpuInfoData</name><parameter_list>(<parameter><decl><type><name>ArmInfo</name><modifier>*</modifier> <specifier>const</specifier></type> <name>info</name></decl></parameter>,
                                <parameter><decl><type><name>ProcCpuInfoData</name><modifier>*</modifier></type> <name>proc_cpu_info_data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>CpuFeatures_OpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/cpuinfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StackLineReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>StackLineReader_Initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HandleArmLine</name><argument_list>(<argument><expr><call><name>StackLineReader_NextLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>info</name></expr></argument>,
                         <argument><expr><name>proc_cpu_info_data</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>CpuFeatures_CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ArmInfo</name></type> <name>kEmptyArmInfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProcCpuInfoData</name></type> <name>kEmptyProcCpuInfoData</name></decl>;</decl_stmt>

<function><type><name>ArmInfo</name></type> <name>GetArmInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// capabilities are fetched from both getauxval and /proc/cpuinfo so we can</comment>
  <comment type="line">// have some information if the executable is sandboxed (aka no access to</comment>
  <comment type="line">// /proc/cpuinfo).</comment>
  <decl_stmt><decl><type><name>ArmInfo</name></type> <name>info</name> <init>= <expr><name>kEmptyArmInfo</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ProcCpuInfoData</name></type> <name>proc_cpu_info_data</name> <init>= <expr><name>kEmptyProcCpuInfoData</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FillProcCpuInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_cpu_info_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>HardwareCapabilities</name></type> <name>hwcaps</name> <init>= <expr><call><name>CpuFeatures_GetHardwareCapabilities</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ARM_LAST_</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_IsHwCapsSet</name><argument_list>(<argument><expr><name><name>kHardwareCapabilities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hwcaps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kSetters</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name><operator>,</operator> <name>true</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>FixErrors</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>proc_cpu_info_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// defined(CPU_FEATURES_OS_LINUX) || defined(CPU_FEATURES_OS_ANDROID)</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_ARM</comment>
</unit>
