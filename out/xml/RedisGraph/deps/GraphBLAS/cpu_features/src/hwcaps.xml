<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/hwcaps.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hwcaps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>==</operator> <name>mask</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CpuFeatures_IsHwCapsSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HardwareCapabilities</name></type> <name>hwcaps_mask</name></decl></parameter>,
                             <parameter><decl><type><specifier>const</specifier> <name>HardwareCapabilities</name></type> <name>hwcaps</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>IsSet</name><argument_list>(<argument><expr><name><name>hwcaps_mask</name><operator>.</operator><name>hwcaps</name></name></expr></argument>, <argument><expr><name><name>hwcaps</name><operator>.</operator><name>hwcaps</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
         <call><name>IsSet</name><argument_list>(<argument><expr><name><name>hwcaps_mask</name><operator>.</operator><name>hwcaps2</name></name></expr></argument>, <argument><expr><name><name>hwcaps</name><operator>.</operator><name>hwcaps2</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_TEST</name></cpp:ifdef>
<comment type="line">// In test mode, hwcaps_for_testing will define the following functions.</comment>
<function_decl><type><name>HardwareCapabilities</name></type> <name>CpuFeatures_GetHardwareCapabilities</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CpuFeatures_GetPlatformPointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CpuFeatures_GetBasePlatformPointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="line">// Debug facilities</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>           \
  <cpp:value>do {                   \
    printf(__VA_ARGS__); \
    fflush(stdout);      \
  } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Implementation of GetElfHwcapFromGetauxval</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_HWCAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_HWCAP2</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_PLATFORM</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AT_BASE_PLATFORM</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STRONG_GETAUXVAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/auxv.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>GetElfHwcapFromGetauxval</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>hwcap_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>getauxval</name><argument_list>(<argument><expr><name>hwcap_type</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DLFCN_H</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<comment type="line">// On Android we probe the system's C library for a 'getauxval' function and</comment>
<comment type="line">// call it if it exits, or return 0 for failure. This function is available</comment>
<comment type="line">// since API level 20.</comment>
<comment type="line">//</comment>
<comment type="line">// This code does *NOT* check for '__ANDROID_API__ &gt;= 20' to support the edge</comment>
<comment type="line">// case where some NDK developers use headers for a platform that is newer than</comment>
<comment type="line">// the one really targetted by their application. This is typically done to use</comment>
<comment type="line">// newer native APIs only when running on more recent Android versions, and</comment>
<comment type="line">// requires careful symbol management.</comment>
<comment type="line">//</comment>
<comment type="line">// Note that getauxval() can't really be re-implemented here, because its</comment>
<comment type="line">// implementation does not parse /proc/self/auxv. Instead it depends on values</comment>
<comment type="line">// that are passed by the kernel at process-init time to the C runtime</comment>
<comment type="line">// initialization layer.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>unsigned</name> <name>long</name></type> <name>getauxval_func_t</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>long</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetElfHwcapFromGetauxval</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>hwcap_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>libc_handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>getauxval_func_t</name> <modifier>*</modifier></type><name>func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Cleaning error state before calling dlopen.</comment>
  <expr_stmt><expr><name>libc_handle</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libc.so"</literal></expr></argument>, <argument><expr><name>RTLD_NOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>libc_handle</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"Could not dlopen() C library: %s\n"</literal></expr></argument>, <argument><expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>func</name> <operator>=</operator> <operator>(</operator><name>getauxval_func_t</name> <operator>*</operator><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name>libc_handle</name></expr></argument>, <argument><expr><literal type="string">"getauxval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>func</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"Could not find getauxval() in C library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// Note: getauxval() returns 0 on failure. Doesn't touch errno.</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>hwcap_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>libc_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"This platform does not provide hardware capabilities."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Implementation of GetHardwareCapabilities for OS that provide</comment>
<comment type="line">// GetElfHwcapFromGetauxval().</comment>

<comment type="line">// Fallback when getauxval is not available, retrieves hwcaps from</comment>
<comment type="line">// "/proc/self/auxv".</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetElfHwcapFromProcSelfAuxv</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>hwcap_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name></decl>;</decl_stmt>
  }</block> <decl><name>entry</name></decl>;</struct>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>filepath</name><index>[]</index></name> <init>= <expr><literal type="string">"/proc/self/auxv"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>CpuFeatures_OpenFile</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"Could not open %s\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ret</name> <init>= <expr><call><name>CpuFeatures_ReadFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof <name>entry</name></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"Error while reading %s\n"</literal></expr></argument>, <argument><expr><name>filepath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// Detect end of list.</comment>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>entry</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>.</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>.</operator><name>tag</name></name> <operator>==</operator> <name>hwcap_type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>entry</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>CpuFeatures_CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Retrieves hardware capabilities by first trying to call getauxval, if not</comment>
<comment type="line">// available falls back to reading "/proc/self/auxv".</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>GetHardwareCapabilitiesFor</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hwcaps</name> <init>= <expr><call><name>GetElfHwcapFromGetauxval</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwcaps</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"Parsing /proc/self/auxv to extract ELF hwcaps!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hwcaps</name> <operator>=</operator> <call><name>GetElfHwcapFromProcSelfAuxv</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>hwcaps</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>HardwareCapabilities</name></type> <name>CpuFeatures_GetHardwareCapabilities</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>HardwareCapabilities</name></type> <name>capabilities</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>capabilities</name><operator>.</operator><name>hwcaps</name></name> <operator>=</operator> <call><name>GetHardwareCapabilitiesFor</name><argument_list>(<argument><expr><name>AT_HWCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>capabilities</name><operator>.</operator><name>hwcaps2</name></name> <operator>=</operator> <call><name>GetHardwareCapabilitiesFor</name><argument_list>(<argument><expr><name>AT_HWCAP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>capabilities</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CpuFeatures_GetPlatformPointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>GetHardwareCapabilitiesFor</name><argument_list>(<argument><expr><name>AT_PLATFORM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>CpuFeatures_GetBasePlatformPointer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>GetHardwareCapabilitiesFor</name><argument_list>(<argument><expr><name>AT_BASE_PLATFORM</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_TEST</comment>
</unit>
