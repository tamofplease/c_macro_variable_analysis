<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/stack_line_reader.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stack_line_reader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>StackLineReader_Initialize</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>skip_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Replaces the content of buffer with bytes from the file.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadFullBuffer</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read</name> <init>= <expr><call><name>CpuFeatures_ReadFile</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,
                                        <argument><expr><name>STACK_LINE_READER_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>read</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
  <return>return <expr><name>read</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Appends with bytes from the file to buffer, filling the remaining space.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadMore</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size_to_read</name> <init>= <expr><name>STACK_LINE_READER_BUFFER_SIZE</name> <operator>-</operator> <name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read</name> <init>= <expr><call><name>CpuFeatures_ReadFile</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size_to_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>read</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>read</name> <operator>&lt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>size_to_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
  <return>return <expr><name>read</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>IndexOfEol</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>CpuFeatures_StringView_IndexOfChar</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Relocate buffer's pending bytes at the beginning of the array and fills the</comment>
<comment type="line">// remaining space with bytes from the file.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>BringToFrontAndLoadMore</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>ptr</name></name> <operator>!=</operator> <name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name><name>reader</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
  <return>return <expr><call><name>LoadMore</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Loads chunks of buffer size from disks until it contains a newline character</comment>
<comment type="line">// or end of file.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SkipToNextLine</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read</name> <init>= <expr><call><name>LoadFullBuffer</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>eol_index</name> <init>= <expr><call><name>IndexOfEol</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eol_index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator>
            <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>, <argument><expr><name>eol_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LineResult</name></type> <name>CreateLineResult</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>eof</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>full_line</name></decl></parameter>, <parameter><decl><type><name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>LineResult</name></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>eof</name></name> <operator>=</operator> <name>eof</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>full_line</name></name> <operator>=</operator> <name>full_line</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>result</name><operator>.</operator><name>line</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper methods to provide clearer semantic in StackLineReader_NextLine.</comment>
<function><type><specifier>static</specifier> <name>LineResult</name></type> <name>CreateEOFLineResult</name><parameter_list>(<parameter><decl><type><name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>CreateLineResult</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LineResult</name></type> <name>CreateTruncatedLineResult</name><parameter_list>(<parameter><decl><type><name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>CreateLineResult</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>LineResult</name></type> <name>CreateValidLineResult</name><parameter_list>(<parameter><decl><type><name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>CreateLineResult</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>LineResult</name></type> <name>StackLineReader_NextLine</name><parameter_list>(<parameter><decl><type><name>StackLineReader</name><modifier>*</modifier></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>reader</name><operator>-&gt;</operator><name>skip_mode</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>SkipToNextLine</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>skip_mode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>can_load_more</name> <init>=
        <expr><name><name>reader</name><operator>-&gt;</operator><name>view</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name>STACK_LINE_READER_BUFFER_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eol_index</name> <init>= <expr><call><name>IndexOfEol</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>eol_index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>can_load_more</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>read</name> <init>= <expr><call><name>BringToFrontAndLoadMore</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>read</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>CreateEOFLineResult</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>eol_index</name> <operator>=</operator> <call><name>IndexOfEol</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>eol_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>skip_mode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><call><name>CreateTruncatedLineResult</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>
      <decl_stmt><decl><type><name>StringView</name></type> <name>line</name> <init>=
          <expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>, <argument><expr><name>eol_index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator>
          <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name><name>reader</name><operator>-&gt;</operator><name>view</name></name></expr></argument>, <argument><expr><name>eol_index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>CreateValidLineResult</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
  </block_content>}</block>
</block_content>}</block></function>
</unit>
