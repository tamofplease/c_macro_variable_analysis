<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/impl_x86_windows.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_X86</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_OS_WINDOWS</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"impl_x86__base_implementation.inl"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OverrideOsPreserves</name><parameter_list>(<parameter><decl><type><name>OsPreserves</name><modifier>*</modifier></type> <name>os_preserves</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>os_preserves</name></expr>;</expr_stmt>
  <comment type="line">// No override</comment>
</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>  <comment type="line">// IsProcessorFeaturePresent</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_MOCK_CPUID_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>bool</name></type> <name>GetWindowsIsProcessorFeaturePresent</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="line">// CPU_FEATURES_MOCK_CPUID_X86</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>GetWindowsIsProcessorFeaturePresent</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>ProcessorFeature</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>IsProcessorFeaturePresent</name><argument_list>(<argument><expr><name>ProcessorFeature</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DetectFeaturesFromOs</name><parameter_list>(<parameter><decl><type><name>X86Features</name><modifier>*</modifier></type> <name>features</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Handling Windows platform through IsProcessorFeaturePresent.</comment>
  <comment type="line">// https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-isprocessorfeaturepresent</comment>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse</name></name> <operator>=</operator>
      <call><name>GetWindowsIsProcessorFeaturePresent</name><argument_list>(<argument><expr><name>PF_XMMI_INSTRUCTIONS_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse2</name></name> <operator>=</operator>
      <call><name>GetWindowsIsProcessorFeaturePresent</name><argument_list>(<argument><expr><name>PF_XMMI64_INSTRUCTIONS_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>features</name><operator>-&gt;</operator><name>sse3</name></name> <operator>=</operator>
      <call><name>GetWindowsIsProcessorFeaturePresent</name><argument_list>(<argument><expr><name>PF_SSE3_INSTRUCTIONS_AVAILABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_OS_WINDOWS</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_X86</comment>
</unit>
