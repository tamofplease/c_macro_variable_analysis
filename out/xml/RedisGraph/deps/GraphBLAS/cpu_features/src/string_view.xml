<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/string_view.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy.inl"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"equals.inl"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>CpuFeatures_memchr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ptr</name> <operator>&amp;&amp;</operator> <name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>ptr</name> <operator>+</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CpuFeatures_StringView_IndexOfChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>view</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>found</name> <init>= <expr><call><name>CpuFeatures_memchr</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>view</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>found</name> <operator>-</operator> <name><name>view</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CpuFeatures_StringView_IndexOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>sub_view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>sub_view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StringView</name></type> <name>remainder</name> <init>= <expr><name>view</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>remainder</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>sub_view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>found_index</name> <init>=
          <expr><call><name>CpuFeatures_StringView_IndexOfChar</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name><name>sub_view</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>found_index</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>found_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_StartsWith</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>sub_view</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>remainder</name><operator>.</operator><name>ptr</name></name> <operator>-</operator> <name><name>view</name><operator>.</operator><name>ptr</name></name><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>remainder</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CpuFeatures_StringView_IsEquals</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>a</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>ptr</name></name> <operator>||</operator> <call><name>equals</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CpuFeatures_StringView_StartsWith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>a</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>ptr</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>b</name><operator>.</operator><name>size</name></name></expr>
             ?</condition><then> <expr><call><name>equals</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>
             </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>StringView</name></type> <name>CpuFeatures_StringView_PopFront</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>str_view</name></decl></parameter>,
                                           <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>str_view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>kEmptyStringView</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>view</name><argument_list>(<argument><expr><name><name>str_view</name><operator>.</operator><name>ptr</name></name> <operator>+</operator> <name>count</name></expr></argument>, <argument><expr><name><name>str_view</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>StringView</name></type> <name>CpuFeatures_StringView_PopBack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>str_view</name></decl></parameter>,
                                          <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>str_view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>kEmptyStringView</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>view</name><argument_list>(<argument><expr><name><name>str_view</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>str_view</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>StringView</name></type> <name>CpuFeatures_StringView_KeepFront</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>str_view</name></decl></parameter>,
                                            <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><name>count</name> <operator>&lt;=</operator> <name><name>str_view</name><operator>.</operator><name>size</name></name></expr> ?</condition><then> <expr><call><name>view</name><argument_list>(<argument><expr><name><name>str_view</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>str_view</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>CpuFeatures_StringView_Front</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>view</name><operator>.</operator><name>ptr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>CpuFeatures_StringView_Back</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>view</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>view</name><operator>.</operator><name>ptr</name><index>[<expr><name><name>view</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>StringView</name></type> <name>CpuFeatures_StringView_TrimWhitespace</name><parameter_list>(<parameter><decl><type><name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>view</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>CpuFeatures_StringView_Front</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <while>while <condition>(<expr><name><name>view</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><call><name>CpuFeatures_StringView_Back</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopBack</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>view</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HexValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Returns -1 if view contains non digits.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ParsePositiveNumberWithBase</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>base</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StringView</name></type> <name>remainder</name> <init>= <expr><name>view</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>remainder</name><operator>.</operator><name>size</name></name></expr>;</condition>
       <incr><expr><name>remainder</name> <operator>=</operator> <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>value</name> <init>= <expr><call><name>HexValue</name><argument_list>(<argument><expr><call><name>CpuFeatures_StringView_Front</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>value</name> <operator>&gt;=</operator> <name>base</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>*</operator> <name>base</name><operator>)</operator> <operator>+</operator> <name>value</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>CpuFeatures_StringView_ParsePositiveNumber</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>view</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>hex_prefix</name> <init>= <expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"0x"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_StartsWith</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>hex_prefix</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>span_no_prefix</name> <init>=
          <expr><call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>hex_prefix</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>ParsePositiveNumberWithBase</name><argument_list>(<argument><expr><name>span_no_prefix</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>ParsePositiveNumberWithBase</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>CpuFeatures_StringView_CopyString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>,
                                       <parameter><decl><type><name>size_t</name></type> <name>dst_size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dst_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>max_copy_size</name> <init>= <expr><name>dst_size</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_size</name> <init>=
        <expr><ternary><condition><expr><name><name>src</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>max_copy_size</name></expr> ?</condition><then> <expr><name>max_copy_size</name></expr> </then><else>: <expr><name><name>src</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>copy_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CpuFeatures_StringView_HasWord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>line</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>word_str</name></decl></parameter>,
                                    <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>separator</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>word</name> <init>= <expr><call><name>str</name><argument_list>(<argument><expr><name>word_str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StringView</name></type> <name>remainder</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index_of_word</name> <init>= <expr><call><name>CpuFeatures_StringView_IndexOf</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index_of_word</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>before</name> <init>=
          <expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>index_of_word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>after</name> <init>=
          <expr><call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>index_of_word</name> <operator>+</operator> <name><name>word</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>valid_before</name> <init>=
          <expr><name><name>before</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>CpuFeatures_StringView_Back</name><argument_list>(<argument><expr><name>before</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>separator</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>valid_after</name> <init>=
          <expr><name><name>after</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>CpuFeatures_StringView_Front</name><argument_list>(<argument><expr><name>after</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>separator</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>valid_before</name> <operator>&amp;&amp;</operator> <name>valid_after</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>remainder</name> <operator>=</operator>
          <call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><name>index_of_word</name> <operator>+</operator> <name><name>word</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>CpuFeatures_StringView_GetAttributeKeyValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>line</name></decl></parameter>,
                                                 <parameter><decl><type><name>StringView</name><modifier>*</modifier></type> <name>key</name></decl></parameter>,
                                                 <parameter><decl><type><name>StringView</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>StringView</name></type> <name>sep</name> <init>= <expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">": "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>index_of_separator</name> <init>= <expr><call><name>CpuFeatures_StringView_IndexOf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index_of_separator</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <call><name>CpuFeatures_StringView_TrimWhitespace</name><argument_list>(
      <argument><expr><call><name>CpuFeatures_StringView_PopFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>index_of_separator</name> <operator>+</operator> <name><name>sep</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>key</name> <operator>=</operator> <call><name>CpuFeatures_StringView_TrimWhitespace</name><argument_list>(
      <argument><expr><call><name>CpuFeatures_StringView_KeepFront</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>index_of_separator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
