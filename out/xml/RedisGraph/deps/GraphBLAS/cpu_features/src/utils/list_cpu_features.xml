<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/utils/list_cpu_features.c"><comment type="line">// Copyright 2017 Google LLC</comment>
<comment type="line">//</comment>
<comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<comment type="line">// This program dumps current host data to the standard output.</comment>
<comment type="line">// Output can be text or json if the `--json` flag is passed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_x86.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_arm.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_aarch64.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_mips.h"</cpp:file></cpp:include>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_ppc.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Design principles</comment>
<comment type="line">// -----------------</comment>
<comment type="line">// We build a tree structure containing all the data to be displayed.</comment>
<comment type="line">// Then depending on the output type (text or json) we walk the tree and display</comment>
<comment type="line">// the data accordingly.</comment>

<comment type="line">// We use a bump allocator to allocate strings and nodes of the tree,</comment>
<comment type="line">// Memory is not intended to be reclaimed.</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>BumpAllocator</name>;</typedef>

<decl_stmt><decl><type><name>char</name></type> <name><name>gGlobalBuffer</name><index>[<expr><literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BumpAllocator</name></type> <name>gBumpAllocator</name> <init>= <expr><block>{<expr><operator>.</operator><name>ptr</name> <operator>=</operator> <name>gGlobalBuffer</name></expr>,
                                <expr><operator>.</operator><name>size</name> <operator>=</operator> sizeof<operator>(</operator><name>gGlobalBuffer</name><operator>)</operator></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>internal_error</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"internal error\n"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>assertAligned</name><parameter_list>()</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name><operator>)</operator> <operator>%</operator> <name>ALIGN</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>internal_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BA_Align</name><parameter_list>()</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><operator>(</operator><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name><operator>)</operator> <operator>%</operator> <name>ALIGN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>--</operator><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>assertAligned</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Update the available memory left in the BumpAllocator.</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>BA_Bump</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assertAligned</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Align size to next 8B boundary.</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>+</operator> <name>ALIGN</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>ALIGN</name> <operator>*</operator> <name>ALIGN</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>internal_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <return>return <expr><name>ptr</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// The type of the nodes in the tree.</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>NT_INVALID</name></decl>,
  <decl><name>NT_INT</name></decl>,
  <decl><name>NT_MAP</name></decl>,
  <decl><name>NT_MAP_ENTRY</name></decl>,
  <decl><name>NT_ARRAY</name></decl>,
  <decl><name>NT_ARRAY_ELEMENT</name></decl>,
  <decl><name>NT_STRING</name></decl>,
}</block></enum></type> <name>NodeType</name>;</typedef>

<comment type="line">// The node in the tree.</comment>
<typedef>typedef <type><struct>struct <name>Node</name> <block>{
  <decl_stmt><decl><type><name>NodeType</name></type> <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>integer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>string</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name><modifier>*</modifier></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>Node</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>Node</name>;</typedef>

<comment type="line">// Creates an initialized Node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>BA_CreateNode</name><parameter_list>(<parameter><decl><type><name>NodeType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>tv</name> <init>= <expr><operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><call><name>BA_Bump</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>tv</name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>}</block></expr>;</expr_stmt>
  <return>return <expr><name>tv</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adds an integer node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>tv</name> <init>= <expr><call><name>BA_CreateNode</name><argument_list>(<argument><expr><name>NT_INT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>integer</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <return>return <expr><name>tv</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adds a string node.</comment>
<comment type="line">// `value` must outlive the tree.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateConstantString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>tv</name> <init>= <expr><call><name>BA_CreateNode</name><argument_list>(<argument><expr><name>NT_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tv</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
  <return>return <expr><name>tv</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adds a map node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateMap</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>BA_CreateNode</name><argument_list>(<argument><expr><name>NT_MAP</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// Adds an array node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateArray</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><call><name>BA_CreateNode</name><argument_list>(<argument><expr><name>NT_ARRAY</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="line">// Adds a formatted string node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreatePrintfString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>arglist</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name><name>gBumpAllocator</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>written</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arglist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>written</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>written</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>gBumpAllocator</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>internal_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>BA_Bump</name><argument_list>(<argument><expr><name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adds a string node.</comment>
<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>CreatePrintfString</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Adds a map entry node.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>AddMapEntry</name><parameter_list>(<parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>map</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>map</name> <operator>&amp;&amp;</operator> <name><name>map</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NT_MAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>current</name> <init>= <expr><name>map</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><call><name>BA_Bump</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>NT_MAP_ENTRY</name></expr>, <expr><operator>.</operator><name>string</name> <operator>=</operator> <name>key</name></expr>, <expr><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Adds an array element node.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>AddArrayElement</name><parameter_list>(<parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>array</name></decl></parameter>, <parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>array</name> <operator>&amp;&amp;</operator> <name><name>array</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NT_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>current</name> <init>= <expr><name>array</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>*</operator><operator>)</operator><call><name>BA_Bump</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>current</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>NT_ARRAY_ELEMENT</name></expr>, <expr><operator>.</operator><name>value</name> <operator>=</operator> <name>value</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator><name>p1</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator> <specifier>const</specifier><operator>*</operator><operator>)</operator><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ADD_FLAGS</name><parameter_list>(<parameter><type><name>HasFeature</name></type></parameter>, <parameter><type><name>FeatureName</name></type></parameter>, <parameter><type><name>FeatureType</name></type></parameter>, <parameter><type><name>LastEnum</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>static void AddFlags(Node* map, const FeatureType* features) {         \
    size_t i;                                                            \
    const char* ptrs[LastEnum] = {0};                                    \
    size_t count = 0;                                                    \
    for (i = 0; i &lt; LastEnum; ++i) {                                     \
      if (HasFeature(features, i)) {                                     \
        ptrs[count] = FeatureName(i);                                    \
        ++count;                                                         \
      }                                                                  \
    }                                                                    \
    qsort((void*)ptrs, count, sizeof(char*), cmp);                       \
    Node* const array = CreateArray();                                   \
    for (i = 0; i &lt; count; ++i)                                          \
      AddArrayElement(array, CreateConstantString(ptrs[i]));             \
    AddMapEntry(map, "flags", array);                                    \
  }</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>DEFINE_ADD_FLAGS</name><argument_list>(<argument>GetX86FeaturesEnumValue</argument>, <argument>GetX86FeaturesEnumName</argument>, <argument>X86Features</argument>,
                 <argument>X86_LAST_</argument>)</argument_list></macro>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>DEFINE_ADD_FLAGS</name><argument_list>(<argument>GetArmFeaturesEnumValue</argument>, <argument>GetArmFeaturesEnumName</argument>, <argument>ArmFeatures</argument>,
                 <argument>ARM_LAST_</argument>)</argument_list></macro>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>DEFINE_ADD_FLAGS</name><argument_list>(<argument>GetAarch64FeaturesEnumValue</argument>, <argument>GetAarch64FeaturesEnumName</argument>,
                 <argument>Aarch64Features</argument>, <argument>AARCH64_LAST_</argument>)</argument_list></macro>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>DEFINE_ADD_FLAGS</name><argument_list>(<argument>GetMipsFeaturesEnumValue</argument>, <argument>GetMipsFeaturesEnumName</argument>,
                 <argument>MipsFeatures</argument>, <argument>MIPS_LAST_</argument>)</argument_list></macro>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<macro><name>DEFINE_ADD_FLAGS</name><argument_list>(<argument>GetPPCFeaturesEnumValue</argument>, <argument>GetPPCFeaturesEnumName</argument>, <argument>PPCFeatures</argument>,
                 <argument>PPC_LAST_</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Prints a json string with characters escaping.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printJsonString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>str</name></expr>;</condition> <incr><expr><operator>++</operator><name>str</name></expr></incr>)</control> <block>{<block_content>
    <switch>switch <condition>(<expr><operator>*</operator><name>str</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="char">'\"'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\\'</literal></expr>:</case>
      <case>case <expr><literal type="char">'/'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\b'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\f'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Walks a Node and print it as json.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printJson</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Node</name><modifier>*</modifier></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NT_INVALID</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>NT_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_STRING</name></expr>:</case>
      <expr_stmt><expr><call><name>printJsonString</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_ARRAY</name></expr>:</case>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">']'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_MAP</name></expr>:</case>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'{'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_MAP_ENTRY</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\"%s\":"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_ARRAY_ELEMENT</name></expr>:</case>
      <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// Walks a Node and print it as text.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printTextField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Node</name><modifier>*</modifier></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>NT_INVALID</name></expr>:</case>
      <break>break;</break>
    <case>case <expr><name>NT_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%3d (0x%02X)"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_STRING</name></expr>:</case>
      <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>string</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_ARRAY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_MAP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_MAP_ENTRY</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-15s : "</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>NT_ARRAY_ELEMENT</name></expr>:</case>
      <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printTextRoot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Node</name><modifier>*</modifier></type> <name>current</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>NT_MAP</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printTextField</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>showUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(
      <argument><expr><literal type="string">"\n"</literal>
      <literal type="string">"Usage: %s [options]\n"</literal>
      <literal type="string">"      Options:\n"</literal>
      <literal type="string">"      -h | --help     Show help message.\n"</literal>
      <literal type="string">"      -j | --json     Format output as json instead of plain text.\n"</literal>
      <literal type="string">"\n"</literal></expr></argument>,
      <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>GetCacheTypeString</name><parameter_list>(<parameter><decl><type><name>CacheType</name></type> <name>cache_type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>cache_type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CPU_FEATURE_CACHE_NULL</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_DATA</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_INSTRUCTION</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"instruction"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_UNIFIED</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"unified"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_TLB</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"tlb"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_DTLB</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"dtlb"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_STLB</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"stlb"</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>CPU_FEATURE_CACHE_PREFETCH</name></expr>:</case>
      <return>return <expr><call><name>CreateConstantString</name><argument_list>(<argument><expr><literal type="string">"prefetch"</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>UNREACHABLE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddCacheInfo</name><parameter_list>(<parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CacheInfo</name><modifier>*</modifier></type> <name>cache_info</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>array</name> <init>= <expr><call><name>CreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache_info</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>CacheLevelInfo</name></type> <name>info</name> <init>= <expr><name><name>cache_info</name><operator>-&gt;</operator><name>levels</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>map</name> <init>= <expr><call><name>CreateMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"level"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"cache_type"</literal></expr></argument>, <argument><expr><call><name>GetCacheTypeString</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>cache_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"cache_size"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"ways"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ways</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"line_size"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>line_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"tlb_entries"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>tlb_entries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><literal type="string">"partitioning"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>partitioning</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>AddArrayElement</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"cache_info"</literal></expr></argument>, <argument><expr><name>array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Node</name><modifier>*</modifier></type> <name>CreateTree</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>Node</name><modifier>*</modifier></type> <name>root</name> <init>= <expr><call><name>CreateMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_X86</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>char</name></type> <name><name>brand_string</name><index>[<expr><literal type="number">49</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>X86Info</name></type> <name>info</name> <init>= <expr><call><name>GetX86Info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>CacheInfo</name></type> <name>cache_info</name> <init>= <expr><call><name>GetX86CacheInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>FillX86BrandString</name><argument_list>(<argument><expr><name>brand_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><literal type="string">"x86"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"brand"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name>brand_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>family</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"model"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"stepping"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>stepping</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"uarch"</literal></expr></argument>,
              <argument><expr><call><name>CreateString</name><argument_list>(
                  <argument><expr><call><name>GetX86MicroarchitectureName</name><argument_list>(<argument><expr><call><name>GetX86Microarchitecture</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddFlags</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddCacheInfo</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>ArmInfo</name></type> <name>info</name> <init>= <expr><call><name>GetArmInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><literal type="string">"ARM"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"implementer"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>implementer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"architecture"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>architecture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"variant"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>variant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>part</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"revision"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddFlags</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_AARCH64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Aarch64Info</name></type> <name>info</name> <init>= <expr><call><name>GetAarch64Info</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><literal type="string">"aarch64"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"implementer"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>implementer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"variant"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>variant</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>part</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"revision"</literal></expr></argument>, <argument><expr><call><name>CreateInt</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddFlags</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>MipsInfo</name></type> <name>info</name> <init>= <expr><call><name>GetMipsInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><literal type="string">"mips"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddFlags</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_ARCH_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PPCInfo</name></type> <name>info</name> <init>= <expr><call><name>GetPPCInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>PPCPlatformStrings</name></type> <name>strings</name> <init>= <expr><call><name>GetPPCPlatformStrings</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"arch"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><literal type="string">"ppc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"platform"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>platform</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"model"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>model</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"machine"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>machine</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"cpu"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>cpu</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"instruction"</literal></expr></argument>, <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>platform</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddMapEntry</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"microarchitecture"</literal></expr></argument>,
              <argument><expr><call><name>CreateString</name><argument_list>(<argument><expr><name><name>strings</name><operator>.</operator><name>type</name><operator>.</operator><name>base_platform</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>AddFlags</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>root</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>BA_Align</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Node</name><modifier>*</modifier> <specifier>const</specifier></type> <name>root</name> <init>= <expr><call><name>CreateTree</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>outputJson</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-j"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--json"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>outputJson</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>showUsage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>
      <return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name>outputJson</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printJson</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>printTextRoot</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
