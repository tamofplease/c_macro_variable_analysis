<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/cpu_features/src/impl_mips_linux_or_android.c"><comment type="line">// Licensed under the Apache License, Version 2.0 (the "License");</comment>
<comment type="line">// you may not use this file except in compliance with the License.</comment>
<comment type="line">// You may obtain a copy of the License at</comment>
<comment type="line">//</comment>
<comment type="line">//    http://www.apache.org/licenses/LICENSE-2.0</comment>
<comment type="line">//</comment>
<comment type="line">// Unless required by applicable law or agreed to in writing, software</comment>
<comment type="line">// distributed under the License is distributed on an "AS IS" BASIS,</comment>
<comment type="line">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</comment>
<comment type="line">// See the License for the specific language governing permissions and</comment>
<comment type="line">// limitations under the License.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpu_features_macros.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CPU_FEATURES_ARCH_MIPS</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_OS_LINUX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CPU_FEATURES_OS_ANDROID</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cpuinfo_mips.h"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Definitions for introspection.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_TABLE</name></cpp:macro>                     \
  <cpp:value>LINE(MIPS_MSA, msa, "msa", MIPS_HWCAP_MSA, 0) \
  LINE(MIPS_EVA, eva, "eva", 0, 0)              \
  LINE(MIPS_R6, r6, "r6", MIPS_HWCAP_R6, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_PREFIX</name></cpp:macro> <cpp:value>Mips</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTROSPECTION_ENUM_PREFIX</name></cpp:macro> <cpp:value>MIPS</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"define_introspection_and_hwcaps.inl"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Implementation.</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/filesystem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/hwcaps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/stack_line_reader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal/string_view.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandleMipsLine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LineResult</name></type> <name>result</name></decl></parameter>,
                           <parameter><decl><type><name>MipsFeatures</name><modifier>*</modifier> <specifier>const</specifier></type> <name>features</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StringView</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <comment type="line">// See tests for an example.</comment>
  <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_GetAttributeKeyValue</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_StringView_IsEquals</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>str</name><argument_list>(<argument><expr><literal type="string">"ASEs implemented"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MIPS_LAST_</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>kSetters</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><name>features</name><operator>,</operator> <call><name>CpuFeatures_StringView_HasWord</name><argument_list>(
                                  <argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>kCpuInfoFlags</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>!</operator><name><name>result</name><operator>.</operator><name>eof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillProcCpuInfoData</name><parameter_list>(<parameter><decl><type><name>MipsFeatures</name><modifier>*</modifier> <specifier>const</specifier></type> <name>features</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><call><name>CpuFeatures_OpenFile</name><argument_list>(<argument><expr><literal type="string">"/proc/cpuinfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StackLineReader</name></type> <name>reader</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>StackLineReader_Initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HandleMipsLine</name><argument_list>(<argument><expr><call><name>StackLineReader_NextLine</name><argument_list>(<argument><expr><operator>&amp;</operator><name>reader</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>features</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>CpuFeatures_CloseFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>MipsInfo</name></type> <name>kEmptyMipsInfo</name></decl>;</decl_stmt>

<function><type><name>MipsInfo</name></type> <name>GetMipsInfo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// capabilities are fetched from both getauxval and /proc/cpuinfo so we can</comment>
  <comment type="line">// have some information if the executable is sandboxed (aka no access to</comment>
  <comment type="line">// /proc/cpuinfo).</comment>
  <decl_stmt><decl><type><name>MipsInfo</name></type> <name>info</name> <init>= <expr><name>kEmptyMipsInfo</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>FillProcCpuInfoData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>HardwareCapabilities</name></type> <name>hwcaps</name> <init>= <expr><call><name>CpuFeatures_GetHardwareCapabilities</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MIPS_LAST_</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>CpuFeatures_IsHwCapsSet</name><argument_list>(<argument><expr><name><name>kHardwareCapabilities</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>hwcaps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>kSetters</name><index>[<expr><name>i</name></expr>]</index></name><operator>(</operator><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>features</name></name><operator>,</operator> <name>true</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>info</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">//  defined(CPU_FEATURES_OS_LINUX) || defined(CPU_FEATURES_OS_ANDROID)</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CPU_FEATURES_ARCH_MIPS</comment>
</unit>
