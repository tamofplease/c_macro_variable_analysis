<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/rmm_wrap/rmm_wrap_test.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// rmm_wrap/rmm_wrap_test.c:  simple main program for testing rmm_wrap</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rmm_wrap.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>size_t</name></type> <name>init_size</name></decl>, <decl><type ref="prev"/><name>max_size</name></decl>, <decl><type ref="prev"/><name>stream_pool_size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>init_size</name> <operator>=</operator> <literal type="number">256</literal><operator>*</operator><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_size</name>  <operator>=</operator> <literal type="number">256</literal><operator>*</operator><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="line">//printf(" pool init size %ld, max size %ld\n", init_size, max_size);</comment>
    <expr_stmt><expr><call><name>rmm_wrap_initialize</name><argument_list>( <argument><expr><name>rmm_wrap_managed</name></expr></argument>, <argument><expr><name>init_size</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>stream_pool_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RMM initialized!  in managed mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>buff_size</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">13</literal><operator>)</operator><operator>+</operator><literal type="number">152</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" asked for %ld"</literal></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>rmm_wrap_allocate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buff_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" actually allocated  %ld\n"</literal></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rmm_wrap_deallocate</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rmm_wrap_finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>rmm_wrap_initialize</name><argument_list>( <argument><expr><name>rmm_wrap_device</name></expr></argument>, <argument><expr><name>init_size</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>, <argument><expr><name>stream_pool_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"RMM initialized!  in device mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>buff_size</name> <operator>=</operator> <operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">13</literal><operator>)</operator><operator>+</operator><literal type="number">157</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" asked for %ld"</literal></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>rmm_wrap_allocate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>buff_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" actually allocated  %ld\n"</literal></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rmm_wrap_deallocate</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buff_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rmm_wrap_finalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
