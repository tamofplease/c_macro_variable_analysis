<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/test/tcov/gbcov_util.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbcov_util.c: utilities for test coverage</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// These functions are compiled along with the GraphBLAS mexFunctions, to</comment>
<comment type="line">// allow them to copy the statement coverage counts to and from the built-in</comment>
<comment type="line">// global workspace.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbcov_get: copy coverage counts from the built-in workspace</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This function is called when a GraphBLAS mexFunction starts.</comment>
<comment type="line">// gbcov_global is an int64 built-in array in the built-in global workspace.</comment>
<comment type="line">// Its size is controlled by gbcov_max, defined in gbcovfinish.c.  If the</comment>
<comment type="line">// array is empty in the workspace, or if it doesn't exist, it is created with</comment>
<comment type="line">// the correct size.  Then the internal gbcov array is copied into it.</comment>

<comment type="line">// mxGetData is used instead of the MATLAB-recommended mxGetDoubles, etc,</comment>
<comment type="line">// because mxGetData works best for Octave, and it works fine for MATLAB</comment>
<comment type="line">// since GraphBLAS requires R2018a with the interleaved complex data type.</comment>

<function><type><name>void</name></type> <name>gbcov_get</name> <parameter_list>( )</parameter_list>
<block>{<block_content>

    <comment type="line">// get gbcov_global from built-in global workspace</comment>
    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>GB_cov_global</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>GB_cov_global</name> <operator>=</operator> <operator>(</operator><name>mxArray</name> <operator>*</operator><operator>)</operator> <call><name>mexGetVariablePtr</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"gbcov_global"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>GB_cov_global</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// doesn't exist; create it and set it to zero</comment>
        <expr_stmt><expr><name>GB_cov_global</name> <operator>=</operator> <call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>gbcov_max</name></expr></argument>,
            <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// copy it back to the built-in global workspace</comment>
        <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"gbcov_global"</literal></expr></argument>, <argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// it should exist now, but double-check</comment>
    <if_stmt><if>if <condition>(<expr><name>GB_cov_global</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GrB:panic"</literal></expr></argument>, <argument><expr><literal type="string">"GB_cov_global still null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get a pointer to the content of the gbcov_global array in the</comment>
    <comment type="line">// global workspace</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// getting paranoid here; this should never happen</comment>
    <if_stmt><if>if <condition>(<expr><name>g</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GrB:panic"</literal></expr></argument>, <argument><expr><literal type="string">"g null!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// copy the count from the built-in gbcov_global into gbcov</comment>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>gbcov</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>gbcov_max</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbcov_put: copy coverage counts back to the built-in workspace</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This function is called when a GraphBLAS mexFunction finishes.  It copies</comment>
<comment type="line">// the updated statement coverage counters in the gbcov array back to the</comment>
<comment type="line">// gbcov_global array in the built-in global workspace where it can be</comment>
<comment type="line">// analyzed.</comment>

<function><type><name>void</name></type> <name>gbcov_put</name> <parameter_list>( )</parameter_list>
<block>{<block_content>
    <comment type="line">// create a built-in array with the right size</comment>
    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type> <name>GB_cov_global</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>gbcov_max</name></expr></argument>,
            <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// copy the updated gbcov counter array into the built-in array</comment>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>g</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>gbcov</name></expr></argument>, <argument><expr><name>gbcov_max</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// put the built-in array into the global workspace, overwriting the</comment>
    <comment type="line">// version that was already there</comment>
    <expr_stmt><expr><call><name>mexPutVariable</name> <argument_list>(<argument><expr><literal type="string">"global"</literal></expr></argument>, <argument><expr><literal type="string">"gbcov_global"</literal></expr></argument>, <argument><expr><name>GB_cov_global</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
