<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxget_uint64_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxget_int64_scalar: return an int64 scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>uint64_t</name></type> <name>gb_mxget_uint64_scalar</name> <comment type="line">// return uint64 value of a MATLAB scalar</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>mxscalar</name></decl></parameter>,    <comment type="line">// MATLAB scalar to extract</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>                  <comment type="line">// name of the scalar</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name>mxscalar</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>GB_COV_PUT</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GrB:error"</literal></expr></argument>, <argument><expr><literal type="string">"%s must be a scalar"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>scalar</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>mxGetClassID</name> <argument_list>(<argument><expr><name>mxscalar</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>mxINT64_CLASS</name></expr>    :</case> 
        <case>case <expr><name>mxUINT64_CLASS</name></expr>   :</case> 
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>mxscalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scalar</name> <operator>=</operator> <name><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default               :</default> 
            <expr_stmt><expr><name>scalar</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>mxscalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>scalar</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
