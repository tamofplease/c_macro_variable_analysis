<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbnormdiff.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbnormdiff: norm (A-B,kind)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: s = gbnormdiff (A, B, kind)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the inputs </comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>B</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>norm_kind</name> <init>= <expr><call><name>gb_norm_kind</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>btype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl>, <decl><type ref="prev"/><name>bnrows</name></decl>, <decl><type ref="prev"/><name>bncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bnrows</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bncols</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>!=</operator> <name>bnrows</name> <operator>||</operator> <name>ancols</name> <operator>!=</operator> <name>bncols</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"A and B must have the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// s = norm (A-B,kind)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>s</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>atype</name> <operator>==</operator> <name>GrB_FP32</name> <operator>||</operator> <name>atype</name> <operator>==</operator> <name>GrB_FP64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>atype</name> <operator>==</operator> <name>btype</name><operator>)</operator>
        <operator>&amp;&amp;</operator> <operator>(</operator><name>anrows</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>ancols</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>norm_kind</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// s = norm (A-B,p) where A and B are full FP32 or FP64 vectors,</comment>
        <comment type="line">// or when p = 0 (for Frobenius norm)</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anz</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anz</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>GB_helper10</name> <argument_list>(<argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,
            <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>norm_kind</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown norm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>btype</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// both A and B are single: use FP32</comment>
            <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_FP32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name> <operator>&amp;&amp;</operator> <name>btype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// both A and B are single complex: use FC32</comment>
            <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GxB_FC32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINUS_FC32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name> <operator>||</operator> <name>btype</name> <operator>==</operator> <name>GxB_FC64</name> <operator>||</operator>
                 <name>atype</name> <operator>==</operator> <name>GxB_FC32</name> <operator>||</operator> <name>btype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// either A or B are any kind of complex: use FC64</comment>
            <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GxB_FC64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINUS_FC64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// both A and B are real (any kind): use FP64</comment>
            <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_FP64</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// X = A-B</comment>
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>X</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// s = norm (X, norm_kind)</comment>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>gb_norm</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>norm_kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
