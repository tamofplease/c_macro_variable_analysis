<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_get_format.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_get_format: determine the format of a matrix result </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gb_get_format determines the format of a result matrix C, which may be</comment>
<comment type="line">// computed from one or two input matrices A and B.  The following rules are</comment>
<comment type="line">// used, in order:</comment>

<comment type="line">// (1) GraphBLAS operations of the form C = GrB.method (Cin, ...) use the</comment>
<comment type="line">//      format of Cin for the new matrix C.</comment>

<comment type="line">// (1) If the format is determined by the descriptor to the method, then that</comment>
<comment type="line">//      determines the format of C.</comment>

<comment type="line">// (2) If C is a column vector (cncols == 1) then C is stored by column.</comment>

<comment type="line">// (3) If C is a row vector (cnrows == 1) then C is stored by row.</comment>

<comment type="line">// (4) If A is present, and not a row or column vector or scalar, then its</comment>
<comment type="line">//      format is used for C.</comment>

<comment type="line">// (5) If B is present, and not a row or column vector or scalar, then its</comment>
<comment type="line">//      format is used for C.</comment>

<comment type="line">// (6) Otherwise, the global default format is used for C.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GxB_Format_Value</name></type> <name>gb_get_format</name>          <comment type="line">// GxB_BY_ROW or GxB_BY_COL</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Index</name></type> <name>cnrows</name></decl></parameter>,                   <comment type="line">// C is cnrows-by-cncols</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>cncols</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                       <comment type="line">// may be NULL</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,                       <comment type="line">// may be NULL</comment>
    <parameter><decl><type><name>GxB_Format_Value</name></type> <name>fmt_descriptor</name></decl></parameter>     <comment type="line">// may be GxB_NO_FORMAT</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fmt_descriptor</name> <operator>!=</operator> <name>GxB_NO_FORMAT</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (1) the format is defined by the descriptor to the method</comment>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>fmt_descriptor</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>cncols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (2) column vectors are stored by column, by default</comment>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>GxB_BY_COL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>cnrows</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (3) row vectors are stored by row, by default</comment>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>GxB_BY_ROW</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gb_is_vector</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (4) get the format of A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>B</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>gb_is_vector</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (5) get the format of B</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// (6) get the global default format</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><name>fmt</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
