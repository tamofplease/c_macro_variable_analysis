<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbnew.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbnew: create a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// A may be a built-in sparse matrix, or a built-in struct containing a</comment>
<comment type="line">// GraphBLAS matrix.  C is returned as a built-in struct containing a GraphBLAS</comment>
<comment type="line">// matrix.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// C = gbnew (A)</comment>
<comment type="line">// C = gbnew (A, type)</comment>
<comment type="line">// C = gbnew (A, format)</comment>
<comment type="line">// C = gbnew (m, n)</comment>
<comment type="line">// C = gbnew (m, n, format)</comment>
<comment type="line">// C = gbnew (m, n, type)</comment>
<comment type="line">// C = gbnew (A, type, format)</comment>
<comment type="line">// C = gbnew (A, format, type)</comment>
<comment type="line">// C = gbnew (m, n, type, format)</comment>
<comment type="line">// C = gbnew (m, n, format, type)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = GrB (m,n,type,format) or C = GrB (A,type,format)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the GraphBLAS matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = GrB (A)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// GraphBLAS copy of A, same type and format as A</comment>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = GrB (A, type)</comment>
        <comment type="line">// C = GrB (A, format)</comment>
        <comment type="line">// C = GrB (m, n)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = GrB (A, type)</comment>
            <comment type="line">// C = GrB (A, format)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C = GrB (A, type)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <if_stmt><if>if <condition>(<expr><call><name>gb_mxarray_is_empty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// A is a 0-by-0 built-in matrix.  create a new 0-by-0</comment>
                    <comment type="line">// GraphBLAS matrix C of the given type, with the default</comment>
                    <comment type="line">// format.</comment>
                    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// get a shallow copy and then typecast it to type.</comment>
                    <comment type="line">// use the same format as A</comment>
                    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_typecast</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ok</name></expr>)</condition>
            <block>{<block_content> 

                <comment type="line">//--------------------------------------------------------------</comment>
                <comment type="line">// C = GrB (A, format)</comment>
                <comment type="line">//--------------------------------------------------------------</comment>

                <comment type="line">// get a shallow copy of A</comment>
                <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <comment type="line">// C = A with the requested format and sparsity, no typecast</comment>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_typecast</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown type or format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                 <call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = GrB (m, n)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// m-by-n GraphBLAS double matrix, no entries, default format</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"usage: C=GrB(m,n), C=GrB(A,type), or C=GrB(A,format)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = GrB (m, n, format)</comment>
        <comment type="line">// C = GrB (m, n, type)</comment>
        <comment type="line">// C = GrB (A, type, format)</comment>
        <comment type="line">// C = GrB (A, format, type)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = GrB (m, n, format)</comment>
            <comment type="line">// C = GrB (m, n, type)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// create an m-by-n matrix with no entries</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// create an m-by-n matrix of the desired type, no entries,</comment>
                <comment type="line">// use the default format.</comment>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// create an m-by-n double matrix of the desired format</comment>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown type or format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = GrB (A, type, format)</comment>
            <comment type="line">// C = GrB (A, format, type)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C = GrB (A, type, format)</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C = GrB (A, format, type)</comment>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown type and/or format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>gb_mxarray_is_empty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// get a shallow copy, typecast it, and set the format</comment>
                <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_typecast</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown usage"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// if (nargin == 4)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = GrB (m, n, type, format)</comment>
        <comment type="line">// C = GrB (m, n, format, type)</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>

            <comment type="line">// create an m-by-n matrix with no entries, of the requested</comment>
            <comment type="line">// type and format</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"m"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ncols</name> <init>= <expr><call><name>gb_mxget_uint64_scalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// C = GrB (m, n, type, format)</comment>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// C = GrB (m, n, format, type)</comment>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>gb_mxstring_to_type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><name>ok</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown type and/or format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown usage"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C as a GraphBLAS matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
