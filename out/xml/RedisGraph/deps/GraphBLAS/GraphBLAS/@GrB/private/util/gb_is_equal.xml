<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_is_equal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_is_equal: check two matrices for exact equality</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gb_is_equal checks if two matrices are identically equal (same size,</comment>
<comment type="line">// type, pattern, size, and values).</comment>

<comment type="line">// If the two matrices are GrB_FP32, GrB_FP64, GxB_FC32, or GxB_FC64, and have</comment>
<comment type="line">// NaNs, then gb_is_equal returns false, since NaN == NaN is false.  To check</comment>
<comment type="line">// for NaN equality (like the built-in isequaln), use gb_is_all with a</comment>
<comment type="line">// user-defined operator f(x,y) that returns true if x and y are equal, or if</comment>
<comment type="line">// both are NaN, and false otherwise.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>gb_is_equal</name>            <comment type="line">// true if A == B, false if A ~= B</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// check the type of A and B</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>btype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>!=</operator> <name>btype</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// types differ</comment>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// select the comparator operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>
    <if_stmt><if>if      <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_BOOL</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT8</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT16</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT32</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT64</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT8</name></expr>  ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT16</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT32</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT64</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP64</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC64</name></expr>   ;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// check the size, pattern, and values of A and B</comment>
    <return>return <expr><operator>(</operator><call><name>gb_is_all</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
