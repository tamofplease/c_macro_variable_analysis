<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_by_col.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_by_col: ensure a matrix is stored by column</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The return value A is set to either the input matrix A_input, or the A_copy</comment>
<comment type="line">// matrix.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Matrix</name></type> <name>gb_by_col</name>            <comment type="line">// return the matrix by column</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_copy_handle</name></decl></parameter>,  <comment type="line">// copy made of A, stored by column, or NULL</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A_input</name></decl></parameter>          <comment type="line">// input matrix, by row or column</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// get the format of A_input</comment>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A_input</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>GxB_BY_ROW</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// make a deep copy of A_input and change it to be stored by column</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy</name></expr></argument>, <argument><expr><name>A_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A_copy</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// A is just A_input, with no change</comment>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A_input</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return results</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_copy_handle</name><operator>)</operator> <operator>=</operator> <name>A_copy</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>A</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
