<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_export_to_mxstruct.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_export_to_mxstruct: export a GrB_Matrix to a built-in struct</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The input GrB_Matrix A is exported to a GraphBLAS matrix struct G, and freed.</comment>

<comment type="line">// The input GrB_Matrix A must be deep.  The output is a built-in struct</comment>
<comment type="line">// holding the content of the GrB_Matrix.</comment>

<comment type="line">// The GraphBLASv4 and v5 structs are identical, except that s has size 9</comment>
<comment type="line">// in v4 and size 10 in v5.  The added s [9] entry is true if the matrix is</comment>
<comment type="line">// uniform valued.  If the matrix is uniform-valued, the x array is only</comment>
<comment type="line">// large enough to hold a single entry.</comment>

<comment type="line">// GraphBLASv5 and GraphBLASv5_1 are identical, except that s [9] is present</comment>
<comment type="line">// but always false for GraphBLASv5.</comment>

<comment type="line">// GraphBLASv7_3 is identical to GraphBLASv5_1, except that it adds the Y</comment>
<comment type="line">// hyper_hash with 3 components: Yp, Yi, and Yx.</comment>

<comment type="line">// mxGetData and mxSetData are used instead of the MATLAB-recommended</comment>
<comment type="line">// mxGetDoubles, etc, because mxGetData and mxSetData work best for Octave, and</comment>
<comment type="line">// they work fine for MATLAB since GraphBLAS requires R2018a with the</comment>
<comment type="line">// interleaved complex data type.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// for hypersparse, sparse, or full matrices</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>MatrixFields</name> <index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=
<expr><block>{
    <comment type="line">// these fields are identical to GraphBLASv5_1, except for the name</comment>
    <comment type="line">// of the first field</comment>
    <expr><literal type="string">"GraphBLASv7_3"</literal></expr>,    <comment type="line">// 0: "logical", "int8", ... "double",</comment>
                        <comment type="line">//    "single complex", or "double complex"</comment>
    <expr><literal type="string">"s"</literal></expr>,                <comment type="line">// 1: all scalar info goes here</comment>
    <expr><literal type="string">"x"</literal></expr>,                <comment type="line">// 2: array of uint8, size (sizeof(type)*nzmax), or</comment>
                        <comment type="line">//    just sizeof(type) if the matrix is uniform-valued</comment>
    <expr><literal type="string">"p"</literal></expr>,                <comment type="line">// 3: array of int64_t, size plen+1</comment>
    <expr><literal type="string">"i"</literal></expr>,                <comment type="line">// 4: array of int64_t, size nzmax</comment>
    <expr><literal type="string">"h"</literal></expr>,                <comment type="line">// 5: array of int64_t, size plen if hypersparse</comment>
    <comment type="line">// added for v7.2: for hypersparse matrices only:</comment>
    <expr><literal type="string">"Yp"</literal></expr>,               <comment type="line">// 6: Y-&gt;p, a uint64_t array of size Y-&gt;vdim+1</comment>
    <expr><literal type="string">"Yi"</literal></expr>,               <comment type="line">// 7: Y-&gt;i, a uint64_t array of size nvec (s[3])</comment>
    <expr><literal type="string">"Yx"</literal></expr>                <comment type="line">// 8: Y-&gt;x, an int64_t array of size nvec</comment>
}</block></expr></init></decl> ;</decl_stmt>

<comment type="line">// for bitmap matrices only</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>Bitmap_MatrixFields</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"GraphBLASv7_3"</literal></expr>,    <comment type="line">// 0: "logical", "int8", ... "double",</comment>
                        <comment type="line">//    "single complex", or "double complex"</comment>
    <expr><literal type="string">"s"</literal></expr>,                <comment type="line">// 1: all scalar info goes here</comment>
    <expr><literal type="string">"x"</literal></expr>,                <comment type="line">// 2: array of uint8, size (sizeof(type)*nzmax), or</comment>
                        <comment type="line">//    just sizeof(type) if the matrix is uniform-valued</comment>
    <expr><literal type="string">"b"</literal></expr>                 <comment type="line">// 3: array of int8_t, size nzmax, for bitmap only</comment>
}</block></expr></init></decl> ;</decl_stmt>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>gb_export_to_mxstruct</name>  <comment type="line">// return exported built-in struct G</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_handle</name></decl></parameter>        <comment type="line">// matrix to export; freed on output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>A_handle</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"matrix missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><operator>*</operator><name>A_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is shallow so make a deep copy</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>*</operator><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_handle</name><operator>)</operator> <operator>=</operator> <name>T</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><operator>(</operator><operator>*</operator><name>A_handle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Y</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make sure the matrix is finished, including the creation of A-&gt;Y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the sparsity_status and CSR/CSC format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity_status</name></decl>, <decl><type ref="prev"/><name>sparsity_control</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>sparsity_status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity_control</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the opaque content not provided by GxB*export</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nzmax</name> <init>= <expr><call><name>GB_nnz_max</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>plen</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvec_nonempty</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the content of the GrB_Matrix and free it</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>type_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>Ab</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Ap</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ah</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ai</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ah_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ab_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ai_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>Ax_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nvals</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nvec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>by_col</name> <init>= <expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>GxB_BY_COL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ytype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Yp</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Yp_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Yi</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Yi_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>Yx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Yx_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>yvdim</name></decl>, <decl><type ref="prev"/><name>ynrows</name></decl> ;</decl_stmt>

    <switch>switch <condition>(<expr><name>sparsity_status</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_FULL</name></expr> :</case>
            <if_stmt><if>if <condition>(<expr><name>by_col</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_FullC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_FullR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case>
            <if_stmt><if>if <condition>(<expr><name>by_col</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case>

            <comment type="line">// export and free the A-&gt;Y hyper_hash.  It is always sparse,</comment>
            <comment type="line">// GrB_UINT64, held by column, and non-iso</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_unpack_HyperHash</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ytype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ynrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>yvdim</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Yp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Yi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Yx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Yp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Yi_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Yx_size</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// export and free the rest of the hypersparse matrix</comment>
            <if_stmt><if>if <condition>(<expr><name>by_col</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case>
            <if_stmt><if>if <condition>(<expr><name>by_col</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_BitmapC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ab_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_BitmapR</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                    <argument><expr><operator>&amp;</operator><name>Ab</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ab_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <default>default:</default> <empty_stmt>;</empty_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type_size</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the output struct</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>G</name></decl> ;</decl_stmt>
    <switch>switch <condition>(<expr><name>sparsity_status</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_FULL</name></expr> :</case>
            <comment type="line">// A is full, with 3 fields: GraphBLAS*, s, x</comment>
            <expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>mxCreateStructMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>MatrixFields</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_SPARSE</name></expr> :</case>
            <comment type="line">// A is sparse, with 5 fields: GraphBLAS*, s, x, p, i</comment>
            <expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>mxCreateStructMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>MatrixFields</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case>
            <comment type="line">// A is hypersparse, with 9 fields: GraphBLAS*, s, x, p, i, h,</comment>
            <comment type="line">// Yp, Yi, Yx</comment>
            <expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>mxCreateStructMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>MatrixFields</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <case>case <expr><name>GxB_BITMAP</name></expr> :</case>
            <comment type="line">// A is bitmap, with 4 fields: GraphBLAS*, s, x, b</comment>
            <expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>mxCreateStructMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Bitmap_MatrixFields</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <default>default :</default> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid GraphBLAS struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export content into the output struct</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// export the GraphBLAS type as a string</comment>
    <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>gb_type_to_mxstring</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// export the scalar content</comment>
    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>plen</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>by_col</name><operator>)</operator></expr> ?</condition><then> <expr><name>nrows</name></expr> </then><else>: <expr><name>ncols</name></expr></else></ternary></expr> ;</expr_stmt>  <comment type="line">// was A-&gt;vlen ;</comment>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>by_col</name><operator>)</operator></expr> ?</condition><then> <expr><name>ncols</name></expr> </then><else>: <expr><name>nrows</name></expr></else></ternary></expr> ;</expr_stmt>  <comment type="line">// was A-&gt;vdim ;</comment>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sparsity_status</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name><operator>)</operator></expr> ?</condition><then> <expr><name>nvec</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>nvec_nonempty</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>sparsity_control</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>by_col</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>nzmax</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>nvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>s</name> <index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name>iso</name></expr> ;</expr_stmt>             <comment type="line">// new in GraphBLASv5</comment>
    <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// These components do not need to be exported: Pending, nzombies,</comment>
    <comment type="line">// queue_next, queue_head, enqueued, *_shallow, jumbled, logger,</comment>
    <comment type="line">// hyper_switch, bitmap_switch.</comment>

    <if_stmt><if>if <condition>(<expr><name>sparsity_status</name> <operator>==</operator> <name>GxB_SPARSE</name> <operator>||</operator> <name>sparsity_status</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// export the pointers</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Ap_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Ap_mx</name></expr></argument>, <argument><expr><name>Ap_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Ap_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Ap_mx</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>Ap_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// export the indices</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Ai_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ai_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Ai_mx</name></expr></argument>, <argument><expr><name>Ai_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Ai_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Ai_mx</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Ai_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// export the values as uint8</comment>
    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Ax_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxUINT8_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Ax_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Ax_mx</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetData</name> <argument_list>(<argument><expr><name>Ax_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Ax_mx</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Ax_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sparsity_status</name> <operator>==</operator> <name>GxB_HYPERSPARSE</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// export the hyperlist</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Ah_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ah_size</name> <operator>&gt;</operator> <name>nvec</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>Ah</name> <operator>+</operator> <name>nvec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Ah_size</name> <operator>-</operator> <name>nvec</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ah_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Ah_mx</name></expr></argument>, <argument><expr><name>Ah_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Ah_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Ah_mx</name></expr></argument>, <argument><expr><name>Ah</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>Ah_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// export Yp, of size yvdim+1</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Yp_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxUINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Yp_mx</name></expr></argument>, <argument><expr><name>yvdim</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Yp_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Yp_mx</name></expr></argument>, <argument><expr><name>Yp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>Yp_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// export Yi, of size nvec</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Yi_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxUINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Yi_mx</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Yi_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Yi_mx</name></expr></argument>, <argument><expr><name>Yi</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>Yi_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// export Yx, of size nvec</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Yx_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxUINT64_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Yx_mx</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Yx_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Yx_mx</name></expr></argument>, <argument><expr><name>Yx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>Yx_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sparsity_status</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// export the bitmap</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>Ab_mx</name> <init>= <expr><call><name>mxCreateNumericMatrix</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mxINT8_CLASS</name></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>Ab_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>Ab_mx</name></expr></argument>, <argument><expr><name>Ab_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>Ab_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>Ab_mx</name></expr></argument>, <argument><expr><name>Ab</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>mxSetFieldByNumber</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>Ab_mx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the built-in struct</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>G</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
