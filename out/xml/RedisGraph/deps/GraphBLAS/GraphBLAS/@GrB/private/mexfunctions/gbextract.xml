<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbextract.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbextract: extract entries into a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gbextract is an interface to GrB_Matrix_extract and</comment>
<comment type="line">// GrB_Matrix_extract_[TYPE], computing the GraphBLAS expression:</comment>

<comment type="line">//      C&lt;#M,replace&gt; = accum (C, A (I,J)) or</comment>
<comment type="line">//      C&lt;#M,replace&gt; = accum (C, AT (I,J))</comment>

<comment type="line">// Usage:</comment>

<comment type="line">//      C = gbextract (Cin, M, accum, A, I, J, desc)</comment>

<comment type="line">// A is required.  See GrB.m for more details.</comment>
<comment type="line">// If accum or M is used, then Cin must appear.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = GrB.extract (Cin, M, accum, A, I, J, desc)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>&lt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the arguments</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>Matrix</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>String</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>Cell</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>base_enum_t</name></type> <name>base</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>kind_enum_t</name></type> <name>kind</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nmatrices</name></decl>, <decl><type ref="prev"/><name>nstrings</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>, <decl><type ref="prev"/><name>sparsity</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_get_mxargs</name> <argument_list>(<argument><expr><name>nargin</name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>, <argument><expr><name>Matrix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmatrices</name></expr></argument>, <argument><expr><name>String</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstrings</name></expr></argument>,
        <argument><expr><name>Cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncells</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>nmatrices</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nmatrices</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal> <operator>||</operator> <name>nstrings</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>ctype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// if (nmatrices == 3)</comment>
    <block>{<block_content> 
        <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nstrings</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if accum appears, then Cin must also appear</comment>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>accum</name>  <operator>=</operator> <call><name>gb_mxstring_to_binop</name>  <argument_list>(<argument><expr><name><name>String</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the size of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>in0</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_transpose</name> <init>= <expr><operator>(</operator><name>in0</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_transpose</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// T = AT (I,J) is to be extracted where AT = A'</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// T = A (I,J) is to be extracted</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get I and J</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>GrB_ALL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>GrB_ALL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>ni</name> <init>= <expr><name>anrows</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><name>ancols</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>I_allocated</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>J_allocated</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ncells</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// only J is present</comment>
        <expr_stmt><expr><name>J</name> <operator>=</operator> <call><name>gb_mxcell_to_index</name> <argument_list>(<argument><expr><name><name>Cell</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_allocated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ncells</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// only I is present</comment>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <call><name>gb_mxcell_to_index</name> <argument_list>(<argument><expr><name><name>Cell</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_allocated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ncells</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// both I and J are present</comment>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <call><name>gb_mxcell_to_index</name> <argument_list>(<argument><expr><name><name>Cell</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_allocated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>J</name> <operator>=</operator> <call><name>gb_mxcell_to_index</name> <argument_list>(<argument><expr><name><name>Cell</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_allocated</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C if not present on input</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Cin is not present: determine its size, same type as A.</comment>
        <comment type="line">// T = A(I,J) or AT(I,J) will be extracted.</comment>
        <comment type="line">// accum must be null</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>I_kind</name></decl>, <decl><type ref="prev"/><name>J_kind</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name><name>I_colon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>J_colon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cnrows</name></decl>, <decl><type ref="prev"/><name>cncols</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>anrows</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cnrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>I_kind</name></expr></argument>, <argument><expr><name>I_colon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GB_ijlength</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>cncols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>J_kind</name></expr></argument>, <argument><expr><name>J_colon</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>

        <comment type="line">// create the matrix C and set its format and sparsity</comment>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>gb_get_format</name> <argument_list>(<argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <call><name>gb_get_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute C&lt;M&gt; += A(I,J) or AT(I,J)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_extract</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free shallow copies</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>I_allocated</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>I</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>J_allocated</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>J</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
