<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_get_mxargs.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_get_mxargs: get input arguments to a GraphBLAS mexFunction </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gb_get_mxargs collects all the input arguments for the 12 foundational</comment>
<comment type="line">// GraphBLAS operations.  The user-level view is described below.  For</comment>
<comment type="line">// the private mexFunctions, the descriptor optionally appears as the last</comment>
<comment type="line">// argument.  The matrix arguments are either built-in sparse or full matrices,</comment>
<comment type="line">// GraphBLAS matrices.  To call the mexFunction, the opaque content of the</comment>
<comment type="line">// GraphBLAS matrices has been extracted, so they appear here as GraphBLAS</comment>
<comment type="line">// structs (a built-in struct G whose first field is always G.GraphBLAS).</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gb_get_mxargs</name>
<parameter_list>(
    <comment type="line">// input:</comment>
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,                 <comment type="line">// # input arguments for mexFunction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>,  <comment type="line">// input arguments for mexFunction</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage</name></decl></parameter>,          <comment type="line">// usage to print, if too many args appear</comment>
    <comment type="line">// output:</comment>
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>Matrix</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></decl></parameter>,        <comment type="line">// matrix arguments</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nmatrices</name></decl></parameter>,             <comment type="line">// # of matrix arguments</comment>
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>String</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,        <comment type="line">// string arguments</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nstrings</name></decl></parameter>,              <comment type="line">// # of string arguments</comment>
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>Cell</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,          <comment type="line">// cell array arguments</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ncells</name></decl></parameter>,                <comment type="line">// # of cell array arguments</comment>
    <parameter><decl><type><name>GrB_Descriptor</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,       <comment type="line">// last argument is always the descriptor</comment>
    <parameter><decl><type><name>base_enum_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>,          <comment type="line">// desc.base</comment>
    <parameter><decl><type><name>kind_enum_t</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>,          <comment type="line">// desc.kind</comment>
    <parameter><decl><type><name>GxB_Format_Value</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,      <comment type="line">// desc.format : by row or by col</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sparsity</name></decl></parameter>               <comment type="line">// desc.format : hypersparse/sparse/bitmap/full</comment>
                                <comment type="line">// or 0 if not in the descriptor</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>desc</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_GRB</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator> <operator>=</operator> <name>GxB_NO_FORMAT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sparsity</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_DEFAULT</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>desc</name><operator>)</operator> <operator>=</operator> <call><name>gb_mxarray_to_descriptor</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>nargin</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>,
            <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>desc</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// descriptor is present, remove it from further consideration</comment>
        <expr_stmt><expr><name>nargin</name><operator>--</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the remaining arguments</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nmatrices</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>nstrings</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ncells</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nargin</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mxIsCell</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// I or J index arguments</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ncells</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"only 2D indexing is supported"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>Cell</name> <index>[<expr><operator>(</operator><operator>*</operator><name>ncells</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mxArray</name> <operator>*</operator><operator>)</operator> <name><name>pargin</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// accum operator, unary op, binary op, monoid, or semiring</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>nstrings</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>String</name> <index>[<expr><operator>(</operator><operator>*</operator><name>nstrings</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mxArray</name> <operator>*</operator><operator>)</operator> <name><name>pargin</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// a matrix argument is C, M, A, or B</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>nmatrices</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// at most 6 matrix inputs are allowed</comment>
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>Matrix</name> <index>[<expr><operator>(</operator><operator>*</operator><name>nmatrices</name><operator>)</operator><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mxArray</name> <operator>*</operator><operator>)</operator> <name><name>pargin</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
