<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gblogassign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gblogassign: logical assignment: C(M) = A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gblogassign computes the built-in logical indexing expression C(M) = A.  The</comment>
<comment type="line">// matrices C and M must be the same size.  M is normally logical but it can be</comment>
<comment type="line">// of any type in this mexFunction.  M should not have any explicit zeros.  A</comment>
<comment type="line">// is a sparse vector of size nnz(M)-by-1.  Scalar expansion is not handled.</comment>
<comment type="line">// Use GrB.subassign (C, M, scalar) for that case.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">//      C = gblogassign (C, M, A)</comment>

<comment type="line">//  This function is the C equivalent of the following m-function:</comment>

<comment type="block">/*

    function C = gblogassign (C, M_input, A)
    % Computing the built-in logical indexing expression C(M) = A in GraphBLAS.
    % A is a sparse vector of size nnz(M)-by-1 (scalar expansion is not
    % handled). M is normally a sparse logical matrix, either GraphBLAS or
    % built-in, but it can be of any type.  C and M have the same size.

    % make sure all matrices are stored by column
    save = GrB.format ;
    GrB.format ('by col') ;
    M = GrB (m, n, 'logical') ;
    M = GrB.select (M, '2nd', 'nonzero', M_input) ;
    if (isequal (GrB.format (A), 'by row'))
        A = GrB (A) ;
    end

    [m n] = size (C) ;
    mnz = nnz (M) ;         % A must be mnz-by-1
    if (~isequal (size (A), [mnz 1]))
        error ('GrB:error', 'A must be nnz(M)-by-1')
    end

    [ai,  ~, ax] = GrB.extracttuples (A) ;
    [mi, mj,  ~] = GrB.extracttuples (M) ;

    % construct a subset of the entries of the mask M corresponding to the
    % entries in A
    si = mi (ai) ;
    sj = mj (ai) ;
    S = GrB.build (si, sj, ax, m, n) ;

    GrB.format (save) ;

    % C&lt;M&gt; = S
    C = GrB.subassign (C, M, S) ;

*/</comment>

<comment type="line">// This C mexFunction is faster than the above m-function, since it avoids the</comment>
<comment type="line">// use of GrB.extracttuples.  Instead, it accesses the internal structure of the</comment>
<comment type="line">// GrB_Matrix objects.  The m-file above is useful for understanding that this</comment>
<comment type="line">// C mexFunction does.</comment>

<comment type="line">// C is always returned as a GrB matrix.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = gblogassign (C, M, A)"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR</name></cpp:macro> <cpp:value>"A must be a vector of length nnz(M) for logical indexing, C(M)=A"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get a deep copy of C, of any sparsity structure</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><call><name>gb_get_deep</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// make M boolean, sparse/hyper, stored by column, and drop explicit zeros</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M_input</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>gb_new</name> <argument_list>(<argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>,
        <argument><expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_HYPERSPARSE</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>M_input</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>mnz</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mnz</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A_input</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>A_input</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl>, <decl><type ref="prev"/><name>anz</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anz</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A_sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A_copy</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A_copy2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// make sure A is not bitmap; it can be sparse, hypersparse, or full</comment>
    <if_stmt><if>if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy2</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy2</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>A_copy2</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
            <argument><expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A_copy2</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// make sure A is a vector of the right size</comment>
    <if_stmt><if>if <condition>(<expr><name>mnz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// M is empty, so A must have no entries.  The dimensions and format of</comment>
        <comment type="line">// A are not relevant, since the content of A will not be accessed.</comment>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>anz</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>anrows</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is 1-by-ancols; ensure it is has length nnz(M), and held by row,</comment>
        <comment type="line">// or transpose to ancols-by-1 and held by column.</comment>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>ancols</name> <operator>!=</operator> <name>mnz</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>GxB_BY_COL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is 1-by-ancols and held by column: transpose it</comment>
            <expr_stmt><expr><name>A_copy</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><name>mnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, 
                <argument><expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A_copy</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>ancols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A is anrows-by-1; ensure it is has length nnz(M), and held by col</comment>
        <comment type="line">// or transpose to 1-by-anrows and held by row.</comment>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>anrows</name> <operator>!=</operator> <name>mnz</name></expr></argument>, <argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>GxB_BY_ROW</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is anrows-by-1 and held by row: transpose it</comment>
            <expr_stmt><expr><name>A_copy</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mnz</name></expr></argument>, <argument><expr><name>GxB_BY_ROW</name></expr></argument>,
                <argument><expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A_copy</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <name>A_copy</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><name>ERR</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the values and pattern of A; handle iso case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Tim: use a shallow variant of GxB*export to access content of M and A</comment>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ai</name> <init>=            							
        <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></init></decl> ;</decl_stmt>   	             	 	                 	
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>          		 	 	 	 	 	
    <decl_stmt><decl><type><name>char</name></type> <name><name>nil</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=            		 	 	 	 	 	
     <expr><literal type="string">"iso logassign  "</literal></expr></init></decl> ;</decl_stmt>       		 	 	 	 	 	
    <if_stmt><if>if <condition>(<expr><name>Ax</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>Ax</name> <operator>=</operator> <operator>&amp;</operator><name>nil</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>							

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the pattern of M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Mi</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>M</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Mj</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>mnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_BOOL</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Mj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mnz</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct a subset of the pattern of M corresponding to the entries of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Si</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Sj</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>anz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_helper5</name> <argument_list>(<argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Mi</name></expr></argument>, <argument><expr><name>Mj</name></expr></argument>, <argument><expr><name><name>M</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>S</name> <init>= <expr><call><name>gb_new</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// build S as an iso matrix</comment>
        <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>s</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_BOOL</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT8</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_UINT8</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_UINT16</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_UINT32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_UINT64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_setElement_FC32</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_setElement_FC64</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator> <operator>(</operator><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <name>Ax</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_build_Scalar</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_BOOL</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_LOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT8</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT16</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT32</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_INT64</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT8</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT16</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT16</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT32</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_UINT64</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP32</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GrB_PLUS_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_build_FC32</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GxB_PLUS_FC32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_build_FC64</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Si</name></expr></argument>, <argument><expr><name>Sj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>, <argument><expr><name>anz</name></expr></argument>, <argument><expr><name>GxB_PLUS_FC64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;M&gt; = S</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>S</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free shallow copies and temporary matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// OK: Si, Sj, and Mj were allocated above from mxMalloc, never in a</comment>
    <comment type="line">// GrB_Matrix</comment>
    <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>Si</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>Sj</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>Mj</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C as a GraphBLAS matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
