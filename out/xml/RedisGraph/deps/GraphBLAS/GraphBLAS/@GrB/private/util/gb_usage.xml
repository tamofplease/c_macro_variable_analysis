<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_usage.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_usage: check usage and make sure GrB.init has been called</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gb_usage</name>       <comment type="line">// check usage and make sure GrB.init has been called</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>ok</name></decl></parameter>,                <comment type="line">// if false, then usage is not correct</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>usage</name></decl></parameter>       <comment type="line">// error message if usage is not correct</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// clear the debug memory table (for debugging only)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GB_Global_memtable_clear</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// make sure GrB.init has been called</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_Global_GrB_init_called_get</name> <argument_list>( )</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// initialize GraphBLAS</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>, <argument><expr><name>mxMalloc</name></expr></argument>, <argument><expr><name>mxCalloc</name></expr></argument>, <argument><expr><name>mxRealloc</name></expr></argument>, <argument><expr><name>mxFree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// mxMalloc, mxCalloc, mxRealloc, and mxFree are not thread safe</comment>
        <expr_stmt><expr><call><name>GB_Global_malloc_is_thread_safe_set</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// must use mexPrintf to print to Command Window</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_PRINTF</name></expr></argument>, <argument><expr><name>mexPrintf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_FLUSH</name></expr></argument>, <argument><expr><name>gb_flush</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// disable the memory pool</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name><name>free_pool_limit</name> <index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>=
            <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,
             <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_MEMORY_POOL</name></expr></argument>, <argument><expr><name>free_pool_limit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// built-in matrices are stored by column</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// print 1-based indices</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// for debug only</comment>
        <expr_stmt><expr><call><name>GB_Global_abort_function_set</name> <argument_list>(<argument><expr><name>gb_abort</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// for printing memory sizes of matrices</comment>
        <expr_stmt><expr><call><name>GB_Global_print_mem_shallow_set</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check usage</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><name>usage</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get test coverage</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GBCOV</name></cpp:ifdef>
    <expr_stmt><expr><call><name>gbcov_get</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

</unit>
