<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbdescriptorinfo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbdescriptorinfo: print a GraphBLAS descriptor (for illustration only)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// gbdescriptorinfo</comment>
<comment type="line">// gbdescriptorinfo (desc)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: GrB.descriptorinfo or GrB.descriptorinfo (desc)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the GraphBLAS descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>base_enum_t</name></type> <name>base</name> <init>= <expr><name>BASE_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>kind_enum_t</name></type> <name>kind</name> <init>= <expr><name>KIND_GRB</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name> <init>= <expr><name>GxB_NO_FORMAT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>gb_mxarray_to_descriptor</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>nargin</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nDefault GraphBLAS descriptor:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print the GraphBLAS descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print the extra terms in the interface descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    d.kind     = "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>KIND_SPARSE</name></expr>  :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sparse\n"</literal></expr></argument>)</argument_list></call></expr>  ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>KIND_FULL</name></expr>    :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"full\n"</literal></expr></argument>)</argument_list></call></expr>    ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>KIND_BUILTIN</name></expr> :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"builtin\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>KIND_GRB</name></expr>     :</case>
        <default>default           :</default> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GrB\n"</literal></expr></argument>)</argument_list></call></expr>     ;</expr_stmt> <break>break ;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    d.base     = "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <switch>switch <condition>(<expr><name>base</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>BASE_0_INT64</name></expr>  :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"zero-based\n"</literal></expr></argument>)</argument_list></call></expr>    ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>BASE_1_INT64</name></expr>  :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"one-based int\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>BASE_1_DOUBLE</name></expr> :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"one-based\n"</literal></expr></argument>)</argument_list></call></expr>     ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>BASE_DEFAULT</name></expr>  :</case>
        <default>default            :</default> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"default\n"</literal></expr></argument>)</argument_list></call></expr>       ;</expr_stmt> <break>break ;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    d.format   = "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case>                              <comment type="line">// 1</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_SPARSE</name></expr> :</case>                                   <comment type="line">// 2</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sparse "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name></expr> :</case>                 <comment type="line">// 3</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/sparse "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_BITMAP</name></expr> :</case>                                   <comment type="line">// 4</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bitmap "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case>                 <comment type="line">// 5</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/bitmap "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case>                      <comment type="line">// 6</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sparse/bitmap "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name></expr> :</case>    <comment type="line">// 7</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/sparse/bitmap "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_FULL</name></expr> :</case>                                     <comment type="line">// 8</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>                   <comment type="line">// 9</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>                        <comment type="line">// 10</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sparse/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <default>default :</default>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>      <comment type="line">// 11</comment>
            <comment type="line">// printf ("hypersparse/sparse/full ") ;</comment>
            <break>break ;</break>
        <case>case <expr><name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>                        <comment type="line">// 12</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bitmap/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>      <comment type="line">// 13</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/bitmap/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case>           <comment type="line">// 14</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"sparse/bitmap/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
        <case>case <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_BITMAP</name> <operator>+</operator> <name>GxB_FULL</name></expr> :</case> <comment type="line">// 15</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"hypersparse/sparse/bitmap/full "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>
    </block_content>}</block></switch>

    <switch>switch <condition>(<expr><name>fmt</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GxB_BY_ROW</name></expr>    :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"by row\n"</literal></expr></argument>)</argument_list></call></expr>     ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_BY_COL</name></expr>    :</case> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"by col\n"</literal></expr></argument>)</argument_list></call></expr>     ;</expr_stmt> <break>break ;</break>
        <case>case <expr><name>GxB_NO_FORMAT</name></expr> :</case>
        <default>default            :</default> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"by default\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
    </block_content>}</block></switch>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
