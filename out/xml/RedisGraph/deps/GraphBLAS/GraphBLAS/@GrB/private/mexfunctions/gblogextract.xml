<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gblogextract.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gblogextract: logical extraction: C = A(M)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gblogextract computes the built-in logical indexing expression C = A(M).  The</comment>
<comment type="line">// matrices A and M must be the same size.  M is normally logical but it can be</comment>
<comment type="line">// of any type in this mexFunction.  M should not have any explicit zeros.  C</comment>
<comment type="line">// has the same type as A, and is a sparse vector of size nnz(M)-by-1.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// C = gblogextract (A, M)</comment>

<comment type="line">//  This function is the C equivalent of the following m-function:</comment>

<comment type="block">/*

    function C = gblogextract (A, M_input)
    % Computing the built-in logical indexing expression C = A(M) in GraphBLAS.
    % C is a sparse vector of size nnz(M)-by-1.  M is normally a sparse logical
    % matrix, either GraphBLAS or built-in, but it can be of any type.
    % A and M have the same size.

    [m n] = size (A) ;

    % make sure all input, internal, and output matrices are all stored by
    % column
    save = GrB.format ;
    GrB.format ('by col') ;
    M = GrB (m, n, 'logical') ;
    M = GrB.select (M, '2nd', 'nonzero', M_input) ;
    if (isequal (GrB.format (A), 'by row'))
        A = GrB (A) ;
    end
    mnz = nnz (M) ;         % C will be mnz-by-1

    % G&lt;M&gt; = A
    % G has the same type and size as A, but G is always stored by column
    G = GrB (m, n, GrB.type (A)) ;
    G = GrB.subassign (G, M, A) ;

    % extract gx = the entries of G
    [~, ~, gx] = GrB.extracttuples (G) ;

    % convert G to logical
    G = spones (G, 'logical') ;

    % K = symbolic structure of M, where the kth entry in K(:) is equal to k.
    desc.base = 'zero-based' ;
    [mi, mj] = GrB.extracttuples (M, desc) ;
    K = GrB.build (mi, mj, int64 (0:mnz-1), m, n, desc) ;

    % T&lt;G&gt; = K
    T = GrB (m, n, 'uint64') ;
    T = GrB.subassign (T, G, K) ;

    % extract the values from T
    [~, ~, tx] = GrB.extracttuples (T) ;

    % construct the result C (always a column vector)
    C = GrB.build (tx, zeros(length(gx),1,'uint64'), gx, mnz, 1) ;

    % restore the format to its original state
    GrB.format (save) ;

*/</comment>

<comment type="line">// This C mexFunction is faster than the above m-function, since it avoids the</comment>
<comment type="line">// use of GrB.extracttuples and GrB.build.  Instead, it accesses the internal</comment>
<comment type="line">// structure of the GrB_Matrix objects, and creates shallow copies.  The</comment>
<comment type="line">// m-file above is useful for understanding that this C mexFunction does.</comment>

<comment type="line">// C is always returned as a GrB matrix.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_transpose.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = gblogextract (A, M)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><literal type="string">"gblogextract"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// make sure A is stored by column</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A_input</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>A_copy</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_by_col</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy</name></expr></argument>, <argument><expr><name>A_input</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get M</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// M can be hypersparse, sparse, or full, but not bitmap</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>not_bitmap</name> <init>= <expr><name>GxB_HYPERSPARSE</name> <operator>+</operator> <name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_FULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// make M boolean, stored by column, and drop explicit zeros</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M_input</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name> <init>= <expr><call><name>gb_new</name> <argument_list>(<argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>not_bitmap</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>M_input</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>mnz</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>mnz</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>, <argument><expr><literal type="string">"internal error 5"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><name><name>M</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>, <argument><expr><literal type="string">"internal error 42"</literal></expr></argument>)</argument_list></call></expr>  ;</expr_stmt>            	

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// G&lt;M&gt; = A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// G has the same type and size as A, but it is always stored by column.</comment>
    <comment type="line">// Also ensure the G is not bitmap.</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>G</name> <init>= <expr><call><name>gb_new</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>not_bitmap</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A_input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract Gx, the values of G</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>gnvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>gnvals</name></expr></argument>, <argument><expr><name>G</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>, <argument><expr><literal type="string">"internal error 0"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Remove G-&gt;x from G</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Gx</name> <init>= <expr><name><name>G</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Gx_size</name> <init>= <expr><name><name>G</name><operator>-&gt;</operator><name>x_size</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"remove G-&gt;x from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>G</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>G</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>G_iso</name> <init>= <expr><name><name>G</name><operator>-&gt;</operator><name>iso</name></name></expr></init></decl>  ;</decl_stmt>            	

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// change G to boolean (all true and iso)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Tim: use G as structural instead</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>Gbool</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>        							
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>       	             	 	                 	
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <operator>&amp;</operator><name>Gbool</name></expr> ;</expr_stmt>            		 	 	 	 	 	
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>            		 	 	 	 	 	
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>      		 	 	 	 	 	
    <expr_stmt><expr><name><name>G</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr> ;</expr_stmt> 						

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// K = structure of M, where the kth entry in K is equal to k</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// K is a shallow copy of M, except for its numerical values</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>K_header</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>K</name> <init>= <expr><call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>K_header</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_shallow_copy</name> <argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>K</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr></argument>, <argument><expr><literal type="string">"internal error 10"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Kx = uint64 (0:mnz-1)</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Kx_size</name> <init>= <expr><operator>(</operator><call><name>MAX</name> <argument_list>(<argument><expr><name>mnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Kx</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>Kx_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_helper7</name> <argument_list>(<argument><expr><name>Kx</name></expr></argument>, <argument><expr><name>mnz</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// add a new K-&gt;x to K</comment>
    <expr_stmt><expr><name><name>K</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Kx</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>K</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>K</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>GrB_UINT64</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>K</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Kx_size</name></expr> ;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"add K-&gt;x to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>K</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>K</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>K</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>K</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>false</name></expr>  ;</expr_stmt>            	

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// T&lt;G&gt; = K</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name> <init>= <expr><call><name>gb_new</name> <argument_list>(<argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>not_bitmap</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_subassign</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>K</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract Tx, the values of T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>tnvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>tnvals</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Tx</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>Tx_size</name> <init>= <expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"remove T-&gt;x from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt> <expr_stmt><expr><name><name>T</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <comment type="line">// gnvals and tnvals are identical, by construction</comment>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>gnvals</name> <operator>!=</operator> <name>tnvals</name></expr></argument>, <argument><expr><literal type="string">"internal error 1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the result C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// Vectors are always stored by column, and are never hypersparse.  This</comment>
    <comment type="line">// step takes constant time, using a transplant of the row indices Tx from</comment>
    <comment type="line">// T and the values Gx from G.  V is sparse (not full, not hypersparse).</comment>

    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>V</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>mnz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set</name> <argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"remove V-&gt;i from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"remove V-&gt;x from memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>V</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_Global_memtable_remove</name> <argument_list>(<argument><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name><name>V</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// transplant values of T as the row indices of V</comment>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>Tx</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>Tx_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"add V-&gt;i to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>V</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// this was the old T-&gt;x</comment>

    <comment type="line">// transplant the values of G as the values of V</comment>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name>Gx</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x_size</name></name> <operator>=</operator> <name>Gx_size</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>x_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>iso</name></name> <operator>=</operator> <name>G_iso</name></expr>  ;</expr_stmt>            	
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GB_MEMDUMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"add V-&gt;x to memtable: %p\n"</literal></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>GB_Global_memtable_add</name> <argument_list>(<argument><expr><name><name>V</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>V</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// this was the old G-&gt;x</comment>

    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>Vp</name> <init>= <expr><name><name>V</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>Vp</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Vp</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nvals</name></name> <operator>=</operator> <name>tnvals</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>GB_MAGIC</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>V</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>tnvals</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr> ;</expr_stmt>

    <comment type="line">// typecast V to a matrix C, for export</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>V</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>V</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free shallow copies and temporary matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>G</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C as a GraphBLAS matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
