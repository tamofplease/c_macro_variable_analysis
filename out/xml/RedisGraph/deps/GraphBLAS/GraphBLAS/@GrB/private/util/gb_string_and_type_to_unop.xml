<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_and_type_to_unop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_and_type_to_unop: get a GraphBLAS operator from a string and type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// op_name: a built-in string defining the operator name.</comment>

<comment type="line">// For all 13 types:</comment>
<comment type="line">//      identity, ainv, minv, one, abs</comment>
<comment type="line">//      (for complex, abs returns a real result)</comment>

<comment type="line">// For all 11 real types: (result is same type as input)</comment>
<comment type="line">//      lnot</comment>

<comment type="line">// For 4 floating-point types (real &amp; complex)x(single &amp; double)</comment>
<comment type="line">//      (result is same type as input):</comment>
<comment type="line">//      sqrt, log, exp,</comment>
<comment type="line">//      sin, cos, tan, acos, asin, atan,</comment>
<comment type="line">//      sinh, cosh, tanh, acosh, asinh, atanh,</comment>
<comment type="line">//      signum, ceil, floor, round, trunc, exp2, expm1, log10, log1p, log2</comment>

<comment type="line">// for complex only:</comment>
<comment type="line">//      creal, cimag, carg  (result is real)</comment>
<comment type="line">//      conj (result is complex)</comment>

<comment type="line">// For all 4 floating-point types (result is logical)</comment>
<comment type="line">//      isinf, isnan, isfinite</comment>

<comment type="line">// For single and double:</comment>
<comment type="line">//      lgamma, tgamma, erf, erfc, frexpx, frexpe (result same type as input)</comment>

<comment type="line">// for integer types only:</comment>
<comment type="line">//      bitcmp</comment>

<comment type="line">// for int32 and int64:</comment>
<comment type="line">//      positioni0, positioni1</comment>
<comment type="line">//      positionj0, positionj1</comment>

<comment type="line">// The following equivalent synonyms are available:</comment>
<comment type="line">//  identity    +       uplus</comment>
<comment type="line">//  ainv        -       uminus  negate</comment>
<comment type="line">//  lnot        ~       not</comment>
<comment type="line">//  one         1</comment>
<comment type="line">//  creal       real</comment>
<comment type="line">//  cimag       imag</comment>
<comment type="line">//  carg        angle</comment>
<comment type="line">//  lgamma      gammaln</comment>
<comment type="line">//  tgamma      gamma</comment>
<comment type="line">//  exp2        pow2</comment>
<comment type="line">//  i           i1  positioni   positioni1 (since default is 1-based)</comment>
<comment type="line">//  i0          positioni0</comment>
<comment type="line">//  j           j1  positionj   positionj1 (since default is 1-based)</comment>
<comment type="line">//  j0          positionj0</comment>

<function><type><name>GrB_UnaryOp</name></type> <name>gb_string_and_type_to_unop</name>  <comment type="line">// return op from string and type</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_name</name></decl></parameter>,        <comment type="line">// name of the operator, as a string</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>,        <comment type="line">// type of the input to the operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>type_not_given</name></decl></parameter>   <comment type="line">// true if no type present in the string</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"uplus"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_IDENTITY_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_IDENTITY_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_IDENTITY_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ainv"</literal></expr></argument>  )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"negate"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"uminus"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_AINV_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_AINV_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_AINV_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"minv"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINV_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_MINV_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_MINV_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lnot"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"~"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"not"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>  <comment type="line">// == GrB_LNOT</comment>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LNOT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONE_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"abs"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ABS_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ABS_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ABS_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"sqrt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SQRT_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SQRT_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SQRT_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SQRT_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"exp"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"sin"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIN_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIN_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIN_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIN_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"cos"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COS_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COS_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COS_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COS_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"tan"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TAN_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TAN_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TAN_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TAN_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"asin"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASIN_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASIN_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASIN_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASIN_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"acos"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOS_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOS_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOS_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOS_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"atan"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"sinh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SINH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SINH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SINH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SINH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"cosh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COSH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COSH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COSH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COSH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"tanh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TANH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TANH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TANH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TANH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"asinh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASINH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASINH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASINH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ASINH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"acosh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOSH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOSH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOSH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ACOSH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"atanh"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATANH_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATANH_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATANH_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATANH_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"sign"</literal></expr></argument>)</argument_list></call> <operator>||</operator>  <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"signum"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIGNUM_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIGNUM_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIGNUM_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SIGNUM_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ceil"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CEIL_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CEIL_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CEIL_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CEIL_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"floor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FLOOR_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FLOOR_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FLOOR_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FLOOR_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"round"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ROUND_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ROUND_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ROUND_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ROUND_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"trunc"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"fix"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TRUNC_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TRUNC_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TRUNC_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TRUNC_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"exp2"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"pow2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP2_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP2_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP2_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXP2_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"expm1"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXPM1_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXPM1_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXPM1_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EXPM1_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"log10"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG10_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG10_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG10_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG10_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"log1p"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG1P_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG1P_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG1P_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG1P_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"log2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG2_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG2_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG2_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOG2_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lgamma"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"gammaln"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LGAMMA_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LGAMMA_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"tgamma"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TGAMMA_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TGAMMA_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"erf"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ERF_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ERF_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"erfc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ERFC_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ERFC_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"cbrt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CBRT_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CBRT_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"conj"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CONJ_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CONJ_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"creal"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CREAL_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CREAL_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"cimag"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"imag"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CIMAG_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CIMAG_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"carg"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"angle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CARG_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CARG_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isinf"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISINF_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISINF_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISINF_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISINF_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isnan"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNAN_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNAN_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNAN_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNAN_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isfinite"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISFINITE_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISFINITE_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISFINITE_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISFINITE_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"frexpx"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FREXPX_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FREXPX_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"frexpe"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FREXPE_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FREXPE_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitcmp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitnot"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BNOT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positioni0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"i0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONI_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONI_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positioni1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"i1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positioni"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONI1_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONI1_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positionj0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"j0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONJ_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONJ_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positionj1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"j1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"positionj"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"j"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONJ1_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POSITIONJ1_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unknown type or operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// the type can be NULL for positional operators, but no others</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERROR2</name> <argument_list>(<argument><expr><literal type="string">"unknown unary operator"</literal></expr></argument>, <argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
