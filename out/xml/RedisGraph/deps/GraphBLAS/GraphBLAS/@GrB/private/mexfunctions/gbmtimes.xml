<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbmtimes.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbmtimes: sparse matrix-matrix multiplication over the standard semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gbmtimes provides the mexFunction for computing the overloaded method C =</comment>
<comment type="line">// mtimes (A,B) using the standard PLUS_TIMES_* semiring, and (mostly) the</comment>
<comment type="line">// standard Octave/MATLAB rules for the sparsity of C.</comment>

<comment type="line">// The standard rules state that if A or B are full, then C is always full.</comment>
<comment type="line">// The rules here are slightly different:  C is full for (sparse or bitmap)</comment>
<comment type="line">// times full, or full times (sparse or bitmap), using this full.  C is not</comment>
<comment type="line">// full for hypersparse times full or full times hypersparse.  Instead, it is</comment>
<comment type="line">// left sparse (or whatever format GraphBLAS decides to use).</comment>

<comment type="line">// This method also allows for the inputs A and/or B to be transposed, but</comment>
<comment type="line">// this parameter is not passed by MATLAB to the mtimes method.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// C = gbmtimes (A, B)</comment>
<comment type="line">// C = gbmtimes (A, B, desc)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = gbmtimes (A, B, desc)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>&lt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the arguments</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>Matrix</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>String</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>Cell</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>base_enum_t</name></type> <name>base</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>kind_enum_t</name></type> <name>kind</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nmatrices</name></decl>, <decl><type ref="prev"/><name>nstrings</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>, <decl><type ref="prev"/><name>sparsity</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_get_mxargs</name> <argument_list>(<argument><expr><name>nargin</name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>, <argument><expr><name>Matrix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmatrices</name></expr></argument>, <argument><expr><name>String</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstrings</name></expr></argument>,
        <argument><expr><name>Cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncells</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>nmatrices</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>nstrings</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>ncells</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ensure the descriptor is present, and set GxB_SORT to true</comment>
    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_SORT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>btype</name></decl>, <decl><type ref="prev"/><name>ctype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>plus</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>times</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>plus_monoid</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>plus_times</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>semiring_string</name> <index>[<expr><literal type="number">8</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name>semiring_string</name></expr></argument>, <argument><expr><literal type="string">"+.*"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>plus_times</name> <operator>=</operator> <call><name>gb_string_to_semiring</name> <argument_list>(<argument><expr><name>semiring_string</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>, <argument><expr><name>btype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_add</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>plus_monoid</name></expr></argument>, <argument><expr><name>plus_times</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Semiring_multiply</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>times</name></expr></argument>, <argument><expr><name>plus_times</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_operator</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>plus</name></expr></argument>, <argument><expr><name>plus_monoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>plus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// get the size of A and B</comment>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl>, <decl><type ref="prev"/><name>bnrows</name></decl>, <decl><type ref="prev"/><name>bncols</name></decl>, <decl><type ref="prev"/><name>cnrows</name></decl>, <decl><type ref="prev"/><name>cncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bnrows</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bncols</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the descriptor contents to determine if A and B are transposed</comment>
    <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>in0</name></decl>, <decl><type ref="prev"/><name>in1</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>A_transpose</name> <init>= <expr><operator>(</operator><name>in0</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_transpose</name> <init>= <expr><operator>(</operator><name>in1</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// determine the size of C</comment>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>zero</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>binop_bind1st</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>anrows</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>ancols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C = alpha * B</comment>
        <expr_stmt><expr><name>binop_bind1st</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cnrows</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>bncols</name></expr> </then><else>: <expr><name>bnrows</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cncols</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>bnrows</name></expr> </then><else>: <expr><name>bncols</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>scalar</name> <operator>=</operator> <operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>A</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>bnrows</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bncols</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// C = A * beta</comment>
        <expr_stmt><expr><name>binop_bind1st</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cnrows</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>ancols</name></expr> </then><else>: <expr><name>anrows</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cncols</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>anrows</name></expr> </then><else>: <expr><name>ancols</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>scalar</name> <operator>=</operator> <operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>B</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// C = A * B where A and B are both matrices or vectors</comment>
        <expr_stmt><expr><name>cnrows</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>ancols</name></expr> </then><else>: <expr><name>anrows</name></expr></else></ternary></expr> ;</expr_stmt>
        <expr_stmt><expr><name>cncols</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>B_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>bnrows</name></expr> </then><else>: <expr><name>bncols</name></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// create the matrix C and set its format and sparsity</comment>
    <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>gb_get_format</name> <argument_list>(<argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <call><name>gb_get_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute C = A*B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>scalar</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = alpha * B or C = A * beta</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// zero = (ctype) 0</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>scalar</name> <operator>=</operator> <name>zero</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>binop_bind1st</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C = alpha * B</comment>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_BinaryOp1st_Scalar</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>times</name></expr></argument>,
                <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// C = A * beta</comment>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_Scalar</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>times</name></expr></argument>,
                <argument><expr><name>A</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// C = A*B, overriding the sparsity of C for sparse*full and full*sparse</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name></decl>, <decl><type ref="prev"/><name>B_sparsity</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A_sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_STATUS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B_sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>bool</name></type> <name>A_full</name> <init>= <expr><operator>(</operator><name>A_sparsity</name> <operator>==</operator> <name>GxB_FULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>A_sparse</name> <init>= <expr><operator>(</operator><name>A_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name> <operator>||</operator> <name>A_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>B_full</name> <init>= <expr><operator>(</operator><name>B_sparsity</name> <operator>==</operator> <name>GxB_FULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>B_sparse</name> <init>= <expr><operator>(</operator><name>B_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name> <operator>||</operator> <name>B_sparsity</name> <operator>==</operator> <name>GxB_SPARSE</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>A_full</name> <operator>&amp;&amp;</operator> <name>B_sparse</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>A_sparse</name> <operator>&amp;&amp;</operator> <name>B_full</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// sparse-times-full or full-times-sparse</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// ensure C can be held as a full matrix</comment>
            <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>sparsity</name> <operator>|</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// C = 0</comment>
            <comment type="line">// zero = (ctype) 0</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_FP64</name> <argument_list>(<argument><expr><name>zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_Scalar</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>zero</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>,
                <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// C += A*B</comment>
            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>plus</name></expr></argument>, <argument><expr><name>plus_times</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// C = A*B for everything else</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// If A and/or B are hypersparse, then C is not computed as full,</comment>
            <comment type="line">// since it would likely be too large.  Instead, it is computed</comment>
            <comment type="line">// as sparse.</comment>

            <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>plus_times</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free shallow copies</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
