<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxcell_to_index.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxcell_to_index: convert cell array to index list I or colon expression</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Get a list of indices from a built-in cell array.</comment>

<comment type="line">// I is a cell array.  I contains 0, 1, 2, or 3 items:</comment>
<comment type="line">//</comment>
<comment type="line">//      0:  { }     This is the built-in ':', like C(:,J), refering to all m</comment>
<comment type="line">//                  rows, if C is m-by-n.</comment>
<comment type="line">//      1:  { list }  A 1D list of row indices, like C(I,J).</comment>
<comment type="line">//      2:  { start,fini }  start and fini are scalars (either double, int64,</comment>
<comment type="line">//                  or uint64).  This defines I = start:fini in colon</comment>
<comment type="line">//                  notation.</comment>
<comment type="line">//      3:  { start,inc,fini } start, inc, and fini are scalars (double, int64,</comment>
<comment type="line">//                  or uint64).  This defines I = start:inc:fini in colon</comment>
<comment type="line">//                  notation.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Index</name> <modifier>*</modifier></type><name>gb_mxcell_to_index</name>   <comment type="line">// return index list I</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>I_cell</name></decl></parameter>,      <comment type="line">// built-in cell array</comment>
    <parameter><decl><type><name>base_enum_t</name></type> <name>base</name></decl></parameter>,           <comment type="line">// I is one-based or zero-based</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Index</name></type> <name>n</name></decl></parameter>,          <comment type="line">// dimension of matrix being indexed</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>I_allocated</name></decl></parameter>,          <comment type="line">// true if output array I is allocated</comment>
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>ni</name></decl></parameter>,              <comment type="line">// length (I)</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>I_max</name></decl></parameter>              <comment type="line">// max (I) is computed if I_max is not NULL.</comment>
                                <comment type="line">// I_max is 0-based.</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>I_cell</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>mxIsCell</name> <argument_list>(<argument><expr><name>I_cell</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"internal error 6"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the contents of I_cell</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name>I_cell</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"index must be a cell array of length 0 to 3"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name><name>Item_allocated</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Item_len</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Item_max</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name><name>Item</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content> 
        <comment type="line">// convert I_cell {k} content to an integer list</comment>
        <expr_stmt><expr><name><name>Item</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>gb_mxarray_to_list</name> <argument_list>(<argument><expr><call><name>mxGetCell</name> <argument_list>(<argument><expr><name>I_cell</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Item_allocated</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Item_len</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>Item_max</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// parse the lists in the cell array</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = { }</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>n</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_allocated</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <name>GrB_ALL</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>I_max</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// I_max is the last index in the matrix, based on its dimension.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>n</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = { list }</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name><name>Item_len</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_allocated</name><operator>)</operator> <operator>=</operator> <name><name>Item_allocated</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>I_max</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// find the max entry in the list</comment>
            <if_stmt><if>if <condition>(<expr><name><name>Item_max</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// the max entry has already been computed (1-based)</comment>
                <comment type="line">// convert from 1-based to 0-based</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <name><name>Item_max</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// find the max entry (0-based)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>List_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GB_helper4</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>List_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>List_max</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = { start, fini }, defining start:fini</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>Item_len</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>Item_len</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,
            <argument><expr><literal type="string">"start and fini must be scalars for start:fini"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name>I</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_allocated</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name><name>Item</name> <index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name><name>Item</name> <index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>             <comment type="line">// unused</comment>

        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_RANGE</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>I_max</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// find the last index in the start:fini list</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>GxB_END</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// if (len == 3)</comment>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// I = { start, inc, fini }, defining start:inc:fini</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>Item_len</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>Item_len</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
            <name><name>Item_len</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,
            <argument><expr><literal type="string">"start, inc, and fini must be scalars for start:inc:fini"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name>I</name> <operator>=</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_allocated</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name><name>Item</name> <index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name><name>Item</name> <index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>  ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>iinc</name> <init>= <expr><name><name>Item</name> <index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the 2nd item in the list is iinc, and if it was passed in as</comment>
            <comment type="line">// 1-based, it has been decremented.  So increment it to get back</comment>
            <comment type="line">// to the correct value.</comment>
            <expr_stmt><expr><name>iinc</name><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>Item_allocated</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator> <operator>(</operator><name><name>Item</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <operator>(</operator><operator>-</operator><name>iinc</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_BACKWARDS</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>I_max</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// find the first entry in the list ibegin:iinc:iend.</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>ibegin</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>GxB_END</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ibegin</name> <operator>&gt;=</operator> <name>iend</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// the list is non-empty, for example, 7:-2:4 = [7 5]</comment>
                    <comment type="line">// I_max = GB_ijlist (NULL, 0, GB_STRIDE, I)</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <name>ibegin</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name><name>I</name> <index>[<expr><name>GxB_INC</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name><operator>)</operator> <operator>(</operator><name>iinc</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ni</name><operator>)</operator> <operator>=</operator> <name>GxB_STRIDE</name></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>I_max</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// find the last entry in the list ibegin:iinc:iend.</comment>
                <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>ibegin</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>iend</name>   <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>I</name> <index>[<expr><name>GxB_END</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>iinc</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ibegin</name> <operator>&lt;=</operator> <name>iend</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// the list is non-empty, for example, 4:2:9 = [4 6 8]</comment>
                    <comment type="line">// nI = length of the expanded list (see GB_ijproperties),</comment>
                    <comment type="line">// which is 3 for the list 4:2:9.</comment>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>nI</name> <init>= <expr><operator>(</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>ibegin</name><operator>)</operator> <operator>/</operator> <name>iinc</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
                    <comment type="line">// I_max = GB_ijlist (NULL, nI-1, GB_STRIDE, I),</comment>
                    <comment type="line">// which is 8 for the list 4:2:9</comment>
                    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>I_max</name><operator>)</operator> <operator>=</operator> <name>ibegin</name> <operator>+</operator> <operator>(</operator><name>nI</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>iinc</name></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>I</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
