<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_default_type.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_default_type: determine the default type for a binary operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// When a binary operator has inputs A and B, with no type specified, the type</comment>
<comment type="line">// is determined from the types of A and B.</comment>

<comment type="line">// If A or B are boolean, the type is taken from the other operand.</comment>
<comment type="line">// If either A or B are signed, then the type is signed.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Type</name></type> <name>gb_default_type</name>        <comment type="line">// return the default type to use</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,       <comment type="line">// type of the A matrix</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>btype</name></decl></parameter>        <comment type="line">// type of the B matrix</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>btype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// undefined type</comment>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is bool: optype determined by B</comment>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// B is bool: optype determined by A</comment>
        <return>return <expr><operator>(</operator><name>atype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is int8: optype must be signed, and at least 8 bits</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT8</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is int16: optype must be signed, and at least 16 bits</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is int32: optype must be signed, and at least 32 bits</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT16</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is int64: optype must be signed, and at least 64</comment>
        <comment type="line">// bits (if integer).  float and float complex are OK</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT16</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT32</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT32</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is uint8: optype determined by B (which is not bool; see above)</comment>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is uint16: optype can be unsigned if B is also unsigned.</comment>
        <comment type="line">// optype must be at least 16 bits.</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is uint32: optype can be unsigned if B is also unsigned.</comment>
        <comment type="line">// optype must be at least 32 bits.</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT16</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is uint64: optype can be unsigned if B is also unsigned.</comment>
        <comment type="line">// optype must be at least 64 bits.  float and float complex OK.</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT16</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is float: optype must be real or complex</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_INT8</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT16</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT32</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_INT64</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT8</name>  <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT16</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT32</name> <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GrB_UINT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>btype</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is double: optype must be double or double complex</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GxB_FC32</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GxB_FC64</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>GrB_FP64</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is float complex: optype must be float complex</comment>
        <comment type="line">// or double complex</comment>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_FP64</name>   <operator>||</operator>
            <name>btype</name> <operator>==</operator> <name>GxB_FC64</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <return>return <expr><operator>(</operator><name>GxB_FC32</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// A is double complex: optype must be double complex</comment>
        <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">// unknown type</comment>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>

    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
