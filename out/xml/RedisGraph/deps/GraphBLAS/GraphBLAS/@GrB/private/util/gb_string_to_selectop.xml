<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_to_selectop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_to_selectop: get an index_unop or selectop from a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// GrB_IndexUnaryOp and GxB_SelectOp operators, with their equivalent aliases</comment>

<function><type><name>void</name></type> <name>gb_string_to_selectop</name>
<parameter_list>(
    <comment type="line">// outputs: one of the outputs is non-NULL and the other NULL</comment>
    <parameter><decl><type><name>GrB_IndexUnaryOp</name> <modifier>*</modifier></type><name>idxunop</name></decl></parameter>,          <comment type="line">// GrB_IndexUnaryOp, if found</comment>
    <parameter><decl><type><name>GxB_SelectOp</name> <modifier>*</modifier></type><name>selop</name></decl></parameter>,                <comment type="line">// GxB_SelectOp if found</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>thunk_required</name></decl></parameter>,               <comment type="line">// true if op requires a thunk scalar</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>op_is_positional</name></decl></parameter>,             <comment type="line">// true if op is positional</comment>
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ithunk</name></decl></parameter>,
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opstring</name></decl></parameter>,                     <comment type="line">// string defining the operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>                <comment type="line">// type of A, or NULL if not present</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>opstring</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>opstring</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="string">"invalid selectop"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the opstring and parse it</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>position</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_find_dot</name> <argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>opstring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_name</name> <init>= <expr><name>opstring</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_typename</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>opstring</name> <index>[<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_typename</name> <operator>=</operator> <name>opstring</name> <operator>+</operator> <name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the operator type for VALUE* operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_typename</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// no type in the opstring; select the type from A</comment>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>atype</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// type is explicitly present in the opstring</comment>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>gb_string_to_type</name> <argument_list>(<argument><expr><name>op_typename</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// type may still be NULL, which is OK; GxB_SelectOps are untyped.</comment>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>typecode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>GB_ignore_code</name></expr> </then><else>: <expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a GrB_IndexUnaryOp or GxB_SelectOp</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"tril"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_TRIL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"triu"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_TRIU</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"diag"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_DIAG</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"offdiag"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_OFFDIAG</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"rowne"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_ROWINDEX_INT64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>ithunk</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"rowle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_ROWLE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"rowgt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_ROWGT</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"colne"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_COLINDEX_INT64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator> <operator>=</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>ithunk</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"colle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_COLLE</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"colgt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_COLGT</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_is_positional</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"nonzero"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"~=0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_NONZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"==0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_EQ_ZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"positive"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&gt;0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_GT_ZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"nonnegative"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&gt;=0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_GE_ZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"negative"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&lt;0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_LT_ZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"nonpositive"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&lt;=0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>GxB_LE_ZERO</name><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>thunk_required</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"~="</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUENE_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GxB_VALUENE_FC32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GxB_VALUENE_FC64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_NE_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEEQ_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GxB_VALUEEQ_FC32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GxB_VALUEEQ_FC64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_EQ_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGT_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_GT_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUEGE_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_GE_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELT_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_LT_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <switch>switch <condition>(<expr><name>typecode</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_BOOL</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_INT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_INT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_INT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_INT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_UINT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_UINT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_UINT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_UINT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_FP32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_VALUELE_FP64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <default>default             :</default> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>selop</name>  <operator>)</operator> <operator>=</operator> <name>GxB_LE_THUNK</name></expr>        ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>selop</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ERROR2</name> <argument_list>(<argument><expr><literal type="string">"idxunop/selectop unknown: %s\n"</literal></expr></argument>, <argument><expr><name>opstring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
