<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbselect.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbselect: select entries from a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gbselect is an interface to GrB_Matrix_select and GxB_Matrix_select.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// C = gbselect (op, A)</comment>
<comment type="line">// C = gbselect (op, A, desc)</comment>
<comment type="line">// C = gbselect (op, A, b, desc)</comment>

<comment type="line">// C = gbselect (Cin, accum, op, A, desc)</comment>
<comment type="line">// C = gbselect (Cin, accum, op, A, b, desc)</comment>

<comment type="line">// C = gbselect (Cin, M, op, A, desc)</comment>
<comment type="line">// C = gbselect (Cin, M, op, A, b, desc)</comment>

<comment type="line">// C = gbselect (Cin, M, accum, op, A, desc)</comment>
<comment type="line">// C = gbselect (Cin, M, accum, op, A, b, desc)</comment>

<comment type="line">// If Cin is not present then it is implicitly a matrix with no entries, of the</comment>
<comment type="line">// right size (which depends on A, and the descriptor).  The type of Cin, if</comment>
<comment type="line">// not present, is determined by the ztype of the accum, if present, or</comment>
<comment type="line">// otherwise it has the same time as A.</comment>

<comment type="line">// If op is '==' or '~=' and b is a NaN, and A has type GrB_FP32, GrB_FP64,</comment>
<comment type="line">// GxB_FC32, or GxB_FC64, then a user-defined operator is used instead of</comment>
<comment type="line">// GxB_EQ_THUNK, GxB_NE_THUNK, GrB_VALUEEQ* or GrB_VALUENE*.</comment>

<comment type="line">// The 'tril', 'triu', 'diag', 'offdiag', and 2-input operators all require</comment>
<comment type="line">// the b scalar.  The b scalar must not appear for the '*0' operators.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = GrB.select (Cin, M, accum, op, A, b, desc)"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// nan functions for GrB_IndexUnaryOp operators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>gb_isnan32</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                 <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><call><name>isnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnan64</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                 <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><call><name>isnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnotnan32</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                    <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>isnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnotnan64</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                    <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>!</operator><call><name>isnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnanfc32</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC32_t</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                   <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <call><name>GB_cisnanf</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnanfc64</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC64_t</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                   <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <call><name>GB_cisnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnotnanfc32</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC32_t</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                      <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>!</operator><call><name>GB_cisnanf</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>gb_isnotnanfc64</name> <parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>GxB_FC64_t</name> <modifier>*</modifier></type><name>aij</name></decl></parameter>,
                      <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>thunk</name></decl></parameter>)</parameter_list>
<block>{<block_content> 
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>!</operator><call><name>GB_cisnan</name> <argument_list>(<argument><expr><operator>*</operator><name>aij</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbselect mexFunction</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>&lt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the arguments</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>Matrix</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>String</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>Cell</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>base_enum_t</name></type> <name>base</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>kind_enum_t</name></type> <name>kind</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nmatrices</name></decl>, <decl><type ref="prev"/><name>nstrings</name></decl>, <decl><type ref="prev"/><name>ncells</name></decl>, <decl><type ref="prev"/><name>sparsity</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_get_mxargs</name> <argument_list>(<argument><expr><name>nargin</name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>, <argument><expr><name>Matrix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nmatrices</name></expr></argument>, <argument><expr><name>String</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nstrings</name></expr></argument>,
        <argument><expr><name>Cell</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncells</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>nmatrices</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nmatrices</name></expr></argument> &gt;</argument_list></name> <literal type="number">4</literal> <operator>||</operator> <name><name>nstrings</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>ncells</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr></argument>,
        <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the select operator; determine the type and ithunk later</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ithunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_SelectOp</name></type> <name>selop</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_IndexUnaryOp</name></type> <name>idxunop</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>thunk_required</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt> 
    <decl_stmt><decl><type><name>bool</name></type> <name>op_is_positional</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>gb_mxstring_to_selectop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>idxunop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thunk_required</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>op_is_positional</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ithunk</name></expr></argument>, <argument><expr><name><name>String</name> <index>[<expr><name>nstrings</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the matrices</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>ctype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>thunk_required</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"select operator input is missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// if (nmatrices == 4)</comment>
        <block>{<block_content> 
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>nmatrices</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_get_deep</name>    <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>Matrix</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// if (nmatrices == 4)</comment>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// finalize the select operator and ithunk</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>ithunk</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>btype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// get ithunk from the b scalar</comment>
            <expr_stmt><expr><call><name>OK0</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ithunk</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>gb_mxstring_to_selectop</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>idxunop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selop</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thunk_required</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>op_is_positional</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ithunk</name></expr></argument>, <argument><expr><name><name>String</name> <index>[<expr><name>nstrings</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the accum operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nstrings</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if accum appears, then Cin must also appear</comment>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>C</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>accum</name> <operator>=</operator> <call><name>gb_mxstring_to_binop</name> <argument_list>(<argument><expr><name><name>String</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct C if not present on input</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// If C is NULL, then it is not present on input.</comment>
    <comment type="line">// Construct C of the right size and type.</comment>

    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// get the descriptor contents to determine if A is transposed</comment>
        <decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>in0</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>A_transpose</name> <init>= <expr><operator>(</operator><name>in0</name> <operator>==</operator> <name>GrB_TRAN</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <comment type="line">// get the size of A</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// determine the size of C</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cnrows</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>ancols</name></expr> </then><else>: <expr><name>anrows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cncols</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>A_transpose</name><operator>)</operator></expr> ?</condition><then> <expr><name>anrows</name></expr> </then><else>: <expr><name>ancols</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

        <comment type="line">// C has the same type as A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// create the matrix C and set its format and sparsity</comment>
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>gb_get_format</name> <argument_list>(<argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <call><name>gb_get_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_new</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// handle the NaN case</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_IndexUnaryOp</name></type> <name>nan_test</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>b2</name> <init>= <expr><name>b</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>b3</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>b4</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>op_is_positional</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// construct a new int64 thunk scalar for positional ops</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT64</name> <argument_list>(<argument><expr><name>b3</name></expr></argument>, <argument><expr><name>ithunk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>b2</name> <operator>=</operator> <name>b3</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>b</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// check if b is NaN</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>b_is_nan</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>float</name></type> <name>b_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK0</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b_value</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b_is_nan</name> <operator>=</operator> <call><name>isnan</name> <argument_list>(<argument><expr><name>b_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>double</name></type> <name>b_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK0</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b_value</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b_is_nan</name> <operator>=</operator> <call><name>isnan</name> <argument_list>(<argument><expr><name>b_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>GxB_FC32_t</name></type> <name>b_value</name> <init>= <expr><call><name>GxB_CMPLXF</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK0</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_extractElement_FC32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b_value</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b_is_nan</name> <operator>=</operator> <call><name>GB_cisnanf</name> <argument_list>(<argument><expr><name>b_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>btype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>GxB_FC64_t</name></type> <name>b_value</name> <init>= <expr><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK0</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_extractElement_FC64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b_value</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>b_is_nan</name> <operator>=</operator> <call><name>GB_cisnan</name> <argument_list>(<argument><expr><name>b_value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>b_is_nan</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// b is NaN; create a new nan_test operator if it should be used</comment>
            <comment type="line">// instead of the built-in GxB_EQ_THUNK, GxB_NE_THUNK, GrB_VALUEEQ*</comment>
            <comment type="line">// or GrB_VALUENE* operators.</comment>

            <if_stmt><if>if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GrB_VALUEEQ_FP32</name> <operator>||</operator>
                <name>selop</name> <operator>==</operator> <name>GxB_EQ_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnan32</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GrB_VALUEEQ_FP64</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_EQ_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnan64</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GxB_VALUEEQ_FC32</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_EQ_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnanfc32</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GxB_VALUEEQ_FC64</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_EQ_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnanfc64</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GxB_FC64</name></expr></argument>, <argument><expr><name>GxB_FC64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GrB_VALUENE_FP32</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_NE_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnotnan32</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GrB_VALUENE_FP64</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_NE_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnotnan64</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GxB_VALUENE_FC32</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_NE_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnotnanfc32</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>idxunop</name> <operator>==</operator> <name>GxB_VALUENE_FC64</name> <operator>||</operator>
                     <name>selop</name> <operator>==</operator> <name>GxB_NE_THUNK</name> <operator>&amp;&amp;</operator> <name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>GxB_index_unary_function</name><operator>)</operator> <name>gb_isnotnanfc64</name></expr></argument>,
                    <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>GxB_FC64</name></expr></argument>, <argument><expr><name>GxB_FC64</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>nan_test</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// use the new operator instead of the built-in one</comment>
            <expr_stmt><expr><name>selop</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>idxunop</name> <operator>=</operator> <name>nan_test</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute C&lt;M&gt; += select (A, b2)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>selop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>selop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
            <argument><expr><operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>b2</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// typecast the b2 scalar to the idxunop-&gt;ytype</comment>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ytype</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>ytype_name</name> <index>[<expr><name>GxB_MAX_NAME_LEN</name></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_IndexUnaryOp_ytype_name</name> <argument_list>(<argument><expr><name>ytype_name</name></expr></argument>, <argument><expr><name>idxunop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_from_name</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ytype</name></expr></argument>, <argument><expr><name>ytype_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b4</name></expr></argument>, <argument><expr><name>ytype</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign</name> <argument_list>(<argument><expr><name>b4</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_select_Scalar</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>idxunop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
            <argument><expr><operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>b4</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free shallow copies</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>b4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_IndexUnaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nan_test</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the output matrix C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
