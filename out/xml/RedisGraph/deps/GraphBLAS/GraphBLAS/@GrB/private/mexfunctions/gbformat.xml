<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbformat.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbformat: get/set the matrix format to use in GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Usage</comment>

<comment type="line">// fmt = gbformat ;                   get the global default format (row/col)</comment>
<comment type="line">// fmt = gbformat (fmt) ;             set the global default format</comment>
<comment type="line">// [f,sparsity,iso] = gbformat (G) ;  get the format, sparsity, and iso status</comment>
<comment type="line">//                                    of a matrix (either @GrB or built-in)</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: [f,s,iso] = GrB.format(G), f = GrB.format (f), or f = GrB.format"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get/set the format</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name> <init>= <expr><name>GxB_BY_COL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><name>GxB_AUTO_SPARSITY</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>v5_1_or_later</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// format = GrB.format</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// get the global format</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else <comment type="line">// if (nargin == 1)</comment>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 


            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// GrB.format (format)</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// parse the format string</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>ignore</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>, <argument><expr><literal type="string">"invalid format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// set the global format</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// GrB.format (G) for a GraphBLAS matrix G</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// get the type</comment>
            <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>mx_type</name> <init>= <expr><call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv7_3"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>mx_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// check if it is a GraphBLASv5_1 struct</comment>
                <expr_stmt><expr><name>mx_type</name> <operator>=</operator> <call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv5_1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mx_type</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// v5_1 or v7_3</comment>
                <expr_stmt><expr><name>v5_1_or_later</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mx_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// check if it is a GraphBLASv5 struct</comment>
                <expr_stmt><expr><name>mx_type</name> <operator>=</operator> <call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv5"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mx_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// check if it is a GraphBLASv4 struct</comment>
                <expr_stmt><expr><name>mx_type</name> <operator>=</operator> <call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv4"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>mx_type</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// check if it is a GraphBLASv3 struct</comment>
                <expr_stmt><expr><name>mx_type</name> <operator>=</operator> <call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>mx_type</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"invalid GraphBLAS struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// get the row/column format of the input matrix G</comment>
            <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>opaque</name> <init>= <expr><call><name>mxGetField</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>opaque</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"invalid GraphBLAS struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// use mxGetData (best for Octave, fine for MATLAB)</comment>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>is_csc</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator> <operator>(</operator><name><name>s</name> <index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>)</operator></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><name>fmt</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>is_csc</name><operator>)</operator></expr> ?</condition><then> <expr><name>GxB_BY_COL</name></expr> </then><else>: <expr><name>GxB_BY_ROW</name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><name>iso</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>v5_1_or_later</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>bool</name><operator>)</operator> <name><name>s</name> <index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr> ;</expr_stmt>

            <comment type="line">// get the current sparsity status of the input matrix G</comment>
            <switch>switch <condition>(<expr><call><name>mxGetNumberOfFields</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><literal type="number">3</literal></expr> :</case> <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>        <break>break ;</break>
                <case>case <expr><literal type="number">4</literal></expr> :</case> <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><literal type="number">5</literal></expr> :</case> <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><literal type="number">9</literal></expr> :</case> <comment type="line">// fall through to hypersparse</comment>
                <case>case <expr><literal type="number">6</literal></expr> :</case> <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid GraphBLAS struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></switch>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// GrB.format (A) for a built-in matrix A</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// built-in matrices are always stored by column</comment>
            <expr_stmt><expr><name>fmt</name> <operator>=</operator> <name>GxB_BY_COL</name></expr> ;</expr_stmt>
            <comment type="line">// built-in matrices are sparse or full, never hypersparse or bitmap</comment>
            <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <ternary><condition><expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>GxB_SPARSE</name></expr> </then><else>: <expr><name>GxB_FULL</name></expr></else></ternary></expr> ;</expr_stmt>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>fmt</name> <operator>==</operator> <name>GxB_BY_ROW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"by row"</literal></expr> </then><else>: <expr><literal type="string">"by col"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl> ;</decl_stmt>
        <switch>switch <condition>(<expr><name>sparsity</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GxB_HYPERSPARSE</name></expr> :</case> <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"hypersparse"</literal></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GxB_SPARSE</name></expr> :</case>      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"sparse"</literal></expr>      ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GxB_BITMAP</name></expr> :</case>      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"bitmap"</literal></expr>      ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GxB_FULL</name></expr> :</case>        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"full"</literal></expr>        ;</expr_stmt> <break>break ;</break>
            <default>default :</default>              <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>            ;</expr_stmt> <break>break ;</break>
        </block_content>}</block></switch>
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateString</name> <argument_list>(<argument><expr><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="string">"iso-valued"</literal></expr> </then><else>: <expr><literal type="string">"non-iso-valued"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
