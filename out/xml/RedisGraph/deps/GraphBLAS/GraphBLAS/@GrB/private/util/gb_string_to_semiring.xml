<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_to_semiring.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_to_semiring: convert a string to a GraphBLAS semiring</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Only built-in GraphBLAS types and operators are supported.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Semiring</name></type> <name>gb_string_to_semiring</name>      <comment type="line">// return a semiring from a string</comment>
<parameter_list>(
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>semiring_string</name></decl></parameter>,              <comment type="line">// string defining the semiring</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>,               <comment type="line">// type of A</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>btype</name></decl></parameter>                <comment type="line">// type of B</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string and parse it</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>position</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_find_dot</name> <argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>semiring_string</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// semiring string must have at least one dot</comment>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring; must have the form 'add.mult' or 'add.mult.type'"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the name of the add operator</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>add_name</name>  <init>= <expr><name>semiring_string</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>semiring_string</name> <index>[<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>

    <comment type="line">// get the name and optional type of the mult operator</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mult_name</name> <init>= <expr><name>semiring_string</name> <operator>+</operator> <name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mult_typename</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>position</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>semiring_string</name> <index>[<expr><name><name>position</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>mult_typename</name> <operator>=</operator> <name>semiring_string</name> <operator>+</operator> <name><name>position</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the mult operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>type_not_given</name> <init>= <expr><operator>(</operator><name>mult_typename</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>mult_type</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mult_typename</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>mult_type</name> <operator>=</operator> <call><name>gb_default_type</name> <argument_list>(<argument><expr><name>atype</name></expr></argument>, <argument><expr><name>btype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>mult_type</name> <operator>=</operator> <call><name>gb_string_to_type</name> <argument_list>(<argument><expr><name>mult_typename</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><call><name>gb_string_and_type_to_binop_or_idxunop</name> <argument_list>(<argument><expr><name>mult_name</name></expr></argument>,
        <argument><expr><name>mult_type</name></expr></argument>, <argument><expr><name>type_not_given</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>mult</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"invalid semiring (unknown multipy operator)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the add operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>add_type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_BinaryOp_ztype</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>add_type</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>add</name> <init>= <expr><call><name>gb_string_and_type_to_binop_or_idxunop</name> <argument_list>(<argument><expr><name>add_name</name></expr></argument>,
        <argument><expr><name>add_type</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>add</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"invalid semiring (unknown add operator)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the add and mult operators to a semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>gb_semiring</name> <argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
