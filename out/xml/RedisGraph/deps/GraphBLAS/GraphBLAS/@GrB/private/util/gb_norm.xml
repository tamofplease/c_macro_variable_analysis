<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_norm.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_norm: compute the norm of a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>gb_norm</name>              <comment type="line">// compute norm (A,kind)</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>int64_t</name></type> <name>norm_kind</name></decl></parameter>       <comment type="line">// 0, 1, 2, INT64_MAX, or INT64_MIN</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get input matrix, select types and operators, and allocate X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>nvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>xtype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>absop</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>sumop</name></decl>, <decl><type ref="prev"/><name>maxop</name></decl>, <decl><type ref="prev"/><name>minop</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>t</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>X</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_complex</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if A is FP32, use the FP32 type and operators</comment>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>absop</name> <operator>=</operator> <name>GrB_ABS_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sumop</name> <operator>=</operator> <name>GrB_PLUS_MONOID_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>maxop</name> <operator>=</operator> <name>GrB_MAX_MONOID_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>minop</name> <operator>=</operator> <name>GrB_MIN_MONOID_FP32</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if A is FC32, use the FP32/FC32 type and operators</comment>
        <expr_stmt><expr><name>is_complex</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>absop</name> <operator>=</operator> <name>GxB_ABS_FC32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sumop</name> <operator>=</operator> <name>GrB_PLUS_MONOID_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>maxop</name> <operator>=</operator> <name>GrB_MAX_MONOID_FP32</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>minop</name> <operator>=</operator> <name>GrB_MIN_MONOID_FP32</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// if A is FC64, use the FP64/FC64 type and operators</comment>
        <expr_stmt><expr><name>is_complex</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>absop</name> <operator>=</operator> <name>GxB_ABS_FC64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sumop</name> <operator>=</operator> <name>GrB_PLUS_MONOID_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>maxop</name> <operator>=</operator> <name>GrB_MAX_MONOID_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>minop</name> <operator>=</operator> <name>GrB_MIN_MONOID_FP64</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <comment type="line">// otherwise, use FP64 type and operators; this will typecast the </comment>
        <comment type="line">// input matrix to FP64 if A is not of that type.</comment>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>absop</name> <operator>=</operator> <name>GrB_ABS_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>sumop</name> <operator>=</operator> <name>GrB_PLUS_MONOID_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>maxop</name> <operator>=</operator> <name>GrB_MAX_MONOID_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>minop</name> <operator>=</operator> <name>GrB_MIN_MONOID_FP64</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute the norm</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>ncols</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>norm_kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// vector or Frobenius norm</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>norm_kind</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><literal type="number">0</literal></expr> :</case>    <comment type="line">// Frobenius norm</comment>
            <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// 2-norm</comment>

                <if_stmt><if>if <condition>(<expr><name>is_complex</name></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// X = abs (A)</comment>
                    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// X = X.^2</comment>
                    <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_FP32</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_POW_FP32</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_FP64</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_POW_FP64</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content> 
                    <comment type="line">// X = A.^2</comment>
                    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_FP64</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>GxB_POW_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">2.0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <comment type="line">// s = sum (X)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sumop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>sqrt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// 1-norm</comment>

                <comment type="line">// X = abs (A)</comment>
                <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// s = sum (X)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sumop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>INT64_MAX</name></expr> :</case>    <comment type="line">// inf-norm</comment>

                <comment type="line">// X = abs (A)</comment>
                <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// s = max (X)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>maxop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>INT64_MIN</name></expr> :</case>    <comment type="line">// (-inf)-norm</comment>

                <if_stmt><if>if <condition>(<expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content> 
                    <comment type="line">// X = abs (A)</comment>
                    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <comment type="line">// s = min (X)</comment>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>minop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <break>break ;</break>

            <default>default:</default>

                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown norm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// matrix norm</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>norm_kind</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><literal type="number">2</literal></expr> :</case>    <comment type="line">// 2-norm</comment>

                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"2-norm not available for GrB matrices"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><literal type="number">1</literal></expr> :</case>    <comment type="line">// 1-norm:  max sum of columns of abs (A)</comment>

                <comment type="line">// X = abs (A)</comment>
                <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// t = zeros (ncols,1)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// t(j) = sum of the ith column, X(:,j)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_Monoid</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sumop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>,
                    <argument><expr><name>GrB_DESC_T0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// s = max (t)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>maxop</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>INT64_MAX</name></expr> :</case>    <comment type="line">// inf-norm:  max sum of rows of abs (A)</comment>

                <comment type="line">// X = abs (A)</comment>
                <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>absop</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// t = zeros (nrows,1)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// t(i) = sum of the ith row, X(i,:)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_Monoid</name> <argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sumop</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// s = max (t)</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_reduce_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>maxop</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <case>case <expr><name>INT64_MIN</name></expr> :</case>

                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"(-inf)-norm not available for GrB matrices"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>

            <default>default :</default>

                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown norm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <break>break ;</break>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>s</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
