<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbsubassign.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbsubassign: assign entries into a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gbsubassign is an interface to GxB_Matrix_subassign and</comment>
<comment type="line">// GxB_Matrix_assign_[TYPE], computing the GraphBLAS expression:</comment>

<comment type="line">//      C(I,J)&lt;#M,replace&gt; = accum (C(I,J), A) or accum(C(I,J), A')</comment>

<comment type="line">// where A can be a matrix or a scalar.</comment>

<comment type="line">// Usage:</comment>

<comment type="line">//      C = gbsubassign (Cin, M, accum, A, I, J, desc)</comment>

<comment type="line">// Cin and A required.  See GrB.m for more details.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: C = GrB.subassign (Cin, M, accum, A, I, J, desc)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>gb_assign</name> <argument_list>(<argument><expr><name>nargout</name></expr></argument>, <argument><expr><name>pargout</name></expr></argument>, <argument><expr><name>nargin</name></expr></argument>, <argument><expr><name>pargin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
