<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxclass_to_mxstring.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxclass_to_mxstring: type of a built-in matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>gb_mxclass_to_mxstring</name> <parameter_list>(<parameter><decl><type><name>mxClassID</name></type> <name>class</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>is_complex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>class</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// a built-in sparse or full matrix, valid for G = GrB (X), or</comment>
        <comment type="line">// for inputs to any GrB.method.</comment>
        <case>case <expr><name>mxLOGICAL_CLASS</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"logical"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxINT8_CLASS</name></expr>     :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxINT16_CLASS</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxINT32_CLASS</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxINT64_CLASS</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxUINT8_CLASS</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxUINT16_CLASS</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxUINT32_CLASS</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxUINT64_CLASS</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>

        <case>case <expr><name>mxSINGLE_CLASS</name></expr>   :</case>
            <if_stmt><if>if <condition>(<expr><name>is_complex</name></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"single complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"single"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <case>case <expr><name>mxDOUBLE_CLASS</name></expr>   :</case>
            <if_stmt><if>if <condition>(<expr><name>is_complex</name></expr>)</condition>
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
            </block_content>}</block></else></if_stmt>
            <break>break ;</break>

        <comment type="line">// a built-in struct, cell, char, void, function, or unknown</comment>
        <case>case <expr><name>mxSTRUCT_CLASS</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxCELL_CLASS</name></expr>     :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"cell"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxCHAR_CLASS</name></expr>     :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"char"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxVOID_CLASS</name></expr>     :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxFUNCTION_CLASS</name></expr> :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"function_handle"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>mxUNKNOWN_CLASS</name></expr>  :</case>
        <default>default               :</default> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
