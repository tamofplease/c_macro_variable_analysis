<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbargsort.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbargsort: sort a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// usage:</comment>

<comment type="line">// [C,P] = gbargsort (A, dim, direction)</comment>

<comment type="line">// where dim = 1 to sort the columns of A, dim = 2 to the rows of A.</comment>
<comment type="line">// direction is 'ascend' or 'descend'.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: [C,P] = gbargsort (A, dim, direction)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>nargout</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargout</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the arguments and determine the sort direction</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dim</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>dim</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>dim</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"invalid dim"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>direction</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"direction"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><literal type="string">"ascend"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// ascending sort</comment>
        <if_stmt><if>if      <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_BOOL</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT8</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT16</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT32</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT64</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT8</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT16</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT32</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT64</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_FP32</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_FP64</name></expr>   ;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><literal type="string">"descend"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// descending sort</comment>
        <if_stmt><if>if      <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_BOOL</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT8</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT16</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT32</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT64</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT8</name></expr>  ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT16</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT32</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT64</name></expr> ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_FP32</name></expr>   ;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_FP64</name></expr>   ;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ERROR2</name> <argument_list>(<argument><expr><literal type="string">"unrecognized direction: %s\n"</literal></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// sort the columns of A</comment>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>GrB_DESC_T0</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else <comment type="line">// dim == 2</comment>
    <block>{<block_content> 
        <comment type="line">// sort the rows of A</comment>
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the outputs C and P</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>P</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// sort the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_sort</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>P</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// add 1 to the entries in P, to convert to 1-based indexing</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>P</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply_BinaryOp2nd_INT64</name> <argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT64</name></expr></argument>,
            <argument><expr><name>P</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
