<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_get_sparsity.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_get_sparsity: determine the sparsity of a matrix result </comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// gb_get_sparsity determines the sparsity of a result matrix C, which may be</comment>
<comment type="line">// computed from one or two input matrices A and B.  The following rules are</comment>
<comment type="line">// used, in order:</comment>

<comment type="line">// (1) GraphBLAS operations of the form C = GrB.method (Cin, ...) use the</comment>
<comment type="line">//      sparsity of Cin for the new matrix C.</comment>

<comment type="line">// (2) If the sparsity is determined by the descriptor to the method, then that</comment>
<comment type="line">//      determines the sparsity of C.</comment>

<comment type="line">// (3) If both A and B are present and both matrices (not scalars), the</comment>
<comment type="line">//      sparsity of C is A_sparsity | B_sparsity</comment>

<comment type="line">// (4) If A is present (and not a scalar), then the sparsity of C is A_sparsity.</comment>

<comment type="line">// (5) If B is present (and not a scalar), then the sparsity of C is B_sparsity.</comment>

<comment type="line">// (6) Otherwise, the global default sparsity is used for C.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GxB_Format_Value</name></type> <name>gb_get_sparsity</name>        <comment type="line">// 0 to 15</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,                       <comment type="line">// may be NULL</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,                       <comment type="line">// may be NULL</comment>
    <parameter><decl><type><name>int</name></type> <name>sparsity_default</name></decl></parameter>                <comment type="line">// may be 0</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>B_sparsity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the sparsity of the matrices A and B</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>ncols</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// A is a vector or matrix, not a scalar</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A_sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>B</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>ncols</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// B is a vector or matrix, not a scalar</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B_sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine the sparsity of C</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>sparsity_default</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// (2) the sparsity is defined by the descriptor to the method</comment>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>sparsity_default</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_sparsity</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>B_sparsity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// (3) C is determined by the sparsity of A and B</comment>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>A_sparsity</name> <operator>|</operator> <name>B_sparsity</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>A_sparsity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// (4) get the sparsity of A</comment>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>A_sparsity</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>B_sparsity</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// (5) get the sparsity of B</comment>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>B_sparsity</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// (6) use the default sparsity</comment>
        <expr_stmt><expr><name>sparsity</name> <operator>=</operator> <name>GxB_AUTO_SPARSITY</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>sparsity</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
