<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_to_type.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_to_type: return the GraphBLAS type from a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Type</name></type> <name>gb_string_to_type</name>      <comment type="line">// return the GrB_Type from a string</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"logical"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOOL</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>    )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT8</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT8</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"single complex"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"float complex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GxB_FC32</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>MATCH</name> <argument_list>(<argument><expr><name>typename</name></expr></argument>, <argument><expr><literal type="string">"complex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 
        <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The string is not a type, but this is not an error here.  For example,</comment>
    <comment type="line">// G = GrB (m,n,'double','by row') queries both its string input arguments</comment>
    <comment type="line">// with gb_mxstring_to_type and gb_mxstring_to_format, to parse its inputs.</comment>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
