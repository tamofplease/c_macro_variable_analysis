<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_to_monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_to_monoid: get a GraphBLAS monoid from a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// The string has the form op_name.op_type.  For example '+.double' is</comment>
<comment type="line">// GrB_PLUS_MONOID_FP64.  The type is optional.  If not present, it defaults</comment>
<comment type="line">// to the default_type parameter.</comment>

<function><type><name>GrB_Monoid</name></type> <name>gb_string_to_monoid</name>          <comment type="line">// return monoid from a string</comment>
<parameter_list>(
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opstring</name></decl></parameter>,                     <comment type="line">// string defining the operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>                 <comment type="line">// default type if not in the string</comment>
)</parameter_list>
<block>{<block_content> 

    <comment type="line">// get the binary operator and convert to a monoid</comment>
    <return>return <expr><operator>(</operator><call><name>gb_binop_to_monoid</name> <argument_list>(<argument><expr><call><name>gb_string_to_binop_or_idxunop</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>,
        <argument><expr><name>type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
