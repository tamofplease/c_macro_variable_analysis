<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxstring_to_format.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxstring_to_format: get the format from a built-in string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Valid format strings:</comment>

<comment type="line">//  'by row'            auto sparsity for these 2 strings</comment>
<comment type="line">//  'by col'</comment>

<comment type="line">//  'sparse by row'</comment>
<comment type="line">//  'hypersparse by row'</comment>
<comment type="line">//  'bitmap by row'</comment>
<comment type="line">//  'full by row'</comment>

<comment type="line">//  'sparse by col'</comment>
<comment type="line">//  'hypersparse by col'</comment>
<comment type="line">//  'bitmap by col'</comment>
<comment type="line">//  'full by col'</comment>

<comment type="line">//  'sparse'            fmt is GxB_BY_COL for these four strings</comment>
<comment type="line">//  'hypersparse'</comment>
<comment type="line">//  'bitmap'</comment>
<comment type="line">//  'full'</comment>

<comment type="line">// The sparsity formats can be combined as well, such as:</comment>
<comment type="line">//  'sparse/hyper by row'</comment>

<comment type="line">// hypersparse can be abbreviated as 'hyper'</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>gb_mxstring_to_format</name>      <comment type="line">// true if a valid format is found</comment>
<parameter_list>(
    <comment type="line">// input</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>mxformat</name></decl></parameter>,    <comment type="line">// built-in string, 'by row' or 'by col'</comment>
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GxB_Format_Value</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sparsity</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>valid</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator> <operator>=</operator> <name>GxB_BY_COL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sparsity</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>format_string</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>format_string</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>mxformat</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// look for trailing "by row" or "by col", and set format if found</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name> <argument_list>(<argument><expr><name>format_string</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"by row"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator> <operator>=</operator> <name>GxB_BY_ROW</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>format_string</name> <index>[<expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"by col"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator> <operator>=</operator> <name>GxB_BY_COL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>-</operator> <literal type="number">6</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>format_string</name> <index>[<expr><call><name>GB_IMAX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// parse the format for hypersparse/sparse/bitmap/full sparsity tokens</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>len</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>format_string</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name><name>format_string</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// mark the end of prior token</comment>
            <expr_stmt><expr><name><name>format_string</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>

            <comment type="line">// null-terminated token is contained in format_string [kstart:k]</comment>
            <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>kstart</name></expr></argument>, <argument><expr><literal type="string">"sparse"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>kstart</name></expr></argument>, <argument><expr><literal type="string">"hypersparse"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                     <call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>kstart</name></expr></argument>, <argument><expr><literal type="string">"hyper"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>kstart</name></expr></argument>, <argument><expr><literal type="string">"bitmap"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>format_string</name> <operator>+</operator> <name>kstart</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// advance to the next token</comment>
            <expr_stmt><expr><name>kstart</name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sparsity</name><operator>)</operator> <operator>=</operator> <name>s</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>valid</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
