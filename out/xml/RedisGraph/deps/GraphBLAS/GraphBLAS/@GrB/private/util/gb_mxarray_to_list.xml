<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxarray_to_list.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxarray_to_list: convert a built-in array to a list of integers</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The built-in list may be double, int64, or uint64.  If double or 1-based</comment>
<comment type="line">// int64, a new integer list is created, and the 1-based input list is</comment>
<comment type="line">// converted to the 0-based integer list.</comment>

<comment type="line">// mxGetData is used instead of the MATLAB-recommended mxGetDoubles, etc,</comment>
<comment type="line">// because mxGetData works best for Octave, and it works fine for MATLAB</comment>
<comment type="line">// since GraphBLAS requires R2018a with the interleaved complex data type.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>int64_t</name> <modifier>*</modifier></type><name>gb_mxarray_to_list</name>     <comment type="line">// return List of integers</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>mxList</name></decl></parameter>,      <comment type="line">// list to extract</comment>
    <parameter><decl><type><name>base_enum_t</name></type> <name>base</name></decl></parameter>,           <comment type="line">// input is zero-based or one-based</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>allocated</name></decl></parameter>,            <comment type="line">// true if output list was allocated</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>,               <comment type="line">// length of list</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List_max</name></decl></parameter>           <comment type="line">// max entry in the list, if computed</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><call><name>mxIsNumeric</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"index list must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"index list cannot be sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"index list cannot be complex"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the length and class of the built-in list</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator> <operator>=</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>mxClassID</name></type> <name>class</name> <init>= <expr><call><name>mxGetClassID</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the contents and convert to int64_t</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>List_max</name><operator>)</operator> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>zerobased</name> <init>= <expr><operator>(</operator><name>base</name> <operator>==</operator> <name>BASE_0_INT64</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>allocated</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxMalloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name><name>List</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>List</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>class</name> <operator>==</operator> <name>mxINT64_CLASS</name> <operator>&amp;&amp;</operator> <name>zerobased</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// input list is int64; just return a shallow pointer</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>allocated</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>class</name> <operator>==</operator> <name>mxUINT64_CLASS</name> <operator>&amp;&amp;</operator> <name>zerobased</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// input list is uint64; just return a shallow pointer</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>allocated</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>class</name> <operator>==</operator> <name>mxINT64_CLASS</name> <operator>||</operator> <name>class</name> <operator>==</operator> <name>mxUINT64_CLASS</name> <operator>||</operator>
             <name>class</name> <operator>==</operator> <name>mxDOUBLE_CLASS</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// input list 1-based: decrement to convert to 0-based</comment>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>allocated</name><operator>)</operator> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <name>mxDOUBLE_CLASS</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// input list is 1-based double</comment>
            <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>List_double</name> <init>= <expr><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>List_double</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"index list must be integer"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>GB_helper3</name> <argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>List_double</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>List_max</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>, <argument><expr><literal type="string">"index must be integer"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// input list is 1-based int64 or uint64</comment>
            <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>List_int64</name> <init>= <expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>mxList</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_helper3i</name> <argument_list>(<argument><expr><name>List</name></expr></argument>, <argument><expr><name>List_int64</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator></expr></argument>, <argument><expr><name>List_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <return>return <expr><operator>(</operator><name>List</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"integer array must be double, int64, or uint64"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
