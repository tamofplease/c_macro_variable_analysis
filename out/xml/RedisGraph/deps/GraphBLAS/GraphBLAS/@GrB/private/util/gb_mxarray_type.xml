<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxarray_type.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxarray_type: return the GraphBLAS type of a built-in matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Type</name></type> <name>gb_mxarray_type</name>        <comment type="line">// return the GrB_Type of a built-in matrix</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>X</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsComplex</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <switch>switch <condition>(<expr><call><name>mxGetClassID</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>mxSINGLE_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GxB_FC32</name></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxDOUBLE_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GxB_FC64</name></expr>     ;</expr_stmt> <break>break ;</break>
            <default>default               :</default> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <switch>switch <condition>(<expr><call><name>mxGetClassID</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>mxLOGICAL_CLASS</name></expr>  :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_BOOL</name></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxINT8_CLASS</name></expr>     :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_INT8</name></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxINT16_CLASS</name></expr>    :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_INT16</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxINT32_CLASS</name></expr>    :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_INT32</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxINT64_CLASS</name></expr>    :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_INT64</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxUINT8_CLASS</name></expr>    :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_UINT8</name></expr>    ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxUINT16_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_UINT16</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxUINT32_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_UINT32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxUINT64_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_UINT64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxSINGLE_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_FP32</name></expr>     ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>mxDOUBLE_CLASS</name></expr>   :</case> <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_FP64</name></expr>     ;</expr_stmt> <break>break ;</break>
            <default>default               :</default> <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>type</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
