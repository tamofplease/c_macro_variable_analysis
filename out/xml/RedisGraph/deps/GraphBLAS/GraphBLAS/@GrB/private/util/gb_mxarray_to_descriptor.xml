<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxarray_to_descriptor.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxarray_to_descriptor: get the contents of a GraphBLAS Descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// get a GraphBLAS descriptor from a built-in struct.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_descriptor</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl></parameter>,            <comment type="line">// GraphBLAS descriptor to modify</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>desc_builtin</name></decl></parameter>,    <comment type="line">// built-in struct with d.out, etc</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldname</name></decl></parameter>,          <comment type="line">// fieldname to extract from desc_builtin</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Field</name></type> <name>field</name></decl></parameter>      <comment type="line">// field to set in desc</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// find the field in the built-in struct</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fieldnumber</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// the field is present</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>fieldname</name></expr></argument>, <argument><expr><literal type="string">"nthreads"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">// nthreads must be a numeric scalar</comment>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"d.nthreads must be a scalar"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nthreads_max</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>fieldname</name></expr></argument>, <argument><expr><literal type="string">"chunk"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 

            <comment type="line">// chunk must be a numeric scalar</comment>
            <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><operator>!</operator><call><name>gb_mxarray_is_scalar</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"d.chunk must be a scalar"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>chunk</name> <init>= <expr><call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_CHUNK</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">// get the string from the built-in field</comment>
            <decl_stmt><decl><type><name>char</name></type> <name><name>s</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"field"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// convert the string to a Descriptor value, and set the value</comment>
            <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"transpose"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"complement"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_COMP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structure"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structural"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structural complement"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_COMP</name><operator>+</operator><name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gustavson"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dot"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_DOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"saxpy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_SAXPY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content> 
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_HASH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// the string must be one of the strings listed above</comment>
                <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unrecognized descriptor value"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxarray_to_descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Descriptor</name></type> <name>gb_mxarray_to_descriptor</name> <comment type="line">// new descriptor, or NULL if none</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>desc_builtin</name></decl></parameter>, <comment type="line">// built-in struct with possible descriptor</comment>
    <parameter><decl><type><name>kind_enum_t</name> <modifier>*</modifier></type><name>kind</name></decl></parameter>,          <comment type="line">// GrB, sparse, or full</comment>
    <parameter><decl><type><name>GxB_Format_Value</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,      <comment type="line">// by row or by col</comment>
    <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sparsity</name></decl></parameter>,              <comment type="line">// hypersparse/sparse/bitmap/full</comment>
    <parameter><decl><type><name>base_enum_t</name> <modifier>*</modifier></type><name>base</name></decl></parameter>           <comment type="line">// 0-based int, 1-based int, or 1-based double</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs and find the descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// set the defaults if no descriptor is present</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_GRB</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>fmt</name><operator>)</operator> <operator>=</operator> <name>GxB_NO_FORMAT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_DEFAULT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>sparsity</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>desc_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>)</argument_list></call>
        <operator>||</operator> <operator>(</operator><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv7_3"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv5_1"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv5"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLASv4"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator>
        <operator>||</operator> <operator>(</operator><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GraphBLAS"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If present, the descriptor is a struct whose first field is not</comment>
        <comment type="line">// "desc.GraphBLAS*". If not present, the GraphBLAS descriptor is NULL.</comment>
        <comment type="line">// This is not an error.</comment>
        <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the GraphBLAS descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get each component of the descriptor struct</comment>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>     , <argument><expr><name>GrB_OUTP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"in0"</literal></expr></argument>     , <argument><expr><name>GrB_INP0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"in1"</literal></expr></argument>     , <argument><expr><name>GrB_INP1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>    , <argument><expr><name>GrB_MASK</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"axb"</literal></expr></argument>     , <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"nthreads"</literal></expr></argument>, <argument><expr><name>GxB_NTHREADS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="string">"chunk"</literal></expr></argument>   , <argument><expr><name>GxB_CHUNK</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the desired kind of output</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>mxkind</name> <init>= <expr><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mxkind</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// get the string from the built-in field</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>s</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>mxkind</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"grb"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_GRB</name></expr> ;</expr_stmt>        <comment type="line">// @GrB matrix</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"sparse"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_SPARSE</name></expr> ;</expr_stmt>     <comment type="line">// built-in sparse matrix</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"full"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_FULL</name></expr> ;</expr_stmt>       <comment type="line">// built-in full matrix</comment>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"builtin"</literal></expr></argument>)</argument_list></call>   <comment type="line">// preferred</comment>
            <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"matlab"</literal></expr></argument>)</argument_list></call>      <comment type="line">// deprecated (use 'builtin')</comment>
            <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"octave"</literal></expr></argument>)</argument_list></call></expr>)</condition>     <comment type="line">// 'builtin' is preferred</comment>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>kind</name><operator>)</operator> <operator>=</operator> <name>KIND_BUILTIN</name></expr> ;</expr_stmt>    <comment type="line">// built-in sparse or full matrix</comment>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid descriptor.kind"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the desired format of output, if any</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>mxfmt</name> <init>= <expr><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mxfmt</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>gb_mxstring_to_format</name> <argument_list>(<argument><expr><name>mxfmt</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the desired base</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>mxbase</name> <init>= <expr><call><name>mxGetField</name> <argument_list>(<argument><expr><name>desc_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>mxbase</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// get the string from the struct field</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>s</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>mxbase</name></expr></argument>, <argument><expr><literal type="string">"base"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// The indices are one-based by default.  The type is determined</comment>
            <comment type="line">// automatically:  if I and J are outputs, then the type is double</comment>
            <comment type="line">// (BASE_1_DOUBLE) unless the indices can exceed flintmax (in which</comment>
            <comment type="line">// case BASE_1_INT64 is used)</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_DEFAULT</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"zero-based"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// zero-based indices are always int64.  This is performance</comment>
            <comment type="line">// purposes, internal to GrB methods.  The user may also use this</comment>
            <comment type="line">// to speed up GrB.build, GrB.extract, GrB.assign. and</comment>
            <comment type="line">// GrB.subassign.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_0_INT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"one-based int"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// one-based indices, but in int64.  These are important for</comment>
            <comment type="line">// indexing into matrices with dimension larger than flintmax.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_1_INT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"one-based"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"one-based double"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// for 'one-based', the caller may change this to BASE_1_INT64,</comment>
            <comment type="line">// if I and J are inputs to the function are int64.  This is</comment>
            <comment type="line">// the typical default.</comment>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>base</name><operator>)</operator> <operator>=</operator> <name>BASE_1_DOUBLE</name></expr> ;</expr_stmt>
        </block_content>}</block></if>

        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"invalid descriptor.base"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the non-null Descriptor to the caller</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>desc</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
