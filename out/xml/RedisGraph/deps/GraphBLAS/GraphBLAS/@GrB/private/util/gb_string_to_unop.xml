<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_to_unop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_to_unop: get a GraphBLAS unary operator from a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// The string has the form op_name.op_type.  For example 'abs.double' is the</comment>
<comment type="line">// GrB_ABS_FP64 operator.  The type is optional.  If not present, it defaults</comment>
<comment type="line">// to the default_type parameter.</comment>

<function><type><name>GrB_UnaryOp</name></type> <name>gb_string_to_unop</name>           <comment type="line">// return unary operator from a string</comment>
<parameter_list>(
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>opstring</name></decl></parameter>,                     <comment type="line">// string defining the operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_type</name></decl></parameter>         <comment type="line">// default type if not in the string</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string and parse it</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>position</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_find_dot</name> <argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>opstring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_name</name> <init>= <expr><name>opstring</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>op_typename</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name><name>opstring</name> <index>[<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>op_typename</name> <operator>=</operator> <name>opstring</name> <operator>+</operator> <name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the operator type</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>type_not_given</name> <init>= <expr><operator>(</operator><name>op_typename</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>op_typename</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>default_type</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 
        <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name>gb_string_to_type</name> <argument_list>(<argument><expr><name>op_typename</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a GraphBLAS unary operator, built-in or Complex</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><call><name>gb_string_and_type_to_unop</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>type_not_given</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
