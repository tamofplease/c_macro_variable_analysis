<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_new.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_new: create a GraphBLAS matrix with desired format and sparsity control</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_Matrix</name></type> <name>gb_new</name>               <comment type="line">// create and empty matrix C</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Type</name></type> <name>type</name></decl></parameter>,              <comment type="line">// type of C</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,            <comment type="line">// # of rows</comment>
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,            <comment type="line">// # of rows</comment>
    <parameter><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl></parameter>,       <comment type="line">// requested format, if &lt; 0 use default</comment>
    <parameter><decl><type><name>int</name></type> <name>sparsity</name></decl></parameter>                <comment type="line">// sparsity control for C, 0 for default</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// create the matrix</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the default format, if needed</comment>
    <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>gb_default_format</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set the desired format</comment>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt_current</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>!=</operator> <name>fmt_current</name></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// set the desired sparsity structure</comment>
    <if_stmt><if>if <condition>(<expr><name>sparsity</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>int</name></type> <name>current</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>current</name> <operator>!=</operator> <name>sparsity</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>C</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
