<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_semiring.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_semiring: get a built-in semiring from an add and multiply operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_binop.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// built-in semirings</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Using built-in types and operators, many unique semirings can be built.  Not</comment>
<comment type="line">// all possible semirings that can be constructed from built-in types and</comment>
<comment type="line">// operators are pre-defined.  Below is a list of the 1553 pre-defined</comment>
<comment type="line">// semirings.</comment>

<comment type="line">// 1000 semirings with a multiply operator TxT -&gt; T where T is non-Boolean, from</comment>
<comment type="line">// the complete cross product of:</comment>

<comment type="line">//      5 add monoids (MIN, MAX, PLUS, TIMES, ANY)</comment>
<comment type="line">//      20 multiply operators:</comment>
<comment type="line">//         FIRST, SECOND, PAIR, MIN, MAX, PLUS, MINUS, RMINUS, TIMES, DIV, RDIV,</comment>
<comment type="line">//         ISEQ, ISNE, ISGT, ISLT, ISGE, ISLE,</comment>
<comment type="line">//         LOR, LAND, LXOR</comment>
<comment type="line">//      10 non-Boolean types, T</comment>

<comment type="line">// 300 semirings with a comparator TxT -&gt; bool, where T is</comment>
<comment type="line">// non-Boolean, from the complete cross product of:</comment>

<comment type="line">//      5 Boolean add monoids: (LAND, LOR, LXOR, EQ, ANY)</comment>
<comment type="line">//      6 multiply operators: (EQ, NE, GT, LT, GE, LE)</comment>
<comment type="line">//      10 non-Boolean types, T</comment>

<comment type="line">// 55 semirings with purely Boolean types, bool x bool -&gt; bool, from the</comment>
<comment type="line">// complete cross product of:</comment>

<comment type="line">//      5 Boolean add monoids (LAND, LOR, LXOR, EQ, ANY)</comment>
<comment type="line">//      11 multiply operators:</comment>
<comment type="line">//          FIRST, SECOND, PAIR, LOR, LAND, LXOR, EQ, GT, LT, GE, LE</comment>

<comment type="line">// 54 complex semirings: TxT -&gt; T where T is float complex or double complex:</comment>

<comment type="line">//      3 complex monoids: PLUS, TIMES, ANY</comment>
<comment type="line">//      2 complex types</comment>
<comment type="line">//      9 complex multiply operators:</comment>
<comment type="line">//          FIRST, SECOND, PAIR, PLUS, MINUS, TIMES, DIV, RDIV, RMINUS</comment>

<comment type="line">// 64 bitwise semirings: TxT -&gt; T where T is an unsigned integer:</comment>

<comment type="line">//      4 bitwise monoids: BOR, BAND, BXOR, BXNOR</comment>
<comment type="line">//      4 bitwise multiply operators: BOR, BAND, BXOR, BXNOR</comment>
<comment type="line">//      4 unsigned integer types: UINT8, UINT16, UINT32, UINT64</comment>

<comment type="line">// 80 positional semirings: TxT -&gt; T where T is int64:</comment>

<comment type="line">//      5 monoids: MIN, MAX, PLUS, TIMES, ANY</comment>
<comment type="line">//      8 multiply operators:</comment>
<comment type="line">//          FIRSTI, FIRSTI1, FIRSTJ, FIRSTJ1,</comment>
<comment type="line">//          SECONDI, SECONDI1, SECONDJ, SECONDJ1</comment>
<comment type="line">//      2 type: int32, int64</comment>
<comment type="line">//</comment>
<comment type="line">//      Note that FIRSTJ and SECONDI are identical when used in a semiring,</comment>
<comment type="line">//      as the mult operator.  Likewise for FIRSTJ1 and SECONDI1.</comment>

<comment type="line">// In the names below, each semiring has a name of the form GxB_add_mult_T</comment>
<comment type="line">// where add is the additive monoid, mult is the multiply operator, and T is</comment>
<comment type="line">// the type.  The type T is always the type of x and y for the z=mult(x,y)</comment>
<comment type="line">// operator.  The monoid's three types and the ztype of the mult operator are</comment>
<comment type="line">// always the same.  This is the type T for the first set, and Boolean for</comment>
<comment type="line">// the second and third sets of semirings.</comment>

<comment type="line">// All 124 predefined semirings in the v1.3 spec are used below, in place of</comment>
<comment type="line">// the older, equivalent, GxB* named semirings.</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Semiring</name></type> <name>gb_semiring</name>            <comment type="line">// built-in semiring, or NULL if error</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>add</name></decl></parameter>,         <comment type="line">// add operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>mult</name></decl></parameter>         <comment type="line">// multiply operator</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>add</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>mult</name> <operator>==</operator> <name>NULL</name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (add or mult missing)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>add_binop_code</name>  <init>= <expr><name><name>add</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>       <comment type="line">// add opcode</comment>
    <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>mult_binop_code</name> <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>opcode</name></name></expr></init></decl> ;</decl_stmt>      <comment type="line">// multiply opcode</comment>

    <comment type="line">// add must be a monoid</comment>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name></name> <operator>!=</operator> <name><name>add</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (add operator not a monoid)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>ytype</name></name> <operator>!=</operator> <name><name>add</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (add operator not a monoid)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// the type of add must match the mult-&gt;ztype</comment>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>add</name><operator>-&gt;</operator><name>ztype</name></name> <operator>!=</operator> <name><name>mult</name><operator>-&gt;</operator><name>ztype</name></name></expr></argument>, 
        <argument><expr><literal type="string">"invalid semiring (add opeartor not a monoid)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// The conditions above are true for any semiring and any A and B, whether</comment>
    <comment type="line">// or not this function handles the semiring as hard-coded.  Now return for</comment>
    <comment type="line">// cases this function does not handle.  This function handles only</comment>
    <comment type="line">// built-in operators.</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>add_binop_code</name> <operator>==</operator> <name>GB_USER_binop_code</name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (add operator not built-in)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>mult_binop_code</name> <operator>==</operator> <name>GB_USER_binop_code</name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (multiply operator not built-in)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// rename redundant Boolean multiply operators</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>zcode</name> <init>= <expr><name><name>mult</name><operator>-&gt;</operator><name>ztype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>xcode</name> <operator>&gt;=</operator> <name>GB_UDT_code</name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (x and y type not built-in)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>zcode</name> <operator>&gt;=</operator> <name>GB_UDT_code</name></expr></argument>,
        <argument><expr><literal type="string">"invalid semiring (z type not built-in)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>xcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// z = mult(x,y) where both x and y are Boolean.</comment>
        <comment type="line">// DIV becomes FIRST</comment>
        <comment type="line">// RDIV becomes SECOND</comment>
        <comment type="line">// MIN and TIMES become LAND</comment>
        <comment type="line">// MAX and PLUS become LOR</comment>
        <comment type="line">// NE, ISNE, MINUS, and RMINUS become LXOR</comment>
        <comment type="line">// ISEQ becomes EQ</comment>
        <comment type="line">// ISGT becomes GT</comment>
        <comment type="line">// ISLT becomes LT</comment>
        <comment type="line">// ISGE becomes GE</comment>
        <comment type="line">// ISLE becomes LE</comment>
        <expr_stmt><expr><name>mult_binop_code</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>mult_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// Only the LAND, LOR, LXOR, and EQ monoids remain if z is</comment>
        <comment type="line">// Boolean.  MIN, MAX, PLUS, and TIMES are renamed.</comment>
        <expr_stmt><expr><name>add_binop_code</name> <operator>=</operator> <call><name>GB_boolean_rename</name> <argument_list>(<argument><expr><name>add_binop_code</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// launch the switch factory</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_FC32_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 27 single complex semirings</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_SECOND_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PAIR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MINUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_TIMES_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_DIV_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RDIV_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RMINUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_FC32</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_FC32</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_FC32</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>
            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_FC64_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 27 double complex semirings</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_SECOND_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PAIR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MINUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_TIMES_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_DIV_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RDIV_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RMINUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_FC64</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_FC64</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>    :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_FC64</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>
            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>zcode</name> <operator>!=</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 1000 semirings with TxT-&gt;T multiply operators</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// x,y,z are all the same non-Boolean type</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_FIRST_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_FIRST_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRST_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_INT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_UINT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_INT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_UINT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_INT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_UINT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_INT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_UINT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_FP32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRST_FP64</name>   <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_SECOND_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_SECOND_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_SECOND_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_INT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_UINT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_INT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_UINT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_INT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_UINT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_INT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_UINT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_FP32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECOND_FP64</name>   <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECOND_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PAIR_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_PAIR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_PAIR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PAIR_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PAIR_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MIN_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_MIN_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_MIN_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MIN_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MIN_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_MAX_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MAX_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MAX_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MAX_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MAX_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_PLUS_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_PLUS_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_PLUS_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_PLUS_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PLUS_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MINUS_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_MINUS_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_MINUS_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_MINUS_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_INT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_UINT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_INT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_UINT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_INT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_UINT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_INT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_UINT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_FP32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_MINUS_FP64</name>   <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_MINUS_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RMINUS_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RMINUS_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RMINUS_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_INT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_UINT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_INT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_UINT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_INT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_UINT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_INT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_UINT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_FP32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RMINUS_FP64</name>   <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RMINUS_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RMINUS_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MIN_TIMES_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_MAX_TIMES_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_INT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_INT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_INT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_INT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_UINT8</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_UINT16</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_UINT32</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_UINT64</name><operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_FP32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GrB_PLUS_TIMES_SEMIRING_FP64</name>  <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_INT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_UINT8</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_INT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_UINT16</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_INT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_UINT32</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_INT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_UINT64</name> <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_FP32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_TIMES_FP64</name>   <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_TIMES_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_DIV_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_DIV_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_DIV_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_DIV_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_DIV_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_DIV_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RDIV_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_RDIV_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_RDIV_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_RDIV_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_RDIV_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_RDIV_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISEQ_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISEQ_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISEQ_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISEQ_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISEQ_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISEQ_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISNE_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISNE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISNE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISNE_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISNE_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISNE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISGT_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGT_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGT_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISLT_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLT_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLT_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLT_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISGE_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISGE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISGE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISGE_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISGE_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISGE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISLE_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_ISLE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_ISLE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_ISLE_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_ISLE_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_ISLE_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LOR_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LOR_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LOR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LOR_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LAND_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LAND_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LAND_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LAND_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case> <comment type="line">// with (5 monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_MIN_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_LXOR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_MAX_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_LXOR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_INT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_UINT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_INT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_UINT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_INT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_UINT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_INT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_UINT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_FP32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_LXOR_FP64</name>     <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_TIMES_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_INT8</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_UINT8</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_INT16</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_UINT16</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_INT32</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_UINT32</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_INT64</name>   <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_UINT64</name>  <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_FP32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_LXOR_FP64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_INT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_INT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_INT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_INT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_FP32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_FP64</name>      <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 64 bitwise semirings</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_BOR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXNOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BAND_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXNOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BAND_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BAND_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BAND_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BAND_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BXOR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXNOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BXNOR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXNOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXNOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXNOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BOR_BXNOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXNOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXNOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXNOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BAND_BXNOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXNOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXNOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXNOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXOR_BXNOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_BXNOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>zcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXNOR_UINT8</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXNOR_UINT16</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXNOR_UINT32</name>    <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_BXNOR_BXNOR_UINT64</name>    <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 80 positional semirings</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case>   <comment type="line">// z = first_i(A(i,k),y) == i</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTI_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTI_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_i1(A(i,k),y) == i+1</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTI1_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTI1_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case>   <comment type="line">// z = first_j(A(i,k),y) == k</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTJ_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTJ_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case>   <comment type="line">// z = first_j1(A(i,k),y) == k+1</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_FIRSTJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_FIRSTJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_FIRSTJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_FIRSTJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRSTJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case>   <comment type="line">// z = second_i(x,B(k,j)) == k</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDI_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDI_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDI_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDI_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case>   <comment type="line">// z = second_i1(x,B(k,j)) == k+1</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDI1_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDI1_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case>   <comment type="line">// z = second_j(x,B(i,j)) == j</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDJ_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDJ_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDJ_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDJ_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case>   <comment type="line">// z = second_j1(x,B(i,j)) == j+1</comment>

                <if_stmt><if>if <condition>(<expr><name>zcode</name> <operator>==</operator> <name>GB_INT64_code</name></expr>)</condition>
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDJ1_INT64</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                    <block>{<block_content>
                        <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MIN_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_MAX_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_TIMES_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_PLUS_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECONDJ1_INT32</name><operator>)</operator></expr> ;</return>
                        <default>default:</default> <empty_stmt>;</empty_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block></else></if_stmt>
                <break>break ;</break>

            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xcode</name> <operator>!=</operator> <name>GB_BOOL_code</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 300 semirings with TxT -&gt; bool multiply operators</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// x,y are one of the 10 non-Boolean types, z is Boolean</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_NE_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_NE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_NE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_NE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_NE_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_NE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GT_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LT_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GE_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LE_binop_code</name></expr>  :</case> <comment type="line">// with (5 bool monoids) x (10 nonboolean types)</comment>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>

                    <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_INT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_UINT8</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_INT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_UINT16</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_INT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_UINT32</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_INT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_UINT64</name>     <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_FP32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_FP64</name>       <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_INT8</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_UINT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_INT16</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_UINT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_INT32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_UINT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_INT64</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_UINT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_FP32</name>         <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_FP64</name>         <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <case>case <expr><name>GB_ANY_binop_code</name></expr>  :</case>

                        <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                        <block>{<block_content>
                            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_INT8</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_UINT8</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_INT16</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_UINT16</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_INT32</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_UINT32</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_INT64</name>       <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_UINT64</name>      <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_FP32</name>        <operator>)</operator></expr> ;</return>
                            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_FP64</name>        <operator>)</operator></expr> ;</return>
                            <default>default  :</default> <empty_stmt>;</empty_stmt>
                        </block_content>}</block></switch>
                        <break>break ;</break>

                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// 55 purely Boolean semirings</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// x,y,z are all Boolean, and all operators are Boolean</comment>

        <switch>switch <condition>(<expr><name>mult_binop_code</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRST_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_FIRST_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_FIRST_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_FIRST_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_FIRST_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_FIRST_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_SECOND_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_SECOND_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_SECOND_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_SECOND_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_SECOND_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_SECOND_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PAIR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_PAIR_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_PAIR_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_PAIR_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_PAIR_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_PAIR_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LOR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LOR_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GrB_LAND_LOR_SEMIRING_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LOR_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GrB_LXNOR_LOR_SEMIRING_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LOR_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LAND_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GrB_LOR_LAND_SEMIRING_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LAND_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GrB_LXOR_LAND_SEMIRING_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LAND_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LAND_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LXOR_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LXOR_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LXOR_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LXOR_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LXOR_BOOL</name>   <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LXOR_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_EQ_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_EQ_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_EQ_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_EQ_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_EQ_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_EQ_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GT_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GT_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GT_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GT_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GT_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GT_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LT_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LT_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LT_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LT_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LT_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LT_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GE_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_GE_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_GE_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_GE_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_GE_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_GE_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LE_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>add_binop_code</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_LOR_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_LOR_LE_BOOL</name> <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LAND_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LAND_LE_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_LXOR_binop_code</name></expr>        :</case> <return>return <expr><operator>(</operator><name>GxB_LXOR_LE_BOOL</name><operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_EQ_binop_code</name></expr>          :</case> <return>return <expr><operator>(</operator><name>GxB_EQ_LE_BOOL</name>  <operator>)</operator></expr> ;</return>
                    <case>case <expr><name>GB_ANY_binop_code</name></expr>         :</case> <return>return <expr><operator>(</operator><name>GxB_ANY_LE_BOOL</name> <operator>)</operator></expr> ;</return>
                    <default>default  :</default> <empty_stmt>;</empty_stmt>
                </block_content>}</block></switch>
                <break>break ;</break>

            <default>default  :</default> <empty_stmt>;</empty_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// not a built-in semiring</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <macro><name>ERROR</name> <argument_list>(<argument><literal type="string">"invalid semiring (not found)"</literal></argument>)</argument_list></macro>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
