<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbextracttuples.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbextracttuples: extract all entries from a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Usage:</comment>

<comment type="line">// [I J X] = GrB.extracttuples (A)</comment>
<comment type="line">// [I J X] = GrB.extracttuples (A, desc)</comment>

<comment type="line">// The desciptor is optional.  If present, it must be a struct.</comment>

<comment type="line">// desc.base = 'zero-based':    I and J are returned as 0-based int64 indices</comment>
<comment type="line">// desc.base = 'one-based int': I and J are returned as 1-based int64 indices</comment>
<comment type="line">// desc.base = 'one-based':     I and J are returned as 1-based double indices</comment>
<comment type="line">// desc.base = 'default':       'one-based', unless max(size(A)) &gt; flintmax,</comment>
<comment type="line">//                              in which case 'one-based int' is used.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: [I,J,X] = GrB.extracttuples (A, desc)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>nargin</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the optional descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>base_enum_t</name></type> <name>base</name> <init>= <expr><name>BASE_DEFAULT</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>kind_enum_t</name></type> <name>kind</name> <init>= <expr><name>KIND_FULL</name></expr></init></decl> ;</decl_stmt>              <comment type="line">// ignored</comment>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name> <init>= <expr><name>GxB_NO_FORMAT</name></expr></init></decl> ;</decl_stmt>      <comment type="line">// ignored</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>                          <comment type="line">// ignored</comment>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content> 
        <expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>gb_mxarray_to_descriptor</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>nargin</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kind</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>sparsity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>base</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>xtype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine what to extract</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>extract_I</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>extract_J</name> <init>= <expr><operator>(</operator><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>extract_X</name> <init>= <expr><operator>(</operator><name>nargout</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate I and J</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>s</name> <init>= <expr><call><name>MAX</name> <argument_list>(<argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><ternary><condition><expr><name>extract_I</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><ternary><condition><expr><name>extract_J</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the tuples and export X</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_BOOL</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_BOOL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT8</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT8</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT16</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT16</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT32</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_INT64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT8</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_UINT8</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT16</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_UINT16</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT32</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_UINT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_UINT64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_UINT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP32</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_FP32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC32_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_extractTuples_FC32</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GxB_FC32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><ternary><condition><expr><name>extract_X</name></expr> ?</condition><then> <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_extractTuples_FC64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>extract_X</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>X</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GxB_FC64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if zero-based or one-based</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>BASE_DEFAULT</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MAX</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>FLINTMAX</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// the matrix is too large for I and J to be returned as double</comment>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <name>BASE_1_INT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// this is the typical case</comment>
            <expr_stmt><expr><name>base</name> <operator>=</operator> <name>BASE_1_DOUBLE</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export I and J</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <name>BASE_0_INT64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export I and J in their native zero-based integer format</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>extract_I</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>I</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>extract_J</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>J</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>base</name> <operator>==</operator> <name>BASE_1_DOUBLE</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export I and J as double one-based integers</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>extract_I</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>I_double</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_helper1</name> <argument_list>(<argument><expr><name>I_double</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>I</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>I_double</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>extract_J</name></expr>)</condition>
        <block>{<block_content> 
            <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>J_double</name> <init>= <expr><call><name>mxMalloc</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GB_helper1</name> <argument_list>(<argument><expr><name>J_double</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>J</name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>J_double</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>base</name> <operator>==</operator> <name>BASE_1_INT64</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export I and J as int64 one-based integers</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>extract_I</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_helper1i</name> <argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>I</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>I</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>extract_J</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><call><name>GB_helper1i</name> <argument_list>(<argument><expr><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>J</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>&amp;</operator><name>J</name><operator>)</operator></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>GrB_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
