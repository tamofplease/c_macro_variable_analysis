<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_norm_kind.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_norm_kind: determine the kind of norm to compute</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// 'fro':       Frobenius norm</comment>
<comment type="line">// 1:           1-norm</comment>
<comment type="line">// 2:           2-norm</comment>
<comment type="line">// INFINITY:    inf-norm</comment>
<comment type="line">// -INFINITY:   (-inf)-norm</comment>

<function><type><name>int64_t</name></type> <name>gb_norm_kind</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>mxIsChar</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>string</name> <index>[<expr><literal type="number">65</literal></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"kind"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"fro"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// unknown string</comment>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown norm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>mxGetScalar</name> <argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>INFINITY</name></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>INT64_MAX</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><name>INFINITY</name></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><name>INT64_MIN</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content> 
            <return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>x</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unknown norm"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
