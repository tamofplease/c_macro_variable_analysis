<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_mxstring_to_selectop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_mxstring_to_selectop: get GraphBLAS select operator from a built-in string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Returns a GrB_IndexUnaryOp or a GxB_SelectOp</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gb_mxstring_to_selectop</name>
<parameter_list>(
    <comment type="line">// outputs: one of the outputs is non-NULL and the other NULL</comment>
    <parameter><decl><type><name>GrB_IndexUnaryOp</name> <modifier>*</modifier></type><name>idxunop</name></decl></parameter>,          <comment type="line">// GrB_IndexUnaryOp, if found</comment>
    <parameter><decl><type><name>GxB_SelectOp</name> <modifier>*</modifier></type><name>selop</name></decl></parameter>,                <comment type="line">// GxB_SelectOp if found</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>thunk_required</name></decl></parameter>,               <comment type="line">// true if op requires a thunk scalar</comment>
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>op_is_positional</name></decl></parameter>,             <comment type="line">// true if op is positional</comment>
    <comment type="line">// input/output:</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ithunk</name></decl></parameter>,
    <comment type="line">// inputs:</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>mxstring</name></decl></parameter>,            <comment type="line">// built-in string</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>atype</name></decl></parameter>                <comment type="line">// type of A, or NULL if not present</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><call><name>gb_mxarray_is_empty</name> <argument_list>(<argument><expr><name>mxstring</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid selectop"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>opstring</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>gb_mxstring_to_string</name> <argument_list>(<argument><expr><name>opstring</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>mxstring</name></expr></argument>, <argument><expr><literal type="string">"select operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a select operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_string_to_selectop</name> <argument_list>(<argument><expr><name>idxunop</name></expr></argument>, <argument><expr><name>selop</name></expr></argument>, <argument><expr><name>thunk_required</name></expr></argument>, <argument><expr><name>op_is_positional</name></expr></argument>,
        <argument><expr><name>ithunk</name></expr></argument>, <argument><expr><name>opstring</name></expr></argument>, <argument><expr><name>atype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
