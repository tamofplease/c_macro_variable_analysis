<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_export_to_mxsparse.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_export_to_mxsparse: export a GrB_Matrix to a built-in sparse matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// The input GrB_Matrix A is exported to a built-in sparse mxArray S, and freed.</comment>

<comment type="line">// The input GrB_Matrix A may be shallow or deep.  The output is a standard</comment>
<comment type="line">// built-in sparse matrix as an mxArray.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>gb_export_to_mxsparse</name>  <comment type="line">// return exported built-in sparse matrix S</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_handle</name></decl></parameter>        <comment type="line">// matrix to export; freed on output</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>A_handle</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>A_handle</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"internal error 2"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// typecast to a native built-in sparse type and free A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>T</name></decl> ;</decl_stmt>              <comment type="line">// T will always be deep</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>*</operator><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get</name> <argument_list>(<argument><expr><operator>*</operator><name>A_handle</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <name>GxB_BY_COL</name> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>type</name> <operator>==</operator> <name>GrB_BOOL</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>GrB_FP64</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>GxB_FC64</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// A is already in a native built-in sparse matrix type, by column</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><operator>*</operator><name>A_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// A is shallow so make a deep copy</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>*</operator><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// A is already deep; just transplant it into T</comment>
            <expr_stmt><expr><name>T</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>A_handle</name><operator>)</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>A_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// typecast A to logical, double or double complex, and format by column</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Built-in sparse matrices can only be logical, double, or double</comment>
        <comment type="line">// complex.  These correspond to GrB_BOOL, GrB_FP64, and GxB_FC64,</comment>
        <comment type="line">// respectively.  A is typecasted to logical, double or double complex,</comment>
        <comment type="line">// and converted to CSC format if not already in that format.</comment>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast to double complex, by col</comment>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GxB_FC64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content> 
            <comment type="line">// typecast to logical, by col</comment>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <comment type="line">// typecast to double, by col</comment>
            <expr_stmt><expr><name>type</name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>T</name> <operator>=</operator> <call><name>gb_typecast</name> <argument_list>(<argument><expr><operator>*</operator><name>A_handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><name>A_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// ensure T is deep</comment>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"internal error 7"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// drop zeros from T</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the new built-in sparse matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>nvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>S</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate an empty sparse matrix of the right type and size</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparseLogicalMatrix</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxCOMPLEX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export the content of T as a sparse CSC matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Tp_size</name></decl>, <decl><type ref="prev"/><name>Ti_size</name></decl>, <decl><type ref="prev"/><name>Tx_size</name></decl>, <decl><type ref="prev"/><name>type_size</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Tp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ti</name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Tx</name></decl> ;</decl_stmt>

        <comment type="line">// pass jumbled as NULL to indicate the matrix must be sorted</comment>
        <comment type="line">// pass iso as NULL to indicate it cannot be uniform valued</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Tp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tp_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ti_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Tx_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>Ti_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"internal error 8"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>Tp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Ti</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Tx</name> <operator>==</operator> <name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"internal error 9"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// allocate an empty sparse matrix of the right type, then set content</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparseLogicalMatrix</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>type_size</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxCOMPLEX</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>type_size</name> <operator>=</operator> <literal type="number">16</literal></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else <comment type="line">// type == GrB_FP64</comment>
        <block>{<block_content> 
            <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>type_size</name> <operator>=</operator> <literal type="number">8</literal></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// set the size</comment>
        <expr_stmt><expr><call><name>mxSetM</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetN</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>nzmax</name> <init>= <expr><call><name>GB_IMIN</name> <argument_list>(<argument><expr><name>Ti_size</name> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                                 <argument><expr><name>Tx_size</name> <operator>/</operator> <name>type_size</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxSetNzmax</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>nzmax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// set the column pointers</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetJc</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetJc</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>(</operator><name>mwIndex</name> <operator>*</operator><operator>)</operator> <name>Tp</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// set the row indices</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetIr</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetIr</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><operator>(</operator><name>mwIndex</name> <operator>*</operator><operator>)</operator> <name>Ti</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// set the values</comment>
        <comment type="line">// use mxGetData and mxSetData (best for Octave, fine for MATLAB)</comment>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>mxGetData</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name>gb_mxfree</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mxSetData</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>Tx</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return the new built-in sparse matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <return>return <expr><operator>(</operator><name>S</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
