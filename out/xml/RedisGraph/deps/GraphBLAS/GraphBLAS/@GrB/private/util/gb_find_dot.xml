<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_find_dot.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_find_dot:  find the first two occurences of '.' in a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// s has the form 'plus.times.double' for a semiring, or 'plus.single' for a</comment>
<comment type="line">// binary operator, or 'abs.int8' for a unary operator.  In all such cases, one</comment>
<comment type="line">// or two dots ('.') must be found.  If no dots are found, position [0] and [1]</comment>
<comment type="line">// are both -1.  If one dot is found, s [position [0]] == '.', and position [1]</comment>
<comment type="line">// is -1.  If two dots are found, s [position [0]] == '.' is the first dot, and</comment>
<comment type="line">// s [position [1]] == '.' is the second.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>gb_find_dot</name>            <comment type="line">// find 1st and 2nd dot ('.') in a string</comment>
<parameter_list>(
    <parameter><decl><type><name>int32_t</name></type> <name><name>position</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,   <comment type="line">// positions of one or two dots</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>           <comment type="line">// null-terminated string to search</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>position</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name><name>s</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content> 
                <comment type="line">// first dot has been found</comment>
                <expr_stmt><expr><name><name>position</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content> 
                <comment type="line">// 2nd dot has been found; the search is done</comment>
                <expr_stmt><expr><name><name>position</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr> ;</expr_stmt>
                <return>return ;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
