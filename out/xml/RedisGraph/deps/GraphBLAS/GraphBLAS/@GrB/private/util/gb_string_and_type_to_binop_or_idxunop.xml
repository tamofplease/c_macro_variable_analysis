<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_string_and_type_to_binop_or_idxunop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_string_and_type_to_binop_or_idxunop: get operator from a string and type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<comment type="line">// op_name: a built-in string defining the operator name:</comment>
<comment type="line">//  1st, 2nd, any, pair (same as oneb), min, max, +, -, rminus, *, /, \</comment>
<comment type="line">//  iseq, isne, isgt, islt, isge, isle,</comment>
<comment type="line">//  ==, ~=, &gt;, &lt;, &gt;=, &lt;=,</comment>
<comment type="line">//  ||, &amp;&amp;, xor, xnor</comment>
<comment type="line">//  atan2, hypot, fmod, remainder, copysign, cmplx, pow, pow2</comment>

<comment type="line">//  bitwise operators:</comment>
<comment type="line">//      bitand, bitor, bitxor, bitxnor, bitget, bitset, bitclr, bitshift</comment>

<comment type="line">// positional operators:</comment>
<comment type="line">//      firsti0, firsti1, firstj0, firstj1, secondi0, secondi1, secondj0,</comment>
<comment type="line">//      secondj1.  The default type is int64</comment>

<comment type="line">// index unary operators:</comment>
<comment type="line">//      tril, triu, diag, offdiag, diagindex, rowindex, rowle, rowgt,</comment>
<comment type="line">//      colindex, colle, colgt</comment>

<comment type="line">// The following synonyms are allowed for specifying these operators:</comment>
<comment type="line">//</comment>
<comment type="line">//      1st   first</comment>
<comment type="line">//      2nd   second</comment>
<comment type="line">//      pair  oneb</comment>
<comment type="line">//      +     plus</comment>
<comment type="line">//      -     minus</comment>
<comment type="line">//      *     times</comment>
<comment type="line">//      /     div</comment>
<comment type="line">//      \     rdiv</comment>
<comment type="line">//      ==    eq</comment>
<comment type="line">//      ~=    ne</comment>
<comment type="line">//      &gt;     gt</comment>
<comment type="line">//      &lt;     lt</comment>
<comment type="line">//      &gt;=    ge</comment>
<comment type="line">//      &lt;=    le</comment>
<comment type="line">//      ||    |     or  lor</comment>
<comment type="line">//      &amp;&amp;    &amp;     and land</comment>
<comment type="line">//      xor   lxor</comment>
<comment type="line">//      pow2  ldexp</comment>

<function><type><name>GrB_BinaryOp</name></type> <name>gb_string_and_type_to_binop_or_idxunop</name>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>op_name</name></decl></parameter>,        <comment type="line">// name of the operator, as a string</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>,        <comment type="line">// type of the x,y inputs to the operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>type_not_given</name></decl></parameter>,  <comment type="line">// true if no type present in the string</comment>
    <parameter><decl><type><name>GrB_IndexUnaryOp</name> <modifier>*</modifier></type><name>idxunop</name></decl></parameter>,          <comment type="line">// idxunop from the string</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ithunk</name></decl></parameter>                     <comment type="line">// thunk for idxunop</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>idxunop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1st"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRST_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRST_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2nd"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_SECOND_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECOND_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECOND_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ANY_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"pair"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"oneb"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">// GrB_ONEB is the new name for GxB_PAIR</comment>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_ONEB_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONEB_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ONEB_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MIN_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <comment type="line">// no complex min</comment>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MAX_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <comment type="line">// no complex max</comment>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"plus"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_PLUS_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_PLUS_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"minus"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_MINUS_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_MINUS_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_MINUS_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"rminus"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RMINUS_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"times"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_TIMES_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_TIMES_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_DIV_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_DIV_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_DIV_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"\\"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"rdiv"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_RDIV_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"iseq"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISEQ_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isne"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISNE_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isgt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"islt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isge"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISGE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"isle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ISLE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"=="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>    <comment type="line">// == GrB_LXNOR</comment>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_EQ_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EQ_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_EQ_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"~="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_NE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_NE_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_NE_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ge"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_GE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LE_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"||"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"|"</literal></expr></argument>)</argument_list></call>  <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LOR</name>       <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LOR_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&amp;&amp;"</literal></expr></argument>)</argument_list></call>  <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call>   <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"land"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LAND</name>       <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LAND_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lxor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LXOR</name>       <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LXOR_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"lxnor"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"xnor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_LXNOR</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt> <comment type="line">// == GrB_EQ_BOOL</comment>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"atan2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN2_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_ATAN2_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"hypot"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_HYPOT_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_HYPOT_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"fmod"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FMOD_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FMOD_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"remainder"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_REMAINDER_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_REMAINDER_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"copysign"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COPYSIGN_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_COPYSIGN_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"cmplx"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CMPLX_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_CMPLX_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ldexp"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"pow2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LDEXP_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_LDEXP_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"pow"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_BOOL</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_FP32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_FP64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_FC32</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_POW_FC64</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitand"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BAND_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitxor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXOR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitxnor"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BXNOR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitget"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BGET_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitset"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSET_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitclr"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BCLR_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"bitshift"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content> 

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_INT8</name>  <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_INT16</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_UINT8</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_BSHIFT_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firsti0"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1sti0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTI_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTI_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firsti1"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1sti1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firsti"</literal></expr></argument>  )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1sti"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTI1_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTI1_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firstj0"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1stj0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firstj1"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1stj1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"firstj"</literal></expr></argument>  )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"1stj"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ1_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FIRSTJ1_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondi0"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndi0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDI_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDI_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondi1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndi1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondi"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndi"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDI1_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDI1_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondj0"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndj0"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDJ_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDJ_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondj1"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndj1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"secondj"</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"2ndj"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name>
        <operator>||</operator>  <name>type_not_given</name></expr>   )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDJ1_INT64</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_SECONDJ1_INT32</name> <operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ignore"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"ignore_dup"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// valid for build only</comment>
        <return>return <expr><operator>(</operator><name>GxB_IGNORE_DUP</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return an idxunop</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>is32</name> <init>= <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>GrB_INT32</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>idxunop</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>

        <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>ithunk</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"thunk missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"tril"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_TRIL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"triu"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_TRIU</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"diag"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_DIAG</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"diagindex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>is32</name></expr> ?</condition><then> <expr><name>GrB_DIAGINDEX_INT32</name></expr> </then><else>: <expr><name>GrB_DIAGINDEX_INT64</name></expr></else></ternary></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"offdiag"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_OFFDIAG</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"rowindex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>is32</name></expr> ?</condition><then> <expr><name>GrB_ROWINDEX_INT32</name></expr> </then><else>: <expr><name>GrB_ROWINDEX_INT64</name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"rowle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_ROWLE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"rowgt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_ROWGT</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"colindex"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><name>is32</name></expr> ?</condition><then> <expr><name>GrB_COLINDEX_INT32</name></expr> </then><else>: <expr><name>GrB_COLINDEX_INT64</name></expr></else></ternary></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>++</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"colle"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_COLLE</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>op_name</name></expr></argument>, <argument><expr><literal type="string">"colgt"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content> 
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>=</operator> <name>GrB_COLGT</name></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ithunk</name><operator>)</operator><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>idxunop</name><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// this is not an error condition</comment>
            <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// unknown type or operator</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// the type can be NULL for positional operators, but no others</comment>

    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERROR2</name> <argument_list>(<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>, <argument><expr><name>op_name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
