<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/mexfunctions/gbargminmax.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbargminmax: argmin or argmax of a GraphBLAS matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// usage:</comment>

<comment type="line">// [x,p] = gbargminmax (A, minmax, dim)</comment>

<comment type="line">// where minmax is 0 for min or 1 for max, and where dim = 1 to compute the</comment>
<comment type="line">// argmin/max of each column of A, dim = 2 to compute the argmin/max of each</comment>
<comment type="line">// row of A, or dim = 0 to compute the argmin/max of all of A.  For dim = 1 or</comment>
<comment type="line">// 2, x and p are vectors of the same size.  For dim = 0, x is a scalar and p</comment>
<comment type="line">// is 2-by-1, containing the row and column index of the argmin/max of A.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"usage: [x,p] = gbargminmax (A, minmax, dim)"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_argminmax: compute argmin/max of each row/column of A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>gb_argminmax</name>
<parameter_list>(
    <comment type="line">// output</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,              <comment type="line">// min/max value in each row/col of A</comment>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,              <comment type="line">// index of min/max value in each row/col of A</comment>
    <comment type="line">// input</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>dim</name></decl></parameter>,                    <comment type="line">// dim=1: cols of A, dim=2: rows of A</comment>
    <parameter><decl><type><name>GrB_Semiring</name></type> <name>minmax_first</name></decl></parameter>,  <comment type="line">// MIN_FIRST_type or MAX_FIRST_type semiring</comment>
    <parameter><decl><type><name>GrB_Semiring</name></type> <name>any_equal</name></decl></parameter>      <comment type="line">// ANY_EQ semiring</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the size and type of A</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create outputs x and p, and the iso full vector y</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>y</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>G</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>D</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>n</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dim</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ncols</name></expr> </then><else>: <expr><name>nrows</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>m</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dim</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>nrows</name></expr> </then><else>: <expr><name>ncols</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>dim</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>GrB_DESC_T0</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// y (:) = 1, an iso full vector</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_INT64</name> <argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute x = min/max(A)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// for dim=1: x = min/max (A) where x(j) = min/max (A (:,j))</comment>
    <comment type="line">// for dim=2: x = min/max (A) where x(i) = min/max (A (i,:))</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><operator>*</operator><name>x</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>minmax_first</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// D = diag (x)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// note: typecasting from an m-by-1 GrB_Matrix to a GrB_Vector is</comment>
    <comment type="line">// not allowed by the GraphBLAS C API, but it can be done in SuiteSparse.</comment>
    <comment type="line">// A more portable method would construct x as a GrB_Vector,</comment>
    <comment type="line">// but using x as a GrB_Matrix simplifies the gb_export.</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_diag</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Vector</name><operator>)</operator> <operator>*</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute G, where G(i,j)=1 if A(i,j) is the min/max in its row/col</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>G</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// G = A*D using the ANY_EQ_type semiring</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// G = D*A using the ANY_EQ_type semiring</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// drop explicit zeros from G</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_NONZERO</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// extract the positions of the entries in G</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// for dim=1: find the position of the min/max entry in each column:</comment>
    <comment type="line">// p = G'*y, so that p(j) = i if x(j) = A(i,j) = min/max (A (:,j)).</comment>

    <comment type="line">// for dim=2: find the position of the min/max entry in each row:</comment>
    <comment type="line">// p = G*y, so that p(i) = j if x(i) = A(i,j) = min/max (A (i,:)).</comment>

    <comment type="line">// For both cases, use the SECONDI1 operator since built-in indexing is</comment>
    <comment type="line">// 1-based.  The ANY monoid would be faster, but this uses MIN so that the</comment>
    <comment type="line">// result for the user is repeatable.</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_MIN_SECONDI1_INT64</name></expr></argument>, <argument><expr><name>G</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// free workspace</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>G</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gbargminmax: mexFunction to compute the argmin/max of each row/column of A</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>gb_usage</name> <argument_list>(<argument><expr><name>nargin</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>nargout</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><call><name>gb_get_shallow</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_min</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator> <operator>(</operator><call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dim</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK_ERROR</name> <argument_list>(<argument><expr><name><name>dim</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>dim</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"invalid dim"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// select the semirings</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>minmax_first</name></decl>, <decl><type ref="prev"/><name>any_equal</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>is_min</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// semirings for argmin</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GxB_LAND_FIRST_BOOL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_BOOL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_INT8</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT8</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_INT16</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT16</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_INT32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_INT64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_UINT8</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT8</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_UINT16</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT16</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_UINT32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_UINT64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_FP32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_FP32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MIN_FIRST_SEMIRING_FP64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_FP64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// semirings for argmax</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GxB_LOR_FIRST_BOOL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_BOOL</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_INT8</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT8</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_INT16</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT16</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_INT32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_INT64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_INT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_UINT8</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT8</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_UINT16</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT16</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_UINT32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_UINT64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_UINT64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_FP32</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_FP32</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>minmax_first</name> <operator>=</operator> <name>GrB_MAX_FIRST_SEMIRING_FP64</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>any_equal</name> <operator>=</operator> <name>GxB_ANY_EQ_FP64</name></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// compute the argmin/max</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>x</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// scalar argmin/max of all of A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// [x1,p1] = argmin/max of each column of A</comment>
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>p1</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>gb_argminmax</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>minmax_first</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// [x,p] = argmin/max of each entry in x</comment>
        <expr_stmt><expr><call><name>gb_argminmax</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>minmax_first</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// get the row and column index of the overall argmin/max of A</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name><name>I</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals0</name></decl>, <decl><type ref="prev"/><name>nvals1</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals0</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nvals0</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nvals1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// I [0] = p [0], the row index of the global argmin/max of A</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// I [1] = p [I [0]-1] (use -1 since I[0] is 1-based),</comment>
            <comment type="line">// which is the column index of the global argmin/max of A</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractElement_INT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>I</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// free workspace and create p = [row, col] </comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nvals0</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nvals1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT64</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT64</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>dim</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// argmin/max of each column of A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>gb_argminmax</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>minmax_first</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>


        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// argmin/max of each row of A</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><call><name>gb_argminmax</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>minmax_first</name></expr></argument>, <argument><expr><name>any_equal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>gb_export</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>KIND_GRB</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>GB_WRAPUP</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
