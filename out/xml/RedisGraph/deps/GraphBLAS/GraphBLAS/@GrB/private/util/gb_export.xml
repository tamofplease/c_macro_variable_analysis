<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_export.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_export: export a GrB_Matrix as a built-in matrix or GraphBLAS struct</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// mxArray pargout [0] = gb_export (&amp;C, kind) ; exports C as a built-in matrix</comment>
<comment type="line">// and frees the remaining content of C.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>gb_export</name>              <comment type="line">// return the exported built-in matrix or struct</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>C_handle</name></decl></parameter>,       <comment type="line">// GrB_Matrix to export and free</comment>
    <parameter><decl><type><name>kind_enum_t</name></type> <name>kind</name></decl></parameter>            <comment type="line">// GrB, sparse, full, or built-in</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// determine if all entries in C are present</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_full</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>KIND_BUILTIN</name> <operator>||</operator> <name>kind</name> <operator>==</operator> <name>KIND_FULL</name></expr>)</condition>
    <block>{<block_content> 
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><operator>*</operator><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>*</operator><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><operator>*</operator><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>is_full</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name><operator>)</operator></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>KIND_BUILTIN</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// export as full if all entries present, or sparse otherwise</comment>
        <expr_stmt><expr><name>kind</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>is_full</name><operator>)</operator></expr> ?</condition><then> <expr><name>KIND_FULL</name></expr> </then><else>: <expr><name>KIND_SPARSE</name></expr></else></ternary></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// export the matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <name>KIND_SPARSE</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export C as a built-in sparse matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// Typecast to double, if C is integer (int8, ..., uint64)</comment>
        <return>return <expr><operator>(</operator><call><name>gb_export_to_mxsparse</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <name>KIND_FULL</name></expr>)</condition>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export C as a built-in full matrix, adding explicit zeros if needed</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// No typecasting is needed since built-in full matrices support all</comment>
        <comment type="line">// the same types.</comment>

        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_full</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// expand C with explicit zeros so all entries are present</comment>
            <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>gb_expand_to_full</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
            <macro><name>CHECK_ERROR</name> <argument_list>(<argument>GB_is_shallow (*C_handle)</argument>, <argument><literal type="string">"internal error 707"</literal></argument>)</argument_list></macro>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// C is shallow so make a deep copy</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><operator>*</operator><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>CHECK_ERROR</name> <argument_list>(<argument>GB_is_shallow (*C_handle)</argument>, <argument><literal type="string">"internal error 717"</literal></argument>)</argument_list></macro>

        <comment type="line">// export as a full matrix, held by column, not uniform-valued</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Cx_size</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_FullC</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Cx_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <return>return <expr><operator>(</operator><call><name>gb_export_to_mxfull</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Cx</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>

    </block_content>}</block></if>
    <else>else <comment type="line">// kind == KIND_GRB</comment>
    <block>{<block_content> 

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// export C as a built-in struct containing a verbatim GrB_Matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// No typecasting is needed since the built-in struct can hold all of</comment>
        <comment type="line">// the opaque content of the GrB_Matrix.</comment>
        <return>return <expr><operator>(</operator><call><name>gb_export_to_mxstruct</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

</unit>
