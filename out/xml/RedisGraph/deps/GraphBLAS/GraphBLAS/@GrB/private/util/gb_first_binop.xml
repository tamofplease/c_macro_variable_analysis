<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/GraphBLAS/@GrB/private/util/gb_first_binop.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// gb_first_binop: return the GrB_FIRST operator for a given type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gb_interface.h"</cpp:file></cpp:include>

<function><type><name>GrB_BinaryOp</name></type> <name>gb_first_binop</name>         <comment type="line">// return GrB_FIRST_[type] operator</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>
)</parameter_list>
<block>{<block_content> 

    <if_stmt><if>if      <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GrB_FIRST_BOOL</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GrB_FIRST_INT8</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition><block type="pseudo"><block_content>  <return>return <expr><operator>(</operator><name>GrB_FIRST_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition><block type="pseudo"><block_content>  <return>return <expr><operator>(</operator><name>GrB_FIRST_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition><block type="pseudo"><block_content>  <return>return <expr><operator>(</operator><name>GrB_FIRST_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition><block type="pseudo"><block_content>  <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT8</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FIRST_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GrB_FIRST_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GrB_FIRST_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GxB_FIRST_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>type</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition><block type="pseudo"><block_content>   <return>return <expr><operator>(</operator><name>GxB_FIRST_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ERROR</name> <argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
