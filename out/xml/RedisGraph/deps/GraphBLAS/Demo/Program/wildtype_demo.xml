<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Program/wildtype_demo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Program/wildtype_demo: an arbitrary user-defined type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Each "scalar" entry of this type consists of a 4x4 matrix and a string of</comment>
<comment type="line">// length 64.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__INTEL_COMPILER</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>58</name> <name>167</name> <name>144</name> <name>177</name> <name>181</name> <name>186</name> <name>188</name> <name>589</name> <name>593</name> <name>869</name> <name>981</name> <name>1418</name> <name>1419</name> <name>1572</name> <name>1599</name> <name>2259</name> <name>2282</name> <name>2557</name> <name>2547</name> <name>3280</name> <name>)</name></cpp:pragma>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-parameter"</cpp:literal></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>( <argument><expr><name>__cplusplus</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wwrite-strings"</cpp:literal></cpp:pragma>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wincompatible-pointer-types"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// the wildtype</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>float</name></type> <name><name>stuff</name> <index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>whatstuff</name> <index>[<expr><literal type="number">64</literal></expr>]</index></name></decl> ;</decl_stmt>
}</block></struct></type>
<name>wildtype</name> ;</typedef>                      <comment type="line">// C version of wildtype</comment>

<comment type="line">// repeat the typedef as a string, to give to GraphBLAS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDTYPE_DEFN</name></cpp:macro>           \
<cpp:value>"typedef struct "               \
"{ "                            \
   "float stuff [4][4] ; "      \
   "char whatstuff [64] ; "     \
"} "                            \
"wildtype ;"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Type</name></type> <name>WildType</name></decl> ;</decl_stmt>             <comment type="line">// GraphBLAS version of wildtype</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// wildtype_print: print a "scalar" value of wildtype</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>wildtype_print</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>wildtype</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\na wildtype scalar: %s [%s]\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>whatstuff</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%10.1f "</literal></expr></argument>, <argument><expr><name><name>x</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// wildtype_print_matrix: print a matrix of wildtype scalars</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This examines each entry of A, which is costly if A is very large.  A better</comment>
<comment type="line">// method would extract all the tuples via GrB_Matrix_extractTuples, and then</comment>
<comment type="line">// to print those, or to use the GxB_*print methods.  This function is just to</comment>
<comment type="line">// illustrate the GrB_Matrix_extractElement_UDT method.</comment>

<function><type><name>void</name></type> <name>wildtype_print_matrix</name> <parameter_list>(<parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nPrinting the matrix with GxB_Matrix_fprint:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>WildType</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nThe matrix %s is not wild enough to print.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return ;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl>, <decl><type ref="prev"/><name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============= printing the WildType matrix: %s (%d-by-%d"</literal>
        <literal type="string">" with %d entries)\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>nrows</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>ncols</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>wildtype</name></type> <name>scalar</name></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------- %s(%d,%d):\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n============= that was the WildType matrix %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// add two wildtype "scalars"</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>wildtype_add</name> <parameter_list>(<parameter><decl><type><name>wildtype</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wildtype</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wildtype</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>y</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this was added"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// the newlines (\n) are optional.  They just make GxB_print output readable:</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDTYPE_ADD_DEFN</name></cpp:macro>                                                   \
<cpp:value>"void wildtype_add (wildtype *z, const wildtype *x, const wildtype *y) \n"  \
"{ \n"                                                                      \
"   for (int i = 0 ; i &lt; 4 ; i++) \n"                                       \
"   { \n"                                                                   \
"       for (int j = 0 ; j &lt; 4 ; j++) \n"                                   \
"       { \n"                                                               \
"           z-&gt;stuff [i][j] = x-&gt;stuff [i][j] + y-&gt;stuff [i][j] ; \n"       \
"       } \n"                                                               \
"   } \n"                                                                   \
"   strcpy (z-&gt;whatstuff, \"this was added\") ; \n"                         \
"} \n"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// multiply two wildtypes "scalars"</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>wildtype_mult</name> <parameter_list>(<parameter><decl><type><name>wildtype</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wildtype</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wildtype</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>z</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>y</name><operator>-&gt;</operator><name>stuff</name> <index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr> ;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>z</name><operator>-&gt;</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this was multiplied"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDTYPE_MULT_DEFN</name></cpp:macro>                                                  \
<cpp:value>"void wildtype_mult (wildtype *z, const wildtype *x, const wildtype *y) \n" \
"{ \n"                                                                      \
"   for (int i = 0 ; i &lt; 4 ; i++) \n"                                       \
"   { \n"                                                                   \
"       for (int j = 0 ; j &lt; 4 ; j++) \n"                                   \
"       { \n"                                                               \
"           z-&gt;stuff [i][j] = 0 ; \n"                                       \
"           for (int k = 0 ; k &lt; 4 ; k++) \n"                               \
"           { \n"                                                           \
"               z-&gt;stuff [i][j] += (x-&gt;stuff [i][k] * y-&gt;stuff [k][j]) ; \n"\
"           } \n"                                                           \
"       } \n"                                                               \
"   } \n"                                                                   \
"   strcpy (z-&gt;whatstuff, \"this was multiplied\") ; \n"                    \
"} \n"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// wildtype main program</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE</name></cpp:macro> \
<cpp:value>"----------------------------------------------------------------------------\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE2</name></cpp:macro> \
<cpp:value>"============================================================================\n"</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="line">// start GraphBLAS</comment>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>rmm_wrap_initialize</name> <argument_list>(<argument><expr><name>rmm_wrap_managed</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1000000L</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1000000000L</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_init</name> <argument_list>(<argument><expr><name>GxB_NONBLOCKING_GPU</name></expr></argument>, <argument><expr><name>rmm_wrap_malloc</name></expr></argument>,
        <argument><expr><name>rmm_wrap_calloc</name></expr></argument>, <argument><expr><name>rmm_wrap_realloc</name></expr></argument>, <argument><expr><name>rmm_wrap_free</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_set</name> <argument_list>(<argument><expr><name>GxB_GPU_CONTROL</name></expr></argument>, <argument><expr><name>GxB_GPU_ALWAYS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_GLOBAL_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"wildtype demo: nthreads %d\n"</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="block">/* alternative method via #defines:
    fprintf (stderr, LINE2 "SuiteSparse:GraphBLAS Version %d.%d.%d, %s\n" LINE2
        "%s" LINE "License: %s" LINE "GraphBLAS API Version %d.%d.%d, %s"
        " (http://graphblas.org)\n%s" LINE2, GxB_IMPLEMENTATION_MAJOR,
        GxB_IMPLEMENTATION_MINOR, GxB_IMPLEMENTATION_SUB,
        GxB_IMPLEMENTATION_DATE,  GxB_IMPLEMENTATION_ABOUT,
        GxB_IMPLEMENTATION_LICENSE, GxB_SPEC_MAJOR, GxB_SPEC_MINOR,
        GxB_SPEC_SUB, GxB_SPEC_DATE, GxB_SPEC_ABOUT) ;
    */</comment>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>library</name></decl> ;</decl_stmt>   <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_NAME</name></expr></argument>,     <argument><expr><operator>&amp;</operator><name>library</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>version</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_VERSION</name></expr></argument>,  <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>date</name></decl> ;</decl_stmt>      <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_DATE</name></expr></argument>,     <argument><expr><operator>&amp;</operator><name>date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>about</name></decl> ;</decl_stmt>     <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_ABOUT</name></expr></argument>,    <argument><expr><operator>&amp;</operator><name>about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name></decl> ;</decl_stmt>       <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_URL</name></expr></argument>,      <argument><expr><operator>&amp;</operator><name>url</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>license</name></decl> ;</decl_stmt>   <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_LICENSE</name></expr></argument>,  <argument><expr><operator>&amp;</operator><name>license</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cdate</name></decl> ;</decl_stmt>     <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_DATE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cdate</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ctime</name></decl> ;</decl_stmt>     <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_LIBRARY_COMPILE_TIME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctime</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>api_ver</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_API_VERSION</name></expr></argument>,      <argument><expr><name>api_ver</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>api_date</name></decl> ;</decl_stmt>  <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_API_DATE</name></expr></argument>,         <argument><expr><operator>&amp;</operator><name>api_date</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>api_about</name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_API_ABOUT</name></expr></argument>,        <argument><expr><operator>&amp;</operator><name>api_about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>api_url</name></decl> ;</decl_stmt>   <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_API_URL</name></expr></argument>,          <argument><expr><operator>&amp;</operator><name>api_url</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>LINE2</name> <literal type="string">"%s Version %d.%d.%d, %s\n"</literal> <name>LINE2</name> <literal type="string">"%s"</literal>
        <literal type="string">"(%s)\n"</literal> <name>LINE</name> <literal type="string">"License:\n%s"</literal> <name>LINE</name> <literal type="string">"GraphBLAS API Version %d.%d.%d, %s"</literal>
        <literal type="string">" (%s)\n%s"</literal> <name>LINE2</name></expr></argument>,
        <argument><expr><name>library</name></expr></argument>, <argument><expr><name><name>version</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>version</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>version</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>about</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
        <argument><expr><name>license</name></expr></argument>, <argument><expr><name><name>api_ver</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>api_ver</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>api_ver</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>api_date</name></expr></argument>, <argument><expr><name>api_url</name></expr></argument>,
        <argument><expr><name>api_about</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"compiled: %s %s\n"</literal></expr></argument>, <argument><expr><name>cdate</name></expr></argument>, <argument><expr><name>ctime</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>hyper_switch</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_HYPER_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hyper_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"hyper switch: %g\n"</literal></expr></argument>, <argument><expr><name>hyper_switch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>format</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>format</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"format: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>format</name> <operator>==</operator> <name>GxB_BY_ROW</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"CSR"</literal></expr> </then><else>: <expr><literal type="string">"CSC"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Mode</name></type> <name>mode</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_MODE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mode</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"mode: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>mode</name> <operator>==</operator> <name>GrB_BLOCKING</name><operator>)</operator></expr> ?</condition><then>
        <expr><literal type="string">"blocking"</literal></expr> </then><else>: <expr><literal type="string">"non-blocking"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nthreads_max</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_GLOBAL_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"max # of threads used internally: %d\n"</literal></expr></argument>, <argument><expr><name>nthreads_max</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create the WildType</comment>
    <expr_stmt><expr><call><name>GxB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildType</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>wildtype</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"wildtype"</literal></expr></argument>, <argument><expr><name>WILDTYPE_DEFN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>WildType</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get its properties</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Type_size</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"WildType size: %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>WildType</name></expr></argument>, <argument><expr><literal type="string">"WildType"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create a 10-by-10 WildType matrix, each entry is a 'scalar' WildType</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>wildtype</name></type> <name>scalar1</name></decl>, <decl><type ref="prev"/><name>scalar2</name></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>scalar1</name><operator>.</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal><operator>*</operator><name>i</name> <operator>+</operator> <name>j</name></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar1</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this is from scalar1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar1</name></expr></argument>, <argument><expr><literal type="string">"scalar1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// A(2,7) = scalar1</comment>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar1</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this is A(2,7)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// A(3,7) = scalar1 modified</comment>
    <expr_stmt><expr><name><name>scalar1</name><operator>.</operator><name>stuff</name> <index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">909</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar1</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this is A(3,7)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// A(2,4) = scalar1 modified again</comment>
    <expr_stmt><expr><name><name>scalar1</name><operator>.</operator><name>stuff</name> <index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">42</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar1</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this is A(2,4)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C = A'</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// scalar2 = C(7,2)</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><literal type="string">"got scalar2 = C(7,2)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar2</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"here is scalar2"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create the WildAdd operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>WildAdd</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildAdd</name></expr></argument>, 
        <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>wildtype_add</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>,
        <argument><expr><literal type="string">"wildtype_add"</literal></expr></argument>, <argument><expr><name>WILDTYPE_ADD_DEFN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>WildAdd</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create the WildMult operator</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>WildMult</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildMult</name></expr></argument>, 
        <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>wildtype_mult</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>,
        <argument><expr><literal type="string">"wildtype_mult"</literal></expr></argument>, <argument><expr><name>WILDTYPE_MULT_DEFN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>WildMult</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create a matrix B with B (7,2) = scalar2</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>WildType</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>scalar2</name><operator>.</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><name>j</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><literal type="string">"scalar2"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// B(7,2) = scalar2</comment>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar2</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"this is B(7,2)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// B(7,5) = scalar2 modified</comment>
    <expr_stmt><expr><name><name>scalar2</name><operator>.</operator><name>stuff</name> <index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar2</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"here is B(7,5)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// B(4,2) = scalar2 changed </comment>
    <expr_stmt><expr><name><name>scalar2</name><operator>.</operator><name>stuff</name> <index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">77</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar2</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"finally, B(4,2)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create the WildAdder monoid </comment>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>WildAdder</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>wildtype</name></type> <name>scalar_identity</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar_identity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>wildtype</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>scalar_identity</name><operator>.</operator><name>stuff</name> <index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>strcpy</name> <argument_list>(<argument><expr><name><name>scalar_identity</name><operator>.</operator><name>whatstuff</name></name></expr></argument>, <argument><expr><literal type="string">"identity"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar_identity</name></expr></argument>, <argument><expr><literal type="string">"scalar_identity for the monoid"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_new_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildAdder</name></expr></argument>, <argument><expr><name>WildAdd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scalar_identity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create and print the InTheWild semiring</comment>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>InTheWild</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>InTheWild</name></expr></argument>, <argument><expr><name>WildAdder</name></expr></argument>, <argument><expr><name>WildMult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Semiring_fprint</name> <argument_list>(<argument><expr><name>InTheWild</name></expr></argument>, <argument><expr><literal type="string">"InTheWild"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nmultiplication C=A*B InTheWild semiring:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"input A"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"input B"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C = A*B</comment>
    <comment type="line">// Since there is no accum operator, this overwrites C with A*B; the old</comment>
    <comment type="line">// content of C is gone.</comment>
    <expr_stmt><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>InTheWild</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"output C"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C&lt;M&gt; = C*C'</comment>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n------ C&lt;M&gt;=C*C'----------------------------------------\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>M</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nThe mask matrix M:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_print</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_set</name> <argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>InTheWild</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_DESC_RST1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_set</name> <argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"output C"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// reduce C to a scalar using the WildAdder monoid</comment>
    <decl_stmt><decl><type><name>wildtype</name></type> <name>sum</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_reduce_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WildAdder</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sum</name></expr></argument>, <argument><expr><literal type="string">"sum"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// set C to column-oriented format</comment>
    <expr_stmt><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><name>GxB_BY_COL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nC is now stored by column, but it looks just the same to the\n"</literal>
            <literal type="string">"GraphBLAS user application.  The difference is opaque, in the\n"</literal>
            <literal type="string">"internal data structure.\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"output C"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// create a non-wild matrix D and try to print it</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>D</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>wildtype_print_matrix</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// apply some positional operators</comment>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>E</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_POSITIONI_INT64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="string">"E (positional i)"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_POSITIONJ_INT64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>E</name></expr></argument>, <argument><expr><literal type="string">"E (positional j)"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// do something invalid</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_eWiseAdd_BinaryOp</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>WildAdd</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>D</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nThis is supposed to fail, as a demo of GrB_error:\n%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// free everyting</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>E</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>InTheWild</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Monoid_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildAdder</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_BinaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildAdd</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_BinaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildMult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Type_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>WildType</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
