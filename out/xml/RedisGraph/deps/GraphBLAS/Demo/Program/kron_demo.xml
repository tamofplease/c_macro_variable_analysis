<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Program/kron_demo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Program/kron_demo.c: Kronkecker product</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reads two graphs from two files and computes their Kronecker product,</comment>
<comment type="line">// C = kron (A,B), writing the result to a file.</comment>
<comment type="line">//</comment>
<comment type="line">//  kron_demo A.tsv B.tsv C.tsv</comment>
<comment type="line">//</comment>
<comment type="line">// Where A.tsv and B.tsv are two tab- or space-delimited triplet files with</comment>
<comment type="line">// 1-based indices.  Each line has the form:</comment>
<comment type="line">//</comment>
<comment type="line">//  i j x</comment>
<comment type="line">//</comment>
<comment type="line">// where A(i,j)=x is performed by GrB_Matrix_build, to construct the matrix.</comment>
<comment type="line">// The dimensions of A and B are assumed to be the largest row and column</comment>
<comment type="line">// indices that appear in the files.  The file C.tsv is the filename of the</comment>
<comment type="line">// output file for C=kron(A,B), also with 1-based indices.</comment>

<comment type="line">// macro used by OK(...) to free workspace if an error occurs</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                            \
    <cpp:value>GrB_Matrix_free (&amp;A) ;                  \
    GrB_Matrix_free (&amp;B) ;                  \
    GrB_Matrix_free (&amp;C) ;                  \
    if (Afile != NULL) fclose (Afile) ;     \
    if (Bfile != NULL) fclose (Bfile) ;     \
    if (Cfile != NULL) fclose (Cfile) ;     \
    if (I != NULL) free (I) ;               \
    if (J != NULL) free (J) ;               \
    if (X != NULL) free (X) ;               \
    GrB_finalize ( ) ;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>Afile</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Bfile</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Cfile</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_GLOBAL_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"kron demo: nthreads %d\n"</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// printf ("argc %d\n", argc) ;</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"usage: kron_demo A.tsv B.tsv C.tsv\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Afile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Bfile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Cfile</name> <operator>=</operator> <call><name>fopen</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Afile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Bfile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>Cfile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unable to read input files or create output file\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get A and B from input files</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// this would be faster and take less memory if GraphBLAS had a built-in</comment>
    <comment type="line">// read-from-file operation</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>read_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>Afile</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>read_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>Bfile</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>Afile</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>Bfile</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Afile</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Bfile</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>anrows</name></decl>, <decl><type ref="prev"/><name>ancols</name></decl>, <decl><type ref="prev"/><name>bnrows</name></decl>, <decl><type ref="prev"/><name>bncols</name></decl>, <decl><type ref="prev"/><name>anvals</name></decl>, <decl><type ref="prev"/><name>bnvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ancols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>anvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bnrows</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bncols</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bnvals</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C = kron (A,B)</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>anrows</name> <operator>*</operator> <name>bnrows</name></expr></argument>, <argument><expr><name>ancols</name> <operator>*</operator> <name>bncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_kronecker_BinaryOp</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>GrB_TIMES_FP64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// report results</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cnrows</name></decl>, <decl><type ref="prev"/><name>cncols</name></decl>, <decl><type ref="prev"/><name>cnvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cnrows</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>cnvals</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// note that integers of type GrB_Index should be printed with the</comment>
    <comment type="line">// %PRIu64 format.</comment>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"GraphBLAS GrB_kronecker:\n"</literal>
    <literal type="string">"A: %"</literal> <name>PRIu64</name> <literal type="string">"-by-%"</literal> <name>PRIu64</name> <literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" entries.\n"</literal>
    <literal type="string">"B: %"</literal> <name>PRIu64</name> <literal type="string">"-by-%"</literal> <name>PRIu64</name> <literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" entries.\n"</literal>
    <literal type="string">"C: %"</literal> <name>PRIu64</name> <literal type="string">"-by-%"</literal> <name>PRIu64</name> <literal type="string">", %"</literal> <name>PRIu64</name> <literal type="string">" entries.\n"</literal></expr></argument>,
    <argument><expr><name>anrows</name></expr></argument>, <argument><expr><name>ancols</name></expr></argument>, <argument><expr><name>anvals</name></expr></argument>,
    <argument><expr><name>bnrows</name></expr></argument>, <argument><expr><name>bncols</name></expr></argument>, <argument><expr><name>bnvals</name></expr></argument>,
    <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>cnvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// write C to the output file</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// this would be faster and take less memory if GraphBLAS had a built-in</comment>
    <comment type="line">// write-to-file operation</comment>

    <expr_stmt><expr><name>I</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>cnvals</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>J</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>cnvals</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><name>double</name>    <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><operator>(</operator><name>cnvals</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>   )</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>J</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extractTuples_FP64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cnvals</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>cnvals</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>Cfile</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name> <literal type="string">"\t%"</literal> <name>PRIu64</name> <literal type="string">"\t%.17g\n"</literal></expr></argument>,
            <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
