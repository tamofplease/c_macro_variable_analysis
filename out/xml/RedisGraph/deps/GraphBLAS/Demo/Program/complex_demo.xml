<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Program/complex_demo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Program/complex_demo.c: demo for user-defined complex type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This demo illustrates the creation and use of a user-defined type for double</comment>
<comment type="line">// complex matrices and vectors.  Run the *.m output of this program</comment>
<comment type="line">// to check the results.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// print a complex matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// when printed, 1 is added to all row indices so the results can be</comment>
<comment type="line">// checked later with the *.m file</comment>

<function><type><name>void</name></type> <name>print_complex_matrix</name> <parameter_list>(<parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>nentries</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nentries</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(
        <argument><expr><literal type="string">"\n%% GraphBLAS matrix %s: nrows: %.16g ncols %.16g entries: %.16g\n"</literal></expr></argument>,
        <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nentries</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>nentries</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>nentries</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator>
        <call><name>malloc</name> <argument_list>(<argument><expr><call><name>MAX</name> <argument_list>(<argument><expr><name>nentries</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>Complex</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GxB_Matrix_extractTuples_FC64</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nentries</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_extractTuples_UDT</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nentries</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s = sparse (%.16g,%.16g) ;\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
        <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nentries</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"    %s (%.16g,%.16g) =  (%20.16g) + (%20.16g)*1i ;\n"</literal></expr></argument>,
            <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr></argument>,
            <argument><expr><call><name>creal</name> <argument_list>(<argument><expr><name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cimag</name> <argument_list>(<argument><expr><name><name>X</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// C = A*B for complex matrices</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>m</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl> ;</decl_stmt>

    <comment type="line">// initialize GraphBLAS and create the user-defined Complex type</comment>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_GLOBAL_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"complex_demo: nthreads: %d\n"</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// print in 1-based notation</comment>
    <expr_stmt><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_PRINT_1BASED</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>predefined</name> <init>= <expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>predefined</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Using pre-defined GxB_FC64 complex type\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Using user-defined Complex type\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>Complex_init</name> <argument_list>(<argument><expr><name>predefined</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Complex init failed\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>abort</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// generate random matrices A and B</comment>
    <expr_stmt><expr><call><name>simple_rand_seed</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C = A*B</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Complex</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Complex_plus_times</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// print the results</comment>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n%% run this output of this program as a script:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>print_complex_matrix</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>print_complex_matrix</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>print_complex_matrix</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"E = A*B\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"err = norm (C-E,1)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"assert (err &lt; 1e-12)\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// free all matrices</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// free the Complex types, operators, monoids, and semiring</comment>
    <expr_stmt><expr><call><name>Complex_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// finalize GraphBLAS</comment>
    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int main ( )
{
    printf ("complex data type not available (ANSI C11 or higher required)\n") ;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
