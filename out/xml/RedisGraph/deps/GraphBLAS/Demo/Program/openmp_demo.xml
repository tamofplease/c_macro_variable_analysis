<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:omp="http://www.srcML.org/srcML/openmp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Program/openmp_demo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Program/openmp_demo: example of user multithreading</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This demo uses OpenMP, and illustrates how GraphBLAS can be called from</comment>
<comment type="line">// a multi-threaded user program.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;omp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__INTEL_COMPILER</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>58</name> <name>167</name> <name>144</name> <name>177</name> <name>181</name> <name>186</name> <name>188</name> <name>589</name> <name>593</name> <name>869</name> <name>981</name> <name>1418</name> <name>1419</name> <name>1572</name> <name>1599</name> <name>2259</name> <name>2282</name> <name>2557</name> <name>2547</name> <name>3280</name> <name>)</name></cpp:pragma>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__GNUC__</name></expr></cpp:elif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunknown-pragmas"</cpp:literal></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-parameter"</cpp:literal></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>( <argument><expr><name>__cplusplus</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wincompatible-pointer-types"</cpp:literal></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTHREADS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NTRIALS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
<cpp:value>{                                                                   \
    GrB_Info info = method ;                                        \
    if (! (info == GrB_SUCCESS || info == GrB_NO_VALUE))            \
    {                                                               \
        printf ("Failure (id: %d, info: %d):\n", id, info) ;        \
        <comment type="block">/* return to caller (do not use inside critical section) */</comment> \
        return (0) ;                                                \
    }                                                               \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// worker</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>int</name></type> <name>worker</name> <parameter_list>(<parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Ahandle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n================= worker %d starts:\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"worker %d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><name>Ahandle</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><operator>*</operator><name>Ahandle</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// worker generates an intentional error message</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>+</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>+</operator><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// print the intentional error generated when the worker started</comment>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>critical</omp:name></omp:directive></cpp:pragma>
    <block>{<block_content>
        <comment type="line">// critical section</comment>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------- worker %d intentional error:\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>hammer_hard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>hammer_hard</name> <operator>&lt;</operator> <name>NTRIALS</name></expr> ;</condition> <incr><expr><name>hammer_hard</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100000</literal> <operator>+</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">1000</literal> <operator>+</operator> <name>id</name></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP64</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for> 
        </block_content>}</block></for>

        <comment type="line">// force completion</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Printing is done in a critical section, just so it is not overly</comment>
    <comment type="line">// jumbled.  Each matrix and error will print in a single body of text,</comment>
    <comment type="line">// but the order of the matrices and errors printed will be out of order</comment>
    <comment type="line">// because the critical section does not enforce the order that the</comment>
    <comment type="line">// threads enter.</comment>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info2</name></decl> ;</decl_stmt>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>critical</omp:name></omp:directive></cpp:pragma>
    <block>{<block_content>
        <comment type="line">// critical section</comment>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------- worker %d is done:\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info2</name> <operator>=</operator> <call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// worker generates an intentional error message</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>+</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">1000</literal><operator>+</operator><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// print the intentional error generated when the worker started</comment>
    <comment type="line">// It should be unchanged.</comment>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>critical</omp:name></omp:directive></cpp:pragma>
    <block>{<block_content>
        <comment type="line">// critical section</comment>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n----------------- worker %d error should be same:\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// openmp_demo main program</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Demo: %s:\n"</literal></expr></argument>, <argument><expr><name><name>argv</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Demo: %s:\n"</literal></expr></argument>, <argument><expr><name><name>argv</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// initialize the mutex</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// start GraphBLAS</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_NONBLOCKING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nthreads</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_get</name> <argument_list>(<argument><expr><name>GxB_GLOBAL_NTHREADS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nthreads</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"openmp demo, nthreads %d\n"</literal></expr></argument>, <argument><expr><name>nthreads</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// Determine which user-threading model is being used.</comment>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_OPENMP</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"User threads in this program are OpenMP threads.\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"This user program is single threaded.\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name><name>Aarray</name> <index>[<expr><name>NTHREADS</name></expr>]</index></name></decl> ;</decl_stmt>

    <comment type="line">// create the threads</comment>
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <omp:directive>omp <omp:name>parallel</omp:name> <omp:name>for</omp:name> <omp:clause><omp:name>num_threads</omp:name><omp:argument_list>(<omp:argument><omp:expr>NTHREADS</omp:expr></omp:argument>)</omp:argument_list></omp:clause></omp:directive></cpp:pragma> 
    <for>for <control>(<init><expr><name>id</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name>NTHREADS</name></expr> ;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>worker</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>Aarray</name> <index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// the leader thread prints them again, and frees them</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>id</name> <operator>&lt;</operator> <name>NTHREADS</name></expr> ;</condition> <incr><expr><name>id</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name><name>Aarray</name> <index>[<expr><name>id</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n---- Leader prints matrix %d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// finish GraphBLAS</comment>
    <expr_stmt><expr><call><name>GrB_finalize</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// finish OpenMP</comment>
    <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
