<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Program/simple_demo.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Program/simple_demo.c: tests simple_rand</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="block">/*
    A simple test that illustrates the use of simple_rand.
    This test does not require ANSI C11, nor GraphBLAS.  It only tests the
    simple_* Demo functions.  The output of this test should look like the
    following.  The random numbers should be the same.  On a Mac OSX system:

        first 10 random numbers:
            0.513871
            0.175726
            0.308634
            0.534532
            0.947630
            0.171728
            0.702231
            0.226417
            0.494766
            0.124699

    The random numbers are identical on linux, as desired.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_rand.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>x</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"simple_demo:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>n</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>LEN</name><operator>)</operator> <operator>/</operator> <literal type="number">1e6</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// calloc the space for more accurate timing</comment>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name> <argument_list>(<argument><expr><name>LEN</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"simple_demo: out of memory\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// generate random numbers</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>simple_rand_x</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// these should be the same on any system and any compiler</comment>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"first 10 random numbers:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%12.6f\n"</literal></expr></argument>, <argument><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// generate random uint64_t numbers</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>t1</name></decl> ;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>simple_rand_i</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
