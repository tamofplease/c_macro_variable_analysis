<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Source/simple_rand.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Source/simple_rand.c: a very simple random number generator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">//  The POSIX.1-2001 example of rand, duplicated here so that the same sequence</comment>
<comment type="line">//  will be generated on different machines.  The purpose is not to generate</comment>
<comment type="line">//  high-quality random numbers, but to ensure the same sequence is generated</comment>
<comment type="line">//  on any computer or operating system.  This allows the GraphBLAS tests and</comment>
<comment type="line">//  demos to be repeatable.</comment>

<comment type="line">//  Since the simple_rand ( ) function is replicated from the POSIX.1-2001</comment>
<comment type="line">//  standard, no copyright claim is intended for this specific file.  The</comment>
<comment type="line">//  copyright statement above applies to all of SuiteSparse:GraphBLAS, not</comment>
<comment type="line">//  this file.</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIBRARY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_rand.h"</cpp:file></cpp:include>

<comment type="line">// simple_rand is not thread-safe</comment>
<decl_stmt><decl><type><name>uint64_t</name></type> <name>simple_rand_next</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIMPLE_RAND_MAX</name></cpp:macro> <cpp:value>32767</cpp:value></cpp:define>

<comment type="line">// return a random number between 0 and SIMPLE_RAND_MAX</comment>
<function><type><name>GB_PUBLIC</name>
<name>uint64_t</name></type> <name>simple_rand</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <expr_stmt><expr><name>simple_rand_next</name> <operator>=</operator> <name>simple_rand_next</name> <operator>*</operator> <literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr> ;</expr_stmt>
   <return>return <expr><operator>(</operator><operator>(</operator><name>simple_rand_next</name><operator>/</operator><literal type="number">65536</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name>SIMPLE_RAND_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// set the seed</comment>
<function><type><name>GB_PUBLIC</name>
<name>void</name></type> <name>simple_rand_seed</name> <parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <expr_stmt><expr><name>simple_rand_next</name> <operator>=</operator> <name>seed</name></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// get the seed</comment>
<function><type><name>GB_PUBLIC</name>
<name>uint64_t</name></type> <name>simple_rand_getseed</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
   <return>return <expr><operator>(</operator><name>simple_rand_next</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// return a random uint64_t</comment>
<function><type><name>GB_PUBLIC</name>
<name>uint64_t</name></type> <name>simple_rand_i</name> <parameter_list>( )</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>SIMPLE_RAND_MAX</name> <operator>*</operator> <name>i</name> <operator>+</operator> <call><name>simple_rand</name> <argument_list>( )</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">// return a random double between 0 and 1, inclusive</comment>
<function><type><name>GB_PUBLIC</name>
<name>double</name></type> <name>simple_rand_x</name> <parameter_list>( )</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <call><name>simple_rand_i</name> <argument_list>( )</argument_list></call><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>UINT64_MAX</name><operator>)</operator><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
