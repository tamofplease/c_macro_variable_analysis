<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Source/read_matrix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Source/read_matrix.c: read a matrix from stdin</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Reads a matrix from stdin.  For sample inputs, see the Matrix/* files.</comment>
<comment type="line">// Each line has the form:</comment>
<comment type="line">//</comment>
<comment type="line">//      i j x</comment>
<comment type="line">//</comment>
<comment type="line">// where i and j are the row and column indices, and x is the value.</comment>
<comment type="line">// The matrix is read in double precision.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>

<comment type="line">// free all workspace; this used by the OK(...) macro if an error occurs</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                    \
    <cpp:value>if (I  != NULL) free (I) ;      \
    if (J  != NULL) free (J) ;      \
    if (X  != NULL) free (X) ;      \
    if (I2 != NULL) free (I2) ;     \
    if (J2 != NULL) free (J2) ;     \
    if (X2 != NULL) free (X2) ;     \
    GrB_UnaryOp_free (&amp;scale2_op) ; \
    GrB_Descriptor_free (&amp;dt2) ;    \
    GrB_Descriptor_free (&amp;dt1) ;    \
    GrB_Matrix_free (&amp;A) ;          \
    GrB_Matrix_free (&amp;B) ;          \
    GrB_Matrix_free (&amp;C) ;</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_PUBLIC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIBRARY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// unary operator to divide by 2</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>scale2</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0</literal></expr> ;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// read a matrix from a file</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>read_matrix</name>        <comment type="line">// read a double-precision or boolean matrix</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_output</name></decl></parameter>,   <comment type="line">// handle of matrix to create</comment>
    <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,                <comment type="line">// file to read the tuples from</comment>
    <parameter><decl><type><name>bool</name></type> <name>make_symmetric</name></decl></parameter>,    <comment type="line">// if true, return A as symmetric</comment>
    <parameter><decl><type><name>bool</name></type> <name>no_self_edges</name></decl></parameter>,     <comment type="line">// if true, then remove self edges from A</comment>
    <parameter><decl><type><name>bool</name></type> <name>one_based</name></decl></parameter>,         <comment type="line">// if true, input matrix is 1-based</comment>
    <parameter><decl><type><name>bool</name></type> <name>boolean</name></decl></parameter>,           <comment type="line">// if true, input is GrB_BOOL, otherwise GrB_FP64</comment>
    <parameter><decl><type><name>bool</name></type> <name>pr</name></decl></parameter>                 <comment type="line">// if true, print status to stdout</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>len</name> <init>= <expr><literal type="number">256</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ntuples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nvals</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// set all pointers to NULL so that FREE_ALL can free everything safely</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>dt1</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>dt2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_UnaryOp</name></type> <name>scale2_op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// allocate initial space for tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>xsize</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>boolean</name><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof <argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr> </then><else>: <expr><sizeof>sizeof <argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>I2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>J2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><name>len</name> <operator>*</operator> <name>xsize</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>Xbool</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Xdouble</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>X2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>J</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// out of memory</comment>
        <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"out of memory for initial tuples\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>Xbool</name>   <operator>=</operator> <operator>(</operator><name>bool</name>   <operator>*</operator><operator>)</operator> <name>X</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Xdouble</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>X</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// read in the tuples from stdin, one per line</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// format warnings vary with compilers, so read in as double</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>i2</name></decl>, <decl><type ref="prev"/><name>j2</name></decl> ;</decl_stmt>
    <while>while <condition>(<expr><call><name>fscanf</name> <argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%lg %lg %lg\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>i2</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name>j2</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ntuples</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>I2</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>I</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>J2</name> <operator>=</operator> <operator>(</operator><name>GrB_Index</name> <operator>*</operator><operator>)</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>J</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>X2</name> <operator>=</operator> <call><name>realloc</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>len</name> <operator>*</operator> <name>xsize</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>I2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>J2</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>X2</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"out of memory for tuples\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>GrB_OUT_OF_MEMORY</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>I</name> <operator>=</operator> <name>I2</name></expr> ;</expr_stmt> <expr_stmt><expr><name>I2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>J</name> <operator>=</operator> <name>J2</name></expr> ;</expr_stmt> <expr_stmt><expr><name>J2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>X</name> <operator>=</operator> <name>X2</name></expr> ;</expr_stmt> <expr_stmt><expr><name>X2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <name>len</name> <operator>*</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Xbool</name>   <operator>=</operator> <operator>(</operator><name>bool</name>   <operator>*</operator><operator>)</operator> <name>X</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name>Xdouble</name> <operator>=</operator> <operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>X</name></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>one_based</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>--</operator></expr> ;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>--</operator></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>I</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>J</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>boolean</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>Xbool</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>Xdouble</name> <index>[<expr><name>ntuples</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>ntuples</name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// find the dimensions</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"ntuples: %.16g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ntuples</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ntuples</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name>nrows</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <call><name>MAX</name> <argument_list>(<argument><expr><name>ncols</name></expr></argument>, <argument><expr><name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>nrows</name><operator>++</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ncols</name><operator>++</operator></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"nrows %.16g ncols %.16g\n"</literal></expr></argument>,
        <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// prune self edges</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// but not if creating the augmented system aka a bipartite graph</comment>
    <if_stmt><if>if <condition>(<expr><name>no_self_edges</name> <operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator><name>make_symmetric</name> <operator>&amp;&amp;</operator> <name>nrows</name> <operator>!=</operator> <name>ncols</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>ntuples2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ntuples</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// keep this off-diagonal edge</comment>
                <expr_stmt><expr><name><name>I</name> <index>[<expr><name>ntuples2</name></expr>]</index></name> <operator>=</operator> <name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>J</name> <index>[<expr><name>ntuples2</name></expr>]</index></name> <operator>=</operator> <name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>boolean</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Xbool</name> <index>[<expr><name>ntuples2</name></expr>]</index></name> <operator>=</operator> <name><name>Xbool</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><name><name>Xdouble</name> <index>[<expr><name>ntuples2</name></expr>]</index></name> <operator>=</operator> <name><name>Xdouble</name> <index>[<expr><name>k</name></expr>]</index></name></expr> ;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>ntuples2</name><operator>++</operator></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>ntuples</name> <operator>=</operator> <name>ntuples2</name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// build the matrix, summing up duplicates, and then free the tuples</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>xop</name></decl>, <decl><type ref="prev"/><name>xop_first</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>boolean</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_BOOL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xop</name>   <operator>=</operator> <name>GrB_LOR</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xop_first</name>  <operator>=</operator> <name>GrB_FIRST_BOOL</name></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GrB_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xop</name>   <operator>=</operator> <name>GrB_PLUS_FP64</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>xop_first</name>  <operator>=</operator> <name>GrB_FIRST_FP64</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>boolean</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_BOOL</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>Xbool</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_FP64</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>Xdouble</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>xop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>I</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>J</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>J</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>X</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// construct the descriptors</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// descriptor dt2: transpose the 2nd input</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>dt2</name></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// descriptor dt1: transpose the 1st input</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dt1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>dt1</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the output matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>make_symmetric</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// ensure the matrix is symmetric</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"make symmetric\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>nrows</name> <operator>==</operator> <name>ncols</name></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A = (C+C')/2</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"A = (C+C')/2\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseAdd_BinaryOp</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xop</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>dt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>boolean</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scale2_op</name></expr></argument>, 
                    <argument><expr><operator>(</operator><name>GxB_unary_function</name><operator>)</operator> <name>scale2</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_apply</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scale2_op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_UnaryOp_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scale2_op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// A = [0 C ; C' 0], a bipartite graph</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// no self edges will exist</comment>
            <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"A = [0 C ; C' 0], a bipartite graph\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name>nrows</name> <operator>+</operator> <name>ncols</name></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>

            <expr_stmt><expr><name><name>I_range</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>I_range</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>nrows</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

            <expr_stmt><expr><name><name>J_range</name> <index>[<expr><name>GxB_BEGIN</name></expr>]</index></name> <operator>=</operator> <name>nrows</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>J_range</name> <index>[<expr><name>GxB_END</name></expr>  ]</index></name> <operator>=</operator> <name>ncols</name><operator>+</operator><name>nrows</name><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

            <comment type="line">// A (nrows:n-1, 0:nrows-1) += C'</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xop_first</name></expr></argument>, <comment type="line">// or NULL,</comment>
                <argument><expr><name>C</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><name>GxB_RANGE</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><name>GxB_RANGE</name></expr></argument>, <argument><expr><name>dt1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// A (0:nrows-1, nrows:n-1) += C</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xop_first</name></expr></argument>, <comment type="line">// or NULL,</comment>
                <argument><expr><name>C</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><name>GxB_RANGE</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><name>GxB_RANGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// force completion; if this statement does not appear, the</comment>
            <comment type="line">// timing will not account for the final build, which would be</comment>
            <comment type="line">// postponed until A is used by the caller in another GraphBLAS</comment>
            <comment type="line">// operation.</comment>
            <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
            <comment type="line">// set A to NULL so the FREE_ALL macro does not free *A_output</comment>
            <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// return the matrix as-is</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"leave A as-is\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>C</name></expr> ;</expr_stmt>
        <comment type="line">// set C to NULL so the FREE_ALL macro does not free *A_output</comment>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// success: free everything except the result, and return it to the caller</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nMatrix from file:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>*</operator><name>A_output</name></expr></argument>, <argument><expr><literal type="string">"*A_output"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>pr</name></expr> ?</condition><then> <expr><name>GxB_SHORT</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>,
        <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
