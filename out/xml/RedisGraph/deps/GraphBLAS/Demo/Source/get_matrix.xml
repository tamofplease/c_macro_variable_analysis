<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Source/get_matrix.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GraphBLAS/Demo/Source/get_matrix.c: get matrix from file, or create random</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Creates a symmetric matrix, either from a file or by creating a random</comment>
<comment type="line">// matrix.  If reading from a file, the file is assumed to be 0-based.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                    \
    <cpp:value>GrB_Matrix_free (&amp;A) ;          \
    GrB_Descriptor_free (&amp;desc) ;   \
    GrB_Matrix_free (&amp;Mask) ;</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_PUBLIC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIBRARY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>get_matrix</name>         <comment type="line">// get a matrix from stdin, or create random one</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>A_output</name></decl></parameter>,   <comment type="line">// matrix to create</comment>
    <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,               <comment type="line">// command-line arguments</comment>
    <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>no_self_edges</name></decl></parameter>,     <comment type="line">// if true, ensure the matrix has no self-edges</comment>
    <parameter><decl><type><name>bool</name></type> <name>boolean</name></decl></parameter>,           <comment type="line">// if true, file is read as GrB_BOOL, else GrB_FP64</comment>
    <parameter><decl><type><name>bool</name></type> <name>spones</name></decl></parameter>             <comment type="line">// if true, return all entries equal to 1</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ncols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ntuples</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>nvals</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Mask</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// create a random matrix</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// random pattern</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// usage:  ./main 0 nrows ncols ntuples method</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>    <comment type="line">//  0:setElement, 1:build</comment>

            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nrows</name>   <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ncols</name>   <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ntuples</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>method</name>  <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>random_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>,
                <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// force completion, just to check timing</comment>
            <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// printf format warnings can vary with different compilers, so</comment>
            <comment type="line">// punt and type cast to double</comment>
            <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"random %.16g by %.16g, nz: %.16g, method %d\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"random %.16g by %.16g, nz: %.16g, method %d\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></if>
        <else>else
        <block>{<block_content>

            <comment type="line">//------------------------------------------------------------------</comment>
            <comment type="line">// Wathen matrix</comment>
            <comment type="line">//------------------------------------------------------------------</comment>

            <comment type="line">// usage:  ./main 1 nx ny method</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>        <comment type="line">// 0 to 3</comment>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>nx</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>ny</name> <init>= <expr><literal type="number">4</literal></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nx</name>     <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ny</name>     <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>method</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>wathen</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>nx</name></expr></argument>, <argument><expr><name>ny</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// remove the self edges from the matrix</comment>
            <if_stmt><if>if <condition>(<expr><name>no_self_edges</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Mask = speye (nrows) ;</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Mask</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// Mask (i,i) = true</comment>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_BOOL</name> <argument_list>(<argument><expr><name>Mask</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name><operator>)</operator> <name>true</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
                <comment type="line">// A&lt;~Mask&gt; = A, thus removing the diagonal.  GrB_transpose</comment>
                <comment type="line">// does C&lt;Mask&gt;=A', so setting inp0 to tran does C=A'', and</comment>
                <comment type="line">// thus C&lt;Mask&gt;=A, without forming any transpose at all.</comment>
                <comment type="line">// Replace is set, so A is cleared first.  Otherwise the</comment>
                <comment type="line">// diagonal is not touched by C&lt;~Mask&gt;=A.</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>, <argument><expr><name>GrB_COMP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>, <argument><expr><name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_transpose</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Mask</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// force completion, just to check timing</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Wathen: nx %.16g ny %.16g n %.16g nz %.16g method %d\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nx</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ny</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                <argument><expr><literal type="string">"Wathen: nx %.16g ny %.16g n %.16g nz %.16g method %d\n"</literal></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nx</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ny</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>,
                <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// read a 0-based or 1-based matrix from stdin</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// usage:  ./main   &lt; file</comment>
        <comment type="line">//         ./main 0 &lt; file</comment>
        <comment type="line">//         ./main 1 &lt; file</comment>
        <comment type="line">//</comment>
        <comment type="line">// default is 0-based, for the matrices in the Matrix/ folder</comment>

        <decl_stmt><decl><type><name>bool</name></type> <name>one_based</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>one_based</name> <operator>=</operator> <call><name>strtol</name> <argument_list>(<argument><expr><name><name>argv</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>read_matrix</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>no_self_edges</name></expr></argument>, <argument><expr><name>one_based</name></expr></argument>, <argument><expr><name>boolean</name></expr></argument>,
            <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"matrix %.16g by %.16g, %.16g entries, from stdin\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"matrix %.16g by %.16g, %.16g entries, from stdin\n"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvals</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// replace all values with 1 if spones is true</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>spones</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A&lt;A,struct&gt; = 1</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_BOOL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
            <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// print and return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><operator>*</operator><name>A_output</name> <operator>=</operator> <name>A</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
