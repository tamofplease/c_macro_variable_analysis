<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Source/isequal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// isequal: check two matrices for exact equality</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// isequal: check if two matrices are identically equal (same size,type,</comment>
<comment type="line">// pattern, size, and values).  Checking for the same type requires a function</comment>
<comment type="line">// that is an extension in SuiteSparse:GraphBLAS.  For the standard API, there</comment>
<comment type="line">// is no way to determine the type of a matrix.</comment>

<comment type="line">// isequal_type: uses just the standard API.</comment>

<comment type="line">// For both methods, if the two matrices are FP32 or FP64, and have NaNs, then</comment>
<comment type="line">// these functions will return false, since NaN == NaN is false.  To check for</comment>
<comment type="line">// NaN equality, use isequal_type with a user-defined operator f(x,y) that</comment>
<comment type="line">// returns true if x and y are both NaN.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_PUBLIC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIBRARY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<comment type="line">// call a GraphBLAS method and return if an error occurs</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>OK</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                                          \
<cpp:value>{                                                           \
    GrB_Info info = method ;                                \
    if (! (info == GrB_SUCCESS || info == GrB_NO_VALUE))    \
    {                                                       \
        <comment type="block">/* error occured: free workspace and return */</comment>      \
        GrB_Matrix_free (&amp;C) ;                              \
        return (info) ;                                     \
    }                                                       \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// isequal_type: check two matrices, works in any GraphBLAS</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>isequal_type</name>       <comment type="line">// return GrB_SUCCESS if successful</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,           <comment type="line">// true if A == B, false if A != B or error</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl></parameter>         <comment type="line">// should be GrB_EQ_&lt;type&gt;, for the type of A and B</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows1</name></decl>, <decl><type ref="prev"/><name>ncols1</name></decl>, <decl><type ref="prev"/><name>nrows2</name></decl>, <decl><type ref="prev"/><name>ncols2</name></decl>, <decl><type ref="prev"/><name>nvals</name></decl>, <decl><type ref="prev"/><name>nvals1</name></decl>, <decl><type ref="prev"/><name>nvals2</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// error: required parameter, result, is NULL</comment>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <comment type="line">// check the size of A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows1</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows2</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nrows1</name> <operator>!=</operator> <name>nrows2</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// # of rows differ</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>    
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols1</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols2</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ncols1</name> <operator>!=</operator> <name>ncols2</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// # of cols differ</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check the # entries in A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals1</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals2</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nvals1</name> <operator>!=</operator> <name>nvals2</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// # of entries differ</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// C = A .* B, where the pattern of C is the intersection of A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_BOOL</name></expr></argument>, <argument><expr><name>nrows1</name></expr></argument>, <argument><expr><name>ncols1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_eWiseMult_BinaryOp</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// ensure C has the same number of entries as A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nvals</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nvals</name> <operator>!=</operator> <name>nvals1</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// pattern of A and B are different</comment>
        <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// result = and (C)</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BOOL</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_LAND_MONOID_BOOL</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// free workspace and return result</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// isequal: for SuiteSparse/GraphBLAS only; also check if types are the same</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GxB_SUITESPARSE_GRAPHBLAS</name></cpp:ifdef>
<comment type="line">// the isequal function only works with SuiteSparse:GraphBLAS</comment>

<function><type><name>GrB_Info</name></type> <name>isequal</name>            <comment type="line">// return GrB_SUCCESS if successful</comment>
<parameter_list>(
    <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>result</name></decl></parameter>,           <comment type="line">// true if A == B, false if A != B or error</comment>
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>userop</name></decl></parameter>     <comment type="line">// for A and B with user-defined types.  ignored</comment>
                            <comment type="line">// if A and B are of built-in types</comment>
)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>atype</name></decl>, <decl><type ref="prev"/><name>btype</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// error: required parameter, result, is NULL</comment>
        <return>return <expr><operator>(</operator><name>GrB_NULL_POINTER</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>result</name><operator>)</operator> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>

    <comment type="line">// check the type of A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>atype</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>btype</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>atype</name> <operator>!=</operator> <name>btype</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// types differ</comment>
        <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// select the comparator operator</comment>
    <if_stmt><if>if      <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_BOOL</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT8</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT8</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT16</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT16</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT32</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT32</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_INT64</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT64</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT8</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT8</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT16</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT32</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT64</name></expr> ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GrB_FP64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP64</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC32</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC32</name></expr>   ;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>atype</name> <operator>==</operator> <name>GxB_FC64</name></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC64</name></expr>   ;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>                          <expr_stmt><expr><name>op</name> <operator>=</operator> <name>userop</name></expr> ;</expr_stmt></block_content></block></else></if_stmt> <comment type="line">// A and B are user-defined</comment>

    <comment type="line">// check the size, pattern, and values of A and B</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>isequal_type</name> <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return result</comment>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
