<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Demo/Source/import_test.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// SuiteSparse/GraphBLAS/Demo/Source/import_test: test import/export</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GraphBLAS.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GB_PUBLIC</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GB_LIBRARY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"graphblas_demos.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>__INTEL_COMPILER</name></expr></cpp:if>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name><name>:</name> <name>556</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                    \
<cpp:value>{                                   \
    GrB_Matrix_free (C_handle) ;    \
    if (Ap != NULL) free (Ap) ;     \
    if (Ah != NULL) free (Ah) ;     \
    if (Ai != NULL) free (Ai) ;     \
    if (Aj != NULL) free (Aj) ;     \
    if (Ax != NULL) free (Ax) ;     \
}</cpp:value></cpp:define>

<comment type="line">// typecast the values to the exported type</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETVAL</name></cpp:macro>                                                  \
<cpp:value>{                                                               \
    if      (type == GrB_BOOL  ) Ax_bool   = (bool     *) Ax ;  \
    else if (type == GrB_INT8  ) Ax_int8   = (int8_t   *) Ax ;  \
    else if (type == GrB_INT16 ) Ax_int16  = (int16_t  *) Ax ;  \
    else if (type == GrB_INT32 ) Ax_int32  = (int32_t  *) Ax ;  \
    else if (type == GrB_INT64 ) Ax_int64  = (int64_t  *) Ax ;  \
    else if (type == GrB_UINT8 ) Ax_uint8  = (uint8_t  *) Ax ;  \
    else if (type == GrB_UINT16) Ax_uint16 = (uint16_t *) Ax ;  \
    else if (type == GrB_UINT32) Ax_uint32 = (uint32_t *) Ax ;  \
    else if (type == GrB_UINT64) Ax_uint64 = (uint64_t *) Ax ;  \
    else if (type == GrB_FP32  ) Ax_fp32   = (float    *) Ax ;  \
    else if (type == GrB_FP64  ) Ax_fp64   = (double   *) Ax ;  \
    else return (GrB_INVALID_VALUE) ;                           \
}</cpp:value></cpp:define>

<comment type="line">// print a value</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINTVAL</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>                                                      \
<cpp:value>{                                                                        \
    if      (type == GrB_BOOL  ) printf ("%g", (double) Ax_bool   [p]) ; \
    else if (type == GrB_INT8  ) printf ("%g", (double) Ax_int8   [p]) ; \
    else if (type == GrB_INT16 ) printf ("%g", (double) Ax_int16  [p]) ; \
    else if (type == GrB_INT32 ) printf ("%g", (double) Ax_int32  [p]) ; \
    else if (type == GrB_INT64 ) printf ("%g", (double) Ax_int64  [p]) ; \
    else if (type == GrB_UINT8 ) printf ("%g", (double) Ax_uint8  [p]) ; \
    else if (type == GrB_UINT16) printf ("%g", (double) Ax_uint16 [p]) ; \
    else if (type == GrB_UINT32) printf ("%g", (double) Ax_uint32 [p]) ; \
    else if (type == GrB_UINT64) printf ("%g", (double) Ax_uint64 [p]) ; \
    else if (type == GrB_FP32  ) printf ("%g", (double) Ax_fp32   [p]) ; \
    else if (type == GrB_FP64  ) printf ("%g", (double) Ax_fp64   [p]) ; \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../Source/GB.h"</cpp:file></cpp:include>

<function><type><name>GB_PUBLIC</name>
<name>GrB_Info</name></type> <name>import_test</name> <parameter_list>(<parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>C_handle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dump</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>type</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl>, <decl><type ref="prev"/><name>nvec</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>Ap</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ah</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Ai</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>Aj</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ap_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ah_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ab_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ai_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Aj_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>Ax_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>iso</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>jumbled</name></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>Ax</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name>     <modifier>*</modifier></type><name>Ax_bool</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name>   <modifier>*</modifier></type><name>Ax_int8</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name>  <modifier>*</modifier></type><name>Ax_int16</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name>  <modifier>*</modifier></type><name>Ax_int32</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name>  <modifier>*</modifier></type><name>Ax_int64</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name>  <modifier>*</modifier></type><name>Ax_uint8</name>  <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>Ax_uint16</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>Ax_uint32</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>Ax_uint64</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>float</name>    <modifier>*</modifier></type><name>Ax_fp32</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name>   <modifier>*</modifier></type><name>Ax_fp64</name>   <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n========================= import_test: format %d\n"</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>C_handle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"C to export"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SHORT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <switch>switch <condition>(<expr><name>format</name></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">0</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSR</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// the export destroys the matrix (*C_handle), returning its</comment>
            <comment type="line">// contents in Ap, Aj, and Ax.</comment>
            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export standard CSR: %g-by-%g, Ax_size %g:\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>GETVAL</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Ap %p Aj %p Ax %p\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>Ap</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>Aj</name></expr></argument>, <argument><expr><name>Ax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrows</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Row %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>i</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  col %g value "</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Aj</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>PRINTVAL</name> <argument_list>(<argument><expr><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// reimport the matrix</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSR</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">1</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_CSC</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export standard CSC: %g-by-%g, Ax_size %g:\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>Ax_size</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>GETVAL</name></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ncols</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Col %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>j</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  row %g value "</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>PRINTVAL</name> <argument_list>(<argument><expr><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_CSC</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>, <argument><expr><name>iso</name></expr></argument>,
                <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">2</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSR</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export hyper CSR: %g-by-%g, Ax_size %g, nvec %g:\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>Ax_size</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>GETVAL</name></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Row %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  col %g value "</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Aj</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>PRINTVAL</name> <argument_list>(<argument><expr><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSR</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Aj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Aj_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>,
                <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <case>case <expr><literal type="number">3</literal></expr> :</case> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_export_HyperCSC</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ap_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax_size</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>iso</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nvec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>*</operator><name>C_handle</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>GrB_INVALID_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>dump</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"export hyper CSC: %g-by-%g, Ax_size %g, nvec %g:\n"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nrows</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>ncols</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>Ax_size</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>nvec</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Type_fprint</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>GETVAL</name></expr> ;</expr_stmt>

                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nvec</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><name><name>Ah</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Col %g\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>k</name></expr>]</index></name></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>Ap</name> <index>[<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"  row %g value "</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name><name>Ai</name> <index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>PRINTVAL</name> <argument_list>(<argument><expr><ternary><condition><expr><name>iso</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_import_HyperCSC</name> <argument_list>(<argument><expr><name>C_handle</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>,
                <argument><expr><operator>&amp;</operator><name>Ap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ah</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Ax</name></expr></argument>, <argument><expr><name>Ap_size</name></expr></argument>, <argument><expr><name>Ah_size</name></expr></argument>, <argument><expr><name>Ai_size</name></expr></argument>, <argument><expr><name>Ax_size</name></expr></argument>,
                <argument><expr><name>iso</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr><name>jumbled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>C_handle</name><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"C reimported"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><name>dump</name></expr> ?</condition><then> <expr><name>GxB_COMPLETE</name></expr> </then><else>: <expr><name>GxB_SILENT</name></expr></else></ternary></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <break>break ;</break>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <default>default :</default> 
        <comment type="line">//----------------------------------------------------------------------</comment>

            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"bad format\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>GrB_INVALID_VALUE</name><operator>)</operator></expr> ;</return>
            <break>break ;</break>
    </block_content>}</block></switch>

    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
