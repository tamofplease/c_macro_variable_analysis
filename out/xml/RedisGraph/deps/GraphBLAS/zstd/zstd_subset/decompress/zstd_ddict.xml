<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/decompress/zstd_ddict.c"><comment type="block">/*
 * Copyright (c) Yann Collet, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>

<comment type="block">/* zstd_ddict.c :
 * concentrates all logic that needs to know the internals of ZSTD_DDict object */</comment>

<comment type="block">/*-*******************************************************
*  Dependencies
*********************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/zstd_deps.h"</cpp:file></cpp:include>   <comment type="block">/* ZSTD_memcpy, ZSTD_memmove, ZSTD_memset */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/cpu.h"</cpp:file></cpp:include>         <comment type="block">/* bmi2 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/mem.h"</cpp:file></cpp:include>         <comment type="block">/* low level memory routines */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/fse.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUF_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/huf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_decompress_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_ddict.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZSTD_LEGACY_SUPPORT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ZSTD_LEGACY_SUPPORT</name><operator>&gt;=</operator><literal type="number">1</literal><operator>)</operator></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"../legacy/zstd_legacy.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="block">/*-*******************************************************
*  Types
*********************************************************/</comment>
<struct>struct <name>ZSTD_DDict_s</name> <block>{
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dictBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dictContent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>dictSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ZSTD_entropyDTables_t</name></type> <name>entropy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>dictID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>entropyPresent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ZSTD_customMem</name></type> <name>cMem</name></decl>;</decl_stmt>
}</block>;</struct>  <comment type="block">/* typedef'd to ZSTD_DDict within "zstd.h" */</comment>

<function><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ZSTD_DDict_dictContent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ddict</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ZSTD_DDict_dictSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ddict</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ZSTD_copyDDictParameters</name><parameter_list>(<parameter><decl><type><name>ZSTD_DCtx</name><modifier>*</modifier></type> <name>dctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"ZSTD_copyDDictParameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ddict</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>dictID</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>dictID</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>prefixStart</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>virtualStart</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>dictEnd</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name> <operator>+</operator> <name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>previousDstEnd</name></name> <operator>=</operator> <name><name>dctx</name><operator>-&gt;</operator><name>dictEnd</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION</name></cpp:ifdef>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>dictContentBeginForFuzzing</name></name> <operator>=</operator> <name><name>dctx</name><operator>-&gt;</operator><name>prefixStart</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>dictContentEndForFuzzing</name></name> <operator>=</operator> <name><name>dctx</name><operator>-&gt;</operator><name>previousDstEnd</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>ddict</name><operator>-&gt;</operator><name>entropyPresent</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>litEntropy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>fseEntropy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>LLTptr</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>LLTable</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>MLTptr</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>MLTable</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>OFTptr</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>OFTable</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>HUFptr</name></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>hufTable</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>rep</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>litEntropy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dctx</name><operator>-&gt;</operator><name>fseEntropy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>ZSTD_loadEntropy_intoDDict</name><parameter_list>(<parameter><decl><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>,
                           <parameter><decl><type><name>ZSTD_dictContentType_e</name></type> <name>dictContentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictID</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>entropyPresent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dictContentType</name> <operator>==</operator> <name>ZSTD_dct_rawContent</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>dictContentType</name> <operator>==</operator> <name>ZSTD_dct_fullDict</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dictionary_corrupted</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* only accept specified dictionaries */</comment>
        <return>return <expr><literal type="number">0</literal></expr>;</return>   <comment type="block">/* pure content mode */</comment>
    </block_content>}</block></if></if_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>magic</name> <init>= <expr><call><name>MEM_readLE32</name><argument_list>(<argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>magic</name> <operator>!=</operator> <name>ZSTD_MAGIC_DICTIONARY</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>dictContentType</name> <operator>==</operator> <name>ZSTD_dct_fullDict</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dictionary_corrupted</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* only accept specified dictionaries */</comment>
            <return>return <expr><literal type="number">0</literal></expr>;</return>   <comment type="block">/* pure content mode */</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictID</name></name> <operator>=</operator> <call><name>MEM_readLE32</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name> <operator>+</operator> <name>ZSTD_FRAMEIDSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* load entropy tables */</comment>
    <expr_stmt><expr><call><name>RETURN_ERROR_IF</name><argument_list>(<argument><expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><call><name>ZSTD_loadDEntropy</name><argument_list>(
            <argument><expr><operator>&amp;</operator><name><name>ddict</name><operator>-&gt;</operator><name>entropy</name></name></expr></argument>, <argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr></argument>, <argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>dictionary_corrupted</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>entropyPresent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ZSTD_initDDict_internal</name><parameter_list>(<parameter><decl><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>,
                                      <parameter><decl><type><name>ZSTD_dictLoadMethod_e</name></type> <name>dictLoadMethod</name></decl></parameter>,
                                      <parameter><decl><type><name>ZSTD_dictContentType_e</name></type> <name>dictContentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>dictLoadMethod</name> <operator>==</operator> <name>ZSTD_dlm_byRef</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>dict</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>dictSize</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name> <operator>=</operator> <name>dict</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dict</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>dictSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>internalBuffer</name> <init>= <expr><call><name>ZSTD_customMalloc</name><argument_list>(<argument><expr><name>dictSize</name></expr></argument>, <argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>cMem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictBuffer</name></name> <operator>=</operator> <name>internalBuffer</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name> <operator>=</operator> <name>internalBuffer</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>internalBuffer</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>memory_allocation</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>internalBuffer</name></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name> <operator>=</operator> <name>dictSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>entropy</name><operator>.</operator><name>hufTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>HUF_DTable</name><operator>)</operator><operator>(</operator><operator>(</operator><name>ZSTD_HUFFDTABLE_CAPACITY_LOG</name><operator>)</operator><operator>*</operator><literal type="number">0x1000001</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* cover both little and big endian */</comment>

    <comment type="block">/* parse dictionary content */</comment>
    <expr_stmt><expr><call><name>FORWARD_IF_ERROR</name><argument_list>( <argument><expr><call><name>ZSTD_loadEntropy_intoDDict</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>, <argument><expr><name>dictContentType</name></expr></argument>)</argument_list></call></expr></argument> , <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ZSTD_createDDict_advanced</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>,
                                      <parameter><decl><type><name>ZSTD_dictLoadMethod_e</name></type> <name>dictLoadMethod</name></decl></parameter>,
                                      <parameter><decl><type><name>ZSTD_dictContentType_e</name></type> <name>dictContentType</name></decl></parameter>,
                                      <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>customMem</name><operator>.</operator><name>customAlloc</name></name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>!</operator><name><name>customMem</name><operator>.</operator><name>customFree</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <block>{<block_content>   <decl_stmt><decl><type><name>ZSTD_DDict</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ddict</name> <init>= <expr><operator>(</operator><name>ZSTD_DDict</name><operator>*</operator><operator>)</operator> <call><name>ZSTD_customMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_DDict</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>customMem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ddict</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ddict</name><operator>-&gt;</operator><name>cMem</name></name> <operator>=</operator> <name>customMem</name></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>initResult</name> <init>= <expr><call><name>ZSTD_initDDict_internal</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>,
                                            <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>,
                                            <argument><expr><name>dictLoadMethod</name></expr></argument>, <argument><expr><name>dictContentType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>initResult</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>ZSTD_freeDDict</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>   </block_content>}</block>
        <return>return <expr><name>ddict</name></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_createDDict() :
*   Create a digested dictionary, to start decompression without startup delay.
*   `dict` content is copied inside DDict.
*   Consequently, `dict` can be released after `ZSTD_DDict` creation */</comment>
<function><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ZSTD_createDDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ZSTD_customMem</name> <specifier>const</specifier></type> <name>allocator</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>ZSTD_createDDict_advanced</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>, <argument><expr><name>ZSTD_dlm_byCopy</name></expr></argument>, <argument><expr><name>ZSTD_dct_auto</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_createDDict_byReference() :
 *  Create a digested dictionary, to start decompression without startup delay.
 *  Dictionary content is simply referenced, it will be accessed during decompression.
 *  Warning : dictBuffer must outlive DDict (DDict must be freed before dictBuffer) */</comment>
<function><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ZSTD_createDDict_byReference</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dictBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ZSTD_customMem</name> <specifier>const</specifier></type> <name>allocator</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>ZSTD_createDDict_advanced</name><argument_list>(<argument><expr><name>dictBuffer</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>, <argument><expr><name>ZSTD_dlm_byRef</name></expr></argument>, <argument><expr><name>ZSTD_dct_auto</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ZSTD_initStaticDDict</name><parameter_list>(
                                <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>sBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sBufferSize</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>dict</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>,
                                <parameter><decl><type><name>ZSTD_dictLoadMethod_e</name></type> <name>dictLoadMethod</name></decl></parameter>,
                                <parameter><decl><type><name>ZSTD_dictContentType_e</name></type> <name>dictContentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>neededSpace</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_DDict</name></expr></argument>)</argument_list></sizeof>
                             <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dictLoadMethod</name> <operator>==</operator> <name>ZSTD_dlm_byRef</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>dictSize</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ZSTD_DDict</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ddict</name> <init>= <expr><operator>(</operator><name>ZSTD_DDict</name><operator>*</operator><operator>)</operator><name>sBuffer</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sBuffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dict</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>sBuffer</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* 8-aligned */</comment>
    <if_stmt><if>if <condition>(<expr><name>sBufferSize</name> <operator>&lt;</operator> <name>neededSpace</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dictLoadMethod</name> <operator>==</operator> <name>ZSTD_dlm_byCopy</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>ddict</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* local copy */</comment>
        <expr_stmt><expr><name>dict</name> <operator>=</operator> <name>ddict</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>( <argument><expr><call><name>ZSTD_initDDict_internal</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>,
                                              <argument><expr><name>dict</name></expr></argument>, <argument><expr><name>dictSize</name></expr></argument>,
                                              <argument><expr><name>ZSTD_dlm_byRef</name></expr></argument>, <argument><expr><name>dictContentType</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>ddict</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>ZSTD_freeDDict</name><parameter_list>(<parameter><decl><type><name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ddict</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* support free on NULL */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>ZSTD_customMem</name> <specifier>const</specifier></type> <name>cMem</name> <init>= <expr><name><name>ddict</name><operator>-&gt;</operator><name>cMem</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictBuffer</name></name></expr></argument>, <argument><expr><name>cMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>, <argument><expr><name>cMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_estimateDDictSize() :
 *  Estimate amount of memory that will be needed to create a dictionary for decompression.
 *  Note : dictionary created by reference using ZSTD_dlm_byRef are smaller */</comment>
<function><type><name>size_t</name></type> <name>ZSTD_estimateDDictSize</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>dictSize</name></decl></parameter>, <parameter><decl><type><name>ZSTD_dictLoadMethod_e</name></type> <name>dictLoadMethod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_DDict</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>dictLoadMethod</name> <operator>==</operator> <name>ZSTD_dlm_byRef</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>dictSize</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ZSTD_sizeof_DDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ddict</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* support sizeof on NULL */</comment>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ddict</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictBuffer</name></name></expr> ?</condition><then> <expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_getDictID_fromDDict() :
 *  Provides the dictID of the dictionary loaded into `ddict`.
 *  If @return == 0, the dictionary is not conformant to Zstandard specification, or empty.
 *  Non-conformant dictionaries can still be loaded, but as content-only dictionaries. */</comment>
<function><type><name>unsigned</name></type> <name>ZSTD_getDictID_fromDDict</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ZSTD_DDict</name><modifier>*</modifier></type> <name>ddict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ddict</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ZSTD_getDictID_fromDict</name><argument_list>(<argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictContent</name></name></expr></argument>, <argument><expr><name><name>ddict</name><operator>-&gt;</operator><name>dictSize</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
