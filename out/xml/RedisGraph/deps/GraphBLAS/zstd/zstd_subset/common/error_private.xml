<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/error_private.c"><comment type="block">/*
 * Copyright (c) Yann Collet, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>

<comment type="block">/* The purpose of this file is to have a single list of error strings embedded in binary */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_private.h"</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ERR_getErrorString</name><parameter_list>(<parameter><decl><type><name>ERR_enum</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZSTD_STRIP_ERROR_STRINGS</name></cpp:ifdef>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>code</name></expr>;</expr_stmt>
    <return>return <expr><literal type="string">"Error strings stripped"</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier> <specifier>const</specifier></type> <name>notErrorCode</name> <init>= <expr><literal type="string">"Unspecified error code"</literal></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>( <expr><name>code</name></expr> )</condition>
    <block>{<block_content>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>no_error</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"No error detected"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>:</case>  <return>return <expr><literal type="string">"Error (generic)"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>prefix_unknown</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Unknown frame descriptor"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>version_unsupported</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Version not supported"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>frameParameter_unsupported</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Unsupported frame parameter"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>frameParameter_windowTooLarge</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Frame requires too much memory for decoding"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Data corruption detected"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>checksum_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Restored data doesn't match checksum"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>parameter_unsupported</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Unsupported parameter"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>parameter_outOfBound</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Parameter is out of bound"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>init_missing</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Context should be init first"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>memory_allocation</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Allocation error : not enough memory"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>workSpace_tooSmall</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"workSpace buffer is not large enough"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>stage_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Operation not authorized at current processing stage"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"tableLog requires too much memory : unsupported"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>maxSymbolValue_tooLarge</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Unsupported max Symbol Value : too large"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>maxSymbolValue_tooSmall</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Specified maxSymbolValue is too small"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>stabilityCondition_notRespected</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"pledged buffer stability condition is not respected"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dictionary_corrupted</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Dictionary is corrupted"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dictionary_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Dictionary mismatch"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dictionaryCreation_failed</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Cannot create Dictionary from provided samples"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Destination buffer is too small"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>srcSize_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Src size is incorrect"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dstBuffer_null</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Operation on NULL destination buffer"</literal></expr>;</return>
        <comment type="block">/* following error codes are not stable and may be removed or changed in a future version */</comment>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>frameIndex_tooLarge</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Frame index is too large"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>seekableIO</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"An I/O error occurred when reading/seeking"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>dstBuffer_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Destination buffer is wrong"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>srcBuffer_wrong</name></expr></argument>)</argument_list></call></expr>:</case> <return>return <expr><literal type="string">"Source buffer is wrong"</literal></expr>;</return>
    <case>case <expr><call><name>PREFIX</name><argument_list>(<argument><expr><name>maxCode</name></expr></argument>)</argument_list></call></expr>:</case>
    <default>default:</default> <return>return <expr><name>notErrorCode</name></expr>;</return>
    </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
