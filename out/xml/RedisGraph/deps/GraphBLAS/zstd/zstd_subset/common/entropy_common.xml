<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/entropy_common.c"><comment type="block">/* ******************************************************************
 * Common functions of New Generation Entropy library
 * Copyright (c) Yann Collet, Facebook, Inc.
 *
 *  You can contact the author at :
 *  - FSE+HUF source repository : https://github.com/Cyan4973/FiniteStateEntropy
 *  - Public forum : https://groups.google.com/forum/#!forum/lz4c
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
****************************************************************** */</comment>

<comment type="block">/* *************************************
*  Dependencies
***************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_private.h"</cpp:file></cpp:include>       <comment type="block">/* ERR_*, ERROR */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>  <comment type="block">/* FSE_MIN_TABLELOG */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fse.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUF_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>  <comment type="block">/* HUF_TABLELOG_ABSOLUTEMAX */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"huf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>                <comment type="block">/* ZSDT_highbit32, ZSTD_countTrailingZeros32 */</comment>


<comment type="block">/*===   Version   ===*/</comment>
<function><type><name>unsigned</name></type> <name>FSE_versionNumber</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>FSE_VERSION_NUMBER</name></expr>;</return> </block_content>}</block></function>


<comment type="block">/*===   Error Management   ===*/</comment>
<function><type><name>unsigned</name></type> <name>FSE_isError</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_isError</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>FSE_getErrorName</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_getErrorName</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>HUF_isError</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_isError</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>HUF_getErrorName</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_getErrorName</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<comment type="block">/*-**************************************************************
*  FSE NCount encoding-decoding
****************************************************************/</comment>
<function><type><name>FORCE_INLINE_TEMPLATE</name>
<name>size_t</name></type> <name>FSE_readNCount_body</name><parameter_list>(<parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSVPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>headerBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>istart</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator> <name>headerBuffer</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>istart</name> <operator>+</operator> <name>hbSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><name>istart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nbBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>threshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>bitStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bitCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>charnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>maxSV1</name> <init>= <expr><operator>*</operator><name>maxSVPtr</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>previous0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>hbSize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* This function only works when hbSize &gt;= 8 */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>countSize</name> <init>= <expr><call><name>FSE_readNCount</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>,
                                                    <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>FSE_isError</name><argument_list>(<argument><expr><name>countSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>countSize</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>countSize</name> <operator>&gt;</operator> <name>hbSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <return>return <expr><name>countSize</name></expr>;</return>
    </block_content>}</block>   </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hbSize</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* init */</comment>
    <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>maxSVPtr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>normalizedCounter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* all symbols not present in NCount have a frequency of 0 */</comment>
    <expr_stmt><expr><name>bitStream</name> <operator>=</operator> <call><name>MEM_readLE32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbBits</name> <operator>=</operator> <operator>(</operator><name>bitStream</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>+</operator> <name>FSE_MIN_TABLELOG</name></expr>;</expr_stmt>   <comment type="block">/* extract tableLog */</comment>
    <if_stmt><if>if <condition>(<expr><name>nbBits</name> <operator>&gt;</operator> <name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bitStream</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitCount</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>tableLogPtr</name> <operator>=</operator> <name>nbBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>remaining</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>nbBits</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>threshold</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>nbBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbBits</name><operator>++</operator></expr>;</expr_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>previous0</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* Count the number of repeats. Each time the
             * 2-bit repeat code is 0b11 there is another
             * repeat.
             * Avoid UB by setting the high bit to 1.
             */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>repeats</name> <init>= <expr><call><name>ZSTD_countTrailingZeros32</name><argument_list>(<argument><expr><operator>~</operator><name>bitStream</name> <operator>|</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>repeats</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>charnum</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">12</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ip</name> <operator>&lt;=</operator> <name>iend</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><name>bitCount</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <literal type="number">7</literal> <operator>-</operator> <name>ip</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bitCount</name> <operator>&amp;=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ip</name> <operator>=</operator> <name>iend</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>bitStream</name> <operator>=</operator> <call><name>MEM_readLE32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>bitCount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>repeats</name> <operator>=</operator> <call><name>ZSTD_countTrailingZeros32</name><argument_list>(<argument><expr><operator>~</operator><name>bitStream</name> <operator>|</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>charnum</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <name>repeats</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitStream</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>repeats</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>repeats</name></expr>;</expr_stmt>

            <comment type="block">/* Add the final repeat which isn't 0b11. */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bitStream</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>charnum</name> <operator>+=</operator> <name>bitStream</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

            <comment type="block">/* This is an error, but break and return an error
             * at the end, because returning out of a loop makes
             * it harder for the compiler to optimize.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>charnum</name> <operator>&gt;=</operator> <name>maxSV1</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <comment type="block">/* We don't need to set the normalized count to 0
             * because we already memset the whole buffer to 0.
             */</comment>

            <if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ip</name> <operator>&lt;=</operator> <name>iend</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>ip</name> <operator>+</operator> <operator>(</operator><name>bitCount</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;=</operator> <name>iend</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>bitCount</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* For first condition to work */</comment>
                <expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>bitCount</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>bitCount</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>ip</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>&amp;=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ip</name> <operator>=</operator> <name>iend</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>bitStream</name> <operator>=</operator> <call><name>MEM_readLE32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>bitCount</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>max</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>threshold</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>remaining</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>bitStream</name> <operator>&amp;</operator> <operator>(</operator><name>threshold</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>U32</name><operator>)</operator><name>max</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <name>bitStream</name> <operator>&amp;</operator> <operator>(</operator><name>threshold</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <name>nbBits</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>count</name> <operator>=</operator> <name>bitStream</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>threshold</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>threshold</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>-=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <name>nbBits</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>   <comment type="block">/* extra accuracy */</comment>
            <comment type="block">/* When it matters (small blocks), this is a
             * predictable branch, because we don't use -1.
             */</comment>
            <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <name>count</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>remaining</name> <operator>+=</operator> <name>count</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name><name>normalizedCounter</name><index>[<expr><name>charnum</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>count</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>previous0</name> <operator>=</operator> <operator>!</operator><name>count</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>threshold</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* This branch can be folded into the
                 * threshold update condition because we
                 * know that threshold &gt; 1.
                 */</comment>
                <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>nbBits</name> <operator>=</operator> <call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>remaining</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>threshold</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>nbBits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>charnum</name> <operator>&gt;=</operator> <name>maxSV1</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>LIKELY</name><argument_list>(<argument><expr><name>ip</name> <operator>&lt;=</operator> <name>iend</name><operator>-</operator><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>ip</name> <operator>+</operator> <operator>(</operator><name>bitCount</name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>&lt;=</operator> <name>iend</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>bitCount</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>&amp;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>bitCount</name> <operator>-=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator> <name>ip</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>&amp;=</operator> <literal type="number">31</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ip</name> <operator>=</operator> <name>iend</name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>bitStream</name> <operator>=</operator> <call><name>MEM_readLE32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name>bitCount</name></expr>;</expr_stmt>
    </block_content>}</block>   </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* Only possible when there are too many zeros. */</comment>
    <if_stmt><if>if <condition>(<expr><name>charnum</name> <operator>&gt;</operator> <name>maxSV1</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>maxSymbolValue_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>bitCount</name> <operator>&gt;</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>maxSVPtr</name> <operator>=</operator> <name>charnum</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>ip</name> <operator>+=</operator> <operator>(</operator><name>bitCount</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <return>return <expr><name>ip</name><operator>-</operator><name>istart</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Avoids the FORCE_INLINE of the _body() function. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>FSE_readNCount_body_default</name><parameter_list>(
        <parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSVPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>headerBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_readNCount_body</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
<function><type><name>BMI2_TARGET_ATTRIBUTE</name> <specifier>static</specifier> <name>size_t</name></type> <name>FSE_readNCount_body_bmi2</name><parameter_list>(
        <parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSVPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>headerBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_readNCount_body</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>FSE_readNCount_bmi2</name><parameter_list>(
        <parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSVPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>headerBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bmi2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>bmi2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>FSE_readNCount_body_bmi2</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bmi2</name></expr>;</expr_stmt>
    <return>return <expr><call><name>FSE_readNCount_body_default</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_readNCount</name><parameter_list>(
        <parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSVPtr</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>headerBuffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hbSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_readNCount_bmi2</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSVPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>headerBuffer</name></expr></argument>, <argument><expr><name>hbSize</name></expr></argument>, <comment type="block">/* bmi2 */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*! HUF_readStats() :
    Read compact Huffman tree, saved by HUF_writeCTable().
    `huffWeight` is destination buffer.
    `rankStats` is assumed to be a table of at least HUF_TABLELOG_MAX U32.
    @return : size read from `src` , or an error Code .
    Note : Needed by HUF_readCTable() and HUF_readDTableX?() .
*/</comment>
<function><type><name>size_t</name></type> <name>HUF_readStats</name><parameter_list>(<parameter><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>huffWeight</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hwSize</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>rankStats</name></decl></parameter>,
                     <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>nbSymbolsPtr</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name><name>wksp</name><index>[<expr><name>HUF_READ_STATS_WORKSPACE_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>
    <return>return <expr><call><name>HUF_readStats_wksp</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name></expr></argument>, <argument><expr><name>rankStats</name></expr></argument>, <argument><expr><name>nbSymbolsPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>wksp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wksp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <comment type="block">/* bmi2 */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE_TEMPLATE</name> <name>size_t</name></type>
<name>HUF_readStats_body</name><parameter_list>(<parameter><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>huffWeight</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hwSize</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>rankStats</name></decl></parameter>,
                   <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>nbSymbolsPtr</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                   <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>,
                   <parameter><decl><type><name>int</name></type> <name>bmi2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name>weightTotal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>iSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>oSize</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>srcSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>srcSize_wrong</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iSize</name> <operator>=</operator> <name><name>ip</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/* ZSTD_memset(huffWeight, 0, hwSize);   */</comment><comment type="block">/* is not necessary, even though some analyzer complain ... */</comment>

    <if_stmt><if>if <condition>(<expr><name>iSize</name> <operator>&gt;=</operator> <literal type="number">128</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* special header */</comment>
        <expr_stmt><expr><name>oSize</name> <operator>=</operator> <name>iSize</name> <operator>-</operator> <literal type="number">127</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iSize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>oSize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iSize</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>srcSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>srcSize_wrong</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>oSize</name> <operator>&gt;=</operator> <name>hwSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>n</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>oSize</name></expr>;</condition> <incr><expr><name>n</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>huffWeight</name><index>[<expr><name>n</name></expr>]</index></name>   <operator>=</operator> <name><name>ip</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>huffWeight</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ip</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    </block_content>}</block></for>   </block_content>}</block>   </block_content>}</block></if>
    <else>else  <block>{<block_content>   <comment type="block">/* header compressed with FSE (normal case) */</comment>
        <if_stmt><if>if <condition>(<expr><name>iSize</name><operator>+</operator><literal type="number">1</literal> <operator>&gt;</operator> <name>srcSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>srcSize_wrong</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* max (hwSize-1) values decoded, as last one is implied */</comment>
        <expr_stmt><expr><name>oSize</name> <operator>=</operator> <call><name>FSE_decompress_wksp_bmi2</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ip</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iSize</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <argument><expr><name>bmi2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>FSE_isError</name><argument_list>(<argument><expr><name>oSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>oSize</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* collect weight stats */</comment>
    <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>rankStats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>HUF_TABLELOG_MAX</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>U32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>weightTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>n</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>oSize</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>huffWeight</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&gt;</operator> <name>HUF_TABLELOG_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>rankStats</name><index>[<expr><name><name>huffWeight</name><index>[<expr><name>n</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>weightTotal</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>huffWeight</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>   </block_content>}</block>
    <if_stmt><if>if <condition>(<expr><name>weightTotal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* get last non-null symbol weight (implied, total must be 2^n) */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>tableLog</name> <init>= <expr><call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>weightTotal</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>HUF_TABLELOG_MAX</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>tableLogPtr</name> <operator>=</operator> <name>tableLog</name></expr>;</expr_stmt>
        <comment type="block">/* determine last weight */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>total</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>rest</name> <init>= <expr><name>total</name> <operator>-</operator> <name>weightTotal</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>verif</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>lastWeight</name> <init>= <expr><call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>rest</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>verif</name> <operator>!=</operator> <name>rest</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>    <comment type="block">/* last value must be a clean power of 2 */</comment>
            <expr_stmt><expr><name><name>huffWeight</name><index>[<expr><name>oSize</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>lastWeight</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rankStats</name><index>[<expr><name>lastWeight</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>   </block_content>}</block>

    <comment type="block">/* check tree construction validity */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>rankStats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>rankStats</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>corruption_detected</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* by construction : at least 2 elts of rank 1, must be even */</comment>

    <comment type="block">/* results */</comment>
    <expr_stmt><expr><operator>*</operator><name>nbSymbolsPtr</name> <operator>=</operator> <operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>oSize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><name>iSize</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Avoids the FORCE_INLINE of the _body() function. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>HUF_readStats_body_default</name><parameter_list>(<parameter><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>huffWeight</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hwSize</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>rankStats</name></decl></parameter>,
                     <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>nbSymbolsPtr</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                     <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>HUF_readStats_body</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name></expr></argument>, <argument><expr><name>rankStats</name></expr></argument>, <argument><expr><name>nbSymbolsPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>BMI2_TARGET_ATTRIBUTE</name> <name>size_t</name></type> <name>HUF_readStats_body_bmi2</name><parameter_list>(<parameter><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>huffWeight</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hwSize</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>rankStats</name></decl></parameter>,
                     <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>nbSymbolsPtr</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                     <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>HUF_readStats_body</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name></expr></argument>, <argument><expr><name>rankStats</name></expr></argument>, <argument><expr><name>nbSymbolsPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>HUF_readStats_wksp</name><parameter_list>(<parameter><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>huffWeight</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>hwSize</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>rankStats</name></decl></parameter>,
                     <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>nbSymbolsPtr</name></decl></parameter>, <parameter><decl><type><name>U32</name><modifier>*</modifier></type> <name>tableLogPtr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                     <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>bmi2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>bmi2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>HUF_readStats_body_bmi2</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name></expr></argument>, <argument><expr><name>rankStats</name></expr></argument>, <argument><expr><name>nbSymbolsPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bmi2</name></expr>;</expr_stmt>
    <return>return <expr><call><name>HUF_readStats_body_default</name><argument_list>(<argument><expr><name>huffWeight</name></expr></argument>, <argument><expr><name>hwSize</name></expr></argument>, <argument><expr><name>rankStats</name></expr></argument>, <argument><expr><name>nbSymbolsPtr</name></expr></argument>, <argument><expr><name>tableLogPtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
