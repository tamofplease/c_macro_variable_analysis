<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/zstd_common.c"><comment type="block">/*
 * Copyright (c) Yann Collet, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>



<comment type="block">/*-*************************************
*  Dependencies
***************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTD_DEPS_NEED_MALLOC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_deps.h"</cpp:file></cpp:include>   <comment type="block">/* ZSTD_malloc, ZSTD_calloc, ZSTD_free, ZSTD_memset */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_internal.h"</cpp:file></cpp:include>


<comment type="block">/*-****************************************
*  Version
******************************************/</comment>
<function><type><name>unsigned</name></type> <name>ZSTD_versionNumber</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ZSTD_VERSION_NUMBER</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ZSTD_versionString</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>ZSTD_VERSION_STRING</name></expr>;</return> </block_content>}</block></function>


<comment type="block">/*-****************************************
*  ZSTD Error Management
******************************************/</comment>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ZSTD_isError</name></cpp:undef>   <comment type="block">/* defined within zstd_internal.h */</comment>
<comment type="block" format="doxygen">/*! ZSTD_isError() :
 *  tells if a return value is an error code
 *  symbol is required for external callers */</comment>
<function><type><name>unsigned</name></type> <name>ZSTD_isError</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_isError</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_getErrorName() :
 *  provides error code string from function result (useful for debugging) */</comment>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ZSTD_getErrorName</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_getErrorName</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_getError() :
 *  convert a `size_t` function result into a proper ZSTD_errorCode enum */</comment>
<function><type><name>ZSTD_ErrorCode</name></type> <name>ZSTD_getErrorCode</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_getErrorCode</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/*! ZSTD_getErrorString() :
 *  provides error code string from enum */</comment>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ZSTD_getErrorString</name><parameter_list>(<parameter><decl><type><name>ZSTD_ErrorCode</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_getErrorString</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>



<comment type="block">/*=**************************************************************
*  Custom allocator
****************************************************************/</comment>
<function><type><name>void</name><modifier>*</modifier></type> <name>ZSTD_customMalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>customMem</name><operator>.</operator><name>customAlloc</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name><name>customMem</name><operator>.</operator><name>customAlloc</name></name><argument_list>(<argument><expr><name><name>customMem</name><operator>.</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>ZSTD_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>ZSTD_customCalloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>customMem</name><operator>.</operator><name>customAlloc</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* calloc implemented as malloc+memset;
         * not as efficient as calloc, but next best guess for custom malloc */</comment>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><call><name><name>customMem</name><operator>.</operator><name>customAlloc</name></name><argument_list>(<argument><expr><name><name>customMem</name><operator>.</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ptr</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>ZSTD_calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ZSTD_customFree</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ptr</name><operator>!=</operator><name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>customMem</name><operator>.</operator><name>customFree</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>customMem</name><operator>.</operator><name>customFree</name></name><argument_list>(<argument><expr><name><name>customMem</name><operator>.</operator><name>opaque</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ZSTD_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
