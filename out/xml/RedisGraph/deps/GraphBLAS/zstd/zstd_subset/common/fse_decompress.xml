<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/fse_decompress.c"><comment type="block">/* ******************************************************************
 * FSE : Finite State Entropy decoder
 * Copyright (c) Yann Collet, Facebook, Inc.
 *
 *  You can contact the author at :
 *  - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy
 *  - Public forum : https://groups.google.com/forum/#!forum/lz4c
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
****************************************************************** */</comment>


<comment type="block">/* **************************************************************
*  Includes
****************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>      <comment type="block">/* assert */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bitstream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compiler.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_private.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTD_DEPS_NEED_MALLOC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_deps.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>       <comment type="block">/* ZSTD_highbit32 */</comment>


<comment type="block">/* **************************************************************
*  Error Management
****************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_isError</name></cpp:macro> <cpp:value>ERR_isError</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEBUG_STATIC_ASSERT(c)</cpp:value></cpp:define>   <comment type="block">/* use only *after* variable declarations */</comment>


<comment type="block">/* **************************************************************
*  Templates
****************************************************************/</comment>
<comment type="block">/*
  designed to be included
  for type-specific functions (template emulation in C)
  Objective is to write these functions only once, for improved maintenance
*/</comment>

<comment type="block">/* safety checks */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_FUNCTION_EXTENSION</name></cpp:ifndef>
<cpp:error>#  <cpp:directive>error</cpp:directive> <cpp:literal>"FSE_FUNCTION_EXTENSION must be defined"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_FUNCTION_TYPE</name></cpp:ifndef>
<cpp:error>#  <cpp:directive>error</cpp:directive> <cpp:literal>"FSE_FUNCTION_TYPE must be defined"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Function names */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_CAT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X##Y</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_FUNCTION_NAME</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSE_CAT(X,Y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_TYPE_NAME</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSE_CAT(X,Y)</cpp:value></cpp:define>


<comment type="block">/* Function templates */</comment>
<function><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>FSE_createDTable</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>FSE_DTable</name><operator>*</operator><operator>)</operator><call><name>ZSTD_malloc</name><argument_list>( <argument><expr><call><name>FSE_DTABLE_SIZE_U32</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>U32</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FSE_freeDTable</name> <parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ZSTD_free</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>FSE_buildDTable_internal</name><parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tdPtr</name> <init>= <expr><name>dt</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* because *dt is unsigned, 32-bits aligned on 32-bits */</comment>
    <decl_stmt><decl><type><name>FSE_DECODE_TYPE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tableDecode</name> <init>= <expr><operator>(</operator><name>FSE_DECODE_TYPE</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>tdPtr</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U16</name><modifier>*</modifier></type> <name>symbolNext</name> <init>= <expr><operator>(</operator><name>U16</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>spread</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name>symbolNext</name> <operator>+</operator> <name>maxSymbolValue</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>maxSV1</name> <init>= <expr><name>maxSymbolValue</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>tableSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>highThreshold</name> <init>= <expr><name>tableSize</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Sanity Checks */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FSE_BUILD_DTABLE_WKSP_SIZE</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wkspSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>maxSymbolValue_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>maxSymbolValue</name> <operator>&gt;</operator> <name>FSE_MAX_SYMBOL_VALUE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>maxSymbolValue_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Init, lay down lowprob symbols */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>FSE_DTableHeader</name></type> <name>DTableH</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>DTableH</name><operator>.</operator><name>tableLog</name></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator><name>tableLog</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>DTableH</name><operator>.</operator><name>fastMode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>S16</name> <specifier>const</specifier></type> <name>largeLimit</name><init>= <expr><operator>(</operator><name>S16</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>tableLog</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>tableDecode</name><index>[<expr><name>highThreshold</name><operator>--</operator></expr>]</index></name><operator>.</operator><name>symbol</name> <operator>=</operator> <operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>symbolNext</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;=</operator> <name>largeLimit</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>DTableH</name><operator>.</operator><name>fastMode</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name><name>symbolNext</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>   </block_content>}</block></for>   </block_content>}</block>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>DTableH</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DTableH</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Spread symbols */</comment>
    <if_stmt><if>if <condition>(<expr><name>highThreshold</name> <operator>==</operator> <name>tableSize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>tableMask</name> <init>= <expr><name>tableSize</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>step</name> <init>= <expr><call><name>FSE_TABLESTEP</name><argument_list>(<argument><expr><name>tableSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* First lay down the symbols in order.
         * We use a uint64_t to lay down 8 bytes at a time. This reduces branch
         * misses since small blocks generally have small table logs, so nearly
         * all symbols have counts &lt;= 8. We ensure we have 8 bytes at the end of
         * our buffer to handle the over-write.
         */</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>add</name> <init>= <expr><literal type="number">0x0101010101010101ull</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U64</name></type> <name>sv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr><operator>,</operator> <expr><name>sv</name> <operator>+=</operator> <name>add</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>n</name> <init>= <expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>MEM_write64</name><argument_list>(<argument><expr><name>spread</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>MEM_write64</name><argument_list>(<argument><expr><name>spread</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <comment type="block">/* Now we spread those positions across the table.
         * The benefit of doing it in two stages is that we avoid the
         * variable size inner loop, which caused lots of branch misses.
         * Now we can run through all the positions without any branch misses.
         * We unroll the loop twice, since that is what empirically worked best.
         */</comment>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>unroll</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tableSize</name> <operator>%</operator> <name>unroll</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* FSE_MIN_TABLELOG is 5 */</comment>
            <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>tableSize</name></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <name>unroll</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>unroll</name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>uPosition</name> <init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>*</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>tableDecode</name><index>[<expr><name>uPosition</name></expr>]</index></name><operator>.</operator><name>symbol</name> <operator>=</operator> <name><name>spread</name><index>[<expr><name>s</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <operator>(</operator><name>unroll</name> <operator>*</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>tableMask</name> <init>= <expr><name>tableSize</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>step</name> <init>= <expr><call><name>FSE_TABLESTEP</name><argument_list>(<argument><expr><name>tableSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>tableDecode</name><index>[<expr><name>position</name></expr>]</index></name><operator>.</operator><name>symbol</name> <operator>=</operator> <operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <name>step</name><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>highThreshold</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <name>step</name><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt></block_content></block></while>   <comment type="block">/* lowprob area */</comment>
        </block_content>}</block></for>   </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>position</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* position must reach all cells once, otherwise normalizedCounter is incorrect */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Build Decoding table */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>u</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name><operator>&lt;</operator><name>tableSize</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>FSE_FUNCTION_TYPE</name> <specifier>const</specifier></type> <name>symbol</name> <init>= <expr><operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>)</operator><operator>(</operator><name><name>tableDecode</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>symbol</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>nextState</name> <init>= <expr><name><name>symbolNext</name><index>[<expr><name>symbol</name></expr>]</index></name><operator>++</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>tableDecode</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>nbBits</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator> <operator>(</operator><name>tableLog</name> <operator>-</operator> <call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>nextState</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tableDecode</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>newState</name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <operator>(</operator> <operator>(</operator><name>nextState</name> <operator>&lt;&lt;</operator> <name><name>tableDecode</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>nbBits</name><operator>)</operator> <operator>-</operator> <name>tableSize</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>   </block_content>}</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_buildDTable_wksp</name><parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_buildDTable_internal</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_COMMONDEFS_ONLY</name></cpp:ifndef>

<comment type="block">/*-*******************************************************
*  Decompression (Byte symbols)
*********************************************************/</comment>
<function><type><name>size_t</name></type> <name>FSE_buildDTable_rle</name> <parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>BYTE</name></type> <name>symbolValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>dt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DTableHeader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>DTableH</name> <init>= <expr><operator>(</operator><name>FSE_DTableHeader</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dPtr</name> <init>= <expr><name>dt</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_decode_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>cell</name> <init>= <expr><operator>(</operator><name>FSE_decode_t</name><operator>*</operator><operator>)</operator><name>dPtr</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>DTableH</name><operator>-&gt;</operator><name>tableLog</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DTableH</name><operator>-&gt;</operator><name>fastMode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>newState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>symbol</name></name> <operator>=</operator> <name>symbolValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cell</name><operator>-&gt;</operator><name>nbBits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>FSE_buildDTable_raw</name> <parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nbBits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>dt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DTableHeader</name><modifier>*</modifier> <specifier>const</specifier></type> <name>DTableH</name> <init>= <expr><operator>(</operator><name>FSE_DTableHeader</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>dPtr</name> <init>= <expr><name>dt</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_decode_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>dinfo</name> <init>= <expr><operator>(</operator><name>FSE_decode_t</name><operator>*</operator><operator>)</operator><name>dPtr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tableSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbBits</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tableMask</name> <init>= <expr><name>tableSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>maxSV1</name> <init>= <expr><name>tableMask</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>

    <comment type="block">/* Sanity checks */</comment>
    <if_stmt><if>if <condition>(<expr><name>nbBits</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>         <comment type="block">/* min size */</comment>

    <comment type="block">/* Build Decoding Table */</comment>
    <expr_stmt><expr><name><name>DTableH</name><operator>-&gt;</operator><name>tableLog</name></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator><name>nbBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DTableH</name><operator>-&gt;</operator><name>fastMode</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>dinfo</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>newState</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dinfo</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>symbol</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dinfo</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>nbBits</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>nbBits</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE_TEMPLATE</name> <name>size_t</name></type> <name>FSE_decompress_usingDTable_generic</name><parameter_list>(
          <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maxDstSize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>fast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><name>ostart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>omax</name> <init>= <expr><name>op</name> <operator>+</operator> <name>maxDstSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>olimit</name> <init>= <expr><name>omax</name><operator>-</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>BIT_DStream_t</name></type> <name>bitD</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DState_t</name></type> <name>state1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DState_t</name></type> <name>state2</name></decl>;</decl_stmt>

    <comment type="block">/* Init */</comment>
    <expr_stmt><expr><call><name>CHECK_F</name><argument_list>(<argument><expr><call><name>BIT_initDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FSE_initDState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FSE_initDState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_GETSYMBOL</name><parameter_list>(<parameter><type><name>statePtr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fast ? FSE_decodeSymbolFast(statePtr, &amp;bitD) : FSE_decodeSymbol(statePtr, &amp;bitD)</cpp:value></cpp:define>

    <comment type="block">/* 4 symbols per loop */</comment>
    <for>for <control>( <init>;</init> <condition><expr><operator>(</operator><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call><operator>==</operator><name>BIT_DStream_unfinished</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>op</name><operator>&lt;</operator><name>olimit</name><operator>)</operator></expr> ;</condition> <incr><expr><name>op</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">7</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>bitD</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* This test must be static */</comment>
            <expr_stmt><expr><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">7</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>bitD</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition>    <comment type="block">/* This test must be static */</comment>
            <block>{<block_content> <if_stmt><if>if <condition>(<expr><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>BIT_DStream_unfinished</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break> </block_content>}</block></if></if_stmt> </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">7</literal> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>bitD</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>    <comment type="block">/* This test must be static */</comment>
            <expr_stmt><expr><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* tail */</comment>
    <comment type="block">/* note : BIT_reloadDStream(&amp;bitD) &gt;= FSE_DStream_partiallyFilled; Ends at exactly BIT_DStream_completed */</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>op</name><operator>&gt;</operator><operator>(</operator><name>omax</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call><operator>==</operator><name>BIT_DStream_overflow</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>op</name><operator>&gt;</operator><operator>(</operator><name>omax</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>BIT_reloadDStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitD</name></expr></argument>)</argument_list></call><operator>==</operator><name>BIT_DStream_overflow</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>op</name><operator>++</operator> <operator>=</operator> <call><name>FSE_GETSYMBOL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></if></if_stmt>   </block_content>}</block></while>

    <return>return <expr><name>op</name><operator>-</operator><name>ostart</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>FSE_decompress_usingDTable</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>originalSize</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>dt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>FSE_DTableHeader</name><modifier>*</modifier></type> <name>DTableH</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>FSE_DTableHeader</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>U32</name></type> <name>fastMode</name> <init>= <expr><name><name>DTableH</name><operator>-&gt;</operator><name>fastMode</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* select fast mode (static) */</comment>
    <if_stmt><if>if <condition>(<expr><name>fastMode</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FSE_decompress_usingDTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>FSE_decompress_usingDTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>originalSize</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>FSE_decompress_wksp</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_decompress_wksp_bmi2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>maxLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <comment type="block">/* bmi2 */</comment> <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>short</name></type> <name><name>ncount</name><index>[<expr><name>FSE_MAX_SYMBOL_VALUE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DTable</name></type> <name><name>dtable</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* Dynamically sized */</comment>
}</block></struct></type> <name>FSE_DecompressWksp</name>;</typedef>


<function><type><name>FORCE_INLINE_TEMPLATE</name> <name>size_t</name></type> <name>FSE_decompress_wksp_body</name><parameter_list>(
        <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>,
        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>,
        <parameter><decl><type><name>unsigned</name></type> <name>maxLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>,
        <parameter><decl><type><name>int</name></type> <name>bmi2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>istart</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>cSrc</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><name>istart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>tableLog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name> <init>= <expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_DecompressWksp</name><modifier>*</modifier> <specifier>const</specifier></type> <name>wksp</name> <init>= <expr><operator>(</operator><name>FSE_DecompressWksp</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DEBUG_STATIC_ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>FSE_MAX_SYMBOL_VALUE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>wkspSize</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wksp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* normal FSE decoding mode */</comment>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>NCountLength</name> <init>= <expr><call><name>FSE_readNCount_bmi2</name><argument_list>(<argument><expr><name><name>wksp</name><operator>-&gt;</operator><name>ncount</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxSymbolValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tableLog</name></expr></argument>, <argument><expr><name>istart</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>bmi2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>FSE_isError</name><argument_list>(<argument><expr><name>NCountLength</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NCountLength</name></expr>;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>maxLog</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>NCountLength</name> <operator>&lt;=</operator> <name>cSrcSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ip</name> <operator>+=</operator> <name>NCountLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cSrcSize</name> <operator>-=</operator> <name>NCountLength</name></expr>;</expr_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><call><name>FSE_DECOMPRESS_WKSP_SIZE</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wkspSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wksp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>FSE_DTABLE_SIZE</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>workSpace</name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>workSpace</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wksp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>FSE_DTABLE_SIZE</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wkspSize</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wksp</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>FSE_DTABLE_SIZE</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>CHECK_F</name><argument_list>( <argument><expr><call><name>FSE_buildDTable_internal</name><argument_list>(<argument><expr><name><name>wksp</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument>, <argument><expr><name><name>wksp</name><operator>-&gt;</operator><name>ncount</name></name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name><name>wksp</name><operator>-&gt;</operator><name>dtable</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>FSE_DTableHeader</name><modifier>*</modifier></type> <name>DTableH</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>FSE_DTableHeader</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>U32</name></type> <name>fastMode</name> <init>= <expr><name><name>DTableH</name><operator>-&gt;</operator><name>fastMode</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* select fast mode (static) */</comment>
        <if_stmt><if>if <condition>(<expr><name>fastMode</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>FSE_decompress_usingDTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name><name>wksp</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <return>return <expr><call><name>FSE_decompress_usingDTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name><name>wksp</name><operator>-&gt;</operator><name>dtable</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<comment type="block">/* Avoids the FORCE_INLINE of the _body() function. */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>FSE_decompress_wksp_body_default</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_decompress_wksp_body</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>maxLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
<function><type><name>BMI2_TARGET_ATTRIBUTE</name> <specifier>static</specifier> <name>size_t</name></type> <name>FSE_decompress_wksp_body_bmi2</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_decompress_wksp_body</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>maxLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>size_t</name></type> <name>FSE_decompress_wksp_bmi2</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bmi2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DYNAMIC_BMI2</name></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><name>bmi2</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>FSE_decompress_wksp_body_bmi2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>maxLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>bmi2</name></expr>;</expr_stmt>
    <return>return <expr><call><name>FSE_decompress_wksp_body_default</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>maxLog</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>wkspSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<typedef>typedef <type><name>FSE_DTable</name></type> <name><name>DTable_max_t</name><index>[<expr><call><name>FSE_DTABLE_SIZE_U32</name><argument_list>(<argument><expr><name>FSE_MAX_TABLELOG</name></expr></argument>)</argument_list></call></expr>]</index></name>;</typedef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZSTD_NO_UNUSED_FUNCTIONS</name></cpp:ifndef>
<function><type><name>size_t</name></type> <name>FSE_buildDTable</name><parameter_list>(<parameter><decl><type><name>FSE_DTable</name><modifier>*</modifier></type> <name>dt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name><name>wksp</name><index>[<expr><call><name>FSE_BUILD_DTABLE_WKSP_SIZE_U32</name><argument_list>(<argument><expr><name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr></argument>, <argument><expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
    <return>return <expr><call><name>FSE_buildDTable_wksp</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>wksp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wksp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_decompress</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>cSrc</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cSrcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Static analyzer seems unable to understand this table will be properly initialized later */</comment>
    <decl_stmt><decl><type><name>U32</name></type> <name><name>wksp</name><index>[<expr><call><name>FSE_DECOMPRESS_WKSP_SIZE_U32</name><argument_list>(<argument><expr><name>FSE_MAX_TABLELOG</name></expr></argument>, <argument><expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
    <return>return <expr><call><name>FSE_decompress_wksp</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>cSrc</name></expr></argument>, <argument><expr><name>cSrcSize</name></expr></argument>, <argument><expr><name>FSE_MAX_TABLELOG</name></expr></argument>, <argument><expr><name>wksp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wksp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* FSE_COMMONDEFS_ONLY */</comment>
</unit>
