<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/pool.c"><comment type="block">/*
 * Copyright (c) Yann Collet, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>


<comment type="block">/* ======   Dependencies   ======= */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_deps.h"</cpp:file></cpp:include> <comment type="block">/* size_t */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.h"</cpp:file></cpp:include>     <comment type="block">/* assert */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_internal.h"</cpp:file></cpp:include>  <comment type="block">/* ZSTD_customMalloc, ZSTD_customFree */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pool.h"</cpp:file></cpp:include>

<comment type="block">/* ======   Compiler specifics   ====== */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#  <cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4204</name><name>)</name></cpp:pragma>        <comment type="block">/* disable: C4204: non-constant aggregate initializer */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ZSTD_MULTITHREAD</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>   <comment type="block">/* pthread adaptation */</comment>

<comment type="block">/* A job is a function and an opaque argument */</comment>
<typedef>typedef <type><struct>struct <name>POOL_job_s</name> <block>{
    <decl_stmt><decl><type><name>POOL_function</name></type> <name>function</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>
}</block></struct></type> <name>POOL_job</name>;</typedef>

<struct>struct <name>POOL_ctx_s</name> <block>{
    <decl_stmt><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl>;</decl_stmt>
    <comment type="block">/* Keep track of the threads */</comment>
    <decl_stmt><decl><type><name>ZSTD_pthread_t</name><modifier>*</modifier></type> <name>threads</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>threadCapacity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>threadLimit</name></decl>;</decl_stmt>

    <comment type="block">/* The queue is a circular buffer */</comment>
    <decl_stmt><decl><type><name>POOL_job</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>queueHead</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>queueTail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>queueSize</name></decl>;</decl_stmt>

    <comment type="block">/* The number of threads working on jobs */</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>numThreadsBusy</name></decl>;</decl_stmt>
    <comment type="block">/* Indicates if the queue is empty */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>queueEmpty</name></decl>;</decl_stmt>

    <comment type="block">/* The mutex protects the queue */</comment>
    <decl_stmt><decl><type><name>ZSTD_pthread_mutex_t</name></type> <name>queueMutex</name></decl>;</decl_stmt>
    <comment type="block">/* Condition variable for pushers to wait on when the queue is full */</comment>
    <decl_stmt><decl><type><name>ZSTD_pthread_cond_t</name></type> <name>queuePushCond</name></decl>;</decl_stmt>
    <comment type="block">/* Condition variables for poppers to wait on when the queue is empty */</comment>
    <decl_stmt><decl><type><name>ZSTD_pthread_cond_t</name></type> <name>queuePopCond</name></decl>;</decl_stmt>
    <comment type="block">/* Indicates if the queue is shutting down */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>shutdown</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* POOL_thread() :
 * Work thread for the thread pool.
 * Waits for jobs and executes them.
 * @returns : NULL on failure else non-null.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>POOL_thread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>POOL_ctx</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ctx</name> <init>= <expr><operator>(</operator><name>POOL_ctx</name><operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <comment type="block">/* Lock the mutex and wait for a non-empty queue or until shutdown */</comment>
        <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name>
            <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadLimit</name></name><operator>)</operator></expr> )</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition> <block>{<block_content>
                <comment type="block">/* even if !queueEmpty, (possible if numThreadsBusy &gt;= threadLimit),
                 * a few threads will be shutdown while !queueEmpty,
                 * but enough threads will remain active to finish the queue */</comment>
                <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>opaque</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>ZSTD_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <comment type="block">/* Pop a job off the queue */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>POOL_job</name> <specifier>const</specifier></type> <name>job</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name><operator>)</operator></expr>;</expr_stmt>
            <comment type="block">/* Unlock the mutex, signal a pusher, and run the job */</comment>
            <expr_stmt><expr><call><name>ZSTD_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>job</name><operator>.</operator><name>function</name></name><argument_list>(<argument><expr><name><name>job</name><operator>.</operator><name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* If the intended queue size was 0, signal after finishing job */</comment>
            <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ZSTD_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></for>  <comment type="block">/* for (;;) */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Unreachable */</comment>
</block_content>}</block></function>

<comment type="block">/* ZSTD_createThreadPool() : public access point */</comment>
<function><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ZSTD_createThreadPool</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>POOL_create</name> <argument_list>(<argument><expr><name>numThreads</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>POOL_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>queueSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>POOL_create_advanced</name><argument_list>(<argument><expr><name>numThreads</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>ZSTD_defaultCMem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>POOL_create_advanced</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>queueSize</name></decl></parameter>,
                               <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl>;</decl_stmt>
    <comment type="block">/* Check parameters */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>numThreads</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    <comment type="block">/* Allocate the context and zero initialize */</comment>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>POOL_ctx</name><operator>*</operator><operator>)</operator><call><name>ZSTD_customCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>POOL_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>customMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    <comment type="block">/* Initialize the job queue.
     * It needs one extra space since one space is wasted to differentiate
     * empty and full queues.
     */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name> <operator>=</operator> <name>queueSize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <operator>(</operator><name>POOL_job</name><operator>*</operator><operator>)</operator><call><name>ZSTD_customMalloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>POOL_job</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>customMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>error</name> <operator>|=</operator> <call><name>ZSTD_pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>error</name> <operator>|=</operator> <call><name>ZSTD_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>error</name> <operator>|=</operator> <call><name>ZSTD_pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>POOL_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* Allocate space for the thread handles */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <operator>(</operator><name>ZSTD_pthread_t</name><operator>*</operator><operator>)</operator><call><name>ZSTD_customMalloc</name><argument_list>(<argument><expr><name>numThreads</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>customMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name> <operator>=</operator> <name>customMem</name></expr>;</expr_stmt>
    <comment type="block">/* Check for errors */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name> <operator>||</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>POOL_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>NULL</name></expr>;</return> </block_content>}</block></if></if_stmt>
    <comment type="block">/* Initialize the threads */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>ZSTD_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>POOL_thread</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>POOL_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>   </block_content>}</block></for>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>=</operator> <name>numThreads</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadLimit</name></name> <operator>=</operator> <name>numThreads</name></expr>;</expr_stmt>
    </block_content>}</block>
    <return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! POOL_join() :
    Shutdown the queue, wake any sleeping threads, and join all of the threads.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>POOL_join</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="block">/* Shut down the queue */</comment>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>shutdown</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wake up sleeping threads */</comment>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Join all of the threads */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>ZSTD_pthread_join</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* note : could fail */</comment>
    </block_content>}</block></for>   </block_content>}</block>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>POOL_free</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content> <return>return;</return> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>POOL_join</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*! POOL_joinJobs() :
 *  Waits for all queued jobs to finish executing.
 */</comment>
<function><type><name>void</name></type> <name>POOL_joinJobs</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ZSTD_freeThreadPool</name> <parameter_list>(<parameter><decl><type><name>ZSTD_threadPool</name><modifier>*</modifier></type> <name>pool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>POOL_free</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>POOL_sizeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctx</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* supports sizeof NULL */</comment>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof>
        <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>POOL_job</name></expr></argument>)</argument_list></sizeof>
        <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_pthread_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* @return : 0 on success, 1 on error */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>POOL_resize_internal</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numThreads</name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>numThreads</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadLimit</name></name> <operator>=</operator> <name>numThreads</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* numThreads &gt; threadCapacity */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>ZSTD_pthread_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>threadPool</name> <init>= <expr><operator>(</operator><name>ZSTD_pthread_t</name><operator>*</operator><operator>)</operator><call><name>ZSTD_customMalloc</name><argument_list>(<argument><expr><name>numThreads</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ZSTD_pthread_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>threadPool</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <comment type="block">/* replace existing thread pool */</comment>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>threadPool</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>threadPool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ZSTD_customFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>customMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threads</name></name> <operator>=</operator> <name>threadPool</name></expr>;</expr_stmt>
        <comment type="block">/* Initialize additional threads */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name></type> <name>threadId</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>threadId</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name></expr>;</init> <condition><expr><name>threadId</name> <operator>&lt;</operator> <name>numThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>threadId</name></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>ZSTD_pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>threadPool</name><index>[<expr><name>threadId</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>POOL_thread</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">1</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>   </block_content>}</block></for>
    </block_content>}</block>   </block_content>}</block>
    <comment type="block">/* successfully expanded */</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadCapacity</name></name> <operator>=</operator> <name>numThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>threadLimit</name></name> <operator>=</operator> <name>numThreads</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* @return : 0 on success, 1 on error */</comment>
<function><type><name>int</name></type> <name>POOL_resize</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctx</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>POOL_resize_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>numThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Returns 1 if the queue is full and 0 otherwise.
 *
 * When queueSize is 1 (pool was created with an intended queueSize of 0),
 * then a queue is empty if there is a thread free _and_ no job is waiting.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isQueueFull</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name> <specifier>const</specifier><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>queueHead</name></name> <operator>==</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name><operator>)</operator></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>numThreadsBusy</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>threadLimit</name></name><operator>)</operator> <operator>||</operator>
               <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>POOL_add_internal</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>POOL_function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>POOL_job</name> <specifier>const</specifier></type> <name>job</name> <init>= <expr><block>{<expr><name>function</name></expr>, <expr><name>opaque</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>shutdown</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueEmpty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queue</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name></expr>]</index></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueTail</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>ctx</name><operator>-&gt;</operator><name>queueSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePopCond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>POOL_add</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>POOL_function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Wait until there is space in the queue for the new job */</comment>
    <while>while <condition>(<expr><call><name>isQueueFull</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>shutdown</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queuePushCond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>POOL_add_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>POOL_tryAdd</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>POOL_function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>isQueueFull</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>POOL_add_internal</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ZSTD_pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>queueMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="block">/* ZSTD_MULTITHREAD  not defined */</comment>

<comment type="block">/* ========================== */</comment>
<comment type="block">/* No multi-threading support */</comment>
<comment type="block">/* ========================== */</comment>


<comment type="block">/* We don't need any data, but if it is empty, malloc() might return NULL. */</comment>
<struct>struct <name>POOL_ctx_s</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dummy</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>POOL_ctx</name></type> <name>g_poolCtx</name></decl>;</decl_stmt>

<function><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>POOL_create</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>queueSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><call><name>POOL_create_advanced</name><argument_list>(<argument><expr><name>numThreads</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>ZSTD_defaultCMem</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>POOL_ctx</name><modifier>*</modifier></type>
<name>POOL_create_advanced</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>queueSize</name></decl></parameter>, <parameter><decl><type><name>ZSTD_customMem</name></type> <name>customMem</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>numThreads</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>queueSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>customMem</name></expr>;</expr_stmt>
    <return>return <expr><operator>&amp;</operator><name>g_poolCtx</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>POOL_free</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>ctx</name> <operator>||</operator> <name>ctx</name> <operator>==</operator> <operator>&amp;</operator><name>g_poolCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>POOL_joinJobs</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>ctx</name> <operator>||</operator> <name>ctx</name> <operator>==</operator> <operator>&amp;</operator><name>g_poolCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>POOL_resize</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>numThreads</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>numThreads</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>POOL_add</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>POOL_function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>POOL_tryAdd</name><parameter_list>(<parameter><decl><type><name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>POOL_function</name></type> <name>function</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>opaque</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ctx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>function</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>POOL_sizeof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>POOL_ctx</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ctx</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* supports sizeof NULL */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ctx</name> <operator>==</operator> <operator>&amp;</operator><name>g_poolCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* ZSTD_MULTITHREAD */</comment>
</unit>
