<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/common/threading.c"><comment type="block" format="doxygen">/**
 * Copyright (c) 2016 Tino Reichardt
 * All rights reserved.
 *
 * You can contact the author at:
 * - zstdmt source repository: https://github.com/mcmilk/zstdmt
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>

<comment type="block" format="doxygen">/**
 * This file will hold wrapper for systems, which do not support pthreads
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"threading.h"</cpp:file></cpp:include>

<comment type="block">/* create fake symbol to avoid empty translation unit warning */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>g_ZSTD_threading_useless_symbol</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZSTD_MULTITHREAD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block" format="doxygen">/**
 * Windows minimalist Pthread Wrapper, based on :
 * http://www.cse.wustl.edu/~schmidt/win32-cv-1.html
 */</comment>


<comment type="block">/* ===  Dependencies  === */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>


<comment type="block">/* ===  Implementation  === */</comment>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>worker</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>ZSTD_pthread_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>thread</name> <init>= <expr><operator>(</operator><name>ZSTD_pthread_t</name><operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <call><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ZSTD_pthread_create</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_t</name><modifier>*</modifier></type> <name>thread</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>unused</name></decl></parameter>,
            <parameter><function_decl><type><name>void</name><modifier>*</modifier></type> (<modifier>*</modifier><name>start_routine</name>) <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>unused</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <operator>(</operator><name>HANDLE</name><operator>)</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread</name><operator>-&gt;</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>errno</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ZSTD_pthread_join</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>result</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thread</name><operator>.</operator><name>handle</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>thread</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
        <if_stmt><if>if <condition>(<expr><name>value_ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>value_ptr</name> <operator>=</operator> <name><name>thread</name><operator>.</operator><name>arg</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    <case>case <expr><name>WAIT_ABANDONED</name></expr>:</case>
        <return>return <expr><name>EINVAL</name></expr>;</return>
    <default>default:</default>
        <return>return <expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* ZSTD_MULTITHREAD */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ZSTD_MULTITHREAD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>DEBUGLEVEL</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTD_DEPS_NEED_MALLOC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_deps.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ZSTD_pthread_mutex_init</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>, <parameter><decl><type><name>pthread_mutexattr_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>mutex</name> <operator>=</operator> <operator>(</operator><name>pthread_mutex_t</name><operator>*</operator><operator>)</operator><call><name>ZSTD_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_mutex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>*</operator><name>mutex</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ZSTD_pthread_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_mutex_t</name><modifier>*</modifier></type> <name>mutex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>mutex</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>ret</name> <init>= <expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZSTD_free</name><argument_list>(<argument><expr><operator>*</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ZSTD_pthread_cond_init</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_cond_t</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>, <parameter><decl><type><name>pthread_condattr_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>attr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>cond</name> <operator>=</operator> <operator>(</operator><name>pthread_cond_t</name><operator>*</operator><operator>)</operator><call><name>ZSTD_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pthread_cond_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cond</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>*</operator><name>cond</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>ZSTD_pthread_cond_destroy</name><parameter_list>(<parameter><decl><type><name>ZSTD_pthread_cond_t</name><modifier>*</modifier></type> <name>cond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>cond</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>ret</name> <init>= <expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>*</operator><name>cond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ZSTD_free</name><argument_list>(<argument><expr><operator>*</operator><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
