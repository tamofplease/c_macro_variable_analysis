<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/compress/zstd_compress_literals.c"><comment type="block">/*
 * Copyright (c) Yann Collet, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
 */</comment>

 <comment type="block">/*-*************************************
 *  Dependencies
 ***************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"zstd_compress_literals.h"</cpp:file></cpp:include>


<comment type="block">/* **************************************************************
*  Debug Traces
****************************************************************/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGLEVEL</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>showHexa</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name><operator>&lt;</operator><name>srcSize</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>RAWLOG</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><name><name>ip</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>ip</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>RAWLOG</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>srcSize</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* **************************************************************
*  Literals compression - special cases
****************************************************************/</comment>
<function><type><name>size_t</name></type> <name>ZSTD_noCompressLiterals</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name>   <specifier>const</specifier></type> <name>flSize</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&gt;</operator><literal type="number">31</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&gt;</operator><literal type="number">4095</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"ZSTD_noCompressLiterals: srcSize=%zu, dstCapacity=%zu"</literal></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>RETURN_ERROR_IF</name><argument_list>(<argument><expr><name>srcSize</name> <operator>+</operator> <name>flSize</name> <operator>&gt;</operator> <name>dstCapacity</name></expr></argument>, <argument><expr><name>dstSize_tooSmall</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch<condition>(<expr><name>flSize</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* 2 - 1 - 5 */</comment>
            <expr_stmt><expr><name><name>ostart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_basic</name> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* 2 - 2 - 12 */</comment>
            <expr_stmt><expr><call><name>MEM_writeLE16</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><operator>(</operator><name>U16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_basic</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* 2 - 2 - 20 */</comment>
            <expr_stmt><expr><call><name>MEM_writeLE32</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_basic</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>   <comment type="block">/* not necessary : flSize is {1,2,3} */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>ostart</name> <operator>+</operator> <name>flSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Raw (uncompressed) literals: %u -&gt; %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>srcSize</name> <operator>+</operator> <name>flSize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>srcSize</name> <operator>+</operator> <name>flSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ZSTD_compressRleLiteralsBlock</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name>   <specifier>const</specifier></type> <name>flSize</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&gt;</operator><literal type="number">31</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&gt;</operator><literal type="number">4095</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>dstCapacity</name></expr>;</expr_stmt>  <comment type="block">/* dstCapacity already guaranteed to be &gt;=4, hence large enough */</comment>

    <switch>switch<condition>(<expr><name>flSize</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="block">/* 2 - 1 - 5 */</comment>
            <expr_stmt><expr><name><name>ostart</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_rle</name> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="block">/* 2 - 2 - 12 */</comment>
            <expr_stmt><expr><call><name>MEM_writeLE16</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><operator>(</operator><name>U16</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_rle</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* 2 - 2 - 20 */</comment>
            <expr_stmt><expr><call><name>MEM_writeLE32</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>set_rle</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>   <comment type="block">/* not necessary : flSize is {1,2,3} */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>ostart</name><index>[<expr><name>flSize</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"RLE literals: %u -&gt; %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>flSize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>flSize</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ZSTD_compressLiterals</name> <parameter_list>(<parameter><decl><type><name>ZSTD_hufCTables_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>prevHuf</name></decl></parameter>,
                              <parameter><decl><type><name>ZSTD_hufCTables_t</name><modifier>*</modifier></type> <name>nextHuf</name></decl></parameter>,
                              <parameter><decl><type><name>ZSTD_strategy</name></type> <name>strategy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>disableLiteralCompression</name></decl></parameter>,
                              <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                              <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>entropyWorkspace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>entropyWorkspaceSize</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>bmi2</name></decl></parameter>,
                        <parameter><decl><type><name>unsigned</name></type> <name>suspectUncompressible</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>minGain</name> <init>= <expr><call><name>ZSTD_minGain</name><argument_list>(<argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>strategy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>lhSize</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>srcSize</name> <operator>&gt;=</operator> <literal type="number">1</literal> <name>KB</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>srcSize</name> <operator>&gt;=</operator> <literal type="number">16</literal> <name>KB</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier>  <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>singleStream</name> <init>= <expr><name>srcSize</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>symbolEncodingType_e</name></type> <name>hType</name> <init>= <expr><name>set_compressed</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>cLitSize</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="string">"ZSTD_compressLiterals (disableLiteralCompression=%i, srcSize=%u, dstCapacity=%zu)"</literal></expr></argument>,
                <argument><expr><name>disableLiteralCompression</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"Completed literals listing (%zu bytes)"</literal></expr></argument>, <argument><expr><call><name>showHexa</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Prepare nextEntropy assuming reusing the existing table */</comment>
    <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>nextHuf</name></expr></argument>, <argument><expr><name>prevHuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prevHuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>disableLiteralCompression</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ZSTD_noCompressLiterals</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* small ? don't even attempt compression (speed opt) */</comment>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_LITERALS_SIZE_MIN</name></cpp:macro> <cpp:value>63</cpp:value></cpp:define>
    <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>minLitSize</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>prevHuf</name><operator>-&gt;</operator><name>repeatMode</name></name> <operator>==</operator> <name>HUF_repeat_valid</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><name>COMPRESS_LITERALS_SIZE_MIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>srcSize</name> <operator>&lt;=</operator> <name>minLitSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ZSTD_noCompressLiterals</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>

    <expr_stmt><expr><call><name>RETURN_ERROR_IF</name><argument_list>(<argument><expr><name>dstCapacity</name> <operator>&lt;</operator> <name>lhSize</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>dstSize_tooSmall</name></expr></argument>, <argument><expr><literal type="string">"not enough space for compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>   <decl_stmt><decl><type><name>HUF_repeat</name></type> <name>repeat</name> <init>= <expr><name><name>prevHuf</name><operator>-&gt;</operator><name>repeatMode</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>preferRepeat</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>strategy</name> <operator>&lt;</operator> <name>ZSTD_lazy</name><operator>)</operator></expr> ?</condition><then> <expr><name>srcSize</name> <operator>&lt;=</operator> <literal type="number">1024</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <typedef>typedef <function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>huf_compress_f</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>HUF_CElt</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>HUF_repeat</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
        <decl_stmt><decl><type><name>huf_compress_f</name></type> <name>huf_compress</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>==</operator> <name>HUF_repeat_valid</name> <operator>&amp;&amp;</operator> <name>lhSize</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>singleStream</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>huf_compress</name> <operator>=</operator> <ternary><condition><expr><name>singleStream</name></expr> ?</condition><then> <expr><name>HUF_compress1X_repeat</name></expr> </then><else>: <expr><name>HUF_compress4X_repeat</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>cLitSize</name> <operator>=</operator> <call><name>huf_compress</name><argument_list>(<argument><expr><name>ostart</name><operator>+</operator><name>lhSize</name></expr></argument>, <argument><expr><name>dstCapacity</name><operator>-</operator><name>lhSize</name></expr></argument>,
                                <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>,
                                <argument><expr><name>HUF_SYMBOLVALUE_MAX</name></expr></argument>, <argument><expr><name>LitHufLog</name></expr></argument>,
                                <argument><expr><name>entropyWorkspace</name></expr></argument>, <argument><expr><name>entropyWorkspaceSize</name></expr></argument>,
                                <argument><expr><operator>(</operator><name>HUF_CElt</name><operator>*</operator><operator>)</operator><name><name>nextHuf</name><operator>-&gt;</operator><name>CTable</name></name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>repeat</name></expr></argument>, <argument><expr><name>preferRepeat</name></expr></argument>,
                                <argument><expr><name>bmi2</name></expr></argument>, <argument><expr><name>suspectUncompressible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>repeat</name> <operator>!=</operator> <name>HUF_repeat_none</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/* reused the existing table */</comment>
            <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Reusing previous huffman table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>hType</name> <operator>=</operator> <name>set_repeat</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>cLitSize</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cLitSize</name> <operator>&gt;=</operator> <name>srcSize</name> <operator>-</operator> <name>minGain</name><operator>)</operator> <operator>||</operator> <call><name>ERR_isError</name><argument_list>(<argument><expr><name>cLitSize</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>nextHuf</name></expr></argument>, <argument><expr><name>prevHuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prevHuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ZSTD_noCompressLiterals</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>cLitSize</name><operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_memcpy</name><argument_list>(<argument><expr><name>nextHuf</name></expr></argument>, <argument><expr><name>prevHuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>prevHuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ZSTD_compressRleLiteralsBlock</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>hType</name> <operator>==</operator> <name>set_compressed</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* using a newly constructed table */</comment>
        <expr_stmt><expr><name><name>nextHuf</name><operator>-&gt;</operator><name>repeatMode</name></name> <operator>=</operator> <name>HUF_repeat_check</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Build header */</comment>
    <switch>switch<condition>(<expr><name>lhSize</name></expr>)</condition>
    <block>{<block_content>
    <case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="block">/* 2 - 2 - 10 - 10 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>lhc</name> <init>= <expr><name>hType</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><operator>!</operator><name>singleStream</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>cLitSize</name><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>MEM_writeLE24</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><name>lhc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    <case>case <expr><literal type="number">4</literal></expr>:</case> <comment type="block">/* 2 - 2 - 14 - 14 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>lhc</name> <init>= <expr><name>hType</name> <operator>+</operator> <operator>(</operator><literal type="number">2</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>cLitSize</name><operator>&lt;&lt;</operator><literal type="number">18</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>MEM_writeLE32</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><name>lhc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    <case>case <expr><literal type="number">5</literal></expr>:</case> <comment type="block">/* 2 - 2 - 18 - 18 */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>lhc</name> <init>= <expr><name>hType</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>U32</name><operator>)</operator><name>cLitSize</name><operator>&lt;&lt;</operator><literal type="number">22</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>MEM_writeLE32</name><argument_list>(<argument><expr><name>ostart</name></expr></argument>, <argument><expr><name>lhc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ostart</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>cLitSize</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
    <default>default:</default>  <comment type="block">/* not possible : lhSize is {3,4,5} */</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>DEBUGLOG</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"Compressed literals: %u -&gt; %u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>srcSize</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>lhSize</name><operator>+</operator><name>cLitSize</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>lhSize</name><operator>+</operator><name>cLitSize</name></expr>;</return>
</block_content>}</block></function>
</unit>
