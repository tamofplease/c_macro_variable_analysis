<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/compress/fse_compress.c"><comment type="block">/* ******************************************************************
 * FSE : Finite State Entropy encoder
 * Copyright (c) Yann Collet, Facebook, Inc.
 *
 *  You can contact the author at :
 *  - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy
 *  - Public forum : https://groups.google.com/forum/#!forum/lz4c
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
****************************************************************** */</comment>

<comment type="block">/* **************************************************************
*  Includes
****************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/compiler.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/mem.h"</cpp:file></cpp:include>        <comment type="block">/* U32, U16, etc. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/debug.h"</cpp:file></cpp:include>      <comment type="block">/* assert, DEBUGLOG */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hist.h"</cpp:file></cpp:include>       <comment type="block">/* HIST_count_wksp */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/bitstream.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_STATIC_LINKING_ONLY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/fse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/error_private.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTD_DEPS_NEED_MALLOC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZSTD_DEPS_NEED_MATH64</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/zstd_deps.h"</cpp:file></cpp:include>  <comment type="block">/* ZSTD_malloc, ZSTD_free, ZSTD_memcpy, ZSTD_memset */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/bits.h"</cpp:file></cpp:include> <comment type="block">/* ZSTD_highbit32 */</comment>


<comment type="block">/* **************************************************************
*  Error Management
****************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_isError</name></cpp:macro> <cpp:value>ERR_isError</cpp:value></cpp:define>


<comment type="block">/* **************************************************************
*  Templates
****************************************************************/</comment>
<comment type="block">/*
  designed to be included
  for type-specific functions (template emulation in C)
  Objective is to write these functions only once, for improved maintenance
*/</comment>

<comment type="block">/* safety checks */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_FUNCTION_EXTENSION</name></cpp:ifndef>
<cpp:error>#  <cpp:directive>error</cpp:directive> <cpp:literal>"FSE_FUNCTION_EXTENSION must be defined"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_FUNCTION_TYPE</name></cpp:ifndef>
<cpp:error>#  <cpp:directive>error</cpp:directive> <cpp:literal>"FSE_FUNCTION_TYPE must be defined"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Function names */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_CAT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X##Y</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_FUNCTION_NAME</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSE_CAT(X,Y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_TYPE_NAME</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FSE_CAT(X,Y)</cpp:value></cpp:define>


<comment type="block">/* Function templates */</comment>

<comment type="block">/* FSE_buildCTable_wksp() :
 * Same as FSE_buildCTable(), but using an externally allocated scratch buffer (`workSpace`).
 * wkspSize should be sized to handle worst case situation, which is `1&lt;&lt;max_tableLog * sizeof(FSE_FUNCTION_TYPE)`
 * workSpace must also be properly aligned with FSE_FUNCTION_TYPE requirements
 */</comment>
<function><type><name>size_t</name></type> <name>FSE_buildCTable_wksp</name><parameter_list>(<parameter><decl><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>,
                            <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>tableSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>tableMask</name> <init>= <expr><name>tableSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name>ct</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U16</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tableU16</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>U16</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>FSCT</name> <init>= <expr><operator>(</operator><operator>(</operator><name>U32</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <comment type="block">/* header */</comment> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>tableLog</name></expr> ?</condition><then> <expr><name>tableSize</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_symbolCompressionTransform</name><modifier>*</modifier> <specifier>const</specifier></type> <name>symbolTT</name> <init>= <expr><operator>(</operator><name>FSE_symbolCompressionTransform</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>FSCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>step</name> <init>= <expr><call><name>FSE_TABLESTEP</name><argument_list>(<argument><expr><name>tableSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>maxSV1</name> <init>= <expr><name>maxSymbolValue</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>U16</name><modifier>*</modifier></type> <name>cumul</name> <init>= <expr><operator>(</operator><name>U16</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></init></decl>;</decl_stmt>   <comment type="block">/* size = maxSV1 */</comment>
    <decl_stmt><decl><type><name>FSE_FUNCTION_TYPE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tableSymbol</name> <init>= <expr><operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>*</operator><operator>)</operator><operator>(</operator><name>cumul</name> <operator>+</operator> <operator>(</operator><name>maxSV1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>  <comment type="block">/* size = tableSize */</comment>

    <decl_stmt><decl><type><name>U32</name></type> <name>highThreshold</name> <init>= <expr><name>tableSize</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>workSpace</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Must be 2 bytes-aligned */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>FSE_BUILD_CTABLE_WORKSPACE_SIZE</name><argument_list>(<argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wkspSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block">/* CTable header */</comment>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <name>tableLog</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <name>maxSymbolValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tableLog</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* required for threshold strategy to work */</comment>

    <comment type="block">/* For explanations on how to distribute symbol values over the table :
     * http://fastcompression.blogspot.fr/2014/02/fse-distributing-symbol-values.html */</comment>

     <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__clang_analyzer__</name></cpp:ifdef>
     <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>tableSymbol</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tableSymbol</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tableSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* useless initialization, just to keep scan-build happy */</comment>
     <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* symbol start positions */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>u</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>cumul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>u</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>maxSV1</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>normalizedCounter</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="block">/* Low proba symbol */</comment>
                <expr_stmt><expr><name><name>cumul</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>cumul</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tableSymbol</name><index>[<expr><name>highThreshold</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>)</operator><operator>(</operator><name>u</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>normalizedCounter</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cumul</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>cumul</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>U16</name><operator>)</operator><name><name>normalizedCounter</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cumul</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>cumul</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* no overflow */</comment>
        </block_content>}</block></else></if_stmt>   </block_content>}</block></for>
        <expr_stmt><expr><name><name>cumul</name><index>[<expr><name>maxSV1</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator><operator>(</operator><name>tableSize</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Spread symbols */</comment>
    <if_stmt><if>if <condition>(<expr><name>highThreshold</name> <operator>==</operator> <name>tableSize</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* Case for no low prob count symbols. Lay down 8 bytes at a time
         * to reduce branch misses since we are operating on a small block
         */</comment>
        <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>spread</name> <init>= <expr><name>tableSymbol</name> <operator>+</operator> <name>tableSize</name></expr></init></decl>;</decl_stmt> <comment type="block">/* size = tableSize + 8 (may write beyond tableSize) */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>add</name> <init>= <expr><literal type="number">0x0101010101010101ull</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U64</name></type> <name>sv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr><operator>,</operator> <expr><name>sv</name> <operator>+=</operator> <name>add</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>n</name> <init>= <expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>MEM_write64</name><argument_list>(<argument><expr><name>spread</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>MEM_write64</name><argument_list>(<argument><expr><name>spread</name> <operator>+</operator> <name>pos</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <comment type="block">/* Spread symbols across the table. Lack of lowprob symbols means that
         * we don't need variable sized inner loop, so we can unroll the loop and
         * reduce branch misses.
         */</comment>
        <block>{<block_content>   <decl_stmt><decl><type><name>size_t</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>unroll</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Experimentally determined optimal unroll */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tableSize</name> <operator>%</operator> <name>unroll</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* FSE_MIN_TABLELOG is 5 */</comment>
            <for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>tableSize</name></expr>;</condition> <incr><expr><name>s</name> <operator>+=</operator> <name>unroll</name></expr></incr>)</control> <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>u</name></decl>;</decl_stmt>
                <for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;</operator> <name>unroll</name></expr>;</condition> <incr><expr><operator>++</operator><name>u</name></expr></incr>)</control> <block>{<block_content>
                    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>uPosition</name> <init>= <expr><operator>(</operator><name>position</name> <operator>+</operator> <operator>(</operator><name>u</name> <operator>*</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>tableSymbol</name><index>[<expr><name>uPosition</name></expr>]</index></name> <operator>=</operator> <name><name>spread</name><index>[<expr><name>s</name> <operator>+</operator> <name>u</name></expr>]</index></name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <operator>(</operator><name>unroll</name> <operator>*</operator> <name>step</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* Must have initialized all positions */</comment>
        </block_content>}</block>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>U32</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>symbol</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>symbol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>symbol</name><operator>&lt;</operator><name>maxSV1</name></expr>;</condition> <incr><expr><name>symbol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nbOccurrences</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>freq</name> <init>= <expr><name><name>normalizedCounter</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>nbOccurrences</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>nbOccurrences</name><operator>&lt;</operator><name>freq</name></expr>;</condition> <incr><expr><name>nbOccurrences</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><name><name>tableSymbol</name><index>[<expr><name>position</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>FSE_FUNCTION_TYPE</name><operator>)</operator><name>symbol</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <name>step</name><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>position</name> <operator>&gt;</operator> <name>highThreshold</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>(</operator><name>position</name> <operator>+</operator> <name>step</name><operator>)</operator> <operator>&amp;</operator> <name>tableMask</name></expr>;</expr_stmt></block_content></block></while>   <comment type="block">/* Low proba area */</comment>
        </block_content>}</block></for>   </block_content>}</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>position</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Must have initialized all positions */</comment>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Build table */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>u</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name><operator>&lt;</operator><name>tableSize</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>FSE_FUNCTION_TYPE</name></type> <name>s</name> <init>= <expr><name><name>tableSymbol</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>   <comment type="block">/* note : static analyzer may not understand tableSymbol is properly initialized */</comment>
        <expr_stmt><expr><name><name>tableU16</name><index>[<expr><name><name>cumul</name><index>[<expr><name>s</name></expr>]</index></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <operator>(</operator><name>tableSize</name><operator>+</operator><name>u</name><operator>)</operator></expr>;</expr_stmt>   <comment type="block">/* TableU16 : sorted by symbol order; gives next state value */</comment>
    </block_content>}</block></for>   </block_content>}</block>

    <comment type="block">/* Build Symbol Transformation Table */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>unsigned</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <switch>switch <condition>(<expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition>
            <block>{<block_content>
            <case>case  <expr><literal type="number">0</literal></expr>:</case>
                <comment type="block">/* filling nonetheless, for compatibility with FSE_getMaxNbBits() */</comment>
                <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaNbBits</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>tableLog</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>tableLog</name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
            <case>case  <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaNbBits</name> <operator>=</operator> <operator>(</operator><name>tableLog</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>tableLog</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaFindState</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>total</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>total</name> <operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            <default>default :</default>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<block_content>   <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>maxBitsOut</name> <init>= <expr><name>tableLog</name> <operator>-</operator> <call><name>ZSTD_highbit32</name> <argument_list>(<argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>minStatePlus</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>maxBitsOut</name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaNbBits</name> <operator>=</operator> <operator>(</operator><name>maxBitsOut</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <name>minStatePlus</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaFindState</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>total</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>total</name> <operator>+=</operator>  <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block>   </block_content>}</block></switch>   </block_content>}</block></for>   </block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>  <comment type="block">/* debug : symbol costs */</comment>
    DEBUGLOG(5, "\n --- table statistics : ");
    {   U32 symbol;
        for (symbol=0; symbol&lt;=maxSymbolValue; symbol++) {
            DEBUGLOG(5, "%3u: w=%3i,   maxBits=%u, fracBits=%.2f",
                symbol, normalizedCounter[symbol],
                FSE_getMaxNbBits(symbolTT, symbol),
                (double)FSE_bitCost(symbolTT, tableLog, symbol, 8) / 256);
    }   }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>FSE_COMMONDEFS_ONLY</name></cpp:ifndef>

<comment type="block">/*-**************************************************************
*  FSE NCount encoding
****************************************************************/</comment>
<function><type><name>size_t</name></type> <name>FSE_NCountWriteBound</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>maxHeaderSize</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>maxSymbolValue</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>tableLog</name>
                                   <operator>+</operator> <literal type="number">4</literal> <comment type="block">/* bitCount initialized at 4 */</comment>
                                   <operator>+</operator> <literal type="number">2</literal> <comment type="block">/* first two symbols may use one additional bit each */</comment><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator>
                                    <operator>+</operator> <literal type="number">1</literal> <comment type="block">/* round up to whole nb bytes */</comment>
                                    <operator>+</operator> <literal type="number">2</literal></expr></init></decl> <comment type="block">/* additional two bytes for bitstream flush */</comment>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>maxSymbolValue</name></expr> ?</condition><then> <expr><name>maxHeaderSize</name></expr> </then><else>: <expr><name>FSE_NCOUNTBOUND</name></expr></else></ternary></expr>;</return>  <comment type="block">/* maxSymbolValue==0 ? use default */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>FSE_writeNCount_generic</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>headerBufferSize</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>,
                         <parameter><decl><type><name>unsigned</name></type> <name>writeIsSafe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator> <name>header</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><name>ostart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oend</name> <init>= <expr><name>ostart</name> <operator>+</operator> <name>headerBufferSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nbBits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tableSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remaining</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>threshold</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>bitStream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bitCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>symbol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>alphabetSize</name> <init>= <expr><name>maxSymbolValue</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>previousIs0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Table Size */</comment>
    <expr_stmt><expr><name>bitStream</name> <operator>+=</operator> <operator>(</operator><name>tableLog</name><operator>-</operator><name>FSE_MIN_TABLELOG</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitCount</name>  <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <comment type="block">/* Init */</comment>
    <expr_stmt><expr><name>remaining</name> <operator>=</operator> <name>tableSize</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>   <comment type="block">/* +1 for extra accuracy */</comment>
    <expr_stmt><expr><name>threshold</name> <operator>=</operator> <name>tableSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nbBits</name> <operator>=</operator> <name>tableLog</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>symbol</name> <operator>&lt;</operator> <name>alphabetSize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>remaining</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* stops at 1 */</comment>
        <if_stmt><if>if <condition>(<expr><name>previousIs0</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>unsigned</name></type> <name>start</name> <init>= <expr><name>symbol</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>symbol</name> <operator>&lt;</operator> <name>alphabetSize</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>normalizedCounter</name><index>[<expr><name>symbol</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>symbol</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
            <if_stmt><if>if <condition>(<expr><name>symbol</name> <operator>==</operator> <name>alphabetSize</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>   <comment type="block">/* incorrect distribution */</comment>
            <while>while <condition>(<expr><name>symbol</name> <operator>&gt;=</operator> <name>start</name><operator>+</operator><literal type="number">24</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name><operator>+=</operator><literal type="number">24</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitStream</name> <operator>+=</operator> <literal type="number">0xFFFFU</literal> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>writeIsSafe</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>out</name> <operator>&gt;</operator> <name>oend</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Buffer overflow */</comment>
                <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator> <name>bitStream</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>bitStream</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitStream</name><operator>&gt;&gt;=</operator><literal type="number">16</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <while>while <condition>(<expr><name>symbol</name> <operator>&gt;=</operator> <name>start</name><operator>+</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>start</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitStream</name> <operator>+=</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></while>
            <expr_stmt><expr><name>bitStream</name> <operator>+=</operator> <operator>(</operator><name>symbol</name><operator>-</operator><name>start</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>bitCount</name><operator>&gt;</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>writeIsSafe</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>out</name> <operator>&gt;</operator> <name>oend</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Buffer overflow */</comment>
                <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>bitStream</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>bitStream</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitStream</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bitCount</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>   </block_content>}</block></if></if_stmt>
        <block>{<block_content>   <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>normalizedCounter</name><index>[<expr><name>symbol</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>max</name> <init>= <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>threshold</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>remaining</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>-=</operator> <ternary><condition><expr><name>count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>count</name></expr> </then><else>: <expr><name>count</name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>   <comment type="block">/* +1 for extra accuracy */</comment>
            <if_stmt><if>if <condition>(<expr><name>count</name><operator>&gt;=</operator><name>threshold</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block">/* [0..max[ [max..threshold[ (...) [threshold+max 2*threshold[ */</comment>
            <expr_stmt><expr><name>bitStream</name> <operator>+=</operator> <name>count</name> <operator>&lt;&lt;</operator> <name>bitCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name>  <operator>+=</operator> <name>nbBits</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name>  <operator>-=</operator> <operator>(</operator><name>count</name><operator>&lt;</operator><name>max</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>previousIs0</name>  <operator>=</operator> <operator>(</operator><name>count</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>remaining</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
            <while>while <condition>(<expr><name>remaining</name><operator>&lt;</operator><name>threshold</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>nbBits</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>threshold</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></while>
        </block_content>}</block>
        <if_stmt><if>if <condition>(<expr><name>bitCount</name><operator>&gt;</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>writeIsSafe</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>out</name> <operator>&gt;</operator> <name>oend</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Buffer overflow */</comment>
            <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>bitStream</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>bitStream</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitStream</name> <operator>&gt;&gt;=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitCount</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>   </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* incorrect normalized distribution */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>symbol</name> <operator>&lt;=</operator> <name>alphabetSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* flush remaining bitStream */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>writeIsSafe</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>out</name> <operator>&gt;</operator> <name>oend</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>dstSize_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Buffer overflow */</comment>
    <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><name>bitStream</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>bitStream</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name><operator>+=</operator> <operator>(</operator><name>bitCount</name><operator>+</operator><literal type="number">7</literal><operator>)</operator> <operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>out</name><operator>-</operator><name>ostart</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>FSE_writeNCount</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Unsupported */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&lt;</operator> <name>FSE_MIN_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Unsupported */</comment>

    <if_stmt><if>if <condition>(<expr><name>bufferSize</name> <operator>&lt;</operator> <call><name>FSE_NCountWriteBound</name><argument_list>(<argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>FSE_writeNCount_generic</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><call><name>FSE_writeNCount_generic</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> <comment type="block">/* write in buffer is safe */</comment>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*-**************************************************************
*  FSE Compression Code
****************************************************************/</comment>

<function><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>FSE_createCTable</name> <parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_TABLELOG_ABSOLUTE_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>FSE_CTABLE_SIZE_U32</name> <argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>U32</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>FSE_CTable</name><operator>*</operator><operator>)</operator><call><name>ZSTD_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FSE_freeCTable</name> <parameter_list>(<parameter><decl><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>ZSTD_free</name><argument_list>(<argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<comment type="block">/* provides the minimum logSize to safely represent a distribution */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>FSE_minTableLog</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name>minBitsSrc</name> <init>= <expr><call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>srcSize</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>minBitsSymbols</name> <init>= <expr><call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>minBits</name> <init>= <expr><ternary><condition><expr><name>minBitsSrc</name> <operator>&lt;</operator> <name>minBitsSymbols</name></expr> ?</condition><then> <expr><name>minBitsSrc</name></expr> </then><else>: <expr><name>minBitsSymbols</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>srcSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Not supported, RLE should be used instead */</comment>
    <return>return <expr><name>minBits</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>FSE_optimalTableLog_internal</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>maxTableLog</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>minus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name>maxBitsSrc</name> <init>= <expr><call><name>ZSTD_highbit32</name><argument_list>(<argument><expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>srcSize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <name>minus</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>tableLog</name> <init>= <expr><name>maxTableLog</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>minBits</name> <init>= <expr><call><name>FSE_minTableLog</name><argument_list>(<argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>srcSize</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Not supported, RLE should be used instead */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_DEFAULT_TABLELOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>maxBitsSrc</name> <operator>&lt;</operator> <name>tableLog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>maxBitsSrc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block">/* Accuracy can be reduced */</comment>
    <if_stmt><if>if <condition>(<expr><name>minBits</name> <operator>&gt;</operator> <name>tableLog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>minBits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block">/* Need a minimum to safely represent all symbol values */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&lt;</operator> <name>FSE_MIN_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_MIN_TABLELOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_MAX_TABLELOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>tableLog</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>FSE_optimalTableLog</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>maxTableLog</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_optimalTableLog_internal</name><argument_list>(<argument><expr><name>maxTableLog</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Secondary normalization method.
   To be used when primary method fails. */</comment>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>FSE_normalizeM2</name><parameter_list>(<parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>norm</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>tableLog</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name>lowProbCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>short</name> <specifier>const</specifier></type> <name>NOT_YET_ASSIGNED</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>distributed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>ToDistribute</name></decl>;</decl_stmt>

    <comment type="block">/* Init */</comment>
    <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>lowThreshold</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>total</name> <operator>&gt;&gt;</operator> <name>tableLog</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>lowOne</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>total</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>tableLog</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name>lowThreshold</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>lowProbCount</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>distributed</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name>lowOne</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>distributed</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name>NOT_YET_ASSIGNED</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>ToDistribute</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name><operator>)</operator> <operator>-</operator> <name>distributed</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ToDistribute</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>total</name> <operator>/</operator> <name>ToDistribute</name><operator>)</operator> <operator>&gt;</operator> <name>lowOne</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* risk of rounding to zero */</comment>
        <expr_stmt><expr><name>lowOne</name> <operator>=</operator> <operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>total</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ToDistribute</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>NOT_YET_ASSIGNED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name>lowOne</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>distributed</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>total</name> <operator>-=</operator> <name><name>count</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
                <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>   </block_content>}</block></for>
        <expr_stmt><expr><name>ToDistribute</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>tableLog</name><operator>)</operator> <operator>-</operator> <name>distributed</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>distributed</name> <operator>==</operator> <name>maxSymbolValue</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* all values are pretty poor;
           probably incompressible data (should have already been detected);
           find max, then give all remaining points to max */</comment>
        <decl_stmt><decl><type><name>U32</name></type> <name>maxV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;</operator> <name>maxC</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>maxV</name><operator>=</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name>maxC</name><operator>=</operator><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>norm</name><index>[<expr><name>maxV</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>ToDistribute</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="block">/* all of the symbols were low enough for the lowOne or lowThreshold */</comment>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ToDistribute</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><operator>(</operator><name>maxSymbolValue</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>ToDistribute</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></if></if_stmt></block_content></block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <block>{<block_content>   <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>vStepLog</name> <init>= <expr><literal type="number">62</literal> <operator>-</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>mid</name> <init>= <expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>vStepLog</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>rStep</name> <init>= <expr><call><name>ZSTD_div64</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>U64</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>vStepLog</name><operator>)</operator> <operator>*</operator> <name>ToDistribute</name><operator>)</operator> <operator>+</operator> <name>mid</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>total</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="block">/* scale on remaining */</comment>
        <decl_stmt><decl><type><name>U64</name></type> <name>tmpTotal</name> <init>= <expr><name>mid</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name><operator>==</operator><name>NOT_YET_ASSIGNED</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>end</name> <init>= <expr><name>tmpTotal</name> <operator>+</operator> <operator>(</operator><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>*</operator> <name>rStep</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>sStart</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>tmpTotal</name> <operator>&gt;&gt;</operator> <name>vStepLog</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>sEnd</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>end</name> <operator>&gt;&gt;</operator> <name>vStepLog</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>U32</name> <specifier>const</specifier></type> <name>weight</name> <init>= <expr><name>sEnd</name> <operator>-</operator> <name>sStart</name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>weight</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>norm</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>weight</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmpTotal</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>   </block_content>}</block></for>   </block_content>}</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_normalizeCount</name> <parameter_list>(<parameter><decl><type><name>short</name><modifier>*</modifier></type> <name>normalizedCounter</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>total</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>useLowProbCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* Sanity checks */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_DEFAULT_TABLELOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&lt;</operator> <name>FSE_MIN_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Unsupported size */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Unsupported size */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&lt;</operator> <call><name>FSE_minTableLog</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Too small tableLog, compression potentially impossible */</comment>

    <block>{<block_content>   <decl_stmt><decl><type><specifier>static</specifier> <name>U32</name> <specifier>const</specifier></type> <name><name>rtbTable</name><index>[]</index></name> <init>= <expr><block>{     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">473195</literal></expr>, <expr><literal type="number">504333</literal></expr>, <expr><literal type="number">520860</literal></expr>, <expr><literal type="number">550000</literal></expr>, <expr><literal type="number">700000</literal></expr>, <expr><literal type="number">750000</literal></expr>, <expr><literal type="number">830000</literal></expr> }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name> <specifier>const</specifier></type> <name>lowProbCount</name> <init>= <expr><ternary><condition><expr><name>useLowProbCount</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>scale</name> <init>= <expr><literal type="number">62</literal> <operator>-</operator> <name>tableLog</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>step</name> <init>= <expr><call><name>ZSTD_div64</name><argument_list>(<argument><expr><operator>(</operator><name>U64</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">62</literal></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>)</operator><name>total</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="block">/* &lt;== here, one division ! */</comment>
        <decl_stmt><decl><type><name>U64</name> <specifier>const</specifier></type> <name>vStep</name> <init>= <expr><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>scale</name><operator>-</operator><literal type="number">20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>stillToDistribute</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>tableLog</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>largest</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>largestP</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>lowThreshold</name> <init>= <expr><operator>(</operator><name>U32</name><operator>)</operator><operator>(</operator><name>total</name> <operator>&gt;&gt;</operator> <name>tableLog</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <name>total</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* rle special case */</comment>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <continue>continue;</continue> </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;=</operator> <name>lowThreshold</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>lowProbCount</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stillToDistribute</name><operator>--</operator></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>short</name></type> <name>proba</name> <init>= <expr><operator>(</operator><name>short</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name><operator>*</operator><name>step</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>scale</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>proba</name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>
                    <decl_stmt><decl><type><name>U64</name></type> <name>restToBeat</name> <init>= <expr><name>vStep</name> <operator>*</operator> <name><name>rtbTable</name><index>[<expr><name>proba</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>proba</name> <operator>+=</operator> <operator>(</operator><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name><operator>*</operator><name>step</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>U64</name><operator>)</operator><name>proba</name><operator>&lt;&lt;</operator><name>scale</name><operator>)</operator> <operator>&gt;</operator> <name>restToBeat</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><name>proba</name> <operator>&gt;</operator> <name>largestP</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>largestP</name><operator>=</operator><name>proba</name></expr>;</expr_stmt> <expr_stmt><expr><name>largest</name><operator>=</operator><name>s</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>normalizedCounter</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <name>proba</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stillToDistribute</name> <operator>-=</operator> <name>proba</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>   </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>-</operator><name>stillToDistribute</name> <operator>&gt;=</operator> <operator>(</operator><name><name>normalizedCounter</name><index>[<expr><name>largest</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
            <comment type="block">/* corner case, need another normalization method */</comment>
            <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>errorCode</name> <init>= <expr><call><name>FSE_normalizeM2</name><argument_list>(<argument><expr><name>normalizedCounter</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>lowProbCount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>FSE_isError</name><argument_list>(<argument><expr><name>errorCode</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>errorCode</name></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>normalizedCounter</name><index>[<expr><name>largest</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>stillToDistribute</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {   <comment type="block">/* Print Table (debug) */</comment>
        U32 s;
        U32 nTotal = 0;
        for (s=0; s&lt;=maxSymbolValue; s++)
            RAWLOG(2, "%3i: %4i \n", s, normalizedCounter[s]);
        for (s=0; s&lt;=maxSymbolValue; s++)
            nTotal += abs(normalizedCounter[s]);
        if (nTotal != (1U&lt;&lt;tableLog))
            RAWLOG(2, "Warning !!! Total == %u != %u !!!", nTotal, 1U&lt;&lt;tableLog);
        getchar();
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>tableLog</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* fake FSE_CTable, for raw (uncompressed) input */</comment>
<function><type><name>size_t</name></type> <name>FSE_buildCTable_raw</name> <parameter_list>(<parameter><decl><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>nbBits</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tableSize</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbBits</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>tableMask</name> <init>= <expr><name>tableSize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>maxSymbolValue</name> <init>= <expr><name>tableMask</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ptr</name> <init>= <expr><name>ct</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U16</name><modifier>*</modifier> <specifier>const</specifier></type> <name>tableU16</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>U16</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier> <specifier>const</specifier></type> <name>FSCT</name> <init>= <expr><operator>(</operator><operator>(</operator><name>U32</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <comment type="block">/* header */</comment> <operator>+</operator> <operator>(</operator><name>tableSize</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>   <comment type="block">/* assumption : tableLog &gt;= 1 */</comment>
    <decl_stmt><decl><type><name>FSE_symbolCompressionTransform</name><modifier>*</modifier> <specifier>const</specifier></type> <name>symbolTT</name> <init>= <expr><operator>(</operator><name>FSE_symbolCompressionTransform</name><operator>*</operator><operator>)</operator> <operator>(</operator><name>FSCT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>s</name></decl>;</decl_stmt>

    <comment type="block">/* Sanity checks */</comment>
    <if_stmt><if>if <condition>(<expr><name>nbBits</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>             <comment type="block">/* min size */</comment>

    <comment type="block">/* header */</comment>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <name>nbBits</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <name>maxSymbolValue</name></expr>;</expr_stmt>

    <comment type="block">/* Build table */</comment>
    <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><name>tableSize</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tableU16</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator><operator>(</operator><name>tableSize</name> <operator>+</operator> <name>s</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* Build Symbol Transformation Table */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><specifier>const</specifier> <name>U32</name></type> <name>deltaNbBits</name> <init>= <expr><operator>(</operator><name>nbBits</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>nbBits</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaNbBits</name> <operator>=</operator> <name>deltaNbBits</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>deltaFindState</name> <operator>=</operator> <name>s</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>   </block_content>}</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* fake FSE_CTable, for rle input (always same symbol) */</comment>
<function><type><name>size_t</name></type> <name>FSE_buildCTable_rle</name> <parameter_list>(<parameter><decl><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><name>BYTE</name></type> <name>symbolValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>ptr</name> <init>= <expr><name>ct</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U16</name><modifier>*</modifier></type> <name>tableU16</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>U16</name><operator>*</operator><operator>)</operator> <name>ptr</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>FSCTptr</name> <init>= <expr><operator>(</operator><name>U32</name><operator>*</operator><operator>)</operator><name>ptr</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_symbolCompressionTransform</name><modifier>*</modifier></type> <name>symbolTT</name> <init>= <expr><operator>(</operator><name>FSE_symbolCompressionTransform</name><operator>*</operator><operator>)</operator> <name>FSCTptr</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* header */</comment>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>U16</name><operator>)</operator> <name>symbolValue</name></expr>;</expr_stmt>

    <comment type="block">/* Build table */</comment>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tableU16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>   <comment type="block">/* just in case */</comment>

    <comment type="block">/* Build Symbol Transformation Table */</comment>
    <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>symbolValue</name></expr>]</index></name><operator>.</operator><name>deltaNbBits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>symbolTT</name><index>[<expr><name>symbolValue</name></expr>]</index></name><operator>.</operator><name>deltaFindState</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type> <name>FSE_compress_usingCTable_generic</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstSize</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>fast</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>istart</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>istart</name> <operator>+</operator> <name>srcSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name><init>=<expr><name>iend</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>BIT_CStream_t</name></type> <name>bitC</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_CState_t</name></type> <name>CState1</name></decl>, <decl><type ref="prev"/><name>CState2</name></decl>;</decl_stmt>

    <comment type="block">/* init */</comment>
    <if_stmt><if>if <condition>(<expr><name>srcSize</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <block>{<block_content> <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>initError</name> <init>= <expr><call><name>BIT_initCStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>FSE_isError</name><argument_list>(<argument><expr><name>initError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* not enough space available to write a bitstream */</comment> </block_content>}</block>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSE_FLUSHBITS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(fast ? BIT_flushBitsFast(s) : BIT_flushBits(s))</cpp:value></cpp:define>

    <if_stmt><if>if <condition>(<expr><name>srcSize</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>FSE_initCState2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_initCState2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_FLUSHBITS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>FSE_initCState2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_initCState2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* join to mod 4 */</comment>
    <expr_stmt><expr><name>srcSize</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>bitC</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">7</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>srcSize</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="block">/* test bit 2 */</comment>
        <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FSE_FLUSHBITS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* 2 or 4 encoding per loop */</comment>
    <while>while <condition>( <expr><name>ip</name><operator>&gt;</operator><name>istart</name></expr> )</condition> <block>{<block_content>

        <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bitC</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>&lt;</operator> <name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>   <comment type="block">/* this test must be static */</comment>
            <expr_stmt><expr><call><name>FSE_FLUSHBITS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>bitC</name><operator>.</operator><name>bitContainer</name></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">8</literal> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name><operator>*</operator><literal type="number">4</literal><operator>+</operator><literal type="number">7</literal></expr> )</condition> <block>{<block_content>  <comment type="block">/* this test must be static */</comment>
            <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FSE_encodeSymbol</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>, <argument><expr><operator>*</operator><operator>--</operator><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>FSE_FLUSHBITS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FSE_flushCState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FSE_flushCState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>CState1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>BIT_closeCStream</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bitC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_compress_usingCTable</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstSize</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>FSE_CTable</name><modifier>*</modifier></type> <name>ct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <specifier>const</specifier></type> <name>fast</name> <init>= <expr><operator>(</operator><name>dstSize</name> <operator>&gt;=</operator> <call><name>FSE_BLOCKBOUND</name><argument_list>(<argument><expr><name>srcSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>fast</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>FSE_compress_usingCTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>FSE_compress_usingCTable_generic</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstSize</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>FSE_compressBound</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>FSE_COMPRESSBOUND</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZSTD_NO_UNUSED_FUNCTIONS</name></cpp:ifndef>
<comment type="block">/* FSE_compress_wksp() :
 * Same as FSE_compress2(), but using an externally allocated scratch buffer (`workSpace`).
 * `wkspSize` size must be `(1&lt;&lt;tableLog)`.
 */</comment>
<function><type><name>size_t</name></type> <name>FSE_compress_wksp</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>wkspSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>ostart</name> <init>= <expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier></type> <name>op</name> <init>= <expr><name>ostart</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>oend</name> <init>= <expr><name>ostart</name> <operator>+</operator> <name>dstSize</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>unsigned</name></type> <name><name>count</name><index>[<expr><name>FSE_MAX_SYMBOL_VALUE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>S16</name></type>   <name><name>norm</name><index>[<expr><name>FSE_MAX_SYMBOL_VALUE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FSE_CTable</name><modifier>*</modifier></type> <name>CTable</name> <init>= <expr><operator>(</operator><name>FSE_CTable</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>CTableSize</name> <init>= <expr><call><name>FSE_CTABLE_SIZE_U32</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>scratchBuffer</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name>CTable</name> <operator>+</operator> <name>CTableSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>scratchBufferSize</name> <init>= <expr><name>wkspSize</name> <operator>-</operator> <operator>(</operator><name>CTableSize</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FSE_CTable</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="block">/* init conditions */</comment>
    <if_stmt><if>if <condition>(<expr><name>wkspSize</name> <operator>&lt;</operator> <call><name>FSE_COMPRESS_WKSP_SIZE_U32</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>srcSize</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* Not compressible */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>maxSymbolValue</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxSymbolValue</name> <operator>=</operator> <name>FSE_MAX_SYMBOL_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tableLog</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <name>FSE_DEFAULT_TABLELOG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Scan input and build symbol stats */</comment>
    <block>{<block_content>   <expr_stmt><expr><call><name>CHECK_V_F</name><argument_list>(<argument><expr><name>maxCount</name></expr></argument>, <argument><expr><call><name>HIST_count_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>scratchBuffer</name></expr></argument>, <argument><expr><name>scratchBufferSize</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>maxCount</name> <operator>==</operator> <name>srcSize</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* only a single symbol in src : rle */</comment>
        <if_stmt><if>if <condition>(<expr><name>maxCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>         <comment type="block">/* each symbol present maximum once =&gt; not compressible */</comment>
        <if_stmt><if>if <condition>(<expr><name>maxCount</name> <operator>&lt;</operator> <operator>(</operator><name>srcSize</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* Heuristic : not compressible enough */</comment>
    </block_content>}</block>

    <expr_stmt><expr><name>tableLog</name> <operator>=</operator> <call><name>FSE_optimalTableLog</name><argument_list>(<argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK_F</name><argument_list>( <argument><expr><call><name>FSE_normalizeCount</name><argument_list>(<argument><expr><name>norm</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <comment type="block">/* useLowProbCount */</comment> <argument><expr><name>srcSize</name> <operator>&gt;=</operator> <literal type="number">2048</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Write table description header */</comment>
    <block>{<block_content>   <expr_stmt><expr><call><name>CHECK_V_F</name><argument_list>(<argument><expr><name>nc_err</name></expr></argument>, <argument><expr><call><name>FSE_writeNCount</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>oend</name><operator>-</operator><name>op</name></expr></argument>, <argument><expr><name>norm</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>+=</operator> <name>nc_err</name></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* Compress */</comment>
    <expr_stmt><expr><call><name>CHECK_F</name><argument_list>( <argument><expr><call><name>FSE_buildCTable_wksp</name><argument_list>(<argument><expr><name>CTable</name></expr></argument>, <argument><expr><name>norm</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><name>scratchBuffer</name></expr></argument>, <argument><expr><name>scratchBufferSize</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>   <expr_stmt><expr><call><name>CHECK_V_F</name><argument_list>(<argument><expr><name>cSize</name></expr></argument>, <argument><expr><call><name>FSE_compress_usingCTable</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>oend</name> <operator>-</operator> <name>op</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>CTable</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>cSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>   <comment type="block">/* not enough space for compressed data */</comment>
        <expr_stmt><expr><name>op</name> <operator>+=</operator> <name>cSize</name></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* check compressibility */</comment>
    <if_stmt><if>if <condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>op</name><operator>-</operator><name>ostart</name><operator>)</operator> <operator>&gt;=</operator> <name>srcSize</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>op</name><operator>-</operator><name>ostart</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>FSE_CTable</name></type> <name><name>CTable_max</name><index>[<expr><call><name>FSE_CTABLE_SIZE_U32</name><argument_list>(<argument><expr><name>FSE_MAX_TABLELOG</name></expr></argument>, <argument><expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
    <union>union <block>{
      <decl_stmt><decl><type><name>U32</name></type> <name><name>hist_wksp</name><index>[<expr><name>HIST_WKSP_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>BYTE</name></type> <name><name>scratchBuffer</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FSE_MAX_TABLELOG</name></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><name>workspace</name></decl>;</union>
}</block></struct></type> <name>fseWkspMax_t</name>;</typedef>

<function><type><name>size_t</name></type> <name>FSE_compress2</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>tableLog</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>fseWkspMax_t</name></type> <name>scratchBuffer</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>DEBUG_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scratchBuffer</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <call><name>FSE_COMPRESS_WKSP_SIZE_U32</name><argument_list>(<argument><expr><name>FSE_MAX_TABLELOG</name></expr></argument>, <argument><expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* compilation failures here means scratchBuffer is not large enough */</comment>
    <if_stmt><if>if <condition>(<expr><name>tableLog</name> <operator>&gt;</operator> <name>FSE_MAX_TABLELOG</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>tableLog_tooLarge</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>FSE_compress_wksp</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>maxSymbolValue</name></expr></argument>, <argument><expr><name>tableLog</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>scratchBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>scratchBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>FSE_compress</name> <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstCapacity</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>FSE_compress2</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstCapacity</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>FSE_MAX_SYMBOL_VALUE</name></expr></argument>, <argument><expr><name>FSE_DEFAULT_TABLELOG</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* FSE_COMMONDEFS_ONLY */</comment>
</unit>
