<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/zstd/zstd_subset/compress/hist.c"><comment type="block">/* ******************************************************************
 * hist : Histogram functions
 * part of Finite State Entropy project
 * Copyright (c) Yann Collet, Facebook, Inc.
 *
 *  You can contact the author at :
 *  - FSE source repository : https://github.com/Cyan4973/FiniteStateEntropy
 *  - Public forum : https://groups.google.com/forum/#!forum/lz4c
 *
 * This source code is licensed under both the BSD-style license (found in the
 * LICENSE file in the root directory of this source tree) and the GPLv2 (found
 * in the COPYING file in the root directory of this source tree).
 * You may select, at your option, one of the above-listed licenses.
****************************************************************** */</comment>

<comment type="block">/* --- dependencies --- */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/mem.h"</cpp:file></cpp:include>             <comment type="block">/* U32, BYTE, etc. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/debug.h"</cpp:file></cpp:include>           <comment type="block">/* assert, DEBUGLOG */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../common/error_private.h"</cpp:file></cpp:include>   <comment type="block">/* ERROR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hist.h"</cpp:file></cpp:include>


<comment type="block">/* --- Error management --- */</comment>
<function><type><name>unsigned</name></type> <name>HIST_isError</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>ERR_isError</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block">/*-**************************************************************
 *  Histogram functions
 ****************************************************************/</comment>
<function><type><name>unsigned</name></type> <name>HIST_count_simple</name><parameter_list>(<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>end</name> <init>= <expr><name>ip</name> <operator>+</operator> <name>srcSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name> <init>= <expr><operator>*</operator><name>maxSymbolValuePtr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>largestCount</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>maxSymbolValue</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>count</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>srcSize</name><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>ip</name><operator>&lt;</operator><name>end</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>ip</name> <operator>&lt;=</operator> <name>maxSymbolValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>count</name><index>[<expr><operator>*</operator><name>ip</name><operator>++</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><operator>!</operator><name><name>count</name><index>[<expr><name>maxSymbolValue</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxSymbolValue</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>=</operator> <name>maxSymbolValue</name></expr>;</expr_stmt>

    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;=</operator><name>maxSymbolValue</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>count</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;</operator> <name>largestCount</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>largestCount</name> <operator>=</operator> <name><name>count</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
    </block_content>}</block>

    <return>return <expr><name>largestCount</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{ <decl><name>trustInput</name></decl>, <decl><name>checkMaxSymbolValue</name></decl> }</block></enum></type> <name>HIST_checkInput_e</name>;</typedef>

<comment type="block">/* HIST_count_parallel_wksp() :
 * store histogram into 4 intermediate tables, recombined at the end.
 * this design makes better use of OoO cpus,
 * and is noticeably faster when some values are heavily repeated.
 * But it needs some additional workspace for intermediate tables.
 * `workSpace` must be a U32 table of size &gt;= HIST_WKSP_SIZE_U32.
 * @return : largest histogram frequency,
 *           or an error code (notably when histogram's alphabet is larger than *maxSymbolValuePtr) */</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type> <name>HIST_count_parallel_wksp</name><parameter_list>(
                                <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>,
                                <parameter><decl><type><name>HIST_checkInput_e</name></type> <name>check</name></decl></parameter>,
                                <parameter><decl><type><name>U32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>workSpace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>ip</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>source</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>iend</name> <init>= <expr><name>ip</name><operator>+</operator><name>sourceSize</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name> <specifier>const</specifier></type> <name>countSize</name> <init>= <expr><operator>(</operator><operator>*</operator><name>maxSymbolValuePtr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>count</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>max</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>Counting1</name> <init>= <expr><name>workSpace</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>Counting2</name> <init>= <expr><name>Counting1</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>Counting3</name> <init>= <expr><name>Counting2</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name><modifier>*</modifier> <specifier>const</specifier></type> <name>Counting4</name> <init>= <expr><name>Counting3</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* safety checks */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sourceSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>countSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>ZSTD_memset</name><argument_list>(<argument><expr><name>workSpace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><literal type="number">256</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* by stripes of 16 bytes */</comment>
    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>cached</name> <init>= <expr><call><name>MEM_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name>iend</name><operator>-</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>U32</name></type> <name>c</name> <init>= <expr><name>cached</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>MEM_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting1</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator> <name>c</name></expr>     ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting2</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting3</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting4</name><index>[       <expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt> <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>MEM_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting1</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator> <name>c</name></expr>     ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting2</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting3</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting4</name><index>[       <expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt> <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>MEM_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting1</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator> <name>c</name></expr>     ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting2</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting3</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting4</name><index>[       <expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>cached</name></expr>;</expr_stmt> <expr_stmt><expr><name>cached</name> <operator>=</operator> <call><name>MEM_read32</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting1</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator> <name>c</name></expr>     ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting2</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting3</name><index>[<expr><operator>(</operator><name>BYTE</name><operator>)</operator><operator>(</operator><name>c</name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Counting4</name><index>[       <expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">24</literal></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>ip</name><operator>-=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block>

    <comment type="block">/* finish last symbols */</comment>
    <while>while <condition>(<expr><name>ip</name><operator>&lt;</operator><name>iend</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>Counting1</name><index>[<expr><operator>*</operator><name>ip</name><operator>++</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

    <block>{<block_content>   <decl_stmt><decl><type><name>U32</name></type> <name>s</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>Counting1</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+=</operator> <name><name>Counting2</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>Counting3</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>Counting4</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>Counting1</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&gt;</operator> <name>max</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>max</name> <operator>=</operator> <name><name>Counting1</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>   </block_content>}</block>

    <block>{<block_content>   <decl_stmt><decl><type><name>unsigned</name></type> <name>maxSymbolValue</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name><name>Counting1</name><index>[<expr><name>maxSymbolValue</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxSymbolValue</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
        <if_stmt><if>if <condition>(<expr><name>check</name> <operator>&amp;&amp;</operator> <name>maxSymbolValue</name> <operator>&gt;</operator> <operator>*</operator><name>maxSymbolValuePtr</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>maxSymbolValue_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>=</operator> <name>maxSymbolValue</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ZSTD_memmove</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>Counting1</name></expr></argument>, <argument><expr><name>countSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* in case count &amp; Counting1 are overlapping */</comment>
    </block_content>}</block>
    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>max</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* HIST_countFast_wksp() :
 * Same as HIST_countFast(), but using an externally provided scratch buffer.
 * `workSpace` is a writable buffer which must be 4-bytes aligned,
 * `workSpaceSize` must be &gt;= HIST_WKSP_SIZE
 */</comment>
<function><type><name>size_t</name></type> <name>HIST_countFast_wksp</name><parameter_list>(<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>,
                          <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>workSpaceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>&lt;</operator> <literal type="number">1500</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* heuristic threshold */</comment>
        <return>return <expr><call><name>HIST_count_simple</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>workSpace</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* must be aligned on 4-bytes boundaries */</comment>
    <if_stmt><if>if <condition>(<expr><name>workSpaceSize</name> <operator>&lt;</operator> <name>HIST_WKSP_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>workSpace_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>HIST_count_parallel_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>trustInput</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* HIST_count_wksp() :
 * Same as HIST_count(), but using an externally provided scratch buffer.
 * `workSpace` size must be table of &gt;= HIST_WKSP_SIZE_U32 unsigned */</comment>
<function><type><name>size_t</name></type> <name>HIST_count_wksp</name><parameter_list>(<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>,
                       <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>workSpace</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>workSpaceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><name>workSpace</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>GENERIC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* must be aligned on 4-bytes boundaries */</comment>
    <if_stmt><if>if <condition>(<expr><name>workSpaceSize</name> <operator>&lt;</operator> <name>HIST_WKSP_SIZE</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><call><name>ERROR</name><argument_list>(<argument><expr><name>workSpace_tooSmall</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>HIST_count_parallel_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>checkMaxSymbolValue</name></expr></argument>, <argument><expr><operator>(</operator><name>U32</name><operator>*</operator><operator>)</operator><name>workSpace</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>maxSymbolValuePtr</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>HIST_countFast_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>workSpace</name></expr></argument>, <argument><expr><name>workSpaceSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ZSTD_NO_UNUSED_FUNCTIONS</name></cpp:ifndef>
<comment type="block">/* fast variant (unsafe : won't check if src contains values beyond count[] limit) */</comment>
<function><type><name>size_t</name></type> <name>HIST_countFast</name><parameter_list>(<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name><name>tmpCounters</name><index>[<expr><name>HIST_WKSP_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>
    <return>return <expr><call><name>HIST_countFast_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>tmpCounters</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpCounters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>HIST_count</name><parameter_list>(<parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>unsigned</name><modifier>*</modifier></type> <name>maxSymbolValuePtr</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name><name>tmpCounters</name><index>[<expr><name>HIST_WKSP_SIZE_U32</name></expr>]</index></name></decl>;</decl_stmt>
    <return>return <expr><call><name>HIST_count_wksp</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>maxSymbolValuePtr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcSize</name></expr></argument>, <argument><expr><name>tmpCounters</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpCounters</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
