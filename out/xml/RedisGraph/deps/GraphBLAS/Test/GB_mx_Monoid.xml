<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_Monoid.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_Monoid: construct a monoid from a built-in operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Also defines the identity of the monoid</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_Monoid</name>               <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Monoid</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,         <comment type="line">// monoid to construct</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_BinaryOp</name></type> <name>add</name></decl></parameter>,     <comment type="line">// monoid operator</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>malloc_debug</name></decl></parameter>     <comment type="line">// true if malloc debug should be done</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>add</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"monoid operator missing"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>opcode</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_MIN_binop_code</name></expr>     :</case>

            <comment type="line">// 11 MIN monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with AND</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>  <operator>)</operator> <name>INT8_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>)</operator> <name>INT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>)</operator> <name>INT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>)</operator> <name>INT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <name>UINT8_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>UINT16_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>   <operator>)</operator> <name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>  <operator>)</operator> <name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type for MIN"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_MAX_binop_code</name></expr>     :</case>

            <comment type="line">// 11 MAX monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with OR</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>  <operator>)</operator> <name>INT8_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>    <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>)</operator> <name>INT16_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>)</operator> <name>INT32_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>)</operator> <name>INT64_MIN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>   <operator>)</operator> <operator>-</operator><name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>  <operator>)</operator> <operator>-</operator><name>INFINITY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type for MAX"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_PLUS_binop_code</name></expr>    :</case>

            <comment type="line">// 13 PLUS monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with OR</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>  <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>   <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>  <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLXF</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type for (PLUS)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_TIMES_binop_code</name></expr>   :</case>

            <comment type="line">// 13 TIMES monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// bool case redundant with AND</comment>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>  <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>   <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>  <operator>)</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLXF</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type for (TIMES)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ANY_binop_code</name></expr>   :</case>

            <comment type="line">// 13 ANY monoids</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL</name>   <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>       <break>break ;</break>
                <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT8_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name>  <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT16_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT32_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_INT64_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name>   <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_FP64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name>  <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>           <break>break ;</break>
                <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC32_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLXF</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GxB_Monoid_new_FC64_</name>  <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><call><name>GxB_CMPLX</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>      <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unknown type for (ANY)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LOR_binop_code</name></expr>      :</case>

            <comment type="line">// both GrB_LOR and GxB_LOR_BOOL (same opcode)</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (OR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LAND_binop_code</name></expr>     :</case>

            <comment type="line">// both GrB_LAND and GxB_LAND_BOOL (same opcode)</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (AND)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_LXOR_binop_code</name></expr>     :</case>

            <comment type="line">// both GrB_LXOR and GxB_LXOR_BOOL (same opcode)</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>        <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (XOR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_ISEQ_binop_code</name></expr>     :</case>
        <case>case <expr><name>GB_EQ_binop_code</name></expr>     :</case>

            <comment type="line">// both GrB_EQ_BOOL and GxB_ISEQ_BOOL (same opcode), also GrB_LXNOR</comment>
            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_BOOL_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>bool</name>    <operator>)</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (EQ)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BOR_binop_code</name></expr>     :</case>

            <comment type="line">// BOR monoids (bitwise or):</comment>
            <comment type="line">// GxB_BOR_UINT8_MONOID,         // identity: 0   terminal: 0xFF</comment>
            <comment type="line">// GxB_BOR_UINT16_MONOID,        // identity: 0   terminal: 0xFFFF</comment>
            <comment type="line">// GxB_BOR_UINT32_MONOID,        // identity: 0   terminal: 0xFFFFFFFF</comment>
            <comment type="line">// GxB_BOR_UINT64_MONOID,        // identity: 0   terminal: 0xFFFFFFFFFFFFFFFF</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (BOR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BAND_binop_code</name></expr>     :</case>

            <comment type="line">// BAND monoids (bitwise and):</comment>
            <comment type="line">// GxB_BAND_UINT8_MONOID,        // identity: 0xFF               terminal: 0</comment>
            <comment type="line">// GxB_BAND_UINT16_MONOID,       // identity: 0xFFFF             terminal: 0</comment>
            <comment type="line">// GxB_BAND_UINT32_MONOID,       // identity: 0xFFFFFFFF         terminal: 0</comment>
            <comment type="line">// GxB_BAND_UINT64_MONOID,       // identity: 0xFFFFFFFFFFFFFFFF terminal: 0</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>             <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (BAND)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BXOR_binop_code</name></expr>     :</case>

            <comment type="line">// BXOR monoids (bitwise xor):</comment>
            <comment type="line">// GxB_BXOR_UINT8_MONOID,        // identity: 0</comment>
            <comment type="line">// GxB_BXOR_UINT16_MONOID,       // identity: 0</comment>
            <comment type="line">// GxB_BXOR_UINT32_MONOID,       // identity: 0</comment>
            <comment type="line">// GxB_BXOR_UINT64_MONOID,       // identity: 0</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (BXOR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <case>case <expr><name>GB_BXNOR_binop_code</name></expr>     :</case>

            <comment type="line">// BXNOR monoids (bitwise xnor):</comment>
            <comment type="line">// GxB_BXNOR_UINT8_MONOID,       // identity: 0xFF</comment>
            <comment type="line">// GxB_BXNOR_UINT16_MONOID,      // identity: 0xFFFF</comment>
            <comment type="line">// GxB_BXNOR_UINT32_MONOID,      // identity: 0xFFFFFFFF</comment>
            <comment type="line">// GxB_BXNOR_UINT64_MONOID ;     // identity: 0xFFFFFFFFFFFFFFFF</comment>

            <switch>switch <condition>(<expr><name><name>add</name><operator>-&gt;</operator><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT8_</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>)</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>               <break>break ;</break>
                <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT16_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <literal type="number">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>             <break>break ;</break>
                <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT32_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>         <break>break ;</break>
                <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_Monoid_new_UINT64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
                <default>default:</default> 
                    <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"invalid monoid for (BXNOR)"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></switch>
            <break>break ;</break>

        <default>default:</default> 
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unsupported add operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>ASSERT_MONOID_OK</name> <argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><literal type="string">"monoid"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>M</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
