<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_Type_to_mxstring.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_Type_to_string: return a built-in string for a GrB_Type</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Given a GrB_Type, constructs a built-in string with the type name</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>mxArray</name> <modifier>*</modifier></type><name>GB_mx_Type_to_mxstring</name>        <comment type="line">// returns a built-in string</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>type</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <switch>switch <condition>(<expr><name><name>type</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"logical"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int16"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int32"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"int64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint8"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint16"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint32"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"uint64"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"single"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"double"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"single complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <case>case <expr><name>GB_UDT_code</name></expr>     :</case> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"double complex"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
        <default>default              :</default> <return>return <expr><operator>(</operator><call><name>mxCreateString</name> <argument_list>(<argument><expr><literal type="string">"other"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

</unit>
