<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_about2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_about2: more basic tests</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Test lots of random stuff.  The function otherwise serves no purpose.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex_errors.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_ij.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_about2"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>stuff</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name></decl> ;</decl_stmt>
}</block></struct></type>
<name>wild</name> ;</typedef>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>victor</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>Wild</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// startup GraphBLAS</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>fopen</name> <argument_list>(<argument><expr><literal type="string">"errlog3.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>expected</name> <init>= <expr><name>GrB_SUCCESS</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// test removeElement/setElement when jumbled</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A before set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">314159</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A after set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A after remove"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">99099</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"A after set again"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="string">"victor before set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="string">"victor after set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>victor</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_removeElement</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="string">"victor remove set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>victor</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_setElement_INT32</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_fprint</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="string">"victor after set again"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar before set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT32</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="number">404</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar after set"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar after extract"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_removeElement</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar after remove"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">777</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NO_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">777</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// force a zombie into the scalar</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_setElement_INT32</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="number">707</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_wait</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar after wait"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><operator>(</operator><name>GrB_Matrix</name><operator>)</operator> <name>scalar</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>,
        <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>scalar</name><operator>-&gt;</operator><name>i</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>scalar</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_FLIP</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>scalar</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar with zombie"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NO_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_extractElement_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Scalar_fprint</name> <argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"scalar after extract"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <literal type="number">777</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// builtin comparators not defined for complex types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>GxB_FC32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_select</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_LT_THUNK</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GB_pslice</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Slice</name> <index>[<expr><literal type="number">30</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>Slice</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Ap</name> <index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_pslice</name> <argument_list>(<argument><expr><name>Slice</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Slice: "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">" %ld"</literal></expr></argument>, <argument><expr><name><name>Slice</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_Matrix_check</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>bswitch</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><literal type="number">0.125</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bswitch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>fabs</name> <argument_list>(<argument><expr><name>bswitch</name> <operator>-</operator> <literal type="number">0.125</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1e-5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <comment type="line">// mangle the matrix</comment>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>  <comment type="line">// OK</comment>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid sparse matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>sparsity_control</name></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid sparsity control"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"full matrix cannot be jumbled"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid full matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"full matrix cannot have zombies"</literal></expr></argument>,
        <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_Pending_alloc</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"full matrix cannot have pending tuples"</literal></expr></argument>,
        <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <literal type="number">999</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid bitmap"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>plen</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid bitmap"</literal></expr></argument>, <argument><expr><name>GxB_SUMMARY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>b</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid bitmap"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <literal type="number">2</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid nvec_nonempty"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"valid matrix with 1 pending"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">900</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"invalid pending type"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// lo:stride:hi with stride of zero</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>I</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>I32</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>GxB_STRIDE</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C = A (:,1:0:1)"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_extract_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>GxB_STRIDE</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C = A (1:0:1,:)"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set_</name><argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>Icolon</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_ij_is_in_list</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GB_STRIDE</name></expr></argument>, <argument><expr><name>Icolon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GB_aliased</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>p</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>p_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>p_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_FREE</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>i</name></name><operator>)</operator></expr></argument>, <argument><expr><name><name>C</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><call><name>GB_aliased</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i_shallow</name></name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_apply with empty scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_EMPTY_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_apply_BinaryOp2nd</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_INT32</name></expr></argument>, <argument><expr><name>A</name></expr></argument>,
        <argument><expr><name>scalar</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// invalid descriptor</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>method</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"descriptor"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>method</name> <operator>==</operator> <name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"descriptor"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Desc_get</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>method</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>method</name> <operator>==</operator> <name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>GrB_REPLACE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_OBJECT</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Descriptor_fprint</name> <argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Descriptor_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_build an empty matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GrB_PLUS_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="string">"empty"</literal></expr></argument>, <argument><expr><name>GxB_COMPLETE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><call><name>GB_is_shallow</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_build_INT32</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I32</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GxB_FIRSTI_INT32</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// reduce with positional op</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get_</name><argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bswitch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"vector bitmap switch: %g\n\n"</literal></expr></argument>, <argument><expr><name>bswitch</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NOT_IMPLEMENTED</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_reduce_BinaryOp</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GxB_FIRSTI_INT32</name></expr></argument>,
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>message</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error expected: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GrB_init</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GrB_init</name> <argument_list>(<argument><expr><name>GrB_BLOCKING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// jumbled user-defined matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>wild</name></type> <name>ww</name></decl>, <decl><type ref="prev"/><name>w2</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">3</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>ww</name><operator>.</operator><name>stuff</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Type_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Wild</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>wild</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_SPARSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_UDT</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ww</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"wild matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// jumble the matrix</comment>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>i</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"wild matrix jumbled"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// unjumble the matrix</comment>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"wild matrix unjumbled"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// malloc/realloc wrappers</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>size_t</name></type> <name>nbytes</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>GB_malloc_memory</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_realloc_memory</name> <argument_list>(<argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>GB_realloc_memory</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GB_NMAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nbytes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><operator>!</operator><name>ok</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_free_memory</name> <argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// try to import a huge full matrix (this will fail):</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>X</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_import_FullC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GB_NMAX</name></expr></argument>, <argument><expr><name>GB_NMAX</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>UINT64_MAX</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_INVALID_VALUE</name> <operator>||</operator> <name>X</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"huge fail1"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nhuge</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>GrB_Index</name><operator>)</operator> <literal type="number">2</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">50</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_import_BitmapC</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>nhuge</name></expr></argument>, <argument><expr><name>nhuge</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_INVALID_VALUE</name> <operator>||</operator> <name>X</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"huge fail5"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// try to convert a huge sparse matrix to bitmap (this will fail too):</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>nhuge</name></expr></argument>, <argument><expr><name>nhuge</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"huge fail2"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Option_set_</name><argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>GxB_BITMAP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_OUT_OF_MEMORY</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"huge fail3"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// hypermatrix prune</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>GB_NMAX</name></expr></argument>, <argument><expr><name>GB_NMAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_FP32</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_fprint</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"huge matrix"</literal></expr></argument>, <argument><expr><name>GxB_SHORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GB_hypermatrix_prune</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>C</name><operator>-&gt;</operator><name>nvec_nonempty</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// vector option set/get</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_set</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>bitmap_switch</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Vector_Option_get</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>GxB_BITMAP_SWITCH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bitmap_switch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>bitmap_switch</name> <operator>==</operator> <literal type="number">4.5</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// split/concat for user-defined types</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n ======================== split/concat tests: "</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>sparsity</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>sparsity</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>GxB_HYPERSPARSE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>sparsity</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>GxB_SPARSE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>sparsity</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>GxB_BITMAP</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>sparsity</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>GxB_FULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name><name>Tiles</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>GrB_Matrix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">20</literal></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>Tile_nrows</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name><name>Tile_ncols</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr> }</block></expr></init></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k2</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>k2</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name><name>sparsity</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>k2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// C(:,:) = ww</comment>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_assign_UDT</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ww</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>,
                    <argument><expr><name>n</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// C = diagonal matrix</comment>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ww</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></else></if_stmt>
            <comment type="line">// split C into 4 matrices</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// concatenate the 4 matrices back in X</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Option_set</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name><name>sparsity</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// ensure C and X are the same (just use a brute force method)</comment>
            <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>wild</name></type> <name>wc</name></decl>, <decl><type ref="prev"/><name>wx</name></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>infoc</name> <init>= <expr><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>infox</name> <init>= <expr><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>wx</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>infoc</name> <operator>==</operator> <name>GrB_SUCCESS</name> <operator>||</operator> <name>infoc</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>infoc</name> <operator>==</operator> <name>infox</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>infoc</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
                    <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>wc</name><operator>.</operator><name>stuff</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>==</operator> <name><name>wx</name><operator>.</operator><name>stuff</name> <index>[<expr><name>kk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Tiles</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Tiles</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// GxB_print (X, 3) ;</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Tiles</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Tiles</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>Tiles</name> <index>[<expr><name>kk</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_NULL_POINTER</name></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>X</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// split/concat error handling</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_INVALID_VALUE</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_concat</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tile_nrows</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tile_nrows</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tile_nrows</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tile_ncols</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>Tile_ncols</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_split</name> <argument_list>(<argument><expr><name>Tiles</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>Tile_nrows</name></expr></argument>, <argument><expr><name>Tile_ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// C&lt;C,struct&gt; = scalar</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n\ntesting C&lt;C,struct&gt; = scalar for user-defined type:\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>ww</name><operator>.</operator><name>stuff</name></name></expr></argument>,  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>w2</name><operator>.</operator><name>stuff</name></name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>w2</name><operator>.</operator><name>stuff</name> <index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>kk</name></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_setElement_UDT</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ww</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_UDT</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w2</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,
        <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>wild</name></type> <name>w3</name></decl> ;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> ;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name><name>w3</name><operator>.</operator><name>stuff</name></name></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <operator>(</operator><call><name>GrB_Matrix_extractElement_UDT</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>w3</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>kk</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>CHECK</name> <argument_list>(<argument><expr><name><name>w3</name><operator>.</operator><name>stuff</name> <index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <name>t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Global_Option_set</name> <argument_list>(<argument><expr><name>GxB_BURBLE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// GxB_Matrix_diag and GxB_Vector_diag error handling</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DIMENSION_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_diag</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_diag</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_diag</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>expected</name> <operator>=</operator> <name>GrB_DOMAIN_MISMATCH</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>Wild</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_diag</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Matrix_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ERR</name> <argument_list>(<argument><expr><call><name>GxB_Vector_diag</name> <argument_list>(<argument><expr><name>victor</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GrB_Vector_error</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>victor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"expected error: %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_free</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>victor</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// wrapup</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><call><name>GrB_Type_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Wild</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>   
    <expr_stmt><expr><call><name>fclose</name> <argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\nAll errors printed above were expected.\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"GB_mex_about2: all tests passed\n\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
