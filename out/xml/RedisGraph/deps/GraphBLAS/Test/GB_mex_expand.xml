<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_expand.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_expand: C&lt;M,struct&gt; = scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"matrix.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_expand (M, scalar)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;M) ;              \
    GrB_Matrix_free_(&amp;C) ;              \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>!=</operator> <literal type="number">2</literal> <operator>||</operator> <name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get M (shallow copy)</comment>
    <expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>M</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"M failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get scalar</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// C&lt;M,struct&gt; = scalar</comment>
    <if_stmt><if>if <condition>(<expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar must not be sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><call><name>GB_mx_Type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>Complex</name> <operator>&amp;&amp;</operator> <name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// user-defined complex case</comment>
        <decl_stmt><decl><type><name>GxB_FC64_t</name> <modifier>*</modifier></type><name>scalar</name> <init>= <expr><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <call><name>mxGetComplexDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_subassign_UDT_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>scalar</name></expr></argument>,
            <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"GxB_Matrix_subassign_[complex] failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// built-in GraphBLAS types</comment>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CREATE</name><parameter_list>(<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>c_type</name></type></parameter>)</parameter_list></cpp:macro>                               \
        <cpp:value>{                                                           \
            c_type *scalar = (c_type *) mxGetData (pargin [1]) ;    \
            GxB_Matrix_subassign ## suffix (C, M, NULL, *scalar,    \
                GrB_ALL, nrows, GrB_ALL, ncols, GrB_DESC_RS) ;      \
        }                                                           \
        break ;</cpp:value></cpp:define>

        <switch>switch <condition>(<expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>     )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_INT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>   )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_INT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_INT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_INT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_UINT8_code</name></expr>  :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_UINT16_code</name></expr> :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_UINT32_code</name></expr> :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_UINT64_code</name></expr> :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_FP32_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_FP64_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>   )</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_FC32_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <case>case <expr><name>GB_FC64_code</name></expr>   :</case> <expr_stmt><expr><call><name>CREATE</name> <argument_list>(<argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <default>default:</default> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar type not supported"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// return result</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C result"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
