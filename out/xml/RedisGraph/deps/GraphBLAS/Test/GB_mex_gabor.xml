<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_gabor.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_gabor: test case from Gabor Szarnyas and Marton Elekes</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This test triggers the C&lt;M&gt;=A assignment where C starts out as sparse with</comment>
<comment type="line">// has many pending tuples, and is converted to bitmap by the assignment.  In</comment>
<comment type="line">// this case, C is the vector w.  If w_sparsity is 15 and 'wait' is false, then</comment>
<comment type="line">// it starts the w&lt;v&gt;=sum(A) reduction with many pending tuples, and converts w</comment>
<comment type="line">// from sparse/hyper with many pending tuples into a bitmap vector.  The</comment>
<comment type="line">// outputs w, v, and A should be the same, regardless of the input parameter s.</comment>

<comment type="line">// s is an optional vector of length 4, containing 4 parameters:</comment>
<comment type="line">// s = [wait, w_sparsity, v_sparsity, A_sparsity] ;</comment>
<comment type="line">// with wait 0 or 1, and the sparsity controls in range 1 to 15.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"[w,v,A] = GB_mex_gabor (s)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>v</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>w</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>||</operator> <name>nargin</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the sparsity control for w, v, and A, and the wait flag</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>w_sparsity</name> <init>= <expr><literal type="number">15</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>v_sparsity</name> <init>= <expr><literal type="number">15</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><literal type="number">15</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>wait</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><call><name>mxIsDouble</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name>
                <literal type="string">"\ns must be a double vector of length 4\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>wait</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>w_sparsity</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>v_sparsity</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>A_sparsity</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// define the problem</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>I</name> <index>[ ]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>,
        <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">72</literal></expr>,
        <expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">100</literal></expr>,
        <expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">116</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">120</literal></expr>,
        <expr><literal type="number">123</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">131</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">145</literal></expr>, <expr><literal type="number">146</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>,
        <expr><literal type="number">156</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">161</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">177</literal></expr>,
        <expr><literal type="number">181</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">189</literal></expr>, <expr><literal type="number">191</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">203</literal></expr>,
        <expr><literal type="number">204</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>,
        <expr><literal type="number">232</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">236</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr> }</block></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nvals</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>I</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl> ;</decl_stmt>

    <comment type="line">// construct a diagonal matrix A where A(i,i)=i for each i in I </comment>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_Option_set_</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>A_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_build</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// construct v from I, with value v (i) = i </comment>
    <expr_stmt><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_Option_set_</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>v_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_build</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>nvals</name></expr></argument>, <argument><expr><name>GrB_PLUS_UINT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_Vector_wait</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// w&lt;v&gt; = 1</comment>
    <expr_stmt><expr><call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><name>GrB_UINT64</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GxB_Vector_Option_set_</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>GxB_SPARSITY_CONTROL</name></expr></argument>, <argument><expr><name>w_sparsity</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Vector_assign_UINT64</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>GrB_Vector_wait</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// w&lt;v&gt; = sum (A)</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_reduce_Monoid</name> <argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>GrB_PLUS_MONOID_UINT64</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return A, v, and w as structs</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Vector_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><literal type="string">"w output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Vector_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="string">"v output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><literal type="string">"A output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// log the test coverage</comment>
    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
