<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/Template/GB_mx_build_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_build_template: build a sparse vector or matrix</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This is not a stand-alone function; it is #include'd in</comment>
<comment type="line">// GB_mex_Matrix_build.c and GB_mex_Vector_build.c.</comment>

<comment type="line">// The function works the same as C = sparse (I,J,X,nrows,ncols)</comment>
<comment type="line">// except an optional operator, dup, can be provided.  The operator defines</comment>
<comment type="line">// how duplicates are assembled.</comment>

<comment type="line">// The type of dup and C may differ.  A matrix T is first built that has the</comment>
<comment type="line">// same type as dup, and then typecasted to the desired type of C, given by</comment>
<comment type="line">// the last argument, "type".</comment>

<comment type="line">// This particular GraphBLAS implementation provides a well-defined order of</comment>
<comment type="line">// 'summation'.  Entries in [I,J,X] are first sorted in increasing order of row</comment>
<comment type="line">// index via a stable sort, with ties broken by the position of the tuple in</comment>
<comment type="line">// the [I,J,X] list.  If duplicates appear, they are 'summed' in the order they</comment>
<comment type="line">// appear in the [I,J,X] input.  That is, if the same indices i and j appear in</comment>
<comment type="line">// positions k1, k2, k3, and k3 in [I,J,X], where k1 &lt; k2 &lt; k3 &lt; k4, then the</comment>
<comment type="line">// following operations will occur in order:</comment>

<comment type="line">//      T (i,j) = X (k1) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k2)) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k3)) ;</comment>
<comment type="line">//      T (i,j) = dup (T (i,j), X (k4)) ;</comment>

<comment type="line">// Thus, dup need not be associative, and the results are still well-defined.</comment>
<comment type="line">// Using the FIRST operator (a string 'first') means the first value (X (k1))</comment>
<comment type="line">// is used and the rest are ignored.  The SECOND operator means the last value</comment>
<comment type="line">// (X (k4)) is used instead.</comment>

<comment type="line">// X must be the same length as I, in which case GrB_Matrix_build_[TYPE] or</comment>
<comment type="line">// GrB_Vector_build_[TYPE] is used, or X must have length 1, in which case</comment>
<comment type="line">// GxB_Matrix_build_Scalar or GxB_Vector_build_Scalar is used.  The dup</comment>
<comment type="line">// operator is ignored in that case.</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NARGIN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_NARGIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_Matrix_build (I,J,X,nrows,ncols,dup,type,csc)"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_ARG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>J_ARG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_ARG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NROWS_ARG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCOLS_ARG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_ARG</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_ARG</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSC_ARG</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_WORK</name></cpp:macro>                   \
<cpp:value>{                                   \
    GrB_Scalar_free_(&amp;scalar) ;     \
    GrB_Matrix_free_(&amp;C) ;          \
}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NARGIN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_NARGIN</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"GB_mex_Vector_build (I,X,nrows,dup,type)"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_ARG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X_ARG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NROWS_ARG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUP_ARG</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE_ARG</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_WORK</name></cpp:macro>                   \
<cpp:value>{                                   \
    GrB_Scalar_free_(&amp;scalar) ;     \
    GrB_Vector_free_(&amp;C) ;          \
}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                    \
<cpp:value>{                                   \
    FREE_WORK ;                     \
    GB_mx_put_global (true) ;       \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK1</name><parameter_list>(<parameter><type><name>method</name></type></parameter>)</parameter_list></cpp:macro>                 \
<cpp:value>{                                   \
    info = method ;                 \
    if (info != GrB_SUCCESS)        \
    {                               \
        FREE_WORK ;                 \
        return (info) ;             \
    }                               \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>

<function_decl><type><name>GrB_Info</name></type> <name>builder</name>
<parameter_list>(
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <parameter><decl><type><name>GrB_Vector</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scalar_build</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>ni</name></decl></parameter>,
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>dup</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>C_is_csc</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list> ;</function_decl>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>builder</name>
<parameter_list>(
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <parameter><decl><type><name>GrB_Matrix</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <parameter><decl><type><name>GrB_Vector</name> <modifier>*</modifier></type><name>Chandle</name></decl></parameter>,
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <parameter><decl><type><name>GrB_Type</name></type> <name>ctype</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>ncols</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name></decl></parameter>,
    <parameter><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>scalar_build</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Index</name></type> <name>ni</name></decl></parameter>,
    <parameter><decl><type><name>GrB_BinaryOp</name></type> <name>dup</name></decl></parameter>,
    <parameter><decl><type><name>bool</name></type> <name>C_is_csc</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl></parameter>,
    <parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <comment type="line">// create the GraphBLAS output object C</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>sparsity</name> <init>= <expr><name>GxB_SPARSE</name> <operator>+</operator> <name>GxB_HYPERSPARSE</name></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>C_is_csc</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// create a hypersparse CSC matrix</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><name>Chandle</name></expr></argument>, <comment type="line">// sparse/hyper, new header</comment>
            <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>GxB_HYPER_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// create a hypersparse CSR matrix</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_new</name> <argument_list>(<argument><expr><name>Chandle</name></expr></argument>, <comment type="line">// sparse/hyper, new header</comment>
            <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GB_Ap_calloc</name></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><name>sparsity</name></expr></argument>, <argument><expr><name>GxB_HYPER_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Vector_new</name> <argument_list>(<argument><expr><name>Chandle</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>C</name> <init>= <expr><operator>(</operator><operator>*</operator><name>Chandle</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_TYPE_OK</name> <argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr><literal type="string">"ctype for build"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK</name> <argument_list>(<argument><expr><name>dup</name></expr></argument>, <argument><expr><literal type="string">"dup for build"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>scalar_build</name></expr>)</condition>
    <block>{<block_content>

        <expr_stmt><expr><call><name>OK1</name> <argument_list>(<argument><expr><call><name>GrB_Scalar_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// build an iso matrix or vector from the tuples and the scalar</comment>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                   \
            <cpp:value>OK1 (prefix ## Scalar_setElement ## suffix (scalar, * (type *) X)) ;  \
            OK1 (GxB_Matrix_build_Scalar (C, I, J, scalar, ni)) ;</cpp:value></cpp:define>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                   \
            <cpp:value>OK1 (prefix ## Scalar_setElement ## suffix (scalar, * (type *) X)) ;  \
            OK1 (GxB_Vector_build_Scalar (C, I,    scalar, ni)) ;</cpp:value></cpp:define>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <switch>switch <condition>(<expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>   )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <default>default              :</default>
                <expr_stmt><expr><name>FREE_WORK</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"xtype not supported"</literal></expr></argument>)</argument_list></call></expr>  ;</expr_stmt>
        </block_content>}</block></switch>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">// build a non-iso matrix or vector from the tuples</comment>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUILD</name></cpp:undef>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>               \
            <cpp:value>OK1 (prefix ## Matrix_build ## suffix       \
                (C, I, J, (const type *) X, ni, dup))</cpp:value></cpp:define>
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILD</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>,<parameter><type><name>suffix</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>               \
            <cpp:value>OK1 (prefix ## Vector_build ## suffix       \
                (C, I,    (const type *) X, ni, dup))</cpp:value></cpp:define>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <switch>switch <condition>(<expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_BOOL</name></expr></argument>,   <argument><expr><name>bool</name></expr></argument>    )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT8</name></expr></argument>,   <argument><expr><name>int8_t</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT16</name></expr></argument>,  <argument><expr><name>int16_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT32</name></expr></argument>,  <argument><expr><name>int32_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_INT64</name></expr></argument>,  <argument><expr><name>int64_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT8</name></expr></argument>,  <argument><expr><name>uint8_t</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT16</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT32</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_UINT64</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP32</name></expr></argument>,   <argument><expr><name>float</name></expr></argument>   )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GrB_</name></expr></argument>, <argument><expr><name>_FP64</name></expr></argument>,   <argument><expr><name>double</name></expr></argument>  )</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC32</name></expr></argument>,   <argument><expr><name>GxB_FC32_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><call><name>BUILD</name> <argument_list>(<argument><expr><name>GxB_</name></expr></argument>, <argument><expr><name>_FC64</name></expr></argument>,   <argument><expr><name>GxB_FC64_t</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <break>break ;</break>
            <default>default              :</default>
                <expr_stmt><expr><name>FREE_WORK</name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"xtype not supported"</literal></expr></argument>)</argument_list></call></expr>  ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GrB_Scalar_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>GrB_SUCCESS</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>I</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>ni</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>I_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name> <modifier>*</modifier></type><name>J</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>nj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>J_range</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>is_list</name></decl> ;</decl_stmt> 
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>GrB_Vector</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><name>MIN_NARGIN</name> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <name>MAX_NARGIN</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: C = "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get I</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>I</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><name>I_ARG</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ni</name></expr></argument>, <argument><expr><name>I_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_list</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_list</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I is invalid; must be a list"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <comment type="line">// get J for a matrix</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_indices</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>J</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><name>J_ARG</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nj</name></expr></argument>, <argument><expr><name>J_range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_list</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>is_list</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"J is invalid; must be a list"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ni</name> <operator>!=</operator> <name>nj</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I and J must be the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// get X</comment>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nx</name> <init>= <expr><call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>scalar_build</name> <init>= <expr><operator>(</operator><name>nx</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>scalar_build</name> <operator>&amp;&amp;</operator> <name>ni</name> <operator>!=</operator> <name>nx</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"I and X must be the same size"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>mxIsNumeric</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>mxIsLogical</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be a numeric or logical array"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X cannot be sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name> <init>= <expr><call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name> <init>= <expr><call><name>GB_mx_Type</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>X_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the number of rows</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>nrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <name>NROWS_ARG</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>nrows</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>NROWS_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ni</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>nrows</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name><name>I</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>nrows</name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// get the number of columns of a matrix</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>ncols</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <name>NCOLS_ARG</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>NCOLS_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>ncols</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ni</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>ncols</name> <operator>=</operator> <call><name>GB_IMAX</name> <argument_list>(<argument><expr><name>ncols</name></expr></argument>, <argument><expr><name><name>J</name> <index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>ncols</name><operator>++</operator></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// get dup; default is xtype</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>xtype</name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>dup</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><name>DUP_ARG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dup"</literal></expr></argument>,
        <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"dup failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the type for C, default is same as xtype</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><call><name>GB_mx_string_to_Type</name> <argument_list>(<argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><name>TYPE_ARG</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>dup</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>scalar_build</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GrB_PLUS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GxB_PLUS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>dup</name> <operator>=</operator> <name>GxB_PLUS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
            <default>default              :</default> 
                <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>C_is_csc</name> <init>= <expr><name>true</name></expr></init></decl> ;</decl_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <comment type="line">// get the CSC/CSR format</comment>
    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>&gt;</operator> <name>CSC_ARG</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>C_is_csc</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <call><name>mxGetScalar</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><name>CSC_ARG</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>builder</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>I</name></expr></argument>, <argument><expr><name>J</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>scalar_build</name></expr></argument>, <argument><expr><name>ni</name></expr></argument>, <argument><expr><name>dup</name></expr></argument>,
        <argument><expr><name>C_is_csc</name></expr></argument>, <argument><expr><name>xtype</name></expr></argument>, <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_MATRIX_OK</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="string">"C built"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return C as a struct and free the GraphBLAS C</comment>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MATRIX</name></cpp:ifdef>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Vector_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
