<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/Template/GB_mx_dot_iterator_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_dot_iterator: s = X'*Y, dot product of 2 vectors using iterators</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Template for #include'ing into GB_mex_dot_iterator.c</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// MULTADD: s += X(i) * Y(i)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive>  <name>MULTADD</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTADD</name></cpp:macro>                                                         \
<cpp:value>{                                                                       \
    if (type == GrB_BOOL)                                               \
    {                                                                   \
        bool xi = GxB_Iterator_get_BOOL (X_iterator) ;                  \
        bool yi = GxB_Iterator_get_BOOL (Y_iterator) ;                  \
        (*(bool *) s) |= xi &amp;&amp; yi ;                                     \
    }                                                                   \
    else if (type == GrB_INT8)                                          \
    {                                                                   \
        int8_t xi = GxB_Iterator_get_INT8 (X_iterator) ;                \
        int8_t yi = GxB_Iterator_get_INT8 (Y_iterator) ;                \
        (*(int8_t *) s) += xi * yi ;                                    \
    }                                                                   \
    else if (type == GrB_INT16)                                         \
    {                                                                   \
        int16_t xi = GxB_Iterator_get_INT16 (X_iterator) ;              \
        int16_t yi = GxB_Iterator_get_INT16 (Y_iterator) ;              \
        (*(int16_t *) s) += xi * yi ;                                   \
    }                                                                   \
    else if (type == GrB_INT32)                                         \
    {                                                                   \
        int32_t xi = GxB_Iterator_get_INT32 (X_iterator) ;              \
        int32_t yi = GxB_Iterator_get_INT32 (Y_iterator) ;              \
        (*(int32_t *) s) += xi * yi ;                                   \
    }                                                                   \
    else if (type == GrB_INT64)                                         \
    {                                                                   \
        int64_t xi = GxB_Iterator_get_INT64 (X_iterator) ;              \
        int64_t yi = GxB_Iterator_get_INT64 (Y_iterator) ;              \
        (*(int64_t *) s) += xi * yi ;                                   \
    }                                                                   \
    else if (type == GrB_UINT8)                                         \
    {                                                                   \
        uint8_t xi = GxB_Iterator_get_UINT8 (X_iterator) ;              \
        uint8_t yi = GxB_Iterator_get_UINT8 (Y_iterator) ;              \
        (*(uint8_t *) s) += xi * yi ;                                   \
    }                                                                   \
    else if (type == GrB_UINT16)                                        \
    {                                                                   \
        uint16_t xi = GxB_Iterator_get_UINT16 (X_iterator) ;            \
        uint16_t yi = GxB_Iterator_get_UINT16 (Y_iterator) ;            \
        (*(uint16_t *) s) += xi * yi ;                                  \
    }                                                                   \
    else if (type == GrB_UINT32)                                        \
    {                                                                   \
        uint32_t xi = GxB_Iterator_get_UINT32 (X_iterator) ;            \
        uint32_t yi = GxB_Iterator_get_UINT32 (Y_iterator) ;            \
        (*(uint32_t *) s) += xi * yi ;                                  \
    }                                                                   \
    else if (type == GrB_UINT64)                                        \
    {                                                                   \
        uint64_t xi = GxB_Iterator_get_UINT64 (X_iterator) ;            \
        uint64_t yi = GxB_Iterator_get_UINT64 (Y_iterator) ;            \
        (*(uint64_t *) s) += xi * yi ;                                  \
    }                                                                   \
    else if (type == GrB_FP32)                                          \
    {                                                                   \
        float xi = GxB_Iterator_get_FP32 (X_iterator) ;                 \
        float yi = GxB_Iterator_get_FP32 (Y_iterator) ;                 \
        (*(float *) s) += xi * yi ;                                     \
    }                                                                   \
    else if (type == GrB_FP64)                                          \
    {                                                                   \
        double xi = GxB_Iterator_get_FP64 (X_iterator) ;                \
        double yi = GxB_Iterator_get_FP64 (Y_iterator) ;                \
        (*(double *) s) += xi * yi ;                                    \
    }                                                                   \
    else if (type == GxB_FC32)                                          \
    {                                                                   \
        GxB_FC32_t xi = GxB_Iterator_get_FC32 (X_iterator) ;            \
        GxB_FC32_t yi = GxB_Iterator_get_FC32 (Y_iterator) ;            \
        (*(GxB_FC32_t *) s) += xi * yi ;                                \
    }                                                                   \
    else if (type == GxB_FC64)                                          \
    {                                                                   \
        GxB_FC64_t xi = GxB_Iterator_get_FC64 (X_iterator) ;            \
        GxB_FC64_t yi = GxB_Iterator_get_FC64 (Y_iterator) ;            \
        (*(GxB_FC64_t *) s) += xi * yi ;                                \
    }                                                                   \
    else if (type == Complex)                                           \
    {                                                                   \
        GxB_FC64_t xi, yi ;                                             \
        GxB_Iterator_get_UDT (X_iterator, (void *) &amp;xi) ;               \
        GxB_Iterator_get_UDT (Y_iterator, (void *) &amp;yi) ;               \
        (*(GxB_FC64_t *) s) += xi * yi ;                                \
    }                                                                   \
    else                                                                \
    {                                                                   \
        mexErrMsgTxt ("type unknown") ;                                 \
    }                                                                   \
}</cpp:value></cpp:define>

<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>x_pmax</name> <init>= <expr><call><name>GxB_Vector_Iterator_getpmax</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>x_pmax</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name> <operator>&amp;&amp;</operator> <name>xnvals</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>xnvals</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>y_pmax</name> <init>= <expr><call><name>GxB_Vector_Iterator_getpmax</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>y_pmax</name> <operator>==</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>y_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name> <operator>&amp;&amp;</operator> <name>ynvals</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>ynvals</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">// seek to the first entry of X and Y</comment>
        <expr_stmt><expr><name>X_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_seek</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>Y_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_seek</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <while>while <condition>(<expr><name>X_info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name> <operator>&amp;&amp;</operator> <name>Y_info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// get the index of entries x(i) and y(j)</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_Vector_Iterator_getIndex</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_Vector_Iterator_getIndex</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// consume x(i)</comment>
                <comment type="line">// printf ("skip x, i = %ld\n", i) ;</comment>
                <expr_stmt><expr><name>X_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// consume y(j)</comment>
                <comment type="line">// printf ("skip y,                 j = %ld\n", j) ;</comment>
                <expr_stmt><expr><name>Y_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></if>
            <else>else <comment type="line">// i == j</comment>
            <block>{<block_content>
                <comment type="line">// s += x(i) * y(i)</comment>
                <comment type="line">// printf ("multadd at i = %ld\n", i) ;</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// consume both x(i) and y(i)</comment>
                <expr_stmt><expr><name>X_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name>Y_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">// This is an absurd algorithm, just to exercise the code.</comment>
        <comment type="line">// It's not recommended.</comment>

        <comment type="line">// seek all entries in x, backwards</comment>
        <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>x_pmax</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>X_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_seek</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>X_info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>p2</name> <init>= <expr><call><name>GxB_Vector_Iterator_getp</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>p</name> <operator>!=</operator> <name>p2</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

                <comment type="line">// get x(i)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_Vector_Iterator_getIndex</name> <argument_list>(<argument><expr><name>X_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

                <comment type="line">// find y(i) via brute force</comment>
                <expr_stmt><expr><name>Y_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_seek</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <while>while <condition>(<expr><name>Y_info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i2</name> <init>= <expr><call><name>GxB_Vector_Iterator_getIndex</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>i2</name> <operator>==</operator> <name>i</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// s += x(i) * y(i)</comment>
                        <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                        <break>break ;</break>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name>Y_info</name> <operator>=</operator> <call><name>GxB_Vector_Iterator_next</name> <argument_list>(<argument><expr><name>Y_iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
</block_content>}</block>

</unit>
