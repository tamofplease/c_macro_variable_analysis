<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/Template/GB_mx_mxv_iterator_template.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxv_iterator: Y = A*X using an iterator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Template for #include'ing into GB_mex_mxv_iterator.c</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// MULTADD: Y (i) += A(i,j) * X(j)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULTADD</name></cpp:macro>                                                         \
<cpp:value>{                                                                       \
    if (type == GrB_BOOL)                                               \
    {                                                                   \
        bool aij = GxB_Iterator_get_BOOL (iterator) ;                   \
        ((bool *) Y-&gt;x) [i] |= aij &amp;&amp; ((bool *) X-&gt;x) [j] ;             \
    }                                                                   \
    else if (type == GrB_INT8)                                          \
    {                                                                   \
        int8_t aij = GxB_Iterator_get_INT8 (iterator) ;                 \
        ((int8_t *) Y-&gt;x) [i] += aij * ((int8_t *) X-&gt;x) [j] ;          \
    }                                                                   \
    else if (type == GrB_INT16)                                         \
    {                                                                   \
        int16_t aij = GxB_Iterator_get_INT16 (iterator) ;               \
        ((int16_t *) Y-&gt;x) [i] += aij * ((int16_t *) X-&gt;x) [j] ;        \
    }                                                                   \
    else if (type == GrB_INT32)                                         \
    {                                                                   \
        int32_t aij = GxB_Iterator_get_INT32 (iterator) ;               \
        ((int32_t *) Y-&gt;x) [i] += aij * ((int32_t *) X-&gt;x) [j] ;        \
    }                                                                   \
    else if (type == GrB_INT64)                                         \
    {                                                                   \
        int64_t aij = GxB_Iterator_get_INT64 (iterator) ;               \
        ((int64_t *) Y-&gt;x) [i] += aij * ((int64_t *) X-&gt;x) [j] ;        \
    }                                                                   \
    else if (type == GrB_UINT8)                                         \
    {                                                                   \
        uint8_t aij = GxB_Iterator_get_UINT8 (iterator) ;               \
        ((uint8_t *) Y-&gt;x) [i] += aij * ((uint8_t *) X-&gt;x) [j] ;        \
    }                                                                   \
    else if (type == GrB_UINT16)                                        \
    {                                                                   \
        uint16_t aij = GxB_Iterator_get_UINT16 (iterator) ;             \
        ((uint16_t *) Y-&gt;x) [i] += aij * ((uint16_t *) X-&gt;x) [j] ;      \
    }                                                                   \
    else if (type == GrB_UINT32)                                        \
    {                                                                   \
        uint32_t aij = GxB_Iterator_get_UINT32 (iterator) ;             \
        ((uint32_t *) Y-&gt;x) [i] += aij * ((uint32_t *) X-&gt;x) [j] ;      \
    }                                                                   \
    else if (type == GrB_UINT64)                                        \
    {                                                                   \
        uint64_t aij = GxB_Iterator_get_UINT64 (iterator) ;             \
        ((uint64_t *) Y-&gt;x) [i] += aij * ((uint64_t *) X-&gt;x) [j] ;      \
    }                                                                   \
    else if (type == GrB_FP32)                                          \
    {                                                                   \
        float aij = GxB_Iterator_get_FP32 (iterator) ;                  \
        ((float *) Y-&gt;x) [i] += aij * ((float *) X-&gt;x) [j] ;            \
    }                                                                   \
    else if (type == GrB_FP64)                                          \
    {                                                                   \
        double aij = GxB_Iterator_get_FP64 (iterator) ;                 \
        ((double *) Y-&gt;x) [i] += aij * ((double *) X-&gt;x) [j] ;          \
    }                                                                   \
    else if (type == GxB_FC32)                                          \
    {                                                                   \
        GxB_FC32_t aij = GxB_Iterator_get_FC32 (iterator) ;             \
        ((GxB_FC32_t *) Y-&gt;x) [i] += aij * ((GxB_FC32_t *) X-&gt;x) [j] ;  \
    }                                                                   \
    else if (type == GxB_FC64)                                          \
    {                                                                   \
        GxB_FC64_t aij = GxB_Iterator_get_FC64 (iterator) ;             \
        ((GxB_FC64_t *) Y-&gt;x) [i] += aij * ((GxB_FC64_t *) X-&gt;x) [j] ;  \
    }                                                                   \
    else if (type == Complex)                                           \
    {                                                                   \
        GxB_FC64_t aij ;                                                \
        GxB_Iterator_get_UDT (iterator, &amp;aij) ;                         \
        ((GxB_FC64_t *) Y-&gt;x) [i] += aij * ((GxB_FC64_t *) X-&gt;x) [j] ;  \
    }                                                                   \
    else                                                                \
    {                                                                   \
        mexErrMsgTxt ("type unknown") ;                                 \
    }                                                                   \
}</cpp:value></cpp:define>

<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a row iterator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// GxB_print (A, 3) ;</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_rowIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// get the kount</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount1</name> <init>= <expr><call><name>GxB_rowIterator_kount</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <comment type="line">// seek to A(0,:)</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_seekRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <while>while <condition>(<expr><name>info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// iterate over entries in A(i,:)</comment>
            <expr_stmt><expr><name>kount2</name><operator>++</operator></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(i,:)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
            <comment type="line">// move to the next row, A(i+1,:)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>kount1</name> <operator>==</operator> <name>kount2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// check the return value when the iterator is exhausted</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a col iterator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_colIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// get the kount</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount1</name> <init>= <expr><call><name>GxB_colIterator_kount</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <comment type="line">// seek to A(:,0)</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_seekCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <while>while <condition>(<expr><name>info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// iterate over entries in A(:,j)</comment>
            <expr_stmt><expr><name>kount2</name><operator>++</operator></expr> ;</expr_stmt>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_colIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_colIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(:,j)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_nextRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
            <comment type="line">// move to the next column, A(:,j+1)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_nextCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>kount1</name> <operator>==</operator> <name>kount2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// check the return value when the iterator is exhausted</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>==</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a matrix iterator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// useless descriptor, just to test nthreads extraction for GB_wait</comment>
        <if_stmt><if>if <condition>(<expr><call><name>GB_IS_SPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_HYPERSPARSE</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>A</name><operator>-&gt;</operator><name>jumbled</name></name> <operator>=</operator> <name>true</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Iterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// seek to the first entry</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Iterator_seek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <while>while <condition>(<expr><name>info</name> <operator>!=</operator> <name>GxB_EXHAUSTED</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// get the entry A(i,j)</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>GxB_Matrix_Iterator_getIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
            <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
            <comment type="line">// move to the next entry in A</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Iterator_next</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>p</name> <init>= <expr><call><name>GxB_Matrix_Iterator_getp</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>pmax</name> <init>= <expr><call><name>GxB_Matrix_Iterator_getpmax</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>p</name> <operator>==</operator> <name>pmax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a row iterator, but backwards with kseek</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_rowIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// get the kount</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount</name> <init>= <expr><call><name>GxB_rowIterator_kount</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>kount</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// seek to A(k,:)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_kseek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// get the row index</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// iterate over entries in A(i,:)</comment>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(i,:)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a col iterator, but backwards with kseek</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_colIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// get the kount</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>kount</name> <init>= <expr><call><name>GxB_colIterator_kount</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>kount</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// seek to A(:,k)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_kseek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>GrB_NO_VALUE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// get the col index</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_colIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// iterate over entries in A(:,j)</comment>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_colIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(:,j)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_nextRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a row iterator, but with seekRow</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_rowIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nrows</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// seek to A(k,:)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_seekRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>&gt;=</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// get the row index</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_rowIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// if the matrix is hypersparse, seekRow can skip</comment>
            <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">// iterate over entries in A(i,:)</comment>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_rowIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(i,:)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_nextCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>

        <comment type="line">// try exhaustion</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_rowIterator_seekRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a col iterator, but with seekCol</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_colIterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>ncols</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// seek to A(:,k)</comment>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_seekCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>(</operator><name>GrB_Index</name><operator>)</operator> <name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>&gt;=</operator> <name>GrB_SUCCESS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// get the col index</comment>
            <decl_stmt><decl><type><name>GrB_Index</name></type> <name>j</name> <init>= <expr><call><name>GxB_colIterator_getColIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            <comment type="line">// if the matrix is hypersparse, seekCol can skip</comment>
            <if_stmt><if>if <condition>(<expr><name>j</name> <operator>!=</operator> <name>k</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue ;</continue></block_content></block></if></if_stmt>

            <comment type="line">// iterate over entries in A(:,j)</comment>
            <while>while <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name> <init>= <expr><call><name>GxB_colIterator_getRowIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
                <comment type="line">// move to the next entry in A(:,j)</comment>
                <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_nextRow</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></for>

        <comment type="line">// try exhaustion</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_colIterator_seekCol</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>kind</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// Y = A*X using a matrix iterator but with seek</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// attach it to the matrix A</comment>
        <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Iterator_attach</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>pmax</name> <init>= <expr><call><name>GxB_Matrix_Iterator_getpmax</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <for>for <control>(<init><decl><type><name>GrB_Index</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>pmax</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// seek to the pth entry</comment>
            <expr_stmt><expr><call><name>OK</name> <argument_list>(<argument><expr><call><name>GxB_Matrix_Iterator_seek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">// check if the pth entry exists (for bitmap case)</comment>
            <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <call><name>GxB_Matrix_Iterator_getp</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// get the entry A(i,j)</comment>
                <decl_stmt><decl><type><name>GrB_Index</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl> ;</decl_stmt>
                <expr_stmt><expr><call><name>GxB_Matrix_Iterator_getIndex</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nrows</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>ncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <comment type="line">// Y (i) += A(i,j) * X (j)</comment>
                <expr_stmt><expr><name>MULTADD</name></expr> ;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <comment type="line">// try exhaustion</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_Iterator_seek</name> <argument_list>(<argument><expr><name>iterator</name></expr></argument>, <argument><expr><name>pmax</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>Assert</name> <argument_list>(<argument><expr><name>info</name> <operator>==</operator> <name>GxB_EXHAUSTED</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block>

</unit>
