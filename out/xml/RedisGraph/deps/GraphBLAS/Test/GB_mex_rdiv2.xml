<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_rdiv2.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_rdiv2: compute C=A*B with the rdiv2 operator</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// This is for testing only.  See GrB_mxm instead.  Returns a plain built-in</comment>
<comment type="line">// matrix, in double.  The semiring is plus-rdiv2 where plus is the </comment>
<comment type="line">// built-in GrB_PLUS_FP64 operator, and rdiv2 is z=y/x with y float and x</comment>
<comment type="line">// double.  The input matrix B is typecasted here to GrB_FP32.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"[C, inplace] = GB_mex_rdiv2 (A, B, atrans, btrans, axb_method, flipxy, C_scalar)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                            \
<cpp:value>{                                           \
    GrB_Matrix_free_(&amp;A) ;                  \
    GrB_Matrix_free_(&amp;B) ;                  \
    GrB_Matrix_free_(&amp;B64) ;                \
    GrB_Matrix_free_(&amp;C) ;                  \
    GrB_Matrix_free_(&amp;T) ;                  \
    GrB_BinaryOp_free_(&amp;My_rdiv2) ;         \
    GrB_Semiring_free_(&amp;My_plus_rdiv2) ;    \
    GB_mx_put_global (true) ;               \
}</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>

<decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>ignore</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ignore1</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>ignore2</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>atranspose</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>btranspose</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>B64</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"/><name>MT</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>anrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>ancols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bnrows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bncols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Desc_Value</name></type> <name>AxB_method</name> <init>= <expr><name>GxB_DEFAULT</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flipxy</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>done_in_place</name> <init>= <expr><name>false</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>C_scalar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>GB_Matrix_opaque</name></name></type> <name>MT_header</name></decl>, <decl><type ref="prev"/><name>T_header</name></decl> ;</decl_stmt>

<function_decl><type><name>GrB_Info</name></type> <name>axb</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list> ;</function_decl>

<decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>My_plus_rdiv2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>My_rdiv2</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

 <function_decl><type><name>void</name></type> <name>my_rdiv2</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>

 <function><type><name>void</name></type> <name>my_rdiv2</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
 <block>{<block_content>
     <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>y</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>*</operator><name>x</name><operator>)</operator></expr> ;</expr_stmt>
 </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MY_RDIV2</name></cpp:macro>                                                \
<cpp:value>"void my_rdiv2 (double *z, const double *x, const float *y)\n"  \
"{\n"                                                           \
"    (*z) = (*y) / (*x) ;\n"                                    \
"}"</cpp:value></cpp:define>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>GrB_Info</name></type> <name>axb</name> <parameter_list>(<parameter><decl><type><name>GB_Context</name></type> <name>Context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// create the rdiv2 operator</comment>
<comment type="line">//  info = GrB_BinaryOp_new (&amp;My_rdiv2,</comment>
<comment type="line">//      (GxB_binary_function) my_rdiv2, GrB_FP64, GrB_FP64, GrB_FP32);</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>My_rdiv2</name></expr></argument>,
        <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>my_rdiv2</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>,
        <argument><expr><literal type="string">"my_rdiv2"</literal></expr></argument>, <argument><expr><name>MY_RDIV2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_BinaryOp_wait_</name><argument_list>(<argument><expr><name>My_rdiv2</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>My_plus_rdiv2</name></expr></argument>, <argument><expr><name>GxB_PLUS_FP64_MONOID</name></expr></argument>, <argument><expr><name>My_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>do_in_place</name> <init>= <expr><operator>(</operator><name>C_scalar</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>do_in_place</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// construct the result matrix and fill it with the scalar</comment>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cnrows</name> <init>= <expr><name>anrows</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>GrB_Index</name></type> <name>cncols</name> <init>= <expr><name>bncols</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_plus_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_FP64_</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>C_scalar</name></expr></argument>,
            <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>cnrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>cncols</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition> 
        <block>{<block_content>
            <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_plus_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>MT</name> <operator>=</operator> <call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>MT_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>T</name>  <operator>=</operator> <call><name>GB_clear_static_header</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>T_header</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// C = A*B or C += A*B</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GB_AxB_meta</name> <argument_list>(<argument><expr><name>T</name></expr></argument>, <argument><expr><name>C</name></expr></argument>,  <comment type="line">// can be done in place if C != NULL</comment>
        <argument><expr><name>false</name></expr></argument>,      <comment type="line">// C_replace</comment>
        <argument><expr><name>true</name></expr></argument>,       <comment type="line">// CSC</comment>
        <argument><expr><name>MT</name></expr></argument>,         <comment type="line">// no MT returned</comment>
        <argument><expr><operator>&amp;</operator><name>ignore1</name></expr></argument>,   <comment type="line">// M_transposed will be false</comment>
        <argument><expr><name>NULL</name></expr></argument>,       <comment type="line">// no Mask</comment>
        <argument><expr><name>false</name></expr></argument>,      <comment type="line">// mask not complemented</comment>
        <argument><expr><name>false</name></expr></argument>,      <comment type="line">// mask not structural</comment>
        <argument><expr><ternary><condition><expr><operator>(</operator><name>do_in_place</name><operator>)</operator></expr> ?</condition><then> <expr><name>GrB_PLUS_FP64</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,   <comment type="line">// accum</comment>
        <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>,
        <argument><expr><name>My_plus_rdiv2</name></expr></argument>,
        <argument><expr><name>atranspose</name></expr></argument>,
        <argument><expr><name>btranspose</name></expr></argument>,
        <argument><expr><name>flipxy</name></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>ignore</name></expr></argument>,    <comment type="line">// mask_applied</comment>
        <argument><expr><operator>&amp;</operator><name>done_in_place</name></expr></argument>,
        <argument><expr><name>AxB_method</name></expr></argument>,
        <argument><expr><name>true</name></expr></argument>,       <comment type="line">// do the sort</comment>
        <argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>done_in_place</name> <operator>!=</operator> <name>do_in_place</name></expr>)</condition>
        <block>{<block_content>
<comment type="line">//          mexErrMsgTxt ("failure: not in place as expected\n") ;</comment>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done_in_place</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_dup</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GrB_BinaryOp_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>My_plus_rdiv2</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><name>info</name> <operator>=</operator> <name>GrB_SUCCESS</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>malloc_debug</name> <operator>=</operator> <call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ignore</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ignore1</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ignore2</name> <operator>=</operator> <name>false</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>B64</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>My_rdiv2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>My_plus_rdiv2</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>GB_CONTEXT</name> <argument_list>(<argument><expr><name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <comment type="line">// get A and B64</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>B64</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"B"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>B64</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name> <operator>||</operator> <operator>!</operator><name><name>B64</name><operator>-&gt;</operator><name>is_csc</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A and B must be in CSC format"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the atranspose option</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>atranspose</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the btranspose option</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>btranspose</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the axb_method</comment>
    <comment type="line">// 0 or not present: default</comment>
    <comment type="line">// 1001: Gustavson</comment>
    <comment type="line">// 1003: dot</comment>
    <comment type="line">// 1004: hash</comment>
    <comment type="line">// 1005: saxpy</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>GrB_Desc_Value</name></expr></argument>, <argument><expr><name>AxB_method</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><operator>(</operator><name>AxB_method</name> <operator>==</operator> <name>GxB_DEFAULT</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>AxB_method</name> <operator>==</operator> <name>GxB_AxB_GUSTAVSON</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>AxB_method</name> <operator>==</operator> <name>GxB_AxB_HASH</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>AxB_method</name> <operator>==</operator> <name>GxB_AxB_SAXPY</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>AxB_method</name> <operator>==</operator> <name>GxB_AxB_DOT</name><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown method"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the flipxy option</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>bool</name></expr></argument>, <argument><expr><name>flipxy</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// get the C_scalar</comment>
    <expr_stmt><expr><call><name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>C_scalar</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// determine the dimensions</comment>
    <expr_stmt><expr><name>anrows</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>atranspose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name>ancols</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>atranspose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name>bnrows</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>btranspose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B64</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B64</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
    <expr_stmt><expr><name>bncols</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>btranspose</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>GB_NROWS</name> <argument_list>(<argument><expr><name>B64</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>GB_NCOLS</name> <argument_list>(<argument><expr><name>B64</name></expr></argument>)</argument_list></call></expr></else></ternary></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ancols</name> <operator>!=</operator> <name>bnrows</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"invalid dimensions"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>atranspose</name> <operator>&amp;&amp;</operator> <name>btranspose</name> <operator>&amp;&amp;</operator> <name>C_scalar</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>C_scalar</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// convert B64 (double) to B (float)</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><name>GrB_FP32</name></expr></argument>, <argument><expr><name>bnrows</name></expr></argument>, <argument><expr><name>bncols</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_assign_</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>B64</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// B must be completed</comment>
    <expr_stmt><expr><call><name>GrB_Matrix_wait</name> <argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>GrB_MATERIALIZE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>axb</name> <argument_list>(<argument><expr><name>Context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C AxB result"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>done_in_place</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
