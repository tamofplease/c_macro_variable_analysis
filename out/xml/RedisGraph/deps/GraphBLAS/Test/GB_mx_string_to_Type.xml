<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_string_to_Type.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_string_to_Type.c: return the GrB_type from a string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Also returns the GrB_Type from the string.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>GrB_Type</name></type> <name>GB_mx_string_to_Type</name>       <comment type="line">// GrB_Type from the string</comment>
<parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>type_mx</name></decl></parameter>,         <comment type="line">// string with type name</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_type</name></decl></parameter>     <comment type="line">// default type if string empty</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// get the string</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>type</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GB_mx_mxArray_to_string</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>type_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator>  <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown class"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>default_type</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"logical"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOOL</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_BOOL</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int8"</literal></expr></argument>   )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT8</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int16"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int32"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"int64"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_INT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"uint8"</literal></expr></argument>  )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT8</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"uint16"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT16</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"uint32"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"uint64"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_UINT64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"single"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FP32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"double"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GrB_FP64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"single complex"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"double complex"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>Complex</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"GxB_FC32_t"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FC32</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"GxB_FC64_t"</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>GxB_FC64</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown class"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>NULL</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
