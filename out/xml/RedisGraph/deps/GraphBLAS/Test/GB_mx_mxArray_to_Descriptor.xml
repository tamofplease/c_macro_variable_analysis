<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_Descriptor.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_Descriptor: get the contents of a GraphBLAS Descriptor</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// get a GraphBLAS descriptor from a built-in struct.</comment>
<comment type="line">// D.out, D.in0, D.in0, and D.mask must all be strings.</comment>
<comment type="line">// Fields that are not present are left unchanged.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_descriptor</name>
<parameter_list>(
    <parameter><decl><type><name>GrB_Descriptor</name></type> <name>D</name></decl></parameter>,               <comment type="line">// GraphBLAS descriptor to modify</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>D_builtin</name></decl></parameter>,       <comment type="line">// built-in struct with D.output, etc</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldname</name></decl></parameter>,          <comment type="line">// fieldname to extract from D_builtin</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Desc_Field</name></type> <name>field</name></decl></parameter>      <comment type="line">// field to set in D</comment>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// A NULL means the descriptor is not in the list of input parameters.</comment>
    <comment type="line">// An empty Descriptor is OK.  Both mean the GraphBLAS descriptor is NULL,</comment>
    <comment type="line">// which each method uses to denote default values for all parameters.</comment>
    <if_stmt><if>if <condition>(<expr><name>D_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>D_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if present, the built-in D must be a struct</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsStruct</name> <argument_list>(<argument><expr><name>D_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"descriptor must be a struct"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// find the field in the built-in struct</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fieldnumber</name> <init>= <expr><call><name>mxGetFieldNumber</name> <argument_list>(<argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>fieldnumber</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// the field is present</comment>
        <decl_stmt><decl><type><name>mxArray</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>mxGetFieldByNumber</name> <argument_list>(<argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fieldnumber</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

        <comment type="line">// its value must be a string</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsChar</name> <argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"D.field must be a string"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// get the string from the built-in field</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
        <decl_stmt><decl><type><name>char</name></type> <name><name>s</name> <index>[<expr><name>LEN</name></expr>]</index></name></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>mxGetString</name> <argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <comment type="line">// convert the string to a Descriptor value, and set the value</comment>
        <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_DEFAULT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"tran"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"transpose"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_TRAN</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"complement"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_COMP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structure"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structural"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"structural complement"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_COMP</name> <operator>+</operator> <name>GrB_STRUCTURE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"replace"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GrB_REPLACE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"saxpy"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_SAXPY</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"gustavson"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_GUSTAVSON</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dot"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_DOT</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"hash"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Desc_set</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>GxB_AxB_HASH</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// the string must be one of the four strings listed above</comment>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unrecognized descriptor value"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// make sure the Descriptor field was set OK</comment>
        <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"set D failed!"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<comment type="line">//------------------------------------------------------------------------------</comment>

<function><type><name>bool</name></type> <name>GB_mx_mxArray_to_Descriptor</name>   <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Descriptor</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>,         <comment type="line">// descriptor to return</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>D_builtin</name></decl></parameter>,       <comment type="line">// built-in struct</comment>
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>                <comment type="line">// name of the descriptor</comment>
)</parameter_list>
<block>{<block_content>
    <comment type="line">// a null descriptor is OK; the method will use defaults</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>D_builtin</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name>D_builtin</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// the built-in desc is present and not empty, so create the GraphBLAS one</comment>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>D</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name> <init>= <expr><call><name>GrB_Descriptor_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"new D failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get each component of the descriptor struct</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="string">"outp"</literal></expr></argument>, <argument><expr><name>GrB_OUTP</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="string">"inp0"</literal></expr></argument>, <argument><expr><name>GrB_INP0</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="string">"inp1"</literal></expr></argument>, <argument><expr><name>GrB_INP1</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="string">"mask"</literal></expr></argument>, <argument><expr><name>GrB_MASK</name></expr></argument>)</argument_list></call> <operator>||</operator>
        <operator>!</operator><call><name>get_descriptor</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>D_builtin</name></expr></argument>, <argument><expr><literal type="string">"axb"</literal></expr></argument>,  <argument><expr><name>GxB_AxB_METHOD</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>GrB_Matrix_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>D</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"descriptor failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// return the non-null Descriptor to the caller</comment>
    <expr_stmt><expr><call><name>ASSERT_DESCRIPTOR_OK</name> <argument_list>(<argument><expr><name>D</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator> <operator>=</operator> <name>D</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
