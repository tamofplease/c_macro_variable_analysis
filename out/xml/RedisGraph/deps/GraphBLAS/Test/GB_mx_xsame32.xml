<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_xsame32.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_xsame32: check if two FP32 arrays are equal (ignoring zombies)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_xsame32</name>  <comment type="line">// true if arrays X and Y are the same (ignoring zombies)</comment>
<parameter_list>(
    <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>X</name></decl></parameter>,   <parameter><decl><type><name>bool</name></type> <name>X_iso</name></decl></parameter>,
    <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>Y</name></decl></parameter>,   <parameter><decl><type><name>bool</name></type> <name>Y_iso</name></decl></parameter>,
    <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>Xb</name></decl></parameter>,     <comment type="line">// bitmap of X and Y (NULL if no bitmap)</comment>
    <parameter><decl><type><name>int64_t</name></type> <name>len</name></decl></parameter>,    <comment type="line">// length of X and Y</comment>
    <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>I</name></decl></parameter>,     <comment type="line">// row indices (for zombies), same length as X and Y</comment>
    <parameter><decl><type><name>float</name></type> <name>eps</name></decl></parameter>       <comment type="line">// error tolerance allowed (eps &gt; 0)</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>Y</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>X</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>Y</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>Xb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>Xb</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// ignore X [i] and Y [i] if they are not in the bitmap</comment>
            <continue>continue ;</continue>
        </block_content>}</block></if></if_stmt>
        <comment type="line">// check X [i] and Y [i], but ignore zombies</comment>
        <if_stmt><if>if <condition>(<expr><name>I</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>I</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>float</name></type> <name>xi</name> <init>= <expr><call><name>GBX</name> <argument_list>(<argument><expr><name>X</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>X_iso</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>yi</name> <init>= <expr><call><name>GBX</name> <argument_list>(<argument><expr><name>Y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>Y_iso</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>fpclassify</name> <argument_list>(<argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <call><name>fpclassify</name> <argument_list>(<argument><expr><name>yi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>FP_ZERO</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// both are zero, which is OK</comment>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>FP_INFINITE</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// + or -infinity</comment>
                <if_stmt><if>if <condition>(<expr><name>xi</name> <operator>!=</operator> <name>yi</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>c</name> <operator>!=</operator> <name>FP_NAN</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// both are normal or subnormal, and nonzero</comment>
                <decl_stmt><decl><type><name>float</name></type> <name>err</name> <init>= <expr><call><name>fabsf</name> <argument_list>(<argument><expr><name>xi</name> <operator>-</operator> <name>yi</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>fabsf</name> <argument_list>(<argument><expr><name>xi</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>err</name> <operator>&gt;</operator> <name>eps</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
