<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_assign_alias_mask_scalar.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_assign_alias_mask_scalar: C&lt;C,struct&gt; = scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_assign_alias_mask_scalar (C, scalar)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                            \
<cpp:value>{                                           \
    GrB_Matrix_free_(&amp;C) ;                  \
    GrB_Matrix_free_(&amp;S) ;                  \
    GB_mx_put_global (true) ;               \
}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>S</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>GrB_Scalar</name></type> <name>scalar</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
<function_decl><type><name>GrB_Info</name></type> <name>assign_mask_scalar</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><name>GrB_Info</name></type> <name>assign_mask_scalar</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>stype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Scalar_type</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>stype</name></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// some descriptors use GrB_REPLACE, just to test this option.</comment>
    <comment type="line">// It has no effect on the result.</comment>

    <if_stmt><if>if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_BOOL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_BOOL_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_INT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_INT8_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_INT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_INT16_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_INT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_INT32_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_INT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_INT64_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_UINT8</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_UINT8_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_UINT16</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_UINT16_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_UINT32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK   // OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_UINT32_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_UINT64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_UINT64_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_FP32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>    <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_FP32_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_assign_FP64_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GxB_FC32</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC32_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>GxB_FC32_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_assign_FC32_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>stype</name> <operator>==</operator> <name>GxB_FC64</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>GxB_FC64_t</name></type> <name>y</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>GxB_FC64_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>scalar</name><operator>-&gt;</operator><name>x</name></name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>  <comment type="line">// OK</comment>
        <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Matrix_assign_FC64_</name>
            <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>GrB_ALL</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>GrB_DESC_RS</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"unknown type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><name>info</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>nargin</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get C (make a deep copy)</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro>       \
        <cpp:value>C = GB_mx_mxArray_to_Matrix (pargin [0], "C input", true, true) ;   \
        GxB_Matrix_Option_set (C, GxB_SPARSITY_CONTROL, C-&gt;sparsity_control) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro>      \
        <cpp:value>GrB_Matrix_free_(&amp;C) ;</cpp:value></cpp:define>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<comment type="line">//  GxB_Matrix_fprint (C, "C", GxB_COMPLETE, NULL) ;</comment>

    <comment type="line">// get scalar (shallow copy)</comment>
    <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"scalar input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>S</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>S</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>GB_MAGIC</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>GrB_Index</name></type> <name>snrows</name></decl>, <decl><type ref="prev"/><name>sncols</name></decl>, <decl><type ref="prev"/><name>snvals</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nrows</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>snrows</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_ncols</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>sncols</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>GrB_Matrix_nvals</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>snvals</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GxB_Format_Value</name></type> <name>fmt</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GxB_Matrix_Option_get_</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>GxB_FORMAT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>snrows</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>sncols</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>snvals</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>fmt</name> <operator>!=</operator> <name>GxB_BY_COL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"scalar failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>scalar</name> <operator>=</operator> <operator>(</operator><name>GrB_Scalar</name><operator>)</operator> <name>S</name></expr> ;</expr_stmt>
<comment type="line">//  GrB_Info info = GxB_Scalar_fprint (scalar, "scalar", GxB_COMPLETE, NULL) ;</comment>
<comment type="line">//  if (info != GrB_SUCCESS)</comment>
<comment type="line">//  {</comment>
<comment type="line">//      FREE_ALL ;</comment>
<comment type="line">//      mexErrMsgTxt ("scalar failed") ;</comment>
<comment type="line">//  }</comment>

    <comment type="line">// C&lt;C,struct&gt; = scalar</comment>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>assign_mask_scalar</name> <argument_list>( )</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//  GxB_Matrix_fprint (C, "C output", GxB_COMPLETE, NULL) ;</comment>

    <comment type="line">// return C as a struct and free the GraphBLAS C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
