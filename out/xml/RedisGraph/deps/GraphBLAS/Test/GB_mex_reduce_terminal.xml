<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_reduce_terminal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_reduce_terminal: [c,flag] = sum(A), reduce to scalar</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Compute c=max(A,x) where all entries in A are known a priori to be &lt;= x.</comment>
<comment type="line">// x becomes the terminal value of a user-defined max monoid.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"c = GB_mex_reduce_terminal (A, terminal)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                        \
<cpp:value>{                                       \
    GrB_Matrix_free_(&amp;A) ;              \
    GrB_BinaryOp_free_(&amp;Max) ;          \
    GrB_Monoid_free_(&amp;Max_Terminal) ;   \
    GB_mx_put_global (true) ;           \
}</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>maxdouble</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>

<function><type><name>void</name></type> <name>maxdouble</name> <parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// this is not safe with NaNs</comment>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>z</name><operator>)</operator> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name>y</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>*</operator><name>x</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>*</operator><name>y</name><operator>)</operator></expr></else></ternary></expr> ;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>Max</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type> <name>Max_Terminal</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Info</name></type> <name>info</name></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>;</cpp:value></cpp:define>

    <comment type="line">// get A (shallow copy)</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>GrB_FP64</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A must be double precision"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the terminal value, if present.  Default is 1.</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>GET_SCALAR</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>double</name></expr></argument>, <argument><expr><name>terminal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl> ;</decl_stmt>

    <comment type="line">// create the Max operator</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>Max</name></expr></argument>,
        <argument><expr><operator>(</operator><name>GxB_binary_function</name><operator>)</operator> <name>maxdouble</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Max failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create the Max monoid</comment>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GxB_Monoid_terminal_new_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>Max_Terminal</name></expr></argument>, <argument><expr><name>Max</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>,
        <argument><expr><name>terminal</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Max_Terminal failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reduce to a scalar</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>c</name></decl> ;</decl_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>GrB_Matrix_reduce_FP64_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>Max_Terminal</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>info</name> <operator>!=</operator> <name>GrB_SUCCESS</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error: %d\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"reduce failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// printf ("result %g\n", c) ;</comment>

    <comment type="line">// return C as a scalar</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateDoubleScalar</name> <argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
