<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_string_to_BinaryOp.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_string_to_BinaryOp.c: get a GraphBLAS operator from built-in strings</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<comment type="line">// opname_mx: a built-in string defining the operator name:</comment>
<comment type="line">// 10: first, second, pair, min, max, plus, minus, rminus, times, div, rdiv</comment>
<comment type="line">//  6: iseq, isne, isgt, islt, isge, isle,</comment>
<comment type="line">//  6: eq, ne, gt, lt, ge, le,</comment>
<comment type="line">//  3: or, and, xor</comment>
<comment type="line">//  ... and more</comment>

<comment type="line">// optype_mx: a built-in string defining one of 11 operator types:</comment>
<comment type="line">//  'logical', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64',</comment>
<comment type="line">//  'uint64', 'single', 'double', 'single complex', or 'double complex'</comment>

<comment type="line">// default_optype: default operator type if optype_mx is NULL or if</comment>
<comment type="line">// the type is not part of the string</comment>

<function><type><name>bool</name></type> <name>GB_mx_string_to_BinaryOp</name>       <comment type="line">// true if successful, false otherwise</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_BinaryOp</name> <modifier>*</modifier></type><name>op_handle</name></decl></parameter>,        <comment type="line">// the binary op</comment>
    <parameter><decl><type><specifier>const</specifier> <name>GrB_Type</name></type> <name>default_optype</name></decl></parameter>,  <comment type="line">// default operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>opname_mx</name></decl></parameter>,       <comment type="line">// built-in string with operator name</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>optype_mx</name></decl></parameter>,       <comment type="line">// built-in string with operator type</comment>
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>user_complex</name></decl></parameter>         <comment type="line">// if true, use user-defined Complex op</comment>
)</parameter_list>
<block>{<block_content>

    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>op</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the string</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>char</name></type> <name><name>opname</name> <index>[<expr><name>LEN</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>GB_mx_mxArray_to_string</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>, <argument><expr><name>opname_mx</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>op</name> <operator>=</operator> <name>NULL</name></expr> ;</expr_stmt>                 <comment type="line">// op is not present</comment>
        <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>cmplx_op</name> <init>= <expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"cmplx"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"complex"</literal></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// get the optype from the optype_mx string, if present</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>optype</name> <init>= <expr><call><name>GB_mx_string_to_Type</name> <argument_list>(<argument><expr><name>optype_mx</name></expr></argument>, <argument><expr><name>default_optype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>optype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized op type"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// convert the string to a GraphBLAS binary operator, built-in or Complex</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>user_complex</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>optype</name> <operator>==</operator> <name>Complex</name> <operator>||</operator> <name>cmplx_op</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// user-defined operators for the Complex type</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <comment type="line">// 12 binary operators z=f(x,y), all x,y,z are Complex</comment>
             <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_first</name></expr>  ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_second</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"pair"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_pair</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"oneb"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_pair</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_second</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_min</name></expr>    ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_max</name></expr>    ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"plus"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_plus</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"minus"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_minus</name></expr>  ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rminus"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_rminus</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"times"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_times</name></expr>  ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_div</name></expr>    ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rdiv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_rdiv</name></expr>   ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 6 ops z=f(x,y), where x,y are Complex, z = (1,0) or (0,0)</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"iseq"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_iseq</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isne"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_isne</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isgt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_isgt</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"islt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_islt</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isge"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_isge</name></expr>   ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isle"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_isle</name></expr>   ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 3 binary operators z=f(x,y), all x,y,x the same type</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_or</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_and</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_xor</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 6 ops z=f(x,y), where x,y are Complex type but z is boolean</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_eq</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_ne</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_gt</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_lt</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ge"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_ge</name></expr>     ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_le</name></expr>     ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// z is complex, x and y are real</comment>
        <if type="elseif">else if <condition>(<expr><name>cmplx_op</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>Complex_complex</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"Complex op unrecognized"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
    <else>else
    <block>{<block_content>

        <comment type="line">//----------------------------------------------------------------------</comment>
        <comment type="line">// built-in binary operator</comment>
        <comment type="line">//----------------------------------------------------------------------</comment>

        <decl_stmt><decl><type><name>GB_Opcode</name></type> <name>opcode</name></decl> ;</decl_stmt> 

        <comment type="line">// 12 binary operators z=f(x,y), all x,y,z of the same type</comment>
        <comment type="line">// (pair and oneb are identical)</comment>
             <if_stmt><if>if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"first"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FIRST_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"second"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SECOND_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"pair"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_PAIR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"oneb"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_PAIR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"any"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ANY_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"min"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_MIN_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"max"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_MAX_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"plus"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_PLUS_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"minus"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_MINUS_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rminus"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_RMINUS_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"times"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_TIMES_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"div"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_DIV_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"rdiv"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_RDIV_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 6 ops z=f(x,y), all x,y,z the same type</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"iseq"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISEQ_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isne"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISNE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isgt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISGT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"islt"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISLT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isge"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISGE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"isle"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ISLE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 3 binary operators z=f(x,y), all x,y,x the same type</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"or"</literal></expr></argument>      )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lor"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LOR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"and"</literal></expr></argument>     )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"land"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LAND_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"xor"</literal></expr></argument>     )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lxor"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LXOR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// 6 ops z=f(x,y), where x,y are the requested type but z is boolean</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"eq"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_EQ_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ne"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_NE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"gt"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_GT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"lt"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ge"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_GE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>      )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LE_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"atan2"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_ATAN2_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"hypot"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_HYPOT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"fmod"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FMOD_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>,<argument><expr><literal type="string">"remainder"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_REMAINDER_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"copysign"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_COPYSIGN_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"ldexp"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_LDEXP_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"pow"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_POW_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// positional ops</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"firsti"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"1sti"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FIRSTI_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"firsti1"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"1sti1"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FIRSTI1_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"firstj"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"1stj"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FIRSTJ_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"firstj1"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"1stj1"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_FIRSTJ1_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"secondi"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"2ndi"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SECONDI_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"secondi1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"2ndi1"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SECONDI1_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"secondj"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"2ndj"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SECONDJ_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"secondj1"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"2ndj1"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_SECONDJ1_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// z is complex, x and y are real</comment>
        <if type="elseif">else if <condition>(<expr><name>cmplx_op</name></expr>                  )</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_CMPLX_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <comment type="line">// bitwise operators</comment>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitor"</literal></expr></argument>   )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bor"</literal></expr></argument>     )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BOR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitand"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"band"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BAND_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitxor"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bxor"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BXOR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitxnor"</literal></expr></argument> )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bxnor"</literal></expr></argument>   )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BXNOR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitget"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bget"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BGET_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitset"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bset"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BSET_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitclr"</literal></expr></argument>  )</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bclr"</literal></expr></argument>    )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BCLR_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bitshift"</literal></expr></argument>)</argument_list></call> <operator>||</operator>
                 <call><name>MATCH</name> <argument_list>(<argument><expr><name>opname</name></expr></argument>, <argument><expr><literal type="string">"bshift"</literal></expr></argument>  )</argument_list></call></expr>)</condition> <block>{<block_content> <expr_stmt><expr><name>opcode</name> <operator>=</operator> <name>GB_BSHIFT_binop_code</name></expr> ;</expr_stmt> </block_content>}</block></if>

        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"unrecognized function name"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></else></if_stmt>

        <decl_stmt><decl><type><name>GB_Type_code</name></type> <name>xcode</name> <init>= <expr><name><name>optype</name><operator>-&gt;</operator><name>code</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>is64</name> <init>= <expr><operator>(</operator><name>xcode</name> <operator>==</operator> <name>GB_INT64_code</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>GB_OPCODE_IS_POSITIONAL</name> <argument_list>(<argument><expr><name>opcode</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator> <operator>(</operator><name>xcode</name> <operator>==</operator> <name>GB_INT64_code</name> <operator>||</operator> <name>xcode</name> <operator>==</operator> <name>GB_INT32_code</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name>opcode</name></expr>)</condition>
        <block>{<block_content>

            <case>case <expr><name>GB_FIRST_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_FIRST_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FIRST_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FIRST_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_SECOND_binop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_SECOND_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SECOND_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_SECOND_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ANY_binop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ANY_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PAIR_binop_code</name></expr>:</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// GrB_ONEB_T is the new name for GxB_PAIR_T</comment>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_ONEB_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONEB_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ONEB_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MIN_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MIN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <break>break ;</break>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MAX_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MAX_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_PLUS_binop_code</name></expr>  :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_PLUS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_PLUS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_PLUS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_MINUS_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_MINUS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINUS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_MINUS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RMINUS_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RMINUS_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_TIMES_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_TIMES_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TIMES_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_TIMES_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_DIV_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_DIV_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_DIV_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_DIV_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_RDIV_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_RDIV_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_POW_binop_code</name></expr> :</case>     <comment type="line">// z = pow (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_POW_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISEQ_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISEQ_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISNE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISNE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISGT_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISLT_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISGE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISGE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ISLE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ISLE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_EQ_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_EQ_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_EQ_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_NE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_NE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_NE_FC32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FC64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_NE_FC64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GT_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LT_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_GE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_GE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LE_binop_code</name></expr> :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_BOOL</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LE_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>


            <case>case <expr><name>GB_LOR_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LOR</name></expr>        ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LOR_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LAND_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LAND</name></expr>        ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LAND_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LXOR_binop_code</name></expr>   :</case>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_BOOL_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_LXOR</name></expr>        ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LXOR_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_ATAN2_binop_code</name></expr> :</case>       <comment type="line">// z = atan2 (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN2_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_ATAN2_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_HYPOT_binop_code</name></expr> :</case>       <comment type="line">// z = hypot (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_HYPOT_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_HYPOT_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_FMOD_binop_code</name></expr> :</case>        <comment type="line">// z = fmod (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FMOD_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_FMOD_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_REMAINDER_binop_code</name></expr> :</case>   <comment type="line">// z = remainder (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_REMAINDER_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_REMAINDER_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_COPYSIGN_binop_code</name></expr> :</case>    <comment type="line">// z = copysign (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COPYSIGN_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_COPYSIGN_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_LDEXP_binop_code</name></expr> :</case>       <comment type="line">// z = ldexp (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LDEXP_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_LDEXP_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_CMPLX_binop_code</name></expr> :</case>       <comment type="line">// z = cmplx (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_FP32_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CMPLX_FP32</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_FP64_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_CMPLX_FP64</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BOR_binop_code</name></expr> :</case>     <comment type="line">// z = (x | y), bitwise or</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BOR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BAND_binop_code</name></expr> :</case>    <comment type="line">// z = (x &amp; y), bitwise and</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BAND_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BXOR_binop_code</name></expr> :</case>    <comment type="line">// z = (x ^ y), bitwise xor</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXOR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BXNOR_binop_code</name></expr> :</case>   <comment type="line">// z = ~(x ^ y), bitwise xnor</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GrB_BXNOR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BGET_binop_code</name></expr> :</case>    <comment type="line">// z = bitget (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BGET_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BSET_binop_code</name></expr> :</case>    <comment type="line">// z = bitset (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSET_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BCLR_binop_code</name></expr> :</case>    <comment type="line">// z = bitclr (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BCLR_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_BSHIFT_binop_code</name></expr> :</case>  <comment type="line">// z = bitshift (x,y)</comment>

                <switch>switch <condition>(<expr><name>xcode</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>GB_INT8_code</name></expr>    :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_INT8</name></expr>   ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT16_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_INT16</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT32_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_INT32</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_INT64_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_INT64</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT8_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_UINT8</name></expr>  ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT16_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_UINT16</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT32_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_UINT32</name></expr> ;</expr_stmt> <break>break ;</break>
                    <case>case <expr><name>GB_UINT64_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <name>GxB_BSHIFT_UINT64</name></expr> ;</expr_stmt> <break>break ;</break>
                    <default>default              :</default> 
                        <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
                </block_content>}</block></switch>
                <break>break ;</break>

            <case>case <expr><name>GB_FIRSTI_binop_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_FIRSTI_INT64</name></expr>   </then><else>: <expr><name>GxB_FIRSTI_INT32</name></expr></else></ternary></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FIRSTI1_binop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_FIRSTI1_INT64</name></expr>  </then><else>: <expr><name>GxB_FIRSTI1_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FIRSTJ_binop_code</name></expr>   :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_FIRSTJ_INT64</name></expr>   </then><else>: <expr><name>GxB_FIRSTJ_INT32</name></expr></else></ternary></expr>   ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_FIRSTJ1_binop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_FIRSTJ1_INT64</name></expr>  </then><else>: <expr><name>GxB_FIRSTJ1_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_SECONDI_binop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_SECONDI_INT64</name></expr>  </then><else>: <expr><name>GxB_SECONDI_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_SECONDI1_binop_code</name></expr> :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_SECONDI1_INT64</name></expr> </then><else>: <expr><name>GxB_SECONDI1_INT32</name></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_SECONDJ_binop_code</name></expr>  :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_SECONDJ_INT64</name></expr>  </then><else>: <expr><name>GxB_SECONDJ_INT32</name></expr></else></ternary></expr>  ;</expr_stmt> <break>break ;</break>
            <case>case <expr><name>GB_SECONDJ1_binop_code</name></expr> :</case> <expr_stmt><expr><name>op</name> <operator>=</operator> <ternary><condition><expr><name>is64</name></expr> ?</condition><then> <expr><name>GxB_SECONDJ1_INT64</name></expr> </then><else>: <expr><name>GxB_SECONDJ1_INT32</name></expr></else></ternary></expr> ;</expr_stmt> <break>break ;</break>

            <default>default :</default> 
                <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>,<argument><expr><literal type="string">"unknown binary operator"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// return result</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <comment type="line">// return the binary operator to the caller</comment>
    <expr_stmt><expr><call><name>ASSERT_BINARYOP_OK_OR_NULL</name> <argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><literal type="string">"got binary op"</literal></expr></argument>, <argument><expr><name>GB0</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>op_handle</name><operator>)</operator> <operator>=</operator> <name>op</name></expr> ;</expr_stmt>
    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
