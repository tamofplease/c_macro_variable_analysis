<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_spones_mex.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_spones_mex: like spones(A) in MATLAB but do not drop zeros on input</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">// The MATLAB built-in function spones(A) has changed, as of MATLAB R2019b.</comment>
<comment type="line">// It now drops zeros on input.  Prior versions converted them to 1 on output.</comment>
<comment type="line">// The tests here use the old behavior, so this function replaces spones(A)</comment>
<comment type="line">// with GB_spones_mex (A), which has the old behavior of spones.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// check inputs</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <if_stmt><if>if <condition>(<expr><name>nargin</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"usage: C = GB_spones_mex (A), A must be sparse"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// get the input matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <decl_stmt><decl><type><name>mwSize</name></type> <name>m</name> <init>= <expr><call><name>mxGetM</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>mwSize</name></type> <name>n</name> <init>= <expr><call><name>mxGetN</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>mwIndex</name> <modifier>*</modifier></type><name>Ap</name> <init>= <expr><call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>mwIndex</name> <modifier>*</modifier></type><name>Ai</name> <init>= <expr><call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>mwSize</name></type> <name>nz</name> <init>= <expr><name><name>Ap</name> <index>[<expr><name>n</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>

    <comment type="line">//--------------------------------------------------------------------------</comment>
    <comment type="line">// create the output matrix</comment>
    <comment type="line">//--------------------------------------------------------------------------</comment>

    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mxCreateSparse</name> <argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nz</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>mxREAL</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>mwIndex</name> <modifier>*</modifier></type><name>Cp</name> <init>= <expr><call><name>mxGetJc</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>mwIndex</name> <modifier>*</modifier></type><name>Ci</name> <init>= <expr><call><name>mxGetIr</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>Cx</name> <init>= <expr><call><name>mxGetDoubles</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Cp</name></expr></argument>, <argument><expr><name>Ap</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mwIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>Ci</name></expr></argument>, <argument><expr><name>Ai</name></expr></argument>, <argument><expr><name>nz</name>    <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>mwIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>mwSize</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name>nz</name></expr> ;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>Cx</name> <index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

</unit>
