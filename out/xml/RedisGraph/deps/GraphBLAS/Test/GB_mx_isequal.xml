<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_isequal.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_isequal: check if two matrices are equal</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>GB_mx_isequal</name>     <comment type="line">// true if A and B are exactly the same</comment>
<parameter_list>(
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>A</name></decl></parameter>,
    <parameter><decl><type><name>GrB_Matrix</name></type> <name>B</name></decl></parameter>,
    <parameter><decl><type><name>double</name></type> <name>eps</name></decl></parameter>      <comment type="line">// if A and B are both FP32 or FP64, and if eps &gt; 0,</comment>
                    <comment type="line">// then the values are considered equal if their relative</comment>
                    <comment type="line">// difference is less than or equal to eps.</comment>
)</parameter_list>
<block>{<block_content>

    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>B</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>A_sparsity</name> <init>= <expr><call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>A_sparsity</name> <operator>!=</operator> <call><name>GB_sparsity</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>AP</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>Pending</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GB_Pending</name></type> <name>BP</name> <init>= <expr><name><name>B</name><operator>-&gt;</operator><name>Pending</name></name></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>magic</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name>  <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vlen</name></name>  <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>vlen</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>vdim</name></name>  <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>vdim</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name>  <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>nvec</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call>  <operator>!=</operator> <call><name>GB_nnz</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>B</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>is_csc</name></name>   <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>is_csc</name></name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>nzombies</name></name>         <operator>!=</operator> <name><name>B</name><operator>-&gt;</operator><name>nzombies</name></name></expr>         )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>AP</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name>BP</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name>      <operator>!=</operator> <name><name>BP</name><operator>-&gt;</operator><name>n</name></name></expr>     )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>sorted</name></name> <operator>!=</operator> <name><name>BP</name><operator>-&gt;</operator><name>sorted</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>op</name></name>     <operator>!=</operator> <name><name>BP</name><operator>-&gt;</operator><name>op</name></name></expr>    )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>type</name></name>   <operator>!=</operator> <name><name>BP</name><operator>-&gt;</operator><name>type</name></name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>size</name></name>   <operator>!=</operator> <name><name>BP</name><operator>-&gt;</operator><name>size</name></name></expr>  )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>nvec</name></name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nnz</name> <init>= <expr><call><name>GB_nnz</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>s</name> <init>= <expr><sizeof>sizeof <argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>asize</name> <init>= <expr><name><name>A</name><operator>-&gt;</operator><name>type</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name> <argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>&lt;=</operator> <name><name>A</name><operator>-&gt;</operator><name>vdim</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>A_is_dense</name> <init>= <expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>B_is_dense</name> <init>= <expr><call><name>GB_is_dense</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>GB_IS_FULL</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_is_dense</name> <operator>!=</operator> <name>B_is_dense</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_dense</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name>  <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>h</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>h</name></name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>A_sparsity</name> <operator>==</operator> <name>GxB_BITMAP</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>GB_nnz_max</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>GB_nnz_max</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>A_is_dense</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name>  <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>B</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>nnz</name> <operator>*</operator> <name>s</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GrB_FP32</name> <operator>&amp;&amp;</operator> <name>eps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_xsame32</name> <argument_list>(
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>A</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GrB_FP64</name> <operator>&amp;&amp;</operator> <name>eps</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_xsame64</name> <argument_list>(
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>eps</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_xsame</name> <argument_list>(
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>B</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>B</name><operator>-&gt;</operator><name>iso</name></name></expr></argument>,   <comment type="line">// OK</comment>
                <argument><expr><name><name>A</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><name>nnz</name></expr></argument>, <argument><expr><name>asize</name></expr></argument>, <argument><expr><name><name>A</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>AP</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>psize</name> <init>= <expr><name><name>AP</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>np</name> <init>= <expr><name><name>AP</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl> ;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>AP</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>BP</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><name>np</name><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>AP</name><operator>-&gt;</operator><name>j</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>BP</name><operator>-&gt;</operator><name>j</name></name></expr></argument>, <argument><expr><name>np</name><operator>*</operator><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>AP</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>!=</operator> <operator>(</operator><name><name>BP</name><operator>-&gt;</operator><name>x</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition> <comment type="line">// OK</comment>
        <block>{<block_content>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>AP</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>BP</name><operator>-&gt;</operator><name>x</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>     <comment type="line">// OK</comment>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_same</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>AP</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name><name>BP</name><operator>-&gt;</operator><name>x</name></name></expr></argument>, <argument><expr><name>np</name><operator>*</operator><name>psize</name></expr></argument>)</argument_list></call></expr>)</condition> <comment type="line">// OK</comment>
            <block>{<block_content>
                <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr> ;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
