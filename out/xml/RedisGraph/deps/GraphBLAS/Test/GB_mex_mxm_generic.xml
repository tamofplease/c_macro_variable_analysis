<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_mxm_generic.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_mxm_generic: C&lt;Mask&gt; = accum(C,A*B)</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_mxm_generic (C, Mask, accum, semiring, A, B, desc)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ALL</name></cpp:macro>                                    \
<cpp:value>{                                                   \
    GrB_Matrix_free_(&amp;A) ;                          \
    GrB_Matrix_free_(&amp;B) ;                          \
    GrB_Matrix_free_(&amp;C) ;                          \
    GrB_Matrix_free_(&amp;Mask) ;                       \
    GrB_Monoid_free_(&amp;myplus_monoid) ;              \
    GrB_BinaryOp_free_(&amp;myplus) ;                   \
    if (semiring != Complex_plus_times)             \
    {                                               \
        GrB_Semiring_free_(&amp;semiring) ;             \
    }                                               \
    GrB_Descriptor_free_(&amp;desc) ;                   \
    GB_mx_put_global (true) ;                       \
}</cpp:value></cpp:define>

<function_decl><type><name>void</name></type> <name>My_Plus_int64</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> <name>My_Plus_int32</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><type><name>void</name></type> <name>My_Plus_fp64</name>  <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list> ;</function_decl>

    <function><type><name>void</name></type> <name>My_Plus_int64</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>y</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator> <name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
    </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>MY_PLUS_INT64</name></cpp:macro>                                              \
<cpp:value>"   void My_Plus_int64 (void *z, const void *x, const void *y)  \n" \
"   {                                                           \n" \
"       int64_t a = (*((int64_t *) x)) ;                        \n" \
"       int64_t b = (*((int64_t *) y)) ;                        \n" \
"       int64_t c = a + b ;                                     \n" \
"       (*((int64_t *) z)) = c ;                                \n" \
"   }"</cpp:value></cpp:define>

    <function><type><name>void</name></type> <name>My_Plus_int32</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>a</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>y</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator> <name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
    </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>MY_PLUS_INT32</name></cpp:macro>                                              \
<cpp:value>"   void My_Plus_int32 (void *z, const void *x, const void *y)  \n" \
"   {                                                           \n" \
"       int32_t a = (*((int32_t *) x)) ;                        \n" \
"       int32_t b = (*((int32_t *) y)) ;                        \n" \
"       int32_t c = a + b ;                                     \n" \
"       (*((int32_t *) z)) = c ;                                \n" \
"   }"</cpp:value></cpp:define>

    <function><type><name>void</name></type> <name>My_Plus_fp64</name>  <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>y</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>x</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>y</name><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>c</name> <init>= <expr><name>a</name> <operator>+</operator> <name>b</name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator> <name>z</name><operator>)</operator><operator>)</operator> <operator>=</operator> <name>c</name></expr> ;</expr_stmt>
    </block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>MY_PLUS_FP64</name></cpp:macro>                                               \
<cpp:value>"   void My_Plus_fp64  (void *z, const void *x, const void *y)  \n" \
"   {                                                           \n" \
"       double a = (*((double *) x)) ;                          \n" \
"       double b = (*((double *) y)) ;                          \n" \
"       double c = a + b ;                                      \n" \
"       (*((double *) z)) = c ;                                 \n" \
"   }"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>A</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>B</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>C</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Matrix</name></type> <name>Mask</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Semiring</name></type> <name>semiring</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Descriptor</name></type> <name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>myplus</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Monoid</name></type>   <name>myplus_monoid</name> <init>= <expr><name>NULL</name></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">6</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">7</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get C (make a deep copy)</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_DEEP_COPY</name></cpp:macro> \
    <cpp:value>C = GB_mx_mxArray_to_Matrix (pargin [0], "C input", true, true) ;</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_DEEP_COPY</name></cpp:macro> <cpp:value>GrB_Matrix_free_(&amp;C) ;</cpp:value></cpp:define>
    <expr_stmt><expr><name>GET_DEEP_COPY</name></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get Mask (shallow copy)</comment>
    <expr_stmt><expr><name>Mask</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Mask"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>Mask</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mxIsEmpty</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Mask failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get A (shallow copy)</comment>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"A input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>A</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"A failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get B (shallow copy)</comment>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>GB_mx_mxArray_to_Matrix</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"B input"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>B</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"B failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>user_complex</name> <init>= <expr><operator>(</operator><name>Complex</name> <operator>!=</operator> <name>GxB_FC64</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>C</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>Complex</name><operator>)</operator></expr></init></decl> ;</decl_stmt>

    <comment type="line">// get semiring</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Semiring</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"semiring"</literal></expr></argument>,  
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"semiring failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>semiring</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>semiring</name><operator>-&gt;</operator><name>add</name></name> <operator>==</operator> <name>GrB_PLUS_MONOID_INT64</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// replace the semiring with a user-defined monoid</comment>
        <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//      GrB_BinaryOp_new (&amp;myplus, My_Plus_int64,</comment>
<comment type="line">//          GrB_INT64, GrB_INT64, GrB_INT64) ;</comment>
        <expr_stmt><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus</name></expr></argument>, <argument><expr><name>My_Plus_int64</name></expr></argument>,
            <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>, <argument><expr><name>GrB_INT64</name></expr></argument>,
            <argument><expr><literal type="string">"My_Plus_int64"</literal></expr></argument>, <argument><expr><name>MY_PLUS_INT64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// add a spurious terminal value</comment>
        <expr_stmt><expr><call><name>GxB_Monoid_terminal_new_INT64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus_monoid</name></expr></argument>, <argument><expr><name>myplus</name></expr></argument>,
            <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <operator>-</operator><literal type="number">111</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>myplus_monoid</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>semiring</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>semiring</name><operator>-&gt;</operator><name>add</name></name> <operator>==</operator> <name>GrB_PLUS_MONOID_INT32</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// replace the semiring with a user-defined monoid</comment>
        <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//      GrB_BinaryOp_new (&amp;myplus, My_Plus_int32,</comment>
<comment type="line">//          GrB_INT32, GrB_INT32, GrB_INT32) ;</comment>
        <expr_stmt><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus</name></expr></argument>, <argument><expr><name>My_Plus_int32</name></expr></argument>,
            <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>, <argument><expr><name>GrB_INT32</name></expr></argument>,
            <argument><expr><literal type="string">"My_Plus_int32"</literal></expr></argument>, <argument><expr><name>MY_PLUS_INT32</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="line">// add a spurious terminal value</comment>
        <expr_stmt><expr><call><name>GxB_Monoid_terminal_new_INT32</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus_monoid</name></expr></argument>, <argument><expr><name>myplus</name></expr></argument>,
            <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator> <operator>-</operator><literal type="number">111</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>myplus_monoid</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>semiring</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>semiring</name><operator>-&gt;</operator><name>add</name></name> <operator>==</operator> <name>GrB_PLUS_MONOID_FP64</name></expr>)</condition>
    <block>{<block_content> 
        <comment type="line">// replace the semiring with a user-defined monoid</comment>
        <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>mult</name> <init>= <expr><name><name>semiring</name><operator>-&gt;</operator><name>multiply</name></name></expr></init></decl> ;</decl_stmt>
        <expr_stmt><expr><call><name>GrB_Monoid_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>semiring</name><operator>-&gt;</operator><name>add</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_free_</name><argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<comment type="line">//      GrB_BinaryOp_new (&amp;myplus, My_Plus_fp64,</comment>
<comment type="line">//          GrB_FP64, GrB_FP64, GrB_FP64) ;</comment>
        <expr_stmt><expr><call><name>GxB_BinaryOp_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus</name></expr></argument>, <argument><expr><name>My_Plus_fp64</name></expr></argument>,
            <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>, <argument><expr><name>GrB_FP64</name></expr></argument>,
            <argument><expr><literal type="string">"My_Plus_fp64"</literal></expr></argument>, <argument><expr><name>MY_PLUS_FP64</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Monoid_new_FP64</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>myplus_monoid</name></expr></argument>, <argument><expr><name>myplus</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>GrB_Semiring_new</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>semiring</name></expr></argument>, <argument><expr><name>myplus_monoid</name></expr></argument>, <argument><expr><name>mult</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get accum, if present</comment>
    <decl_stmt><decl><type><name>GrB_BinaryOp</name></type> <name>accum</name></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_BinaryOp</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>accum</name></expr></argument>, <argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"accum"</literal></expr></argument>,
        <argument><expr><name><name>C</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>user_complex</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"accum failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get desc</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GB_mx_mxArray_to_Descriptor</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>desc</name></expr></argument>, <argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"desc"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"desc failed"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// C&lt;Mask&gt; = accum(C,A*B)</comment>
    <expr_stmt><expr><call><name>METHOD</name> <argument_list>(<argument><expr><call><name>GrB_mxm</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>Mask</name></expr></argument>, <argument><expr><name>accum</name></expr></argument>, <argument><expr><name>semiring</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">// return C as a struct and free the GraphBLAS C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_Matrix_to_mxArray</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><literal type="string">"C output from GrB_mxm"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><name>FREE_ALL</name></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
