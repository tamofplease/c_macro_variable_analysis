<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mx_mxArray_to_string.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mx_mxArray_to_string.c: get a built-in string</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>GB_mx_mxArray_to_string</name> <comment type="line">// returns length of string, or -1 if S not a string</comment>
<parameter_list>(
    <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>,           <comment type="line">// size maxlen</comment>
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>maxlen</name></decl></parameter>,    <comment type="line">// length of string</comment>
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name>S</name></decl></parameter>        <comment type="line">// built-in mxArray containing a string</comment>
)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name><name>string</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>S</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mxIsChar</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mexWarnMsgIdAndTxt</name> <argument_list>(<argument><expr><literal type="string">"GB:warn"</literal></expr></argument>, <argument><expr><literal type="string">"argument must be a string"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>mxGetNumberOfElements</name> <argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>mxGetString</name> <argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>string</name> <index>[<expr><name>maxlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr> ;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>len</name><operator>)</operator></expr> ;</return>
</block_content>}</block></function>

</unit>
