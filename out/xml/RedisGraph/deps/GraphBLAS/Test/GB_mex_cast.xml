<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/RedisGraph/deps/GraphBLAS/Test/GB_mex_cast.c"><comment type="line">//------------------------------------------------------------------------------</comment>
<comment type="line">// GB_mex_cast: cast a built-in array using C-style casting rules</comment>
<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// SuiteSparse:GraphBLAS, Timothy A. Davis, (c) 2017-2022, All Rights Reserved.</comment>
<comment type="line">// SPDX-License-Identifier: Apache-2.0</comment>

<comment type="line">//------------------------------------------------------------------------------</comment>

<comment type="line">// Usage: C = GB_mex_cast (X, type) casts the dense array X to given type using</comment>
<comment type="line">// C-style typecasting rules instead of built-in rules.</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"GB_mex.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE</name></cpp:macro> <cpp:value>"C = GB_mex_cast (X, type, cover)"</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mexFunction</name>
<parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>nargout</name></decl></parameter>,
    <parameter><decl><type><name>mxArray</name> <modifier>*</modifier></type><name><name>pargout</name> <index>[ ]</index></name></decl></parameter>,
    <parameter><decl><type><name>int</name></type> <name>nargin</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>mxArray</name> <modifier>*</modifier></type><name><name>pargin</name> <index>[ ]</index></name></decl></parameter>
)</parameter_list>
<block>{<block_content>

    <comment type="line">// do not get coverage counts unless the 3rd arg is present</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>do_cover</name> <init>= <expr><operator>(</operator><name>nargin</name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>malloc_debug</name> <init>= <expr><call><name>GB_mx_get_global</name> <argument_list>(<argument><expr><name>do_cover</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// check inputs</comment>
    <if_stmt><if>if <condition>(<expr><name>nargout</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>nargin</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>nargin</name></expr></argument> &gt;</argument_list></name> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"Usage: "</literal> <name>USAGE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>mxIsSparse</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be dense"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get X</comment>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>X</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>nrows</name></decl>, <decl><type ref="prev"/><name>ncols</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>xtype</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>GB_mx_mxArray_to_array</name> <argument_list>(<argument><expr><name><name>pargin</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nrows</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ncols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xtype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"X must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// get the type for C, default is same as X</comment>
    <decl_stmt><decl><type><name>GrB_Type</name></type> <name>ctype</name> <init>= <expr><call><name>GB_mx_string_to_Type</name> <argument_list>(<argument><expr><call><name>PARGIN</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>xtype</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C must be numeric"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create C</comment>
    <expr_stmt><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>GB_mx_create_full</name> <argument_list>(<argument><expr><name>nrows</name></expr></argument>, <argument><expr><name>ncols</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>Complex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ctype</name> <operator>=</operator> <name>GxB_FC64</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>xtype</name> <operator>==</operator> <name>Complex</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>xtype</name> <operator>=</operator> <name>GxB_FC64</name></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>GB_void</name> <modifier>*</modifier></type><name>C</name> <init>= <expr><call><name>mxGetData</name> <argument_list>(<argument><expr><name><name>pargout</name> <index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <comment type="line">// cast the data from X to C</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>cnz</name> <init>= <expr><name>nrows</name><operator>*</operator><name>ncols</name></expr></init></decl> ;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>C</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>cnz</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>mexErrMsgTxt</name> <argument_list>(<argument><expr><literal type="string">"C is NULL!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ctype</name> <operator>==</operator> <name>xtype</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name>cnz</name> <operator>*</operator> <name><name>xtype</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>GB_cast_array</name> <argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name><name>ctype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><name><name>xtype</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cnz</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>GB_mx_put_global</name> <argument_list>(<argument><expr><name>do_cover</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
</block_content>}</block></function>

</unit>
